{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Go wiki, a collection of information about the Go Programming Language . Awesome Go is another great resource for Go programmers, curated by the Go community. Questions about Go See Questions . Contributing This wiki is open to editing by any member of the Go community with a GitHub account. If you would like to add a new page, please first open an issue in the Go issue tracker with the prefix 'wiki' to propose the addition. Clearly state why the content does not fit into any of the existing pages. Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page. Table of Contents Getting started with Go Working with Go Learning more about Go The Go Community Using the go toolchain Additional Go Programming Wikis Online Services that work with Go Troubleshooting Go Programs in Production Contributing to the Go Project Platform Specific Information Release Specific Information Questions Getting started with Go The Go Tour is the best place to start. Effective Go will help you learn how to write idiomatic Go code. Go standard library documentation to familiarize yourself with the standard library. Use the Go Playground to test out Go programs in your browser. Still not convinced? Check out this list of Go Users and a few of their Success stories . We've also assembled a long list of reasons why you should give Go a try . Read about the companies which have switched from other languages to Go . Working with Go Ready to write some Go code of your own? Here are a few links to help you get started. Install and Setup your Environment Start here: Official Installation Documentation If you prefer to install from source, read this first . InstallFromSource - Additional tips on source installs. Windows user? Install and configure Go, Git, and Atom for Windows Mac user? How I start - Go - A step-by-step guide to installing Go and building your first web service. Having installation problems? InstallTroubleShooting Make sure you have your $GOPATH environment variable set correctly If you need additional tips on using $GOPATH, go here . MultipleGoRoots - More advanced information on working with multiple go installations and the $GOROOT variable. Go IDEs and Editors - Information on how to use your favorite editor with Go. Tools for working with Go code - Formatting, linting, vetting, refactoring, navigation, and visualization. Finding Go Libraries and Packages Start here: Go open source projects . Search for Go packages: godoc.org Visualization of the Go open-source package graph Modules - documentation on the dependency management system built into the Go command, added in 1.11. Managing your dependencies - An overview of the tools you can use to manage third-party packages (vendoring). Publishing Go Packages as Open Source Getting ready to publish your package? Start here. The Go Checklist - A comprehensive guide for publishing a project. How to layout your GitHub repo to make it easy for other Go programmers to use with the go get command. Go Package, Go - A few recommendations for making Go packages easy to use. Learning more about Go Once you have an overview of the language, here are resources you can use to learn more. Learning Go - A collection of resources for learning Go - beginner to advanced. Best Practices for a New Go Developer - Insights from Go community members. Server programming - Building web, mobile, and API servers. More on concurrency More on error handling More on testing More on mobile - Android and iOS Books - A list of Go books that have been published (ebook, paper) Blogs - Blogs about Go Podcasts - Podcasts and episodes featuring Go Videos, Talks, and Presentations GopherVids (currently unreachable) is a searchable index of videos about Go. GoTalks - A collection of talks from Go conferences and meetups. Livestreams - live interactive Go project streams with members of the community Screencasts Articles - A collection of articles to help you learn more about Go. Training - Free and commercial, online, and classroom training for Go. University Courses - A list of CS programs and classes using Go. Resources for non-English speakers The Go Community Here are some of the places where you can find Gophers online. To get a sense of what it means to be a member of the Go community, read Damian Gryski's keynote from the GolangUK 2015 conference or watch Andrew Gerrand's closing keynote from GopherCon 2015 . Where Gophers hangout online: The Go Forum - An all-purpose discussion forum for the Go community. Gophers Slack Channel - For real-time chat ( request membership ). Golang News - For curated links about Go Programming. There is also a /r/golang sub-reddit. On Twitter, follow the @golang account and keep tabs on the #golang hashtag. We've also got a landing page on Stack Overflow for Go Q&A. Matrix enthusiasts are invited to join #Go:matrix.org . Discord users are welcome at the Discord Gophers server. Hashnode users talk and write about Go in Hashnode Go community . Mailing Lists The mailing list for Go users is golang-nuts - very high traffic. Before you post, check to see if it's already been answered , then read these tips on how to ask a good question For discussions about the core Go open source project, join golang-dev . To get just our release announcements, join golang-announce User Groups & Meetups - There are Go Meetups in many cities GoBridge - Volunteers helping underrepresented communities to teach technical skills and to foster diversity in Go. Women Who Go See here for additional information GoUserGroups GoDiscourse - Go Discourse is an open-source Go-based forum from hello world . Conferences - A list of upcoming and past Go conferences and major events. Companies using Go - A comprehensive list of companies using Go throughout the world. Learn more about the Go Gopher images by Renee French. Using the Go Toolchain Start with the standard documentation for the go command available here Start here to learn about vendoring . See also PackageManagementTools for package management tools. Cross Compilation Shared libraries and Go (buildmode) Go Shared Libraries - Examples for creating and using shared libraries from Go and Python. Sharing Go Packages with C - by @ralch . Calling Go libraries from Python - by Filippo Valsorda Calling Go libraries from Ruby - by Peter Hellberg Calling Go libraries from Swift - by Jaana Burcu Dogan Build a Ruby Gem with a Go native extension - by @jondot gohttplib - An experiment in using Go 1.5 buildmode=c-shared. See the wikis below for additional details: GoGetTools GoGetProxyConfig cgo CompilerOptimizations GccgoCrossCompilation GcToolchainTricks GoGenerateTools Go Tooling Essentials - by Jaana Burcu Dogan Additional Go Programming Wikis Why Go doesn't Support Generics: A Summary of Go Generics Discussions - Start here before you join the debate. Concurrency Timeouts - Abandon async calls that take too long LockOSThread MutexOrChannel - When to use one vs the other RaceDetector - How to detect and fix race conditions Working with Databases database/sql - Online tutorial for working with the database/sql package. SQLDrivers SQLInterface From other languages Go for Java Programmers Go for C++ Programmers Strings GoStrings String Matching Comments CommonMistakes Errors GcToolchainTricks Hashing HttpFetch HttpStaticFiles InterfaceSlice Iota MethodSets PanicAndRecover Range RateLimiting Rationales SendingMail SignalHandling SimultaneousAssignment SliceTricks Switch TableDrivenTests Online Services that work with Go If you're looking for services that support Go, here's a list to get you started. Cloud Computing - Go is well supported by most cloud service providers. Amazon Web Services Azure DigitalOcean GE Predix Google Cloud Platform for Go Heroku IBM Bluemix OpenStack Vscale Aliyun Tencent See here for information on additional providers Continuous Integration and Continuous Deployment - Go is well supported by most CI/CD frameworks Monitoring/Logging OpsDash - Go-based cluster monitoring platform. Package and Dependency Management Gopkg.in is a source for stable Go libraries, provided by Gustavo Niemeyer. Troubleshooting Go Programs in Production Understand the performance of your Go apps using the pprof package Heap Dumps heapdump13 heapdump14 heapdump15 Contributing to the Go Project Start by reading the Go Contribution Guidelines If you'd like to propose a change to the Go project, start by reading the Go Change Proposal Process An archive of design documents is also available Go releases happen at ~6-month intervals. See here for more information Want to know more about how the Go source X-repositories are structured? The Go project requires that all code be reviewed before it is submitted. Read more about our code review practices If you're commenting on code under review, please read these guidelines Issues Bug reports and feature requests should be filed using the GitHub issue tracker Want to understand how we handle issues that are reported? Project Dashboards Go Builds Dashboard info Performance Dashboard info Download failed logs and debugging Platform Specific Information See MinimumRequirements for minimum platform requirements of current Go ports. Considering porting Go to a new platform? Read our porting policy first Mobile Ubuntu Windows WindowsBuild WindowsCrossCompiling WindowsDLLs GoArm ChromeOS Darwin DragonFly BSD FreeBSD Linux NativeClient NetBSD OpenBSD Plan 9 Solaris Release Specific Information Go1point1Gotchas OlderVersions Notes: Please refrain from changing the title of the wiki pages, as some of them might be linked to from golang.org or other websites.","title":"Home"},{"location":"#questions-about-go","text":"See Questions .","title":"Questions about Go"},{"location":"#contributing","text":"This wiki is open to editing by any member of the Go community with a GitHub account. If you would like to add a new page, please first open an issue in the Go issue tracker with the prefix 'wiki' to propose the addition. Clearly state why the content does not fit into any of the existing pages. Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page.","title":"Contributing"},{"location":"#table-of-contents","text":"Getting started with Go Working with Go Learning more about Go The Go Community Using the go toolchain Additional Go Programming Wikis Online Services that work with Go Troubleshooting Go Programs in Production Contributing to the Go Project Platform Specific Information Release Specific Information Questions","title":"Table of Contents"},{"location":"#getting-started-with-go","text":"The Go Tour is the best place to start. Effective Go will help you learn how to write idiomatic Go code. Go standard library documentation to familiarize yourself with the standard library. Use the Go Playground to test out Go programs in your browser. Still not convinced? Check out this list of Go Users and a few of their Success stories . We've also assembled a long list of reasons why you should give Go a try . Read about the companies which have switched from other languages to Go .","title":"Getting started with Go"},{"location":"#working-with-go","text":"Ready to write some Go code of your own? Here are a few links to help you get started. Install and Setup your Environment Start here: Official Installation Documentation If you prefer to install from source, read this first . InstallFromSource - Additional tips on source installs. Windows user? Install and configure Go, Git, and Atom for Windows Mac user? How I start - Go - A step-by-step guide to installing Go and building your first web service. Having installation problems? InstallTroubleShooting Make sure you have your $GOPATH environment variable set correctly If you need additional tips on using $GOPATH, go here . MultipleGoRoots - More advanced information on working with multiple go installations and the $GOROOT variable. Go IDEs and Editors - Information on how to use your favorite editor with Go. Tools for working with Go code - Formatting, linting, vetting, refactoring, navigation, and visualization. Finding Go Libraries and Packages Start here: Go open source projects . Search for Go packages: godoc.org Visualization of the Go open-source package graph Modules - documentation on the dependency management system built into the Go command, added in 1.11. Managing your dependencies - An overview of the tools you can use to manage third-party packages (vendoring). Publishing Go Packages as Open Source Getting ready to publish your package? Start here. The Go Checklist - A comprehensive guide for publishing a project. How to layout your GitHub repo to make it easy for other Go programmers to use with the go get command. Go Package, Go - A few recommendations for making Go packages easy to use.","title":"Working with Go"},{"location":"#learning-more-about-go","text":"Once you have an overview of the language, here are resources you can use to learn more. Learning Go - A collection of resources for learning Go - beginner to advanced. Best Practices for a New Go Developer - Insights from Go community members. Server programming - Building web, mobile, and API servers. More on concurrency More on error handling More on testing More on mobile - Android and iOS Books - A list of Go books that have been published (ebook, paper) Blogs - Blogs about Go Podcasts - Podcasts and episodes featuring Go Videos, Talks, and Presentations GopherVids (currently unreachable) is a searchable index of videos about Go. GoTalks - A collection of talks from Go conferences and meetups. Livestreams - live interactive Go project streams with members of the community Screencasts Articles - A collection of articles to help you learn more about Go. Training - Free and commercial, online, and classroom training for Go. University Courses - A list of CS programs and classes using Go. Resources for non-English speakers","title":"Learning more about Go"},{"location":"#the-go-community","text":"Here are some of the places where you can find Gophers online. To get a sense of what it means to be a member of the Go community, read Damian Gryski's keynote from the GolangUK 2015 conference or watch Andrew Gerrand's closing keynote from GopherCon 2015 . Where Gophers hangout online: The Go Forum - An all-purpose discussion forum for the Go community. Gophers Slack Channel - For real-time chat ( request membership ). Golang News - For curated links about Go Programming. There is also a /r/golang sub-reddit. On Twitter, follow the @golang account and keep tabs on the #golang hashtag. We've also got a landing page on Stack Overflow for Go Q&A. Matrix enthusiasts are invited to join #Go:matrix.org . Discord users are welcome at the Discord Gophers server. Hashnode users talk and write about Go in Hashnode Go community . Mailing Lists The mailing list for Go users is golang-nuts - very high traffic. Before you post, check to see if it's already been answered , then read these tips on how to ask a good question For discussions about the core Go open source project, join golang-dev . To get just our release announcements, join golang-announce User Groups & Meetups - There are Go Meetups in many cities GoBridge - Volunteers helping underrepresented communities to teach technical skills and to foster diversity in Go. Women Who Go See here for additional information GoUserGroups GoDiscourse - Go Discourse is an open-source Go-based forum from hello world . Conferences - A list of upcoming and past Go conferences and major events. Companies using Go - A comprehensive list of companies using Go throughout the world. Learn more about the Go Gopher images by Renee French.","title":"The Go Community"},{"location":"#using-the-go-toolchain","text":"Start with the standard documentation for the go command available here Start here to learn about vendoring . See also PackageManagementTools for package management tools. Cross Compilation Shared libraries and Go (buildmode) Go Shared Libraries - Examples for creating and using shared libraries from Go and Python. Sharing Go Packages with C - by @ralch . Calling Go libraries from Python - by Filippo Valsorda Calling Go libraries from Ruby - by Peter Hellberg Calling Go libraries from Swift - by Jaana Burcu Dogan Build a Ruby Gem with a Go native extension - by @jondot gohttplib - An experiment in using Go 1.5 buildmode=c-shared. See the wikis below for additional details: GoGetTools GoGetProxyConfig cgo CompilerOptimizations GccgoCrossCompilation GcToolchainTricks GoGenerateTools Go Tooling Essentials - by Jaana Burcu Dogan","title":"Using the Go Toolchain"},{"location":"#additional-go-programming-wikis","text":"Why Go doesn't Support Generics: A Summary of Go Generics Discussions - Start here before you join the debate. Concurrency Timeouts - Abandon async calls that take too long LockOSThread MutexOrChannel - When to use one vs the other RaceDetector - How to detect and fix race conditions Working with Databases database/sql - Online tutorial for working with the database/sql package. SQLDrivers SQLInterface From other languages Go for Java Programmers Go for C++ Programmers Strings GoStrings String Matching Comments CommonMistakes Errors GcToolchainTricks Hashing HttpFetch HttpStaticFiles InterfaceSlice Iota MethodSets PanicAndRecover Range RateLimiting Rationales SendingMail SignalHandling SimultaneousAssignment SliceTricks Switch TableDrivenTests","title":"Additional Go Programming Wikis"},{"location":"#online-services-that-work-with-go","text":"If you're looking for services that support Go, here's a list to get you started. Cloud Computing - Go is well supported by most cloud service providers. Amazon Web Services Azure DigitalOcean GE Predix Google Cloud Platform for Go Heroku IBM Bluemix OpenStack Vscale Aliyun Tencent See here for information on additional providers Continuous Integration and Continuous Deployment - Go is well supported by most CI/CD frameworks Monitoring/Logging OpsDash - Go-based cluster monitoring platform. Package and Dependency Management Gopkg.in is a source for stable Go libraries, provided by Gustavo Niemeyer.","title":"Online Services that work with Go"},{"location":"#troubleshooting-go-programs-in-production","text":"Understand the performance of your Go apps using the pprof package Heap Dumps heapdump13 heapdump14 heapdump15","title":"Troubleshooting Go Programs in Production"},{"location":"#contributing-to-the-go-project","text":"Start by reading the Go Contribution Guidelines If you'd like to propose a change to the Go project, start by reading the Go Change Proposal Process An archive of design documents is also available Go releases happen at ~6-month intervals. See here for more information Want to know more about how the Go source X-repositories are structured? The Go project requires that all code be reviewed before it is submitted. Read more about our code review practices If you're commenting on code under review, please read these guidelines Issues Bug reports and feature requests should be filed using the GitHub issue tracker Want to understand how we handle issues that are reported? Project Dashboards Go Builds Dashboard info Performance Dashboard info Download failed logs and debugging","title":"Contributing to the Go Project"},{"location":"#platform-specific-information","text":"See MinimumRequirements for minimum platform requirements of current Go ports. Considering porting Go to a new platform? Read our porting policy first Mobile Ubuntu Windows WindowsBuild WindowsCrossCompiling WindowsDLLs GoArm ChromeOS Darwin DragonFly BSD FreeBSD Linux NativeClient NetBSD OpenBSD Plan 9 Solaris","title":"Platform Specific Information"},{"location":"#release-specific-information","text":"Go1point1Gotchas OlderVersions Notes: Please refrain from changing the title of the wiki pages, as some of them might be linked to from golang.org or other websites.","title":"Release Specific Information"},{"location":"AVX512/","text":"Go 1.11 release introduces AVX-512 support. This page describes how to use new features as well as some important encoder details. Terminology Most terminology comes from Intel Software Developer's manual . Suffixes originate from Go assembler syntax, which is close to AT&T, which also uses size suffixes. Some terms are listed to avoid ambiguity (for example, opcode can have different meanings). Term Description Operand Same as \"instruction argument\". Opcode Name that refers to instruction group. For example, VADDPD is an opcode. It refers to both VEX and EVEX encoded forms and all operand combinations. Most Go assembler opcodes for AVX-512 match Intel manual entries, with exceptions for cases where additional size suffix is used (e.g. VCVTTPD2DQY is VCVTTPD2DQ ). Opcode suffix Suffix that overrides some opcode properties. Listed after \".\" (dot). For example, VADDPD.Z has \"Z\" opcode suffix. There can be multiple dot-separated opcode suffixes. Size suffix Suffix that specifies instruction operand size if it can't be inferred from operands alone. For example, VCVTSS2USIL has \"L\" size suffix. Opmask Used for both {k1} notation and to describe instructions that have K registers operands. Related to masking support in EVEX prefix. Register block Multi-source operand that encodes register range. Intel manual uses +n notation for register blocks. For example, +3 is a register block of 4 registers. FP Floating-point New registers EVEX-enabled instructions can access additional 16 X (128-bit xmm) and Y (256-bit ymm) registers, plus 32 new Z (512-bit zmm) registers in 64-bit mode. 32-bit mode only gets Z0-Z7 . New opmask registers are named K0-K7 . They can be used for both masking and for special opmask instructions (like KADDB ). Masking support Instructions that support masking can omit K register operand. In this case, K0 register is implied (\"all ones\") and merging-masking is performed. This is effectively \"no masking\". K1-K7 registers can be used to override default opmask. K register should be placed right before destination operand. Zeroing-masking can be activated with Z opcode suffix. For example, VADDPD.Z (AX), Z30, K3, Z10 uses zeroing-masking and explicit K register. - If Z opcode suffix is removed, it's merging-masking. - If K3 operand is removed, K0 operand is implied. It's compile-time error to use K0 register for {k1} operands (consult manuals for details). EVEX broadcast/rounding/SAE support Embedded broadcast, rounding and SAE activated through opcode suffixes. For reg-reg FP instructions with {er} enabled, rounding opcode suffix can be specified: RU_SAE to round towards +Inf RD_SAE to round towards -Inf RZ_SAE to round towards zero RN_SAE to round towards nearest To read more about rounding modes, see MXCSR.RC info . For reg-reg FP instructions with {sae} enabled, exception suppression can be specified with SAE opcode suffix. For reg-mem instrictons with m32bcst/m64bcst operand, broadcasting can be turned on with BCST opcode suffix. Zeroing opcode suffix can be combined with any of these. For example, VMAXPD.SAE.Z Z3, Z2, Z1 uses both Z and SAE opcode suffixes. It is important to put zeroing opcode suffix last, otherwise it is a compilation error. Register block (multi-source) operands Register blocks are specified using register range syntax. It would be enough to specify just first (low) register, but Go assembler requires explicit range with both ends for readability reasons. For example, instructions with +3 range can be used like VP4DPWSSD Z25, [Z0-Z3], (AX) . Range [Z0-Z3] reads like \"register block of Z0, Z1, Z2, Z3\". Invalid ranges result in compilation error. AVX1 and AVX2 instructions with EVEX prefix Previously existed opcodes that can be encoded using EVEX prefix now can access AVX-512 features like wider register file, zeroing/merging masking, etc. For example, VADDPD can now use 512-bit vector registers. See encoder details for more info. Supported extensions Best way to get up-to-date list of supported extensions is to do ls -1 inside test suite directory. Latest list includes: aes_avx512f avx512_4fmaps avx512_4vnniw avx512_bitalg avx512_ifma avx512_vbmi avx512_vbmi2 avx512_vnni avx512_vpopcntdq avx512bw avx512cd avx512dq avx512er avx512f avx512pf gfni_avx512f vpclmulqdq_avx512f 128-bit and 256-bit instructions additionally require avx512vl . That is, if VADDPD is available in avx512f , you can't use X and Y arguments without avx512vl . Filenames follow GNU as (gas) conventions. avx512extmap.csv can make naming scheme more apparent. Instructions with size suffix Some opcodes do not match Intel manual entries. This section is provided for search convenience. Intel opcode Go assembler opcodes VCVTPD2DQ VCVTPD2DQX , VCVTPD2DQY VCVTPD2PS VCVTPD2PSX , VCVTPD2PSY VCVTTPD2DQ VCVTTPD2DQX , VCVTTPD2DQY VCVTQQ2PS VCVTQQ2PSX , VCVTQQ2PSY VCVTUQQ2PS VCVTUQQ2PSX , VCVTUQQ2PSY VCVTPD2UDQ VCVTPD2UDQX , VCVTPD2UDQY VCVTTPD2UDQ VCVTTPD2UDQX , VCVTTPD2UDQY VFPCLASSPD VFPCLASSPDX , VFPCLASSPDY , VFPCLASSPDZ VFPCLASSPS VFPCLASSPSX , VFPCLASSPSY , VFPCLASSPSZ VCVTSD2SI VCVTSD2SI , VCVTSD2SIQ VCVTTSD2SI VCVTSD2SI , VCVTSD2SIQ VCVTTSS2SI VCVTSD2SI , VCVTSD2SIQ VCVTSS2SI VCVTSD2SI , VCVTSD2SIQ VCVTSD2USI VCVTSD2USIL , VCVTSD2USIQ VCVTSS2USI VCVTSS2USIL , VCVTSS2USIQ VCVTTSD2USI VCVTTSD2USIL , VCVTTSD2USIQ VCVTTSS2USI VCVTTSS2USIL , VCVTTSS2USIQ VCVTUSI2SD VCVTUSI2SDL , VCVTUSI2SDQ VCVTUSI2SS VCVTUSI2SSL , VCVTUSI2SSQ VCVTSI2SD VCVTSI2SDL , VCVTSI2SDQ VCVTSI2SS VCVTSI2SSL , VCVTSI2SSQ ANDN ANDNL , ANDNQ BEXTR BEXTRL , BEXTRQ BLSI BLSIL , BLSIQ BLSMSK BLSMSKL , BLSMSKQ BLSR BLSRL , BLSRQ BZHI BZHIL , BZHIQ MULX MULXL , MULXQ PDEP PDEPL , PDEPQ PEXT PEXTL , PEXTQ RORX RORXL , RORXQ SARX SARXL , SARXQ SHLX SHLXL , SHLXQ SHRX SHRXL , SHRXQ Encoder details Bitwise comparison with older encoder may fail for VEX-encoded instructions due to slightly different encoder tables order. This difference may arise for instructions with both {reg, reg/mem} and {reg/mem, reg} forms for reg-reg case. One of such instructions is VMOVUPS . This does not affect code behavior, nor makes it bigger/less efficient. New encoding selection scheme is borrowed from Intel XED . EVEX encoding is used when any of the following is true: Instruction uses new registers (High 16 X / Y , Z or K registers) Instruction uses EVEX-related opcode suffixes like BCST Instruction uses operands combination that is only available for AVX-512 In all other cases VEX encoding is used. This means that VEX is used whenever possible, and EVEX whenever required. Compressed disp8 is applied whenever possible for EVEX-encoded instructions. This also covers broadcasting disp8 which sometimes has different N multiplier. Experienced readers can inspect avx_optabs.go to learn about N multipliers for any instruction. For example, VADDPD has these: * N=64 for 512-bit form; N=8 when broadcasting * N=32 for 256-bit form; N=8 when broadcasting * N=16 for 128-bit form; N=8 when broadcasting Examples Exhaustive amount of examples can be found in Go assembler test suite . Each file provides several examples for every supported instruction form in particular AVX-512 extension. Every example also includes generated machine code. Here is adopted \"Vectorized Histogram Update Using AVX-512CD\" from Intel\u00ae Optimization Manual : for i := 0 ; i < 512 ; i ++ { histo [ key [ i ]] += 1 } top: VMOVUPS 0x40 ( SP )( DX * 4 ), Z4 //; vmovups zmm4, [rsp+rdx*4+0x40] VPXORD Z1 , Z1 , Z1 //; vpxord zmm1, zmm1, zmm1 KMOVW K1 , K2 //; kmovw k2, k1 VPCONFLICTD Z4 , Z2 //; vpconflictd zmm2, zmm4 VPGATHERDD ( AX )( Z4 * 4 ), K2 , Z1 //; vpgatherdd zmm1{k2}, [rax+zmm4*4] VPTESTMD histo <> ( SB ), Z2 , K0 //; vptestmd k0, zmm2, [rip+0x185c] KMOVW K0 , CX //; kmovw ecx, k0 VPADDD Z0 , Z1 , Z3 //; vpaddd zmm3, zmm1, zmm0 TESTL CX , CX //; test ecx, ecx JZ noConflicts //; jz noConflicts VMOVUPS histo <> ( SB ), Z1 //; vmovups zmm1, [rip+0x1884] VPTESTMD histo <> ( SB ), Z2 , K0 //; vptestmd k0, zmm2, [rip+0x18ba] VPLZCNTD Z2 , Z5 //; vplzcntd zmm5, zmm2 XORB BX , BX //; xor bl, bl KMOVW K0 , CX //; kmovw ecx, k0 VPSUBD Z5 , Z1 , Z1 //; vpsubd zmm1, zmm1, zmm5 VPSUBD Z5 , Z1 , Z1 //; vpsubd zmm1, zmm1, zmm5 resolveConflicts: VPBROADCASTD CX , Z5 //; vpbroadcastd zmm5, ecx KMOVW CX , K2 //; kmovw k2, ecx VPERMD Z3 , Z1 , K2 , Z3 //; vpermd zmm3{k2}, zmm1, zmm3 VPADDD Z0 , Z3 , K2 , Z3 //; vpaddd zmm3{k2}, zmm3, zmm0 VPTESTMD Z2 , Z5 , K2 , K0 //; vptestmd k0{k2}, zmm5, zmm2 KMOVW K0 , SI //; kmovw esi, k0 ANDL SI , CX //; and ecx, esi JZ noConflicts //; jz noConflicts ADDB $1 , BX //; add bl, 0x1 CMPB BX , $16 //; cmp bl, 0x10 JB resolveConflicts //; jb resolveConflicts noConflicts: KMOVW K1 , K2 //; kmovw k2, k1 VPSCATTERDD Z3 , K2 , ( AX )( Z4 * 4 ) //; vpscatterdd [rax+zmm4*4]{k2}, zmm3 ADDL $16 , DX //; add edx, 0x10 CMPL DX , $1024 //; cmp edx, 0x400 JB top //; jb top","title":"AVX512"},{"location":"AVX512/#terminology","text":"Most terminology comes from Intel Software Developer's manual . Suffixes originate from Go assembler syntax, which is close to AT&T, which also uses size suffixes. Some terms are listed to avoid ambiguity (for example, opcode can have different meanings). Term Description Operand Same as \"instruction argument\". Opcode Name that refers to instruction group. For example, VADDPD is an opcode. It refers to both VEX and EVEX encoded forms and all operand combinations. Most Go assembler opcodes for AVX-512 match Intel manual entries, with exceptions for cases where additional size suffix is used (e.g. VCVTTPD2DQY is VCVTTPD2DQ ). Opcode suffix Suffix that overrides some opcode properties. Listed after \".\" (dot). For example, VADDPD.Z has \"Z\" opcode suffix. There can be multiple dot-separated opcode suffixes. Size suffix Suffix that specifies instruction operand size if it can't be inferred from operands alone. For example, VCVTSS2USIL has \"L\" size suffix. Opmask Used for both {k1} notation and to describe instructions that have K registers operands. Related to masking support in EVEX prefix. Register block Multi-source operand that encodes register range. Intel manual uses +n notation for register blocks. For example, +3 is a register block of 4 registers. FP Floating-point","title":"Terminology"},{"location":"AVX512/#new-registers","text":"EVEX-enabled instructions can access additional 16 X (128-bit xmm) and Y (256-bit ymm) registers, plus 32 new Z (512-bit zmm) registers in 64-bit mode. 32-bit mode only gets Z0-Z7 . New opmask registers are named K0-K7 . They can be used for both masking and for special opmask instructions (like KADDB ).","title":"New registers"},{"location":"AVX512/#masking-support","text":"Instructions that support masking can omit K register operand. In this case, K0 register is implied (\"all ones\") and merging-masking is performed. This is effectively \"no masking\". K1-K7 registers can be used to override default opmask. K register should be placed right before destination operand. Zeroing-masking can be activated with Z opcode suffix. For example, VADDPD.Z (AX), Z30, K3, Z10 uses zeroing-masking and explicit K register. - If Z opcode suffix is removed, it's merging-masking. - If K3 operand is removed, K0 operand is implied. It's compile-time error to use K0 register for {k1} operands (consult manuals for details).","title":"Masking support"},{"location":"AVX512/#evex-broadcastroundingsae-support","text":"Embedded broadcast, rounding and SAE activated through opcode suffixes. For reg-reg FP instructions with {er} enabled, rounding opcode suffix can be specified: RU_SAE to round towards +Inf RD_SAE to round towards -Inf RZ_SAE to round towards zero RN_SAE to round towards nearest To read more about rounding modes, see MXCSR.RC info . For reg-reg FP instructions with {sae} enabled, exception suppression can be specified with SAE opcode suffix. For reg-mem instrictons with m32bcst/m64bcst operand, broadcasting can be turned on with BCST opcode suffix. Zeroing opcode suffix can be combined with any of these. For example, VMAXPD.SAE.Z Z3, Z2, Z1 uses both Z and SAE opcode suffixes. It is important to put zeroing opcode suffix last, otherwise it is a compilation error.","title":"EVEX broadcast/rounding/SAE support"},{"location":"AVX512/#register-block-multi-source-operands","text":"Register blocks are specified using register range syntax. It would be enough to specify just first (low) register, but Go assembler requires explicit range with both ends for readability reasons. For example, instructions with +3 range can be used like VP4DPWSSD Z25, [Z0-Z3], (AX) . Range [Z0-Z3] reads like \"register block of Z0, Z1, Z2, Z3\". Invalid ranges result in compilation error.","title":"Register block (multi-source) operands"},{"location":"AVX512/#avx1-and-avx2-instructions-with-evex-prefix","text":"Previously existed opcodes that can be encoded using EVEX prefix now can access AVX-512 features like wider register file, zeroing/merging masking, etc. For example, VADDPD can now use 512-bit vector registers. See encoder details for more info.","title":"AVX1 and AVX2 instructions with EVEX prefix"},{"location":"AVX512/#supported-extensions","text":"Best way to get up-to-date list of supported extensions is to do ls -1 inside test suite directory. Latest list includes: aes_avx512f avx512_4fmaps avx512_4vnniw avx512_bitalg avx512_ifma avx512_vbmi avx512_vbmi2 avx512_vnni avx512_vpopcntdq avx512bw avx512cd avx512dq avx512er avx512f avx512pf gfni_avx512f vpclmulqdq_avx512f 128-bit and 256-bit instructions additionally require avx512vl . That is, if VADDPD is available in avx512f , you can't use X and Y arguments without avx512vl . Filenames follow GNU as (gas) conventions. avx512extmap.csv can make naming scheme more apparent.","title":"Supported extensions"},{"location":"AVX512/#instructions-with-size-suffix","text":"Some opcodes do not match Intel manual entries. This section is provided for search convenience. Intel opcode Go assembler opcodes VCVTPD2DQ VCVTPD2DQX , VCVTPD2DQY VCVTPD2PS VCVTPD2PSX , VCVTPD2PSY VCVTTPD2DQ VCVTTPD2DQX , VCVTTPD2DQY VCVTQQ2PS VCVTQQ2PSX , VCVTQQ2PSY VCVTUQQ2PS VCVTUQQ2PSX , VCVTUQQ2PSY VCVTPD2UDQ VCVTPD2UDQX , VCVTPD2UDQY VCVTTPD2UDQ VCVTTPD2UDQX , VCVTTPD2UDQY VFPCLASSPD VFPCLASSPDX , VFPCLASSPDY , VFPCLASSPDZ VFPCLASSPS VFPCLASSPSX , VFPCLASSPSY , VFPCLASSPSZ VCVTSD2SI VCVTSD2SI , VCVTSD2SIQ VCVTTSD2SI VCVTSD2SI , VCVTSD2SIQ VCVTTSS2SI VCVTSD2SI , VCVTSD2SIQ VCVTSS2SI VCVTSD2SI , VCVTSD2SIQ VCVTSD2USI VCVTSD2USIL , VCVTSD2USIQ VCVTSS2USI VCVTSS2USIL , VCVTSS2USIQ VCVTTSD2USI VCVTTSD2USIL , VCVTTSD2USIQ VCVTTSS2USI VCVTTSS2USIL , VCVTTSS2USIQ VCVTUSI2SD VCVTUSI2SDL , VCVTUSI2SDQ VCVTUSI2SS VCVTUSI2SSL , VCVTUSI2SSQ VCVTSI2SD VCVTSI2SDL , VCVTSI2SDQ VCVTSI2SS VCVTSI2SSL , VCVTSI2SSQ ANDN ANDNL , ANDNQ BEXTR BEXTRL , BEXTRQ BLSI BLSIL , BLSIQ BLSMSK BLSMSKL , BLSMSKQ BLSR BLSRL , BLSRQ BZHI BZHIL , BZHIQ MULX MULXL , MULXQ PDEP PDEPL , PDEPQ PEXT PEXTL , PEXTQ RORX RORXL , RORXQ SARX SARXL , SARXQ SHLX SHLXL , SHLXQ SHRX SHRXL , SHRXQ","title":"Instructions with size suffix"},{"location":"AVX512/#encoder-details","text":"Bitwise comparison with older encoder may fail for VEX-encoded instructions due to slightly different encoder tables order. This difference may arise for instructions with both {reg, reg/mem} and {reg/mem, reg} forms for reg-reg case. One of such instructions is VMOVUPS . This does not affect code behavior, nor makes it bigger/less efficient. New encoding selection scheme is borrowed from Intel XED . EVEX encoding is used when any of the following is true: Instruction uses new registers (High 16 X / Y , Z or K registers) Instruction uses EVEX-related opcode suffixes like BCST Instruction uses operands combination that is only available for AVX-512 In all other cases VEX encoding is used. This means that VEX is used whenever possible, and EVEX whenever required. Compressed disp8 is applied whenever possible for EVEX-encoded instructions. This also covers broadcasting disp8 which sometimes has different N multiplier. Experienced readers can inspect avx_optabs.go to learn about N multipliers for any instruction. For example, VADDPD has these: * N=64 for 512-bit form; N=8 when broadcasting * N=32 for 256-bit form; N=8 when broadcasting * N=16 for 128-bit form; N=8 when broadcasting","title":"Encoder details"},{"location":"AVX512/#examples","text":"Exhaustive amount of examples can be found in Go assembler test suite . Each file provides several examples for every supported instruction form in particular AVX-512 extension. Every example also includes generated machine code. Here is adopted \"Vectorized Histogram Update Using AVX-512CD\" from Intel\u00ae Optimization Manual : for i := 0 ; i < 512 ; i ++ { histo [ key [ i ]] += 1 } top: VMOVUPS 0x40 ( SP )( DX * 4 ), Z4 //; vmovups zmm4, [rsp+rdx*4+0x40] VPXORD Z1 , Z1 , Z1 //; vpxord zmm1, zmm1, zmm1 KMOVW K1 , K2 //; kmovw k2, k1 VPCONFLICTD Z4 , Z2 //; vpconflictd zmm2, zmm4 VPGATHERDD ( AX )( Z4 * 4 ), K2 , Z1 //; vpgatherdd zmm1{k2}, [rax+zmm4*4] VPTESTMD histo <> ( SB ), Z2 , K0 //; vptestmd k0, zmm2, [rip+0x185c] KMOVW K0 , CX //; kmovw ecx, k0 VPADDD Z0 , Z1 , Z3 //; vpaddd zmm3, zmm1, zmm0 TESTL CX , CX //; test ecx, ecx JZ noConflicts //; jz noConflicts VMOVUPS histo <> ( SB ), Z1 //; vmovups zmm1, [rip+0x1884] VPTESTMD histo <> ( SB ), Z2 , K0 //; vptestmd k0, zmm2, [rip+0x18ba] VPLZCNTD Z2 , Z5 //; vplzcntd zmm5, zmm2 XORB BX , BX //; xor bl, bl KMOVW K0 , CX //; kmovw ecx, k0 VPSUBD Z5 , Z1 , Z1 //; vpsubd zmm1, zmm1, zmm5 VPSUBD Z5 , Z1 , Z1 //; vpsubd zmm1, zmm1, zmm5 resolveConflicts: VPBROADCASTD CX , Z5 //; vpbroadcastd zmm5, ecx KMOVW CX , K2 //; kmovw k2, ecx VPERMD Z3 , Z1 , K2 , Z3 //; vpermd zmm3{k2}, zmm1, zmm3 VPADDD Z0 , Z3 , K2 , Z3 //; vpaddd zmm3{k2}, zmm3, zmm0 VPTESTMD Z2 , Z5 , K2 , K0 //; vptestmd k0{k2}, zmm5, zmm2 KMOVW K0 , SI //; kmovw esi, k0 ANDL SI , CX //; and ecx, esi JZ noConflicts //; jz noConflicts ADDB $1 , BX //; add bl, 0x1 CMPB BX , $16 //; cmp bl, 0x10 JB resolveConflicts //; jb resolveConflicts noConflicts: KMOVW K1 , K2 //; kmovw k2, k1 VPSCATTERDD Z3 , K2 , ( AX )( Z4 * 4 ) //; vpscatterdd [rax+zmm4*4]{k2}, zmm3 ADDL $16 , DX //; add edx, 0x10 CMPL DX , $1024 //; cmp edx, 0x400 JB top //; jb top","title":"Examples"},{"location":"Articles/","text":"Please keep all entries in reverse chronological order (most recent first) Table of Contents Indexes General Concurrency / Channels Containers & Docker Cross Platform Development Error Handling Interfaces / OOP Mobile Applications Modules Performance and Profiling Pointers/References/Memory Reflection Security Testing Web & API Development Misc Chinese Czech German Japanese Korean Article Indexes Collection of #golang posts on Medium latest Go articles from Dr. Dobbs latest Slideshare Collection of #golang presentations latest Short Go tutorials on SocketLoop latest An Introduction to Go latest General Darker Corners of Go 2021-03-13 Working with Golang Maps 2020-09-25 Practical Go: Real world advice for writing maintainable Go programs 2019-05-01 Here are some amazing advantages of Go that you don\u2019t hear much about 2018-02-01 Go Defer Simplified with Practical Visuals 2017-11-23 The Zoo of Go Funcs 2017-11-09 Ultimate Guide to Go Variadic Functions 2017-11-02 Go Funcs-Baby Gopher's Visual Guide 2017-10-27 Ultimate Visual Guide to Go Enums 2017-10-19 Learn Go Constants 2017-10-10 Learn Go Variables 2017-10-04 Introduction to Go Packages 2017-09-26 About Go Language\u200a\u2014\u200aAn Overview 2017-09-20 Debugging code generation in Go 2016-10-15 Go tooling essentials 2016-09-25 Go from PHP engineer's perspective 2016-02-25 Go Proverbs, Illustrated 2015-12-04 A whirlwind tour of Go\u2019s runtime environment variables 2015-11-29 Idiomatic Doc Comments: Document your function, not your function signature 2015-10_14 Best Practices for a new Go Developer 2015-09-01 Golang Refactoring Tools 2015-08-30 Working with Files in Go 2015-08-23 Defer Fun 2015-07-25 Things I learned teaching Go - Francesc Campoy 2014-11-24 Understanding Go Packages 2014-11-01 Structuring Applications in Go 2014-06-06 Functional Options for Friendly APIs 2014-10-17 Go Programming for Beginners 2014-10-01 Switching from Python to Go 2014-04-21 Google Go: The Good, the Bad, and the Meh 2013-02-10 What I Love About Go 2013-01-25 Why I program in Go 2013-01-05 Go: A New Language for a New Year 2012-01-06 Why you PHP guys should learn Golang 2012-08-10 Why I went from Python to Go (and not node.js) 2012-09-14 Concurrency / Channels Learning Go concurrency through illustrations 2018-06-21 Using contexts to avoid leaking goroutines 2016-10-25 Concurrency in Go 2015-12-06 Very basic concurrency for beginners in Go 2015-11-18 Exploting Powerful Cloud Services with Go 2015-10-11 3 Trivial Concurrency Exercises for the Confused Newbie Gopher 2015-10-05 Golang lock-free values with atomic.Value 2015-08-21 Golang Pearl: Thread-safe writes and double checked locking in Go 2015-07-21 Building a Telnet Server in Go 2015-08-28 Fundamentals of concurrent programming 2013-01-27 Golang: Funny Play with Channel 2012-05-25 Unlimited Buffering with Low Overhead 2010-02-10 Concurrent Idioms #1: Broadcasting values in Go with linked channels 2009-12-01 Containers & Docker Deploying a Go app to a minimal Docker container 2015-10-01 Fetching a remote configuration using Docker and Consul 2015-09-30 Joining the Docker Ship and Go 2015-07-01 Building Minimal Docker Images for Go 2015-04-23 Cross-Platform Development Releasing cross-platform Go binaries using Goxc and BinTray in 5 minutes 2015-11-29 Calling Go from Swift 2015-10-3 On Go, portability, and system interfaces 2015-09-22 Go cross compilation 2015-09-8 Error Handling Returning Errors 2015-10-10 Inspecting Errors 2014-12-24 Interfaces / OOP Generics in Golang with Code Generation 2015-10-18 Composition with Go 2015-09-13 Sorting Inventory Items in Go - the sort.Interface 2015-09-06 Loose Coupling in Go Lang 2015-02-06 Interface Types in Go 2014-10-18 How to use interfaces in Go 2012-10-01 Go Object Oriented Design 2013-01-14 It is ridiculously easy to refactor Go 2013-01-27 Functional Iteration in Go 2013-12-13 Interfaces in Go - Russ Cox 2009-12-01 Mobile Applications Start by reading the overview of mobile development documentation first. Go Mobile: Next generation of mobile apps 2015-09-18 iOS Apps with Go - Video by Josh Deprez 2015-09-17 5 Part Series - Mobile Go 2015-01-08 Modules Introduction to Go Modules 2018-08-18 Performance and Profiling Mutex profile 2016-12-19 How to Optimize Garbage Collection in Go 2015-11-23 Golang Escape Analysis 2015-10-18 A Pattern for Optimizing Go 2015-09-24 Golang Performance Tips 2015-09-20 Answering your own (performance) questions in Go 2015-09-15 Concise Guide to profiling go programs 2014-08-09 Go Performance Observations 2014-08-07 Debugging performance issues in Go programs - Intel 2014-05-10 How to write benchmarks in Go 2013-06-30 Profiling Go Programs - Go blog 2011-06-24 Pointers, References and Memory Management Equality and Type Aliases 2015-09-02 Pointers vs References 2014-06-01 Recycling Memory Buffers in Go 2013-08-24 Learning Go Types 2012-01-27 Reflection Go Reflection Index by Jimmy Frasche 2014-01-26 Security Mutual TLS authentication in Go 2015-11-21 Whispered Secrets - The case for building software with privacy as a primary concern 2015-09-19 Testing Getting Started with BDD in Go Using Ginkgo 2016-07-12 Integration testing in Go using Docker 2015-12-07 Debugging Go Programs with Delve 2015-12-03 Upgrade Your Appengine Tests with Testify 2015_11_21 Web & API Development Start by reading the overview of server programming documentation first. * Get started with Go and WebAssembly 2018-08-14 * HTTP/2 Server Push 2016-12-10 * Preventing Cross-Site Request Forgery in Go 2015-12-14 * goa: Untangling Microservices 2015-12-07 * A Weekend with Go, Beego and React 2015-11-03 * HTTP Session Handling on Heroku 2015-09-09 * Go Resiliency Patterns 2015-09-01 * http.Handler and Error Handling in Go 2015-07-02 * Deploy a golang photo archive tool to the cloud on IBM BlueMix 2015-06-05 * A Journey into Microservices - Part 1 , Part 2 , Part 3 2015-03_09 * Making a RESTful JSON API in Go 2015-01-01 * Building a Web Server in Go 2014-09-01 Misc Environment variables in Golang 2020-09-28 Using MongoDB as Datasource in GoLang 2020-09-21 Go-powered Open Source IoT Integration Framework \"Flogo\" 2016-11-07 Build Slack Slash Commands with Go 2015-09-15 String Matching by Damian Gryski 2014-12-05 State machines in Go (#golang) 2013-02-10 Go & Assembly 2013-02-05 Function Types in Go (golang) 2013-02-05 Optimizing Real World Go 2013-01-05 Methods as Objects in Go 2012-12-26 Applying The Clean Architecture to Go applications 2012-09-08 An introduction to cross compilation with Go 2012-09-08 Function Call by Name in Golang 2012-07-05 Using the Go Regexp Package 2012-07-05 Zero Downtime upgrades of TCP servers in Go 2012-05-29 Go Reflection Codex Go JSON Marshalling and Unmarshalling cheatsheet 2015-09-30 Chinese Test Go module Build web application with golang Go\u8bed\u8a00\u8bc4\u4f30\u62a5\u544a Why you PHP guys should learn Golang Function Call by Name in Golang Golang: Funny Play with Channel Using MyMySQL - A interface of database/sql Go did What on the Stack? Gobs on the wire (Translation) Go Environment Setup (Translation) Error Handling and Go (Translation) The Go Tool (Translation) Less is exponentially more (Translation) Zero Downtime upgrades of TCP servers in Go (Translation) Using Go Modules (Translation) Czech Google Go - 1 st birthday Google Go - what we find in the kit Google Go - advanced topics Google Go by examples I. Google Go by examples II. Error handling in Go Google Go - The Laws of Reflection Google Go - 2 nd birthday German Der GoLang-Spicker 2018-08-30 Programmiersprachen im Multicore Zeitalter - Google GO und Nebenl\u00e4u\ufb01gkeit [PDF] 2012-02-02 A list of German press articles about Go Japanese Windows\u3067Go\u8a00\u8a9e\u306e\u307e\u3068\u3081 Go\u8a00\u8a9e\u3067 jQuery \u30e9\u30a4\u30af\u306a\u64cd\u4f5c\u304c\u51fa\u6765\u308b goquery \u3092\u8a66\u3057\u305f\u3002 Go\u8a00\u8a9e\u5411\u3051\u306e ORM\u3001gorp \u304c\u306a\u304b\u306a\u304b\u826f\u3044 GAE/G\u3067Google Cloud Storage\u3092\u5229\u7528\u3059\u308b\u306b\u306f\uff08\uff11\uff09 Go\u8a00\u8a9e\u306eWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\"goweb\"\u3092GAE/G\u3067\u52d5\u304b\u3059 Ubuntu 12.04\u306bgolang\u3092\u201d\u30bd\u30fc\u30b9\u304b\u3089\u201d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002 GAE/G\u3067\u6642\u9593\u306e\u30c1\u30a7\u30c3\u30af\uff08Datastore\u7de8\uff09 Korean The Go Programming Language You can read Go code Go channel tutorial Go character encoding Using Google API in Go Go\ub85c Git \ub4e4\uc5ec\ub2e4\ubcf4\uae30 Go: 90% \uc644\ubcbd?!, 100% of the time \uc2ac\ub77c\uc774\ub4dc \ubc88\uc5ed Go \ub3d9\uc2dc\uc131 \ud328\ud134 advanced \uc601\uc0c1 \ubc88\uc5ed Go + Revel + Gorp \uac04\ub2e8 \uac8c\uc2dc\ud310 \ub9cc\ub4e4\uae30 Go + Revel + Gorm \uc73c\ub85c \ub9cc\ub4dc\ub294 \ube14\ub85c\uadf8","title":"Articles"},{"location":"Articles/#table-of-contents","text":"Indexes General Concurrency / Channels Containers & Docker Cross Platform Development Error Handling Interfaces / OOP Mobile Applications Modules Performance and Profiling Pointers/References/Memory Reflection Security Testing Web & API Development Misc Chinese Czech German Japanese Korean","title":"Table of Contents"},{"location":"Articles/#article-indexes","text":"Collection of #golang posts on Medium latest Go articles from Dr. Dobbs latest Slideshare Collection of #golang presentations latest Short Go tutorials on SocketLoop latest An Introduction to Go latest","title":"Article Indexes"},{"location":"Articles/#general","text":"Darker Corners of Go 2021-03-13 Working with Golang Maps 2020-09-25 Practical Go: Real world advice for writing maintainable Go programs 2019-05-01 Here are some amazing advantages of Go that you don\u2019t hear much about 2018-02-01 Go Defer Simplified with Practical Visuals 2017-11-23 The Zoo of Go Funcs 2017-11-09 Ultimate Guide to Go Variadic Functions 2017-11-02 Go Funcs-Baby Gopher's Visual Guide 2017-10-27 Ultimate Visual Guide to Go Enums 2017-10-19 Learn Go Constants 2017-10-10 Learn Go Variables 2017-10-04 Introduction to Go Packages 2017-09-26 About Go Language\u200a\u2014\u200aAn Overview 2017-09-20 Debugging code generation in Go 2016-10-15 Go tooling essentials 2016-09-25 Go from PHP engineer's perspective 2016-02-25 Go Proverbs, Illustrated 2015-12-04 A whirlwind tour of Go\u2019s runtime environment variables 2015-11-29 Idiomatic Doc Comments: Document your function, not your function signature 2015-10_14 Best Practices for a new Go Developer 2015-09-01 Golang Refactoring Tools 2015-08-30 Working with Files in Go 2015-08-23 Defer Fun 2015-07-25 Things I learned teaching Go - Francesc Campoy 2014-11-24 Understanding Go Packages 2014-11-01 Structuring Applications in Go 2014-06-06 Functional Options for Friendly APIs 2014-10-17 Go Programming for Beginners 2014-10-01 Switching from Python to Go 2014-04-21 Google Go: The Good, the Bad, and the Meh 2013-02-10 What I Love About Go 2013-01-25 Why I program in Go 2013-01-05 Go: A New Language for a New Year 2012-01-06 Why you PHP guys should learn Golang 2012-08-10 Why I went from Python to Go (and not node.js) 2012-09-14","title":"General"},{"location":"Articles/#concurrency--channels","text":"Learning Go concurrency through illustrations 2018-06-21 Using contexts to avoid leaking goroutines 2016-10-25 Concurrency in Go 2015-12-06 Very basic concurrency for beginners in Go 2015-11-18 Exploting Powerful Cloud Services with Go 2015-10-11 3 Trivial Concurrency Exercises for the Confused Newbie Gopher 2015-10-05 Golang lock-free values with atomic.Value 2015-08-21 Golang Pearl: Thread-safe writes and double checked locking in Go 2015-07-21 Building a Telnet Server in Go 2015-08-28 Fundamentals of concurrent programming 2013-01-27 Golang: Funny Play with Channel 2012-05-25 Unlimited Buffering with Low Overhead 2010-02-10 Concurrent Idioms #1: Broadcasting values in Go with linked channels 2009-12-01","title":"Concurrency / Channels"},{"location":"Articles/#containers--docker","text":"Deploying a Go app to a minimal Docker container 2015-10-01 Fetching a remote configuration using Docker and Consul 2015-09-30 Joining the Docker Ship and Go 2015-07-01 Building Minimal Docker Images for Go 2015-04-23","title":"Containers &amp; Docker"},{"location":"Articles/#cross-platform-development","text":"Releasing cross-platform Go binaries using Goxc and BinTray in 5 minutes 2015-11-29 Calling Go from Swift 2015-10-3 On Go, portability, and system interfaces 2015-09-22 Go cross compilation 2015-09-8","title":"Cross-Platform Development"},{"location":"Articles/#error-handling","text":"Returning Errors 2015-10-10 Inspecting Errors 2014-12-24","title":"Error Handling"},{"location":"Articles/#interfaces--oop","text":"Generics in Golang with Code Generation 2015-10-18 Composition with Go 2015-09-13 Sorting Inventory Items in Go - the sort.Interface 2015-09-06 Loose Coupling in Go Lang 2015-02-06 Interface Types in Go 2014-10-18 How to use interfaces in Go 2012-10-01 Go Object Oriented Design 2013-01-14 It is ridiculously easy to refactor Go 2013-01-27 Functional Iteration in Go 2013-12-13 Interfaces in Go - Russ Cox 2009-12-01","title":"Interfaces / OOP"},{"location":"Articles/#mobile-applications","text":"Start by reading the overview of mobile development documentation first. Go Mobile: Next generation of mobile apps 2015-09-18 iOS Apps with Go - Video by Josh Deprez 2015-09-17 5 Part Series - Mobile Go 2015-01-08","title":"Mobile Applications"},{"location":"Articles/#modules","text":"Introduction to Go Modules 2018-08-18","title":"Modules"},{"location":"Articles/#performance-and-profiling","text":"Mutex profile 2016-12-19 How to Optimize Garbage Collection in Go 2015-11-23 Golang Escape Analysis 2015-10-18 A Pattern for Optimizing Go 2015-09-24 Golang Performance Tips 2015-09-20 Answering your own (performance) questions in Go 2015-09-15 Concise Guide to profiling go programs 2014-08-09 Go Performance Observations 2014-08-07 Debugging performance issues in Go programs - Intel 2014-05-10 How to write benchmarks in Go 2013-06-30 Profiling Go Programs - Go blog 2011-06-24","title":"Performance and Profiling"},{"location":"Articles/#pointers-references-and-memory-management","text":"Equality and Type Aliases 2015-09-02 Pointers vs References 2014-06-01 Recycling Memory Buffers in Go 2013-08-24 Learning Go Types 2012-01-27","title":"Pointers, References and Memory Management"},{"location":"Articles/#reflection","text":"Go Reflection Index by Jimmy Frasche 2014-01-26","title":"Reflection"},{"location":"Articles/#security","text":"Mutual TLS authentication in Go 2015-11-21 Whispered Secrets - The case for building software with privacy as a primary concern 2015-09-19","title":"Security"},{"location":"Articles/#testing","text":"Getting Started with BDD in Go Using Ginkgo 2016-07-12 Integration testing in Go using Docker 2015-12-07 Debugging Go Programs with Delve 2015-12-03 Upgrade Your Appengine Tests with Testify 2015_11_21","title":"Testing"},{"location":"Articles/#web--api-development","text":"Start by reading the overview of server programming documentation first. * Get started with Go and WebAssembly 2018-08-14 * HTTP/2 Server Push 2016-12-10 * Preventing Cross-Site Request Forgery in Go 2015-12-14 * goa: Untangling Microservices 2015-12-07 * A Weekend with Go, Beego and React 2015-11-03 * HTTP Session Handling on Heroku 2015-09-09 * Go Resiliency Patterns 2015-09-01 * http.Handler and Error Handling in Go 2015-07-02 * Deploy a golang photo archive tool to the cloud on IBM BlueMix 2015-06-05 * A Journey into Microservices - Part 1 , Part 2 , Part 3 2015-03_09 * Making a RESTful JSON API in Go 2015-01-01 * Building a Web Server in Go 2014-09-01","title":"Web &amp; API Development"},{"location":"Articles/#misc","text":"Environment variables in Golang 2020-09-28 Using MongoDB as Datasource in GoLang 2020-09-21 Go-powered Open Source IoT Integration Framework \"Flogo\" 2016-11-07 Build Slack Slash Commands with Go 2015-09-15 String Matching by Damian Gryski 2014-12-05 State machines in Go (#golang) 2013-02-10 Go & Assembly 2013-02-05 Function Types in Go (golang) 2013-02-05 Optimizing Real World Go 2013-01-05 Methods as Objects in Go 2012-12-26 Applying The Clean Architecture to Go applications 2012-09-08 An introduction to cross compilation with Go 2012-09-08 Function Call by Name in Golang 2012-07-05 Using the Go Regexp Package 2012-07-05 Zero Downtime upgrades of TCP servers in Go 2012-05-29 Go Reflection Codex Go JSON Marshalling and Unmarshalling cheatsheet 2015-09-30","title":"Misc"},{"location":"Articles/#chinese","text":"Test Go module Build web application with golang Go\u8bed\u8a00\u8bc4\u4f30\u62a5\u544a Why you PHP guys should learn Golang Function Call by Name in Golang Golang: Funny Play with Channel Using MyMySQL - A interface of database/sql Go did What on the Stack? Gobs on the wire (Translation) Go Environment Setup (Translation) Error Handling and Go (Translation) The Go Tool (Translation) Less is exponentially more (Translation) Zero Downtime upgrades of TCP servers in Go (Translation) Using Go Modules (Translation)","title":"Chinese"},{"location":"Articles/#czech","text":"Google Go - 1 st birthday Google Go - what we find in the kit Google Go - advanced topics Google Go by examples I. Google Go by examples II. Error handling in Go Google Go - The Laws of Reflection Google Go - 2 nd birthday","title":"Czech"},{"location":"Articles/#german","text":"Der GoLang-Spicker 2018-08-30 Programmiersprachen im Multicore Zeitalter - Google GO und Nebenl\u00e4u\ufb01gkeit [PDF] 2012-02-02 A list of German press articles about Go","title":"German"},{"location":"Articles/#japanese","text":"Windows\u3067Go\u8a00\u8a9e\u306e\u307e\u3068\u3081 Go\u8a00\u8a9e\u3067 jQuery \u30e9\u30a4\u30af\u306a\u64cd\u4f5c\u304c\u51fa\u6765\u308b goquery \u3092\u8a66\u3057\u305f\u3002 Go\u8a00\u8a9e\u5411\u3051\u306e ORM\u3001gorp \u304c\u306a\u304b\u306a\u304b\u826f\u3044 GAE/G\u3067Google Cloud Storage\u3092\u5229\u7528\u3059\u308b\u306b\u306f\uff08\uff11\uff09 Go\u8a00\u8a9e\u306eWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\"goweb\"\u3092GAE/G\u3067\u52d5\u304b\u3059 Ubuntu 12.04\u306bgolang\u3092\u201d\u30bd\u30fc\u30b9\u304b\u3089\u201d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002 GAE/G\u3067\u6642\u9593\u306e\u30c1\u30a7\u30c3\u30af\uff08Datastore\u7de8\uff09","title":"Japanese"},{"location":"Articles/#korean","text":"The Go Programming Language You can read Go code Go channel tutorial Go character encoding Using Google API in Go Go\ub85c Git \ub4e4\uc5ec\ub2e4\ubcf4\uae30 Go: 90% \uc644\ubcbd?!, 100% of the time \uc2ac\ub77c\uc774\ub4dc \ubc88\uc5ed Go \ub3d9\uc2dc\uc131 \ud328\ud134 advanced \uc601\uc0c1 \ubc88\uc5ed Go + Revel + Gorp \uac04\ub2e8 \uac8c\uc2dc\ud310 \ub9cc\ub4e4\uae30 Go + Revel + Gorm \uc73c\ub85c \ub9cc\ub4dc\ub294 \ube14\ub85c\uadf8","title":"Korean"},{"location":"AssemblyPolicy/","text":"Assembly Policy This document describes when and how to add assembly code to the Go cryptography packages. In general, the rules are: We prefer portable Go, not assembly. Code in assembly means (N packages * M architectures) to maintain, rather than just N packages. Minimize use of assembly. We'd rather have a small amount of assembly for a 50% speedup rather than twice as much assembly for a 55% speedup. Explain the decision to place the assembly/Go boundary where it is in the commit message, and support it with benchmarks. Use higher level programs to generate non-trivial amounts of assembly, either standalone Go programs or go get -able programs, like avo . Output of other reproducible processes (like formally verified code generators) will also be considered. Discuss the implementation strategy on the issue tracker in advance. Use small, testable units (25\u201375 lines) called from higher-level logic written in Go. If using small, testable functions called from logic written in Go is too slow, use small, testable assembly units with Go-compatible wrappers, so that Go tests can still test the individual units. Any assembly function needs a reference Go implementation, that\u2019s tested and fuzzed side-by-side with the assembly. Follow golang.org/wiki/TargetSpecific for structure and testing practices. Document in the Go code why the implementation requires assembly (specific performance benefit, access to instructions, etc), so we can reevaluate as the compiler improves.","title":"AssemblyPolicy"},{"location":"AssemblyPolicy/#assembly-policy","text":"This document describes when and how to add assembly code to the Go cryptography packages. In general, the rules are: We prefer portable Go, not assembly. Code in assembly means (N packages * M architectures) to maintain, rather than just N packages. Minimize use of assembly. We'd rather have a small amount of assembly for a 50% speedup rather than twice as much assembly for a 55% speedup. Explain the decision to place the assembly/Go boundary where it is in the commit message, and support it with benchmarks. Use higher level programs to generate non-trivial amounts of assembly, either standalone Go programs or go get -able programs, like avo . Output of other reproducible processes (like formally verified code generators) will also be considered. Discuss the implementation strategy on the issue tracker in advance. Use small, testable units (25\u201375 lines) called from higher-level logic written in Go. If using small, testable functions called from logic written in Go is too slow, use small, testable assembly units with Go-compatible wrappers, so that Go tests can still test the individual units. Any assembly function needs a reference Go implementation, that\u2019s tested and fuzzed side-by-side with the assembly. Follow golang.org/wiki/TargetSpecific for structure and testing practices. Document in the Go code why the implementation requires assembly (specific performance benefit, access to instructions, etc), so we can reevaluate as the compiler improves.","title":"Assembly Policy"},{"location":"Benchmarks/","text":"These are benchmarks collected from the community used to measure the effects of changes to the Go core (compiler, runtime, garbage collector, and libraries). They should have the following properties: they matter; someone cares, perhaps in a dollars-and-cents way, that they run well they are go-gettable and don't require customized steps for building the benchmark they run under go test -bench ... they run relatively quickly, ideally a single \"run\" takes less than a second (there should perhaps be a separate set of longer-running benchmarks) their timings are not gratuitously noisy they run cleanly in a restricted environment, such as a Docker or rkt container they're not gratuitously redundant with other benchmarks already in the list; we don't need ten microbenchmarks of Go transcendental functions These benchmarks change over time, and that is okay. Their intended use is for performance testing of proposed changes; is the geometric mean better, were any benchmarks made substantially worse? Information for each benchmark includes (or should include): a short name for the benchmark the path to go get the benchmark a regexp for the benchmark suite excluding individual benchmarks that might be noisy, long-running, or redundant (ideally) a contact person for questions about the benchmarks short name notes go get path benchmark regexp contact ajstarks_deck_generate github.com/ajstarks/deck/generate Benchmark(Polygon\\|Arc) benhoyt_goawk github.com/benhoyt/goawk/interp BenchmarkR bindata github.com/kevinburke/go-bindata Benchmark capnproto2 zombiezen.com/go/capnproto2/ Benchmark(TextMovementBetweenSegments\\|Growth_MultiSegment) cespare_mph github.com/cespare/mph BenchmarkBuild cespare_xxhash github.com/cespare/xxhash BenchmarkHashes/xxhash-string,n=10_MB ericlagergren_decimal github.com/ericlagergren/decimal/benchmarks BenchmarkPi_decimal_Go_9 ethereum_bitutil github.com/ethereum/go-ethereum/common/bitutil Benchmark(BaseTest2KB\\|FastTest2KB\\|Encoding4KBVerySparse) ethereum_core github.com/ethereum/go-ethereum/core BenchmarkChainRead_full_10k ethereum_corevm github.com/ethereum/go-ethereum/core/vm BenchmarkOpDiv128 ethereum_ecies github.com/ethereum/go-ethereum/crypto/ecies BenchmarkGenSharedKeyP256 ethereum_ethash github.com/ethereum/go-ethereum/consensus/ethash BenchmarkHashimotoLight ethereum_sha3 github.com/ethereum/go-ethereum/crypto/sha3 BenchmarkSha3_224_MTU ethereum_storage github.com/ethereum/go-ethereum/swarm/storage BenchmarkJoin_8 ethereum_trie github.com/ethereum/go-ethereum/trie Benchmark gonum_blas_native gonum.org/v1/gonum/blas/gonum Benchmark(DasumMediumUnitaryInc\\|Dnrm2MediumPosInc) gonum_community gonum.org/v1/gonum/graph/community/ BenchmarkLouvainDirectedMultiplex gonum_lapack_native gonum.org/v1/gonum/lapack/gonum BenchmarkDgeev/Circulant10 gonum_mat gonum.org/v1/gonum/mat Benchmark(MulWorkspaceDense1000Hundredth\\|ScaleVec10000Inc20) gonum_path gonum.org/v1/gonum/graph/path/ Benchmark(AStarUndirectedmallWorld_10_2_2_2_Heur\\|Dominators/nested_if_n256) gonum_topo gonum.org/v1/gonum/graph/topo/ Benchmark(TarjanSCCGnp_1000_half\\|TarjanSCCGnp_10_tenth) gonum_traverse gonum.org/v1/gonum/graph/traverse/ BenchmarkWalkAllBreadthFirstGnp_(10\\|1000)_tenth gtank_blake2s github.com/gtank/blake2s BenchmarkHash8K gtank_ed25519 github.com/gtank/ed25519 Benchmark(IsOnCurve\\|ScalarMult) hugo_helpers github.com/gohugoio/hugo/helpers Benchmark(StripHTML\\|ReaderContains) hugo_hugolib github.com/gohugoio/hugo/hugolib BenchmarkParsePage hugo_hugolib_sitebuilding github.com/gohugoio/hugo/hugolib BenchmarkSiteBuilding/YAML,num_pages=10,num_tags=10,tags_per_page=20,shortcodes,render-12 k8s_api k8s.io/kubernetes/pkg/api/testing BenchmarkEncodeCodecFromInternalProtobuf k8s_schedulercache k8s.io/kubernetes/pkg/scheduler/cache BenchmarkList1kNodes30kPods minio github.com/minio/minio/cmd BenchmarkGetObject5MbFS nelsam_gxui_interval github.com/nelsam/gxui/interval Benchmark pilosa_bitmaps benchmarks in roaring/ subdirectory github.com/pilosa/pilosa BenchmarkBitmap_IntersectionCount jaffee@pilosa.com semver github.com/Masterminds/semver BenchmarkValidateVersionTildeFail spexs2 github.com/egonelbre/spexs2/_benchmark/ BenchmarkRun/10k/1 uber_zap go.uber.org/zap/benchmarks BenchmarkAddingFields/(Zap.Sugar\\|^[ais]) uuid github.com/satori/go.uuid/ Benchmark(NewV5\\|MarshalToString) There is a benchmark runner that automates downloading, building, and running these benchmarks under various (user-defined) configurations. Benchmarking noise on Linux can be somewhat reduced with perflock . A few have been proposed but have so far failed to make the cut (for fetch, build, or noise problems): short name notes go get path benchmark regexp contact eolian_dsp buddin.us/eolian/dsp Benchmark ethereum_whisperv5 github.com/ethereum/go-ethereum/whisper/whisperv5 Benchmark kanzi github.com/flanglet/kanzi/go/src/kanzi/benchmark Benchmark","title":"Benchmarks"},{"location":"Blogs/","text":"A set of blogs dedicated to Go. NOTE: Please don't add individual blog entries to this page. Those belong in articles instead. Arabic \u0644\u063a\u0629 \u063a\u0648 \u0628\u0627\u0644\u0639\u0631\u0628\u064a - \u0645\u0648\u0642\u0639 \u0639\u0631\u0628\u064a \u0645\u062e\u0635\u0635 \u0644\u0644\u063a\u0629 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u063a\u0648 English The official Go Blog - For in depth posts by the Go team Gopher Academy Blog Dave Cheney's Blog Dave Cheney's Resources for Go Programmers spf13's Go Blog Katrina Owen's Blog Mat Ryer's Medium Blog Matt Aimonetti's Blog Marcio.io Carlos Becker's Blog Ardan Labs The Golang Weekly Alex Edward's Golang Posts GoLang Tutorials Mathias Lafeldt's Blog Marcelo Magallon's Blog Mina Andrawos's Golang Posts Aliaksandr Pliutau's Golang Blog Johan Brandhorst's Golang Blog Christoph Berger's Applied Go Blog Jon Calhoun's Blog Inanc Gumus's Learn Go Programming Blog Elliot Forbes - TutorialEdge.net Golang Tutorials Timo Savola's Go Posts Packt Hub GoCenter Community Blog - Blogs from GoCenter.io about Go modules and community. Portuguese Eduardo Nunes Pereira Gopher Brasil Spanish Golang Argentina Chinese Howtoing\u8fd0\u7ef4\u6559\u7a0b \u865e\u53cc\u9f50\u7684\u535a\u5ba2-Golang Tony Bai \u2013 \u4e00\u4e2a\u7a0b\u5e8f\u5458\u7684\u5fc3\u8def\u5386\u7a0b Arthur \u7684\u535a\u5ba2 \u9e1f\u7a9d \u98de\u96ea\u65e0\u60c5\u7684\u535a\u5ba2 \u5348\u591c\u5496\u5561 \u8748\u8748\u4fca\u7684\u6280\u672f\u5fc3\u5f97 FuXiaohei.Me \u2013 \u5085\u5c0f\u9ed1\u7684\u81ea\u7559\u5730 \u65e0\u95fb\u7684\u5c0f\u7ad9 astaxie \u98ce\u7b11\u75f4 ipfans's Blog Cyeam \u2013 \u4f60\u4e0d\u8981\u7528\u6218\u672f\u7684\u52e4\u594b\u63a9\u76d6\u6218\u7565\u7684\u61d2\u60f0\u3002 \u6218\u9b42\u5c0f\u7b51 My Candy fatedier blog siddontang \u7684\u4e13\u680f-my thought for program\u3002 domac \u535a\u5ba2 life should be func \u4e03\u725b\u4e91 - \u4e03\u725b\u56e2\u961f\u535a\u5ba2 \u535a\u5ba2 - PingCAP LittleFeng \u7684\u535a\u5ba2 \u2013 Python\u3001Golang\u3001Java\u3001\u540e\u7aef\u6280\u672f Legendtkl \u884c\u601d\u9304,Travel Coder - Arch, Coding, Life Learning jasper\u7684\u6280\u672f\u5c0f\u7a9d \u4e09\u6708\u6c99 \u5927\u6865\u4e0b\u7684\u8717\u725b \u714e\u9c7c\u7684\u8ff7\u4e4b\u535a\u5ba2 Stefno - \u535a\u5ba2\u56ed No Headback Go \u8bed\u8a00\u57fa\u7840","title":"Blogs"},{"location":"Blogs/#arabic","text":"\u0644\u063a\u0629 \u063a\u0648 \u0628\u0627\u0644\u0639\u0631\u0628\u064a - \u0645\u0648\u0642\u0639 \u0639\u0631\u0628\u064a \u0645\u062e\u0635\u0635 \u0644\u0644\u063a\u0629 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u063a\u0648","title":"Arabic"},{"location":"Blogs/#english","text":"The official Go Blog - For in depth posts by the Go team Gopher Academy Blog Dave Cheney's Blog Dave Cheney's Resources for Go Programmers spf13's Go Blog Katrina Owen's Blog Mat Ryer's Medium Blog Matt Aimonetti's Blog Marcio.io Carlos Becker's Blog Ardan Labs The Golang Weekly Alex Edward's Golang Posts GoLang Tutorials Mathias Lafeldt's Blog Marcelo Magallon's Blog Mina Andrawos's Golang Posts Aliaksandr Pliutau's Golang Blog Johan Brandhorst's Golang Blog Christoph Berger's Applied Go Blog Jon Calhoun's Blog Inanc Gumus's Learn Go Programming Blog Elliot Forbes - TutorialEdge.net Golang Tutorials Timo Savola's Go Posts Packt Hub GoCenter Community Blog - Blogs from GoCenter.io about Go modules and community.","title":"English"},{"location":"Blogs/#portuguese","text":"Eduardo Nunes Pereira Gopher Brasil","title":"Portuguese"},{"location":"Blogs/#spanish","text":"Golang Argentina","title":"Spanish"},{"location":"Blogs/#chinese","text":"Howtoing\u8fd0\u7ef4\u6559\u7a0b \u865e\u53cc\u9f50\u7684\u535a\u5ba2-Golang Tony Bai \u2013 \u4e00\u4e2a\u7a0b\u5e8f\u5458\u7684\u5fc3\u8def\u5386\u7a0b Arthur \u7684\u535a\u5ba2 \u9e1f\u7a9d \u98de\u96ea\u65e0\u60c5\u7684\u535a\u5ba2 \u5348\u591c\u5496\u5561 \u8748\u8748\u4fca\u7684\u6280\u672f\u5fc3\u5f97 FuXiaohei.Me \u2013 \u5085\u5c0f\u9ed1\u7684\u81ea\u7559\u5730 \u65e0\u95fb\u7684\u5c0f\u7ad9 astaxie \u98ce\u7b11\u75f4 ipfans's Blog Cyeam \u2013 \u4f60\u4e0d\u8981\u7528\u6218\u672f\u7684\u52e4\u594b\u63a9\u76d6\u6218\u7565\u7684\u61d2\u60f0\u3002 \u6218\u9b42\u5c0f\u7b51 My Candy fatedier blog siddontang \u7684\u4e13\u680f-my thought for program\u3002 domac \u535a\u5ba2 life should be func \u4e03\u725b\u4e91 - \u4e03\u725b\u56e2\u961f\u535a\u5ba2 \u535a\u5ba2 - PingCAP LittleFeng \u7684\u535a\u5ba2 \u2013 Python\u3001Golang\u3001Java\u3001\u540e\u7aef\u6280\u672f Legendtkl \u884c\u601d\u9304,Travel Coder - Arch, Coding, Life Learning jasper\u7684\u6280\u672f\u5c0f\u7a9d \u4e09\u6708\u6c99 \u5927\u6865\u4e0b\u7684\u8717\u725b \u714e\u9c7c\u7684\u8ff7\u4e4b\u535a\u5ba2 Stefno - \u535a\u5ba2\u56ed No Headback Go \u8bed\u8a00\u57fa\u7840","title":"Chinese"},{"location":"Books/","text":"Other book lists: Go Books Go Language Resources Sorted by publication date. English Go Programming Author: John P. Baugh Publication Date: June 16, 2010 ISBN: 978-1453636671 The Way to Go: A Thorough Introduction to the Go Programming Language Author: Ivo Balbaert Publication Date: March 7, 2012 ISBN: 978-1469769165 The Go Programming Language Phrasebook Author: David Chisnall Publication Date: April 30, 2012 ISBN: 978-0321817143 Reference: https://www.informit.com/store/go-programming-language-phrasebook-9780321817143 Programming in Go: Creating Applications for the 21 st Century Author: Mark Summerfield Publication Date: May 4, 2012 ISBN: 978-0321774637 Reference: https://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637 An Introduction to Programming in Go Author: Caleb Doxsey Publication Date: September 3, 2012 ISBN: 978-1478355823 Reference: https://www.golang-book.com/ Go Bootcamp: Everything you need to get started with Go (FREE) Author: Matt Aimonetti Publication Date: March 2014 ISBN: none: free ebook/PDF/online version Reference: http://www.golangbootcamp.com/ Mastering Concurrency in Go Author: Nathan Kozyra Publication Date: July 23, 2014 ISBN: 978-1783983483 Reference: https://www.packtpub.com/application-development/mastering-concurrency-go The Little Go Book Author: Karl Seguin Publication Date: October 2014 ISBN: none: free ebook/PDF/online version Reference: https://openmymind.net/The-Little-Go-Book/ Go Programming Blueprints Author: Mat Ryer Publication Date: January 23, 2015 ISBN: 978-1783988020 Reference: https://www.packtpub.com/application-development/go-programming-blueprints Level Up Your Web Apps With Go Author: Mal Curtis Publication Date: April, 2015 ISBN: 978-0992461294 Reference: https://learnable.com/books/level-up-your-web-apps-with-go Mastering Go Web Services Author: Nathan Kozyra Publication Date: April, 2015 ISBN: 9781783981304 Reference: https://www.packtpub.com/web-development/mastering-go-web-services Go In Action Authors: William Kennedy with Brian Ketelsen and Erik St. Martin Publication Date: November, 2015 ISBN: 9781617291784 Reference: https://www.manning.com/books/go-in-action Discount Code (44% off): goiaucf The Go Programming Language (Addison-Wesley Professional Computing Series) Author: Alan A.A. Donovan and Brian Kernighan Publication Date: November, 2015 ISBN: 978-0134190440 Reference: https://www.gopl.io/ Web Development with Go: Building Scalable Web Apps and RESTful Services Author: Shiju Varghese Publication Date: December, 2015 ISBN: 978-1484210536 Reference: https://www.apress.com/9781484210536 Introducing Go Author: Caleb Doxsey Publication Date: January 2016 ISBN: 978-1491941959 Reference: https://shop.oreilly.com/product/0636920046516.do Write webapps in Go without using a framework (Free e-book) Author: Suraj Patil Publication Date: October 2016 ISBN: NA since book is self published on http://leanpub.com References: thewhitetulip/web-dev-golang-anti-textbook , https://leanpub.com/antitextbookGo/ Learning Go Web Development Author: Nathan Kozyra Publication Date: April, 2016 ISBN: 978-1785282317 Reference: https://www.packtpub.com/web-development/learning-go-web-development Go Web Programming Author: Sau Sheong Chang Publication Date: July 22, 2016 ISBN: 9781617292569 Reference: http://manning.com/chang/ Go in Practice Authors: Matt Butcher and Matt Farina Publication Date: October 1, 2016 ISBN: 9781633430075 Reference: http://manning.com/butcher/ Go Programming Blueprints - Second Edition Author: Mat Ryer Publication Date: October 2016 ISBN: 978-1786468949 Reference: https://www.packtpub.com/application-development/go-programming-blueprints-second-edition Learning Go programming Author: Vladimir Vivien Publication Date: October 2016 ISBN: 978-1784395438 Reference: https://www.packtpub.com/application-development/learning-go-programming Go Recipes Author: Shiju Varghese Publication Date: November 2016 ISBN: 978-1-4842-1188-5 Reference: http://www.apress.com/us/book/9781484211892 Go Design Patterns Author: Mario Castro Contreras Publication Date: February 2017 ISBN: 978-1786466204 Reference: https://www.packtpub.com/application-development/go-design-patterns Go Cookbook Author: Aaron Torres Publication Date: June 2017 ISBN: 978-1783286836 Reference: https://www.packtpub.com/application-development/go-cookbook Go: Design Patterns for Real-World Projects Authors: Vladimir Vivien, Mario Castro Contreras, Mat Ryer Publication Date: June 2017 ISBN: 978-1788390552 Reference: https://www.packtpub.com/application-development/go-design-patterns-real-world-projects Web Development with Go: Learn to Create Real World Web Applications using Go Author: Jonathan Calhoun Publication Date: June 2017 ISBN: N/A (self published) Reference: http://usegolang.com Building Microservices with Go Author: Nic Jackson Publication Date: July 2017 ISBN: 978-1786468666 Reference: https://www.packtpub.com/application-development/building-microservices-go Concurrency in Go Author: Katherine Cox-Buday Publication Date: August 2017 ISBN: 978-1491941195 Reference: http://shop.oreilly.com/product/0636920046189.do Machine Learning With Go Author: Daniel Whitenack Publication Date: September 2017 ISBN: 978-1785882104 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go Go Systems Programming Author: Mihalis Tsoukalos Publication Date: September 2017 ISBN: 978-1787125643 Reference: https://www.packtpub.com/networking-and-servers/go-systems-programming Let's Go! Learn to Build Professional Web Applications With Go Author: Alex Edwards Publication Date: September 2017 ISBN: N/A (self-published) Reference: https://lets-go.alexedwards.net Learning Functional Programming in Go Author: Lex Sheehan Publication Date: November 2017 ISBN: 978-1787281394 Reference: https://www.packtpub.com/application-development/learning-functional-programming-go Cloud Native programming with Golang Author: Mina Andrawos, Martin Helmich Publication Date: December 2017 ISBN: 978-1787125988 Reference: https://www.packtpub.com/application-development/cloud-native-programming-golang Isomorphic Go Author: Kamesh Balasubramanian Publication Date: December 2017 ISBN: 978-1788394185 Reference: https://www.packtpub.com/web-development/isomorphic-go https://www.amazon.com/dp/1788394186 Security with Go Author: John Daniel Leon Publication Date: January 2018 ISBN: 978-1788627917 Reference: https://www.amazon.com/dp/1788627911 Go Standard Library Cookbook Author: Radomir Sohlich Publication Date: February 2018 ISBN: 9781788475273 Reference: https://www.amazon.com/dp/1788475275 Distributed Computing with Go Author: V.N. Nikhil Anurag Publication Date: February 2018 ISBN: 9781787125384 Reference: https://www.amazon.com/dp/1787125386 Go Web Development Cookbook Author: Arpit Aggarwal Publication Date: April 2018 ISBN: 9781787286740 Reference: https://www.amazon.com/Web-Development-Cookbook-full-stack-applications/dp/1787286746 Mastering Go Author: Mihalis Tsoukalos Publication Date: April 2018 ISBN: 9781788626545 Reference: https://www.amazon.com/Mastering-production-applications-concurrency-cloud-native/dp/1788626540 Echo Quick Start Guide Author: J. Ben Huson Publication Date: May 2018 ISBN: 9781789139433 Reference: https://www.amazon.com/dp/1789139430 Hands-On Serverless Applications with Go Author: Mohamed Labouardy Publication Date: August 2018 ISBN: 9781789134612 Reference: https://www.packtpub.com/application-development/hands-serverless-applications-go Hands-On Go Programming Author: Tarik Guney Publication Date: August 2018 ISBN: 9781789531756 Reference: https://www.packtpub.com/application-development/hands-go-programming Get Programming with Go Author: Nathan Youngman, Roger Peppe Publication Date: August 2018 ISBN: 9781617293092 Reference: https://www.manning.com/books/get-programming-with-go Go Machine Learning Projects Author: Xuanyi Chew Publication Date: November 2018 ISBN: 9781788993401 Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-machine-learning-projects Hands-On Dependency Injection in Go Author: Corey Scott Publication Date: November 2018 ISBN: 9781789132762 Reference: https://www.packtpub.com/application-development/hands-dependency-injection-go Hands-On Software Architecture with Golang Author: Jyotiswarup Raiturkar Publication Date: December 2018 ISBN: 9781788622592 Reference: https://www.packtpub.com/application-development/hands-software-architecture-golang Hands-On Fundamentals of Data Science with Go (Video) Author: Sanket Gupta Publication Date: December 2018 ISBN: 9781789539103 Reference: https://www.packtpub.com/big-data-and-business-intelligence/hands-fundamentals-data-science-go-video Building RESTful APIs with Go (Video) Author: Bartlomiej Walczak Publication Date: December 2018 ISBN: 978178961499 Reference: https://www.packtpub.com/application-development/building-restful-apis-go-video Go Web Scraping Quick Start Guide Author: Vincent Smith Publication Date: January 2019 ISBN: 9781789615708 Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-web-scraping-quick-start-guide Advanced Go Programming in 7 Days (Video) Author: Theofanis Despoudis Publication Date: January 2019 ISBN: 9781788994880 Reference: https://www.packtpub.com/application-development/advanced-go-programming-7-days-video Hands-On GUI Application Development in Go Author: Andrew Williams Publication Date: February 2019 ISBN: 9781789138412 Reference: https://www.packtpub.com/application-development/hands-gui-application-development-go Hands-On Full Stack Development with Go Author: Mina Andrawos Publication Date: March 2019 ISBN: 9781789130751 Reference: https://www.packtpub.com/web-development/hands-full-stack-development-go Learn Data Structures and Algorithms with Golang Author: Bhagvan Kommadi Publication Date: March 2019 ISBN: 9781789618501 Reference: https://www.packtpub.com/application-development/learn-data-structures-and-algorithms-golang Machine Learning With Go - Second Edition Author: Daniel Whitenack Publication Date: April 2019 ISBN: 9781789619898 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-second-edition?utm_source=Golang&utm_medium=referral&utm_campaign=Outreach Machine Learning with Go Quick Start Guide Author: Michael Bironneau and Toby Coleman Publication Date: May 2019 ISBN: 9781838550356 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-quick-start-guide?utm_source=Golang&utm_medium=referral&utm_campaign=Outreach Mastering Go - Second Edition Author: Mihalis Tsoukalos Publication Date: 10 Sept 2019 ISBN: 9781838559335 Reference: https://www.packtpub.com/programming/mastering-go-second-edition Reference: https://www.amazon.com/Mastering-production-applications-concurrency-structures/dp/1838559337/ Hands-on Microservices with Go and MongoDB [Video] Author: Gautam Rege Publication Date: 22 Nov 2019 ISBN: 9781838648558 References: https://www.packtpub.com/web-development/hands-on-microservices-with-go-and-mongodb-video?utm_source=Golang&utm_medium=&utm_campaign=Outreach The Go Workshop (e-book) Author: Delio D'Anna Publication Date: December 30, 2019 ISBN: 9781838647940 References: https://www.packtpub.com/programming/the-go-workshop?utm_source=GoLang&utm_medium=Github&utm_campaign=OutreachB14177dollar5 Concise Go Author: Yaniv Astamnep Publication Date: January 22, 2020 ISBN: 9798602419887 References: https://www.amazon.com/Concise-Go-Yaniv-Astamnep-ebook/dp/B0844MWN92 https://www.amazon.com/Concise-Go-Yaniv-Astamnep/dp/B083XVZ2BZ Nonsequential and Distributed Programming with Go Author: Christian Maurer Publication Date: January 21, 2021 ISBN: 978-3-658-29781-7 (Softcover) and 978-3-658-20782-4 (eBook) References: https://www.springer.com/gp/book/9783658297817 Building Cross-Platform GUI Applications with Fyne Author: Andrew Williams Publication Date: January 2021 ISBN: 9781800563162 Reference: https://www.packtpub.com/product/building-cross-platform-gui-applications-with-fyne/9781800563162 Hands-on Go programming Author: Sachchidanand Singh, Prithvipal Singh Publication Date: February 2021 ISBN: 9789389898194 Reference: https://bpbonline.com/products/hands-on-go-programming Early Access A Comprehensive Guide to Go Programming Authors: Baiju Muthukadan Publication Date: June 10, 2015 ISBN: \u2014 Reference: http://golang.muthukadan.net/ WebAssembly in Action Author: Gerard Gallant Publication Date: Spring 2019 (estimated) ISBN: 9781617295744 Reference: https://www.manning.com/books/webassembly-in-action Pre-order Black Hat Go Author: Tom Steele, Chris Patten, and Dan Kottmann Publication Date: March 2018 ISBN: 978-1-59327-865-6 Reference: https://www.nostarch.com/blackhatgo Available without Publication Date Learning Go (e-book) Author: Miek Gieben Publication Date: \u2014 ISBN: \u2014 Reference: http://archive.miek.nl/projects/learninggo/ Network Programming with Go (e-book) Author: Jan Newmarch Publication Date: \u2014 ISBN: \u2014 References: http://jan.newmarch.name/go/ Go Bootcamp (e-book) Author: Matt Aimonetti Publication Date: \u2014 ISBN: \u2014 References: http://www.golangbootcamp.com/ A Go Developer's Notebook (e-book) Author: Eleanor McHugh Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/GoNotebook Go, The Standard Library (e-book) Author: Daniel Huckstep Publication Date: \u2014 ISBN: \u2014 References: http://thestandardlibrary.com/go.html Practical Cryptography with Go (e-book) Author: Kyle Isom Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/gocrypto The Ultimate Guide to Building Database-Driven Apps with Go (e-book) Author: Baron Schwartz Publication Date: \u2014 ISBN: \u2014 References: https://vividcortex.com/resources/building-database-driven-apps-with-go/ Building Web Apps with Go (e-book) Author: Jeremy Saenz Publication Date: \u2014 ISBN: \u2014 References: https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details How do I Write and Deploy Simple Web Apps with Go? (e-book) Author: Satish Talim Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/howdoibuildawebappwithgo Test-driven development with Go (e-book) Author: Yigal Duppen Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/golang-tdd Learn Go (e-book) Author: Gyu-ho Lee Publication Date: \u2014 ISBN: \u2014 References: gyuho/learn#contents Learn Golang the Hard Way (e-book) Author: Laszlo Csontos Publication Date: \u2014 ISBN: \u2014 References: http://www.learngolangthehardway.org/ Go 101 (e-book) Author: Tapir Liu Publication Date: \u2014 ISBN: \u2014 References: https://go101.org Creative DIY Microcontroller Projects with TinyGo and WebAssembly Author: Tobias Theel Publication Date: April 2021 (est.) ISBN: 9781800560208 References: https://www.packtpub.com/product/creative-diy-microcontroller-projects-with-tinygo-and-webassembly/9781800560208 Cancelled or Status Indeterminable Microservices in Go Authors: Matthew Campbell Publication Date: Fall 2015 (est.) ISBN: \u2014 Reference: http://microservicesingo.com/ Status: Cancelled per O'Reilly Employee Chinese Go\u8bed\u8a00\u00b7\u4e91\u52a8\u529b Author: \u6a0a\u8679\u5251\uff08fango\uff09 Publication Date: 2012-06 ISBN: 978-7-115-28307-8 Reference: http://www.ituring.com.cn/book/1040 Go\u8bed\u8a00\u7f16\u7a0b Author: \u8bb8\u5f0f\u4f1f Publication Date: 2012-08 ISBN: 978-7-115-29036-6 Reference: http://www.ituring.com.cn/book/967 Go Web\u7f16\u7a0b Author: \u8c22\u5b5f\u519b Publication Date: 2013-05 ISBN: 9787121200915 Reference: astaxie/build-web-application-with-golang Go\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1 (Programming in Go: Creating Applications for the 21 st Century) Author: Mark Summerfield Translator: \u8bb8\u5f0f\u4f1f, \u5415\u6842\u534e, \u5f90\u7acb, \u4f55\u674e\u77f3 Publication Date: 2013-08 ISBN: 978-7-115-31790-2 Reference: https://www.ptpress.com.cn/shopping/buy?bookId=27c4a9e0-e3df-4cb4-8992-b42c2e4368e8 Go\u5e76\u53d1\u7f16\u7a0b\u5b9e\u6218 Author: \u90dd\u6797 Publication Date: 2015-01-01 ISBN: 9787115373984 Reference: http://www.ptpress.com.cn/Book.aspx?id=39783 \u5b66\u4e60 Go \u8bed\u8a00 (e-book / Translation) Author: Xing Xing (mikespook) Publication Date: \u2014 ISBN: \u2014 Reference: http://www.mikespook.com/learning-go/ Go \u5b66\u4e60\u7b14\u8bb0 - \u7b2c\u56db\u7248 (e-book) Author: \u96e8\u75d5\uff08qyuhen\uff09 Publication Date: \u2014 ISBN: \u2014 Reference: qyuhen/book Go\u8bed\u8a00\u9ad8\u7ea7\u7f16\u7a0b (\u5b9e\u4f53\u4e66 & e-book) Author: \u67f4\u6811\u6749\uff08chai2010\uff09 Publication Date: 2019-07 ISBN: 978-7-115-51036-5 Reference: https://www.epubit.com/bookDetails?id=N40090 Reference: chai2010/advanced-go-programming-book Go\u8bed\u6cd5\u6811 (e-book) Author: \u67f4\u6811\u6749\uff08chai2010\uff09 Publication Date: \u2014 ISBN: \u2014 Reference: chai2010/go-ast-book Go\u8bed\u8a00101 (e-book) Author: \u8001\u8c98 Publication Date: \u2014 ISBN: \u2014 References: https://gfw.go101.org/ Japanese \u306f\u3058\u3081\u3066\u306e\u300cGo\u8a00\u8a9e\u300d Author: \u8328\u6728 \u9686\u5f70 Publication Date: 2010-11 ISBN: 978-4777515592 Reference: Go\u8a00\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580on Google App Engine Author: \u6a2a\u5c71 \u9686\u53f8 Publication Date: 2011-12 ISBN: 978-4798031804 Reference: \u306f\u3058\u3081\u3066\u306eGoogle App Engine Go\u8a00\u8a9e\u7de8 Author: \u8328\u6728 \u9686\u5f70 Publication Date: 2012-2 ISBN: 978-4777516605 Reference: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo\u30d5\u30ec\u30fc\u30ba\u30d6\u30c3\u30af Author: David Chisnall (\u8457), \u30c7\u30a4\u30d3\u30c3\u30c9\u30fb\u30c1\u30ba\u30ca\u30fc\u30eb (\u8457), \u67f4\u7530 \u82b3\u6a39 (\u7ffb\u8a33) Publication Date: 2012-10 ISBN: 978-4864010962 Reference: \u57fa\u790e\u304b\u3089\u308f\u304b\u308b Go\u8a00\u8a9e Author: \u53e4\u5ddd \u6607 Publication Date: 2012-11 ISBN: 978-4863541177 Reference: Go\u8a00\u8a9e\u306b\u3088\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a Author: Mat Ryer (\u8457)\u3001\u9d5c\u98fc \u6587\u654f (\u76e3\u8a33)\u3001\u7267\u91ce \u8061 (\u8a33) Publication Date: 2016-01 ISBN: 978-4-87311-752-2 Reference: http://www.oreilly.co.jp/books/9784873117522/ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Yoshiki Shibata Publication Date: 20 June 2016 ISBN: 978-4-62130-025-1 Reference: http://www.gopl.io/translations.html \u307f\u3093\u306a\u306eGo\u8a00\u8a9e Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a Publication Date: 9 Sep 2016 ISBN: 978-4774183923 Reference: http://www.amazon.co.jp/exec/obidos/ASIN/477418392X/ Go\u8a00\u8a9e\u306b\u3088\u308b\u4e26\u884c\u51e6\u7406 Authors: Katherine Cox-Buday\uff08\u8457\uff09\u3001\u5c71\u53e3 \u80fd\u8fea\uff08\u8a33\uff09 Publication Date: 26 Oct 2018 ISBN: 978-4-87311-846-8 Reference: https://www.oreilly.co.jp/books/9784873118468/ \u6539\u8a022\u7248 \u307f\u3093\u306a\u306eGo\u8a00\u8a9e Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u4e0a\u7530 \u62d3\u4e5f, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a Publication Date: August 1, 2019 ISBN: 978-4297107277 Reference: https://gihyo.jp/book/2019/978-4-297-10727-7 French Programmer en Go - Pourquoi ? Comment ? Author: Rudy Rigot Publication Date: 24 Jan 2018 ISBN: 978-2-8227-0660-5 Reference: https://www.d-booker.fr/go-bases/499-programmer-en-go-pourquoi-comment.html German Programmierung in Google Go (not available for buying any more) Authors: Rainer Feike and Steffen Blass Publication Date: 2010-11 ISBN: 978-3-8632-4722-5 Reference (Amazon): http://www.amazon.de/Programmierung-Google-Beispiele-professionelle-Anwendung/dp/3827330092 Reference (Google Books): https://books.google.de/books?id=E4IL5dT1yLsC&printsec=frontcover&hl=de#v=onepage&q&f=false Systemprogrammierung in Google Go Author: Frank M\u00fcller Publication Date: 2011-01 ISBN: 978-3-89864-712-0 Reference: http://dpunkt.de/buecher/3762/-systemprogrammierung-in-google-go.html Nichtsequentielle und Verteilte Programmierung mit Go (4 th edition) (available as print and e-book) Author: Christian Maurer Publication Date: 2019-07 ISBN: 978-3-658-26289-1 (Softcover) and 978-3-658-26290-7 (eBook) Reference: https://www.springer.com/de/book/9783658262891 Einstieg in Google Go (e-book) Author: Christian Himpel and Mario Deilmann Publication Date: 2012-04 ISBN: 978-3-86802-415-9 Reference: http://entwickler.de/press/Einstieg-in-Google-Go Brazilian Portuguese A Linguagem de Programa\u00e7\u00e3o Go Author: Alan A. A. Donovan, Brian W. Kernighan Publication Date: 2017 ISBN: 978-85-7522-546-2 Reference: https://novatec.com.br/livros/linguagem-de-programacao-go/ Programando em Go: crie aplica\u00e7\u00f5es com a linguagem do Google Author: Caio Filipini Publication Date: 2014-07-01 ISBN: 978-85-66250-49-7 Reference: http://www.casadocodigo.com.br/products/livro-google-go Introdu\u00e7\u00e3o \u00e0 Linguagem Go: Crie Programas Escal\u00e1veis e Confi\u00e1veis Author: Caleb Doxsey Publication Date: 2016-08-04 ISBN: 978-85-75224-89-2 Reference: http://shop.oreilly.com/product/0636920046516.do Russian \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Go Author: \u041c\u0430\u0440\u043a \u0421\u0430\u043c\u043c\u0435\u0440\u0444\u0438\u043b\u044c\u0434 Publication Date: 2013-02-14 ISBN: 978-5-94074-854-0 Reference: http://dmkpress.com/catalog/computer/programming/978-5-94074-854-0/ \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Go Author: \u0410\u043b\u0430\u043d \u0410. \u0410. \u0414\u043e\u043d\u043e\u0432\u0430\u043d, \u0411\u0440\u0430\u0439\u0430\u043d \u0423. \u041a\u0435\u0440\u043d\u0438\u0433\u0430\u043d Publication Date: 2016-04-21 ISBN: 978-5-8459-2051-5 Reference: http://www.williamspublishing.com/Books/978-5-8459-2051-5.html Go \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 Author: \u0411\u0430\u0442\u0447\u0435\u0440 \u041c., \u0424\u0430\u0440\u0438\u043d\u0430 \u041c. Publication Date: 2017-01 ISBN: 978-5-97060-477-9 Reference: http://dmkpress.com/catalog/computer/programming/978-5-97060-477-9/ Golang \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438: \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 Go Author: \u0426\u0443\u043a\u0430\u043b\u043e\u0441 \u041c. Publication Date: 2020 ISBN: 978-5-4461-1617-1 Reference: https://www.piter.com/product/golang-dlya-profi-rabota-s-setyu-mnogopotochnost-struktury-dannyh-i-mashinnoe-obuchenie-s-go Espa\u00f1ol Aprende Go en Y minutos https://go101.org Author: Nacho Pacheco Publication Date: 2015-02-24 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/aprende-go-en-y-minutos/ Constr\u00aduyendo\u00ad aplic\u00adacione\u00ads Web \u00adcon Go Author: Nacho Pacheco Publication Date: 2015-02-18 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/cawg/ \u00a1Go en Espa\u00f1ol! Author: Nacho Pacheco Publication Date: 2015-03-22 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/go-es/ Korean \uac00\uc7a5 \ube68\ub9ac \ub9cc\ub098\ub294 Go \uc5b8\uc5b4 Author: \uc774\uc7ac\ud64d Publication Date: June 2015 ISBN: 978-8-96618-990-8 Reference: http://www.pyrasis.com/private/2015/06/01/publish-go-for-the-really-impatient-book \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \ud558\ub8fb\ubc24\uc5d0 \uc77d\ub294 Go \uc5b8\uc5b4 \uc774\uc57c\uae30 Author: \uc2e0\uc81c\uc6a9 Publication Date: December 2015 ISBN: 978-8-96848-806-1 Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=E8544486990 \ub514\uc2a4\ucee4\ubc84\ub9ac Go \uc5b8\uc5b4 Author: \uc5fc\uc7ac\ud604 Publication Date: March 2016 ISBN: 9788-96848-268-7 Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=B5279497767 Go \uc5b8\uc5b4 \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d \ucca0\uc800 \uc785\ubb38 Author: \uc7a5\uc7ac\ud734 Publication Date: March 2016 ISBN: 979-1-18697-881-8 Reference: http://www.gilbut.co.kr/book/bookView.aspx?bookcode=BN001434 Go \uc778 \uc561\uc158 Authors: William Kennedy with Brian Ketelsen and Erik St. Martin; translated by Hyunhee Jang Publication Date: June 2016 ISBN: 979-1-18589-053-1 Reference: http://jpub.tistory.com/585 The Go Programming Language Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Seung Lee Publication Date: June 2016 ISBN: 978-0-13419-044-0 Reference: http://www.acornpub.co.kr/book/go-programming Go \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d Author: Sau Sheong Chang; translated by Jinwook Jeong Publication Date: March 2017 ISBN: 979-1-18669-731-3 Reference: http://www.bjpublic.co.kr/skin12/productSearchView.php?board_data=aWR4PTIxMyZzdGFydFBhZ2U9MCZsaXN0Tm89MzM \ud504\ub85c\uc81d\ud2b8\ub85c \uc644\uc131\ud558\ub294 Go \ud504\ub85c\uadf8\ub798\ubc0d Author: Mat Ryer; translated by Soonbeom Kwon Publication Date: August 2017 ISBN: 979-1-16175-032-3 Reference: http://www.acornpub.co.kr/book/go-blueprints-2 Go \uc5b8\uc5b4 \uc2e4\uc804 \ud14c\ud06c\ub2c9 Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a; translated by Hyuntae Park Publication Date: August 2017 ISBN: 979-1-16175-026-2 Reference: http://www.acornpub.co.kr/book/go-language-minna Go Cookbook Author: Aaron Torres; transalted by Sangsik Lee Publication Date: December 2017 ISBN: 979-1-16175-088-0 Reference: http://www.acornpub.co.kr/book/go-cookbook Go \uc5b8\uc5b4\ub97c \ud65c\uc6a9\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac1c\ubc1c Author: Nic Jackson; translated by Sangsik Lee Publication Date: July 2018 ISBN: 979-1-16175-190-0 Reference: http://www.acornpub.co.kr/book/microservices-go Go \uc5b8\uc5b4 \uc2dc\uc791\ud558\uae30 Author: \ubc15\ud61c\uc601, \uc11c\uc815\uc778 Publication Date: September 2018 ISBN: 979-1-15600-606-0 Reference: http://www.hongpub.co.kr/sub.php?goPage=view_product&flashpage=&Code=20180911072243 Go \ub9c8\uc2a4\ud130\ud558\uae30 Author: Mihalis Tsoukalos; translated by Kihyuk Nam Publication Date: October 2018 ISBN: 979-1-16175-208-2 Reference: http://acornpub.co.kr/book/mastering-go Indonesian Bahasa Pemrograman Go Author: Sajarwo Anggai Publication Date: October 21, 2013 ISBN: \u2014 Reference: https://sajarwo87.wordpress.com/2013/10/21/buku-bahasa-pemrograman-go/ Dasar Pemrograman Golang Author: Noval Agung Prayogo Publication Date: Oktober 30, 2015 ISBN: \u2014 Reference: https://dasarpemrogramangolang.novalagung.com Italian Programmare in Linguaggio Go Author: Renato Mite Publication Date: 9 Oct 2016 ISBN: \u2014 Reference (Amazon): https://www.amazon.it/dp/B01M2URIVX Reference (Google Books): https://play.google.com/store/books/details/Renato_Mite_Programmare_in_Linguaggio_Go?id=4Ag6DQAAQBAJ Reference (Kobo Books): https://store.kobobooks.com/it-it/ebook/programmare-in-linguaggio-go Repository: rmite/gobook Polish J\u0119zyk Go. Poznaj i programuj Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Lech Lachowski Publication Date: July 2016 ISBN: 978-83-283-2467-1 Reference: https://helion.pl/ksiazki/jezyk-go-poznaj-i-programuj-alan-a-a-donovan-brian-w-kernighan,jgopop.htm Persian Go Succinctly Author: Amir Irani Publication Date: 10 Jun 2018 ISBN: \u2014 Repository: thedevsir/gosuccinctly Looking for contributors [Add Go books here that are looking for writers, editors, Gopher illustrators, and translators.] Go Web Development Cookbook Author: Arpit Aggarwal Publication Date: April 2018 ISBN: 9781787286740 Reference: https://www.amazon.in/Web-Development-Cookbook-full-stack-applications/dp/1787286746","title":"Books"},{"location":"Books/#english","text":"Go Programming Author: John P. Baugh Publication Date: June 16, 2010 ISBN: 978-1453636671 The Way to Go: A Thorough Introduction to the Go Programming Language Author: Ivo Balbaert Publication Date: March 7, 2012 ISBN: 978-1469769165 The Go Programming Language Phrasebook Author: David Chisnall Publication Date: April 30, 2012 ISBN: 978-0321817143 Reference: https://www.informit.com/store/go-programming-language-phrasebook-9780321817143 Programming in Go: Creating Applications for the 21 st Century Author: Mark Summerfield Publication Date: May 4, 2012 ISBN: 978-0321774637 Reference: https://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637 An Introduction to Programming in Go Author: Caleb Doxsey Publication Date: September 3, 2012 ISBN: 978-1478355823 Reference: https://www.golang-book.com/ Go Bootcamp: Everything you need to get started with Go (FREE) Author: Matt Aimonetti Publication Date: March 2014 ISBN: none: free ebook/PDF/online version Reference: http://www.golangbootcamp.com/ Mastering Concurrency in Go Author: Nathan Kozyra Publication Date: July 23, 2014 ISBN: 978-1783983483 Reference: https://www.packtpub.com/application-development/mastering-concurrency-go The Little Go Book Author: Karl Seguin Publication Date: October 2014 ISBN: none: free ebook/PDF/online version Reference: https://openmymind.net/The-Little-Go-Book/ Go Programming Blueprints Author: Mat Ryer Publication Date: January 23, 2015 ISBN: 978-1783988020 Reference: https://www.packtpub.com/application-development/go-programming-blueprints Level Up Your Web Apps With Go Author: Mal Curtis Publication Date: April, 2015 ISBN: 978-0992461294 Reference: https://learnable.com/books/level-up-your-web-apps-with-go Mastering Go Web Services Author: Nathan Kozyra Publication Date: April, 2015 ISBN: 9781783981304 Reference: https://www.packtpub.com/web-development/mastering-go-web-services Go In Action Authors: William Kennedy with Brian Ketelsen and Erik St. Martin Publication Date: November, 2015 ISBN: 9781617291784 Reference: https://www.manning.com/books/go-in-action Discount Code (44% off): goiaucf The Go Programming Language (Addison-Wesley Professional Computing Series) Author: Alan A.A. Donovan and Brian Kernighan Publication Date: November, 2015 ISBN: 978-0134190440 Reference: https://www.gopl.io/ Web Development with Go: Building Scalable Web Apps and RESTful Services Author: Shiju Varghese Publication Date: December, 2015 ISBN: 978-1484210536 Reference: https://www.apress.com/9781484210536 Introducing Go Author: Caleb Doxsey Publication Date: January 2016 ISBN: 978-1491941959 Reference: https://shop.oreilly.com/product/0636920046516.do Write webapps in Go without using a framework (Free e-book) Author: Suraj Patil Publication Date: October 2016 ISBN: NA since book is self published on http://leanpub.com References: thewhitetulip/web-dev-golang-anti-textbook , https://leanpub.com/antitextbookGo/ Learning Go Web Development Author: Nathan Kozyra Publication Date: April, 2016 ISBN: 978-1785282317 Reference: https://www.packtpub.com/web-development/learning-go-web-development Go Web Programming Author: Sau Sheong Chang Publication Date: July 22, 2016 ISBN: 9781617292569 Reference: http://manning.com/chang/ Go in Practice Authors: Matt Butcher and Matt Farina Publication Date: October 1, 2016 ISBN: 9781633430075 Reference: http://manning.com/butcher/ Go Programming Blueprints - Second Edition Author: Mat Ryer Publication Date: October 2016 ISBN: 978-1786468949 Reference: https://www.packtpub.com/application-development/go-programming-blueprints-second-edition Learning Go programming Author: Vladimir Vivien Publication Date: October 2016 ISBN: 978-1784395438 Reference: https://www.packtpub.com/application-development/learning-go-programming Go Recipes Author: Shiju Varghese Publication Date: November 2016 ISBN: 978-1-4842-1188-5 Reference: http://www.apress.com/us/book/9781484211892 Go Design Patterns Author: Mario Castro Contreras Publication Date: February 2017 ISBN: 978-1786466204 Reference: https://www.packtpub.com/application-development/go-design-patterns Go Cookbook Author: Aaron Torres Publication Date: June 2017 ISBN: 978-1783286836 Reference: https://www.packtpub.com/application-development/go-cookbook Go: Design Patterns for Real-World Projects Authors: Vladimir Vivien, Mario Castro Contreras, Mat Ryer Publication Date: June 2017 ISBN: 978-1788390552 Reference: https://www.packtpub.com/application-development/go-design-patterns-real-world-projects Web Development with Go: Learn to Create Real World Web Applications using Go Author: Jonathan Calhoun Publication Date: June 2017 ISBN: N/A (self published) Reference: http://usegolang.com Building Microservices with Go Author: Nic Jackson Publication Date: July 2017 ISBN: 978-1786468666 Reference: https://www.packtpub.com/application-development/building-microservices-go Concurrency in Go Author: Katherine Cox-Buday Publication Date: August 2017 ISBN: 978-1491941195 Reference: http://shop.oreilly.com/product/0636920046189.do Machine Learning With Go Author: Daniel Whitenack Publication Date: September 2017 ISBN: 978-1785882104 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go Go Systems Programming Author: Mihalis Tsoukalos Publication Date: September 2017 ISBN: 978-1787125643 Reference: https://www.packtpub.com/networking-and-servers/go-systems-programming Let's Go! Learn to Build Professional Web Applications With Go Author: Alex Edwards Publication Date: September 2017 ISBN: N/A (self-published) Reference: https://lets-go.alexedwards.net Learning Functional Programming in Go Author: Lex Sheehan Publication Date: November 2017 ISBN: 978-1787281394 Reference: https://www.packtpub.com/application-development/learning-functional-programming-go Cloud Native programming with Golang Author: Mina Andrawos, Martin Helmich Publication Date: December 2017 ISBN: 978-1787125988 Reference: https://www.packtpub.com/application-development/cloud-native-programming-golang Isomorphic Go Author: Kamesh Balasubramanian Publication Date: December 2017 ISBN: 978-1788394185 Reference: https://www.packtpub.com/web-development/isomorphic-go https://www.amazon.com/dp/1788394186 Security with Go Author: John Daniel Leon Publication Date: January 2018 ISBN: 978-1788627917 Reference: https://www.amazon.com/dp/1788627911 Go Standard Library Cookbook Author: Radomir Sohlich Publication Date: February 2018 ISBN: 9781788475273 Reference: https://www.amazon.com/dp/1788475275 Distributed Computing with Go Author: V.N. Nikhil Anurag Publication Date: February 2018 ISBN: 9781787125384 Reference: https://www.amazon.com/dp/1787125386 Go Web Development Cookbook Author: Arpit Aggarwal Publication Date: April 2018 ISBN: 9781787286740 Reference: https://www.amazon.com/Web-Development-Cookbook-full-stack-applications/dp/1787286746 Mastering Go Author: Mihalis Tsoukalos Publication Date: April 2018 ISBN: 9781788626545 Reference: https://www.amazon.com/Mastering-production-applications-concurrency-cloud-native/dp/1788626540 Echo Quick Start Guide Author: J. Ben Huson Publication Date: May 2018 ISBN: 9781789139433 Reference: https://www.amazon.com/dp/1789139430 Hands-On Serverless Applications with Go Author: Mohamed Labouardy Publication Date: August 2018 ISBN: 9781789134612 Reference: https://www.packtpub.com/application-development/hands-serverless-applications-go Hands-On Go Programming Author: Tarik Guney Publication Date: August 2018 ISBN: 9781789531756 Reference: https://www.packtpub.com/application-development/hands-go-programming Get Programming with Go Author: Nathan Youngman, Roger Peppe Publication Date: August 2018 ISBN: 9781617293092 Reference: https://www.manning.com/books/get-programming-with-go Go Machine Learning Projects Author: Xuanyi Chew Publication Date: November 2018 ISBN: 9781788993401 Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-machine-learning-projects Hands-On Dependency Injection in Go Author: Corey Scott Publication Date: November 2018 ISBN: 9781789132762 Reference: https://www.packtpub.com/application-development/hands-dependency-injection-go Hands-On Software Architecture with Golang Author: Jyotiswarup Raiturkar Publication Date: December 2018 ISBN: 9781788622592 Reference: https://www.packtpub.com/application-development/hands-software-architecture-golang Hands-On Fundamentals of Data Science with Go (Video) Author: Sanket Gupta Publication Date: December 2018 ISBN: 9781789539103 Reference: https://www.packtpub.com/big-data-and-business-intelligence/hands-fundamentals-data-science-go-video Building RESTful APIs with Go (Video) Author: Bartlomiej Walczak Publication Date: December 2018 ISBN: 978178961499 Reference: https://www.packtpub.com/application-development/building-restful-apis-go-video Go Web Scraping Quick Start Guide Author: Vincent Smith Publication Date: January 2019 ISBN: 9781789615708 Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-web-scraping-quick-start-guide Advanced Go Programming in 7 Days (Video) Author: Theofanis Despoudis Publication Date: January 2019 ISBN: 9781788994880 Reference: https://www.packtpub.com/application-development/advanced-go-programming-7-days-video Hands-On GUI Application Development in Go Author: Andrew Williams Publication Date: February 2019 ISBN: 9781789138412 Reference: https://www.packtpub.com/application-development/hands-gui-application-development-go Hands-On Full Stack Development with Go Author: Mina Andrawos Publication Date: March 2019 ISBN: 9781789130751 Reference: https://www.packtpub.com/web-development/hands-full-stack-development-go Learn Data Structures and Algorithms with Golang Author: Bhagvan Kommadi Publication Date: March 2019 ISBN: 9781789618501 Reference: https://www.packtpub.com/application-development/learn-data-structures-and-algorithms-golang Machine Learning With Go - Second Edition Author: Daniel Whitenack Publication Date: April 2019 ISBN: 9781789619898 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-second-edition?utm_source=Golang&utm_medium=referral&utm_campaign=Outreach Machine Learning with Go Quick Start Guide Author: Michael Bironneau and Toby Coleman Publication Date: May 2019 ISBN: 9781838550356 Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-quick-start-guide?utm_source=Golang&utm_medium=referral&utm_campaign=Outreach Mastering Go - Second Edition Author: Mihalis Tsoukalos Publication Date: 10 Sept 2019 ISBN: 9781838559335 Reference: https://www.packtpub.com/programming/mastering-go-second-edition Reference: https://www.amazon.com/Mastering-production-applications-concurrency-structures/dp/1838559337/ Hands-on Microservices with Go and MongoDB [Video] Author: Gautam Rege Publication Date: 22 Nov 2019 ISBN: 9781838648558 References: https://www.packtpub.com/web-development/hands-on-microservices-with-go-and-mongodb-video?utm_source=Golang&utm_medium=&utm_campaign=Outreach The Go Workshop (e-book) Author: Delio D'Anna Publication Date: December 30, 2019 ISBN: 9781838647940 References: https://www.packtpub.com/programming/the-go-workshop?utm_source=GoLang&utm_medium=Github&utm_campaign=OutreachB14177dollar5 Concise Go Author: Yaniv Astamnep Publication Date: January 22, 2020 ISBN: 9798602419887 References: https://www.amazon.com/Concise-Go-Yaniv-Astamnep-ebook/dp/B0844MWN92 https://www.amazon.com/Concise-Go-Yaniv-Astamnep/dp/B083XVZ2BZ Nonsequential and Distributed Programming with Go Author: Christian Maurer Publication Date: January 21, 2021 ISBN: 978-3-658-29781-7 (Softcover) and 978-3-658-20782-4 (eBook) References: https://www.springer.com/gp/book/9783658297817 Building Cross-Platform GUI Applications with Fyne Author: Andrew Williams Publication Date: January 2021 ISBN: 9781800563162 Reference: https://www.packtpub.com/product/building-cross-platform-gui-applications-with-fyne/9781800563162 Hands-on Go programming Author: Sachchidanand Singh, Prithvipal Singh Publication Date: February 2021 ISBN: 9789389898194 Reference: https://bpbonline.com/products/hands-on-go-programming","title":"English"},{"location":"Books/#early-access","text":"A Comprehensive Guide to Go Programming Authors: Baiju Muthukadan Publication Date: June 10, 2015 ISBN: \u2014 Reference: http://golang.muthukadan.net/ WebAssembly in Action Author: Gerard Gallant Publication Date: Spring 2019 (estimated) ISBN: 9781617295744 Reference: https://www.manning.com/books/webassembly-in-action","title":"Early Access"},{"location":"Books/#pre-order","text":"Black Hat Go Author: Tom Steele, Chris Patten, and Dan Kottmann Publication Date: March 2018 ISBN: 978-1-59327-865-6 Reference: https://www.nostarch.com/blackhatgo","title":"Pre-order"},{"location":"Books/#available-without-publication-date","text":"Learning Go (e-book) Author: Miek Gieben Publication Date: \u2014 ISBN: \u2014 Reference: http://archive.miek.nl/projects/learninggo/ Network Programming with Go (e-book) Author: Jan Newmarch Publication Date: \u2014 ISBN: \u2014 References: http://jan.newmarch.name/go/ Go Bootcamp (e-book) Author: Matt Aimonetti Publication Date: \u2014 ISBN: \u2014 References: http://www.golangbootcamp.com/ A Go Developer's Notebook (e-book) Author: Eleanor McHugh Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/GoNotebook Go, The Standard Library (e-book) Author: Daniel Huckstep Publication Date: \u2014 ISBN: \u2014 References: http://thestandardlibrary.com/go.html Practical Cryptography with Go (e-book) Author: Kyle Isom Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/gocrypto The Ultimate Guide to Building Database-Driven Apps with Go (e-book) Author: Baron Schwartz Publication Date: \u2014 ISBN: \u2014 References: https://vividcortex.com/resources/building-database-driven-apps-with-go/ Building Web Apps with Go (e-book) Author: Jeremy Saenz Publication Date: \u2014 ISBN: \u2014 References: https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details How do I Write and Deploy Simple Web Apps with Go? (e-book) Author: Satish Talim Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/howdoibuildawebappwithgo Test-driven development with Go (e-book) Author: Yigal Duppen Publication Date: \u2014 ISBN: \u2014 References: https://leanpub.com/golang-tdd Learn Go (e-book) Author: Gyu-ho Lee Publication Date: \u2014 ISBN: \u2014 References: gyuho/learn#contents Learn Golang the Hard Way (e-book) Author: Laszlo Csontos Publication Date: \u2014 ISBN: \u2014 References: http://www.learngolangthehardway.org/ Go 101 (e-book) Author: Tapir Liu Publication Date: \u2014 ISBN: \u2014 References: https://go101.org Creative DIY Microcontroller Projects with TinyGo and WebAssembly Author: Tobias Theel Publication Date: April 2021 (est.) ISBN: 9781800560208 References: https://www.packtpub.com/product/creative-diy-microcontroller-projects-with-tinygo-and-webassembly/9781800560208","title":"Available without Publication Date"},{"location":"Books/#cancelled-or-status-indeterminable","text":"Microservices in Go Authors: Matthew Campbell Publication Date: Fall 2015 (est.) ISBN: \u2014 Reference: http://microservicesingo.com/ Status: Cancelled per O'Reilly Employee","title":"Cancelled or Status Indeterminable"},{"location":"Books/#chinese","text":"Go\u8bed\u8a00\u00b7\u4e91\u52a8\u529b Author: \u6a0a\u8679\u5251\uff08fango\uff09 Publication Date: 2012-06 ISBN: 978-7-115-28307-8 Reference: http://www.ituring.com.cn/book/1040 Go\u8bed\u8a00\u7f16\u7a0b Author: \u8bb8\u5f0f\u4f1f Publication Date: 2012-08 ISBN: 978-7-115-29036-6 Reference: http://www.ituring.com.cn/book/967 Go Web\u7f16\u7a0b Author: \u8c22\u5b5f\u519b Publication Date: 2013-05 ISBN: 9787121200915 Reference: astaxie/build-web-application-with-golang Go\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1 (Programming in Go: Creating Applications for the 21 st Century) Author: Mark Summerfield Translator: \u8bb8\u5f0f\u4f1f, \u5415\u6842\u534e, \u5f90\u7acb, \u4f55\u674e\u77f3 Publication Date: 2013-08 ISBN: 978-7-115-31790-2 Reference: https://www.ptpress.com.cn/shopping/buy?bookId=27c4a9e0-e3df-4cb4-8992-b42c2e4368e8 Go\u5e76\u53d1\u7f16\u7a0b\u5b9e\u6218 Author: \u90dd\u6797 Publication Date: 2015-01-01 ISBN: 9787115373984 Reference: http://www.ptpress.com.cn/Book.aspx?id=39783 \u5b66\u4e60 Go \u8bed\u8a00 (e-book / Translation) Author: Xing Xing (mikespook) Publication Date: \u2014 ISBN: \u2014 Reference: http://www.mikespook.com/learning-go/ Go \u5b66\u4e60\u7b14\u8bb0 - \u7b2c\u56db\u7248 (e-book) Author: \u96e8\u75d5\uff08qyuhen\uff09 Publication Date: \u2014 ISBN: \u2014 Reference: qyuhen/book Go\u8bed\u8a00\u9ad8\u7ea7\u7f16\u7a0b (\u5b9e\u4f53\u4e66 & e-book) Author: \u67f4\u6811\u6749\uff08chai2010\uff09 Publication Date: 2019-07 ISBN: 978-7-115-51036-5 Reference: https://www.epubit.com/bookDetails?id=N40090 Reference: chai2010/advanced-go-programming-book Go\u8bed\u6cd5\u6811 (e-book) Author: \u67f4\u6811\u6749\uff08chai2010\uff09 Publication Date: \u2014 ISBN: \u2014 Reference: chai2010/go-ast-book Go\u8bed\u8a00101 (e-book) Author: \u8001\u8c98 Publication Date: \u2014 ISBN: \u2014 References: https://gfw.go101.org/","title":"Chinese"},{"location":"Books/#japanese","text":"\u306f\u3058\u3081\u3066\u306e\u300cGo\u8a00\u8a9e\u300d Author: \u8328\u6728 \u9686\u5f70 Publication Date: 2010-11 ISBN: 978-4777515592 Reference: Go\u8a00\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580on Google App Engine Author: \u6a2a\u5c71 \u9686\u53f8 Publication Date: 2011-12 ISBN: 978-4798031804 Reference: \u306f\u3058\u3081\u3066\u306eGoogle App Engine Go\u8a00\u8a9e\u7de8 Author: \u8328\u6728 \u9686\u5f70 Publication Date: 2012-2 ISBN: 978-4777516605 Reference: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo\u30d5\u30ec\u30fc\u30ba\u30d6\u30c3\u30af Author: David Chisnall (\u8457), \u30c7\u30a4\u30d3\u30c3\u30c9\u30fb\u30c1\u30ba\u30ca\u30fc\u30eb (\u8457), \u67f4\u7530 \u82b3\u6a39 (\u7ffb\u8a33) Publication Date: 2012-10 ISBN: 978-4864010962 Reference: \u57fa\u790e\u304b\u3089\u308f\u304b\u308b Go\u8a00\u8a9e Author: \u53e4\u5ddd \u6607 Publication Date: 2012-11 ISBN: 978-4863541177 Reference: Go\u8a00\u8a9e\u306b\u3088\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a Author: Mat Ryer (\u8457)\u3001\u9d5c\u98fc \u6587\u654f (\u76e3\u8a33)\u3001\u7267\u91ce \u8061 (\u8a33) Publication Date: 2016-01 ISBN: 978-4-87311-752-2 Reference: http://www.oreilly.co.jp/books/9784873117522/ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Yoshiki Shibata Publication Date: 20 June 2016 ISBN: 978-4-62130-025-1 Reference: http://www.gopl.io/translations.html \u307f\u3093\u306a\u306eGo\u8a00\u8a9e Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a Publication Date: 9 Sep 2016 ISBN: 978-4774183923 Reference: http://www.amazon.co.jp/exec/obidos/ASIN/477418392X/ Go\u8a00\u8a9e\u306b\u3088\u308b\u4e26\u884c\u51e6\u7406 Authors: Katherine Cox-Buday\uff08\u8457\uff09\u3001\u5c71\u53e3 \u80fd\u8fea\uff08\u8a33\uff09 Publication Date: 26 Oct 2018 ISBN: 978-4-87311-846-8 Reference: https://www.oreilly.co.jp/books/9784873118468/ \u6539\u8a022\u7248 \u307f\u3093\u306a\u306eGo\u8a00\u8a9e Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u4e0a\u7530 \u62d3\u4e5f, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a Publication Date: August 1, 2019 ISBN: 978-4297107277 Reference: https://gihyo.jp/book/2019/978-4-297-10727-7","title":"Japanese"},{"location":"Books/#french","text":"Programmer en Go - Pourquoi ? Comment ? Author: Rudy Rigot Publication Date: 24 Jan 2018 ISBN: 978-2-8227-0660-5 Reference: https://www.d-booker.fr/go-bases/499-programmer-en-go-pourquoi-comment.html","title":"French"},{"location":"Books/#german","text":"Programmierung in Google Go (not available for buying any more) Authors: Rainer Feike and Steffen Blass Publication Date: 2010-11 ISBN: 978-3-8632-4722-5 Reference (Amazon): http://www.amazon.de/Programmierung-Google-Beispiele-professionelle-Anwendung/dp/3827330092 Reference (Google Books): https://books.google.de/books?id=E4IL5dT1yLsC&printsec=frontcover&hl=de#v=onepage&q&f=false Systemprogrammierung in Google Go Author: Frank M\u00fcller Publication Date: 2011-01 ISBN: 978-3-89864-712-0 Reference: http://dpunkt.de/buecher/3762/-systemprogrammierung-in-google-go.html Nichtsequentielle und Verteilte Programmierung mit Go (4 th edition) (available as print and e-book) Author: Christian Maurer Publication Date: 2019-07 ISBN: 978-3-658-26289-1 (Softcover) and 978-3-658-26290-7 (eBook) Reference: https://www.springer.com/de/book/9783658262891 Einstieg in Google Go (e-book) Author: Christian Himpel and Mario Deilmann Publication Date: 2012-04 ISBN: 978-3-86802-415-9 Reference: http://entwickler.de/press/Einstieg-in-Google-Go","title":"German"},{"location":"Books/#brazilian-portuguese","text":"A Linguagem de Programa\u00e7\u00e3o Go Author: Alan A. A. Donovan, Brian W. Kernighan Publication Date: 2017 ISBN: 978-85-7522-546-2 Reference: https://novatec.com.br/livros/linguagem-de-programacao-go/ Programando em Go: crie aplica\u00e7\u00f5es com a linguagem do Google Author: Caio Filipini Publication Date: 2014-07-01 ISBN: 978-85-66250-49-7 Reference: http://www.casadocodigo.com.br/products/livro-google-go Introdu\u00e7\u00e3o \u00e0 Linguagem Go: Crie Programas Escal\u00e1veis e Confi\u00e1veis Author: Caleb Doxsey Publication Date: 2016-08-04 ISBN: 978-85-75224-89-2 Reference: http://shop.oreilly.com/product/0636920046516.do","title":"Brazilian Portuguese"},{"location":"Books/#russian","text":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Go Author: \u041c\u0430\u0440\u043a \u0421\u0430\u043c\u043c\u0435\u0440\u0444\u0438\u043b\u044c\u0434 Publication Date: 2013-02-14 ISBN: 978-5-94074-854-0 Reference: http://dmkpress.com/catalog/computer/programming/978-5-94074-854-0/ \u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Go Author: \u0410\u043b\u0430\u043d \u0410. \u0410. \u0414\u043e\u043d\u043e\u0432\u0430\u043d, \u0411\u0440\u0430\u0439\u0430\u043d \u0423. \u041a\u0435\u0440\u043d\u0438\u0433\u0430\u043d Publication Date: 2016-04-21 ISBN: 978-5-8459-2051-5 Reference: http://www.williamspublishing.com/Books/978-5-8459-2051-5.html Go \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 Author: \u0411\u0430\u0442\u0447\u0435\u0440 \u041c., \u0424\u0430\u0440\u0438\u043d\u0430 \u041c. Publication Date: 2017-01 ISBN: 978-5-97060-477-9 Reference: http://dmkpress.com/catalog/computer/programming/978-5-97060-477-9/ Golang \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438: \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 Go Author: \u0426\u0443\u043a\u0430\u043b\u043e\u0441 \u041c. Publication Date: 2020 ISBN: 978-5-4461-1617-1 Reference: https://www.piter.com/product/golang-dlya-profi-rabota-s-setyu-mnogopotochnost-struktury-dannyh-i-mashinnoe-obuchenie-s-go","title":"Russian"},{"location":"Books/#espa\u00f1ol","text":"Aprende Go en Y minutos https://go101.org Author: Nacho Pacheco Publication Date: 2015-02-24 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/aprende-go-en-y-minutos/ Constr\u00aduyendo\u00ad aplic\u00adacione\u00ads Web \u00adcon Go Author: Nacho Pacheco Publication Date: 2015-02-18 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/cawg/ \u00a1Go en Espa\u00f1ol! Author: Nacho Pacheco Publication Date: 2015-03-22 ISBN: \u2014 Reference: https://www.gitbook.com/book/nachopacheco/go-es/","title":"Espa\u00f1ol"},{"location":"Books/#korean","text":"\uac00\uc7a5 \ube68\ub9ac \ub9cc\ub098\ub294 Go \uc5b8\uc5b4 Author: \uc774\uc7ac\ud64d Publication Date: June 2015 ISBN: 978-8-96618-990-8 Reference: http://www.pyrasis.com/private/2015/06/01/publish-go-for-the-really-impatient-book \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \ud558\ub8fb\ubc24\uc5d0 \uc77d\ub294 Go \uc5b8\uc5b4 \uc774\uc57c\uae30 Author: \uc2e0\uc81c\uc6a9 Publication Date: December 2015 ISBN: 978-8-96848-806-1 Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=E8544486990 \ub514\uc2a4\ucee4\ubc84\ub9ac Go \uc5b8\uc5b4 Author: \uc5fc\uc7ac\ud604 Publication Date: March 2016 ISBN: 9788-96848-268-7 Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=B5279497767 Go \uc5b8\uc5b4 \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d \ucca0\uc800 \uc785\ubb38 Author: \uc7a5\uc7ac\ud734 Publication Date: March 2016 ISBN: 979-1-18697-881-8 Reference: http://www.gilbut.co.kr/book/bookView.aspx?bookcode=BN001434 Go \uc778 \uc561\uc158 Authors: William Kennedy with Brian Ketelsen and Erik St. Martin; translated by Hyunhee Jang Publication Date: June 2016 ISBN: 979-1-18589-053-1 Reference: http://jpub.tistory.com/585 The Go Programming Language Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Seung Lee Publication Date: June 2016 ISBN: 978-0-13419-044-0 Reference: http://www.acornpub.co.kr/book/go-programming Go \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d Author: Sau Sheong Chang; translated by Jinwook Jeong Publication Date: March 2017 ISBN: 979-1-18669-731-3 Reference: http://www.bjpublic.co.kr/skin12/productSearchView.php?board_data=aWR4PTIxMyZzdGFydFBhZ2U9MCZsaXN0Tm89MzM \ud504\ub85c\uc81d\ud2b8\ub85c \uc644\uc131\ud558\ub294 Go \ud504\ub85c\uadf8\ub798\ubc0d Author: Mat Ryer; translated by Soonbeom Kwon Publication Date: August 2017 ISBN: 979-1-16175-032-3 Reference: http://www.acornpub.co.kr/book/go-blueprints-2 Go \uc5b8\uc5b4 \uc2e4\uc804 \ud14c\ud06c\ub2c9 Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a; translated by Hyuntae Park Publication Date: August 2017 ISBN: 979-1-16175-026-2 Reference: http://www.acornpub.co.kr/book/go-language-minna Go Cookbook Author: Aaron Torres; transalted by Sangsik Lee Publication Date: December 2017 ISBN: 979-1-16175-088-0 Reference: http://www.acornpub.co.kr/book/go-cookbook Go \uc5b8\uc5b4\ub97c \ud65c\uc6a9\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac1c\ubc1c Author: Nic Jackson; translated by Sangsik Lee Publication Date: July 2018 ISBN: 979-1-16175-190-0 Reference: http://www.acornpub.co.kr/book/microservices-go Go \uc5b8\uc5b4 \uc2dc\uc791\ud558\uae30 Author: \ubc15\ud61c\uc601, \uc11c\uc815\uc778 Publication Date: September 2018 ISBN: 979-1-15600-606-0 Reference: http://www.hongpub.co.kr/sub.php?goPage=view_product&flashpage=&Code=20180911072243 Go \ub9c8\uc2a4\ud130\ud558\uae30 Author: Mihalis Tsoukalos; translated by Kihyuk Nam Publication Date: October 2018 ISBN: 979-1-16175-208-2 Reference: http://acornpub.co.kr/book/mastering-go","title":"Korean"},{"location":"Books/#indonesian","text":"Bahasa Pemrograman Go Author: Sajarwo Anggai Publication Date: October 21, 2013 ISBN: \u2014 Reference: https://sajarwo87.wordpress.com/2013/10/21/buku-bahasa-pemrograman-go/ Dasar Pemrograman Golang Author: Noval Agung Prayogo Publication Date: Oktober 30, 2015 ISBN: \u2014 Reference: https://dasarpemrogramangolang.novalagung.com","title":"Indonesian"},{"location":"Books/#italian","text":"Programmare in Linguaggio Go Author: Renato Mite Publication Date: 9 Oct 2016 ISBN: \u2014 Reference (Amazon): https://www.amazon.it/dp/B01M2URIVX Reference (Google Books): https://play.google.com/store/books/details/Renato_Mite_Programmare_in_Linguaggio_Go?id=4Ag6DQAAQBAJ Reference (Kobo Books): https://store.kobobooks.com/it-it/ebook/programmare-in-linguaggio-go Repository: rmite/gobook","title":"Italian"},{"location":"Books/#polish","text":"J\u0119zyk Go. Poznaj i programuj Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Lech Lachowski Publication Date: July 2016 ISBN: 978-83-283-2467-1 Reference: https://helion.pl/ksiazki/jezyk-go-poznaj-i-programuj-alan-a-a-donovan-brian-w-kernighan,jgopop.htm","title":"Polish"},{"location":"Books/#persian","text":"Go Succinctly Author: Amir Irani Publication Date: 10 Jun 2018 ISBN: \u2014 Repository: thedevsir/gosuccinctly","title":"Persian"},{"location":"Books/#looking-for-contributors","text":"[Add Go books here that are looking for writers, editors, Gopher illustrators, and translators.] Go Web Development Cookbook Author: Arpit Aggarwal Publication Date: April 2018 ISBN: 9781787286740 Reference: https://www.amazon.in/Web-Development-Cookbook-full-stack-applications/dp/1787286746","title":"Looking for contributors"},{"location":"BoundingResourceUse/","text":"Bounding resource use To bound a program's use of a limited resource - like memory - have goroutines synchronize their use of that resource using a buffered channel (i.e., use the channel as a semaphore): const ( AvailableMemory = 10 << 20 // 10 MB AverageMemoryPerRequest = 10 << 10 // 10 KB MaxOutstanding = AvailableMemory / AverageMemoryPerRequest ) var sem = make ( chan int , MaxOutstanding ) func Serve ( queue chan * Request ) { for { sem <- 1 // Block until there's capacity to process a request. req := <- queue go handle ( req ) // Don't wait for handle to finish. } } func handle ( r * Request ) { process ( r ) // May take a long time & use a lot of memory or CPU <- sem // Done; enable next request to run. } References Effective Go's discussion of channels: https://golang.org/doc/effective_go.html#channels","title":"BoundingResourceUse"},{"location":"BoundingResourceUse/#bounding-resource-use","text":"To bound a program's use of a limited resource - like memory - have goroutines synchronize their use of that resource using a buffered channel (i.e., use the channel as a semaphore): const ( AvailableMemory = 10 << 20 // 10 MB AverageMemoryPerRequest = 10 << 10 // 10 KB MaxOutstanding = AvailableMemory / AverageMemoryPerRequest ) var sem = make ( chan int , MaxOutstanding ) func Serve ( queue chan * Request ) { for { sem <- 1 // Block until there's capacity to process a request. req := <- queue go handle ( req ) // Don't wait for handle to finish. } } func handle ( r * Request ) { process ( r ) // May take a long time & use a lot of memory or CPU <- sem // Done; enable next request to run. }","title":"Bounding resource use"},{"location":"BoundingResourceUse/#references","text":"Effective Go's discussion of channels: https://golang.org/doc/effective_go.html#channels","title":"References"},{"location":"CSSStyleGuide/","text":"Go CSS Coding Guidelines Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars. Go's naming conventions are adapted from Medium's style guide and the work being done in the SUIT CSS framework . Which is to say, it relies on structured class names and meaningful hyphens (i.e., not using hyphens merely to separate words). This is to help work around the current limits of applying CSS to the DOM (i.e., the lack of style encapsulation) and to better communicate the relationships between classes. We require plain CSS over preprocessors like LESS, SASS, etc. This is to avoid additional tooling dependencies. JavaScript syntax: js-<targetName> JavaScript-specific classes reduce the risk that changing the structure or theme of components will inadvertently affect any required JavaScript behavior and complex functionality. You must use these classes if you interact with the DOM via JavaScript. In practice this looks like this: <a href=\"/login\" class=\"btn btn-primary js-login\"></a> Again, JavaScript-specific classes should not, under any circumstances, be styled. Components Syntax: [namespace-]<ComponentName>[-descendantName][--modifierName] Component driven development offers several benefits when reading and writing HTML and CSS: It helps to distinguish between the classes for the root of the component, descendant elements, and modifications. It keeps the specificity of selectors low. It helps to decouple presentation semantics from document semantics. You can think of components as custom elements that enclose specific semantics, styling, and behavior. namespace (optional) If necessary, components can be prefixed with a namespace. For example, you may wish to avoid the potential for collisions between libraries and your custom components by prefixing all your components with a namespace. .godoc-Button { /* \u2026 */ } .godoc-Tabs { /* \u2026 */ } This makes it clear, when reading the HTML, which components are part of your library. ComponentName The component's name must be written in camel case. .MyComponent { /* \u2026 */ } <article class=\"MyComponent\"> \u2026 </article> ComponentName\u2013modifierName A component modifier is a class that modifies the presentation of the base component in some form. Modifier names must be written in camel case and be separated from the component name by two hyphens. The class should be included in the HTML in addition to the base component class. /* Core button */ .Button { /* \u2026 */ } /* Default button style */ .Button--default { /* \u2026 */ } <button class=\"Button Button--primary\">\u2026</button> ComponentName-descendantName A component descendant is a class that is attached to a descendant node of a component. It's responsible for applying presentation directly to the descendant on behalf of a particular component. Descendant names must be written in camel case. <article class=\"Tweet\"> <header class=\"Tweet-header\"> <img class=\"Tweet-avatar\" src=\"{$src}\" alt=\"{$alt}\"> \u2026 </header> <div class=\"Tweet-body\"> \u2026 </div> </article> ComponentName[aria- ] Almost always, component states can be represented using ARIA (aria-expanded, aria-disabled, etc.) so they are recommended for state-based modifications of components. In the very rare case that there is a state that cannot be represented using ARIA, a CSS class of the format is-stateName can be used. The CSS state name must be Camel case. Never style these attributes/classes directly; they should always be used as an adjoining class or attribute. JS can add/remove these attributes/classes. Every component must define its own styles for the state (as they are scoped to the component). .Tweet { /* \u2026 */ } .Tweet[aria-expanded=true] { /* \u2026 */ } .Tweet.is-blorked { /* \u2026 */ } <article class=\"Tweet is-blorked\" aria-expanded=\"true\"> \u2026 </article> Colors Prefer lower-case hex values, RGB, or RGBA over named, HSL, or HSLA values. Use short-form hex values where applicable. Right: #fff; #f1f2f3; rgb(50, 50, 50); rgba(50, 50, 50, 0.2); Wrong: #FFFFFF; #F1F2F3; white; hsl(120, 100%, 50%); hsla(120, 100%, 50%, 1); Formatting The following are some high level page formatting style rules. Spacing CSS rules should be comma separated but live on new lines: Right: .Content, .Content-edit { \u2026 } Wrong: .Content, .Content-edit { \u2026 } CSS blocks should be separated by a single new line. not two. not 0. Right: .Content { \u2026 } .Content-edit { \u2026 } Wrong: .Content { \u2026 } .Content-edit { \u2026 } Quotes Quotes are optional in CSS. We use single quotes as it is visually clearer that the string is not a selector or a style property. Right: background-image: url('/img/you.jpg'); font-family: 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial; Wrong: background-image: url(/img/you.jpg); font-family: Helvetica Neue Light, Helvetica Neue, Helvetica, Arial; Write Simple Selectors Avoid sequences of simple selectors (\"compound selectors\"). The only exceptions are state-based selectors that are dynamically added to indicate a state change (for example, a tweet that has \"[aria-expanded=true]\"). Right: /* State-based simple selector. */ tweet[aria-expanded=true] { ... } Wrong: /* Sequence of simple selectors. */ button.foo.bar { ... } Images Add height and width attributes to images in the html markup to help minimize layout shift during page load. <img src=\"url/to/image.png\" height=\"240\" width=\"160\">","title":"CSSStyleGuide"},{"location":"CSSStyleGuide/#go-css-coding-guidelines","text":"Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars. Go's naming conventions are adapted from Medium's style guide and the work being done in the SUIT CSS framework . Which is to say, it relies on structured class names and meaningful hyphens (i.e., not using hyphens merely to separate words). This is to help work around the current limits of applying CSS to the DOM (i.e., the lack of style encapsulation) and to better communicate the relationships between classes. We require plain CSS over preprocessors like LESS, SASS, etc. This is to avoid additional tooling dependencies.","title":"Go CSS Coding Guidelines"},{"location":"CSSStyleGuide/#javascript","text":"syntax: js-<targetName> JavaScript-specific classes reduce the risk that changing the structure or theme of components will inadvertently affect any required JavaScript behavior and complex functionality. You must use these classes if you interact with the DOM via JavaScript. In practice this looks like this: <a href=\"/login\" class=\"btn btn-primary js-login\"></a> Again, JavaScript-specific classes should not, under any circumstances, be styled.","title":"JavaScript"},{"location":"CSSStyleGuide/#components","text":"Syntax: [namespace-]<ComponentName>[-descendantName][--modifierName] Component driven development offers several benefits when reading and writing HTML and CSS: It helps to distinguish between the classes for the root of the component, descendant elements, and modifications. It keeps the specificity of selectors low. It helps to decouple presentation semantics from document semantics. You can think of components as custom elements that enclose specific semantics, styling, and behavior.","title":"Components"},{"location":"CSSStyleGuide/#namespace-optional","text":"If necessary, components can be prefixed with a namespace. For example, you may wish to avoid the potential for collisions between libraries and your custom components by prefixing all your components with a namespace. .godoc-Button { /* \u2026 */ } .godoc-Tabs { /* \u2026 */ } This makes it clear, when reading the HTML, which components are part of your library.","title":"namespace (optional)"},{"location":"CSSStyleGuide/#componentname","text":"The component's name must be written in camel case. .MyComponent { /* \u2026 */ } <article class=\"MyComponent\"> \u2026 </article>","title":"ComponentName"},{"location":"CSSStyleGuide/#componentname--modifiername","text":"A component modifier is a class that modifies the presentation of the base component in some form. Modifier names must be written in camel case and be separated from the component name by two hyphens. The class should be included in the HTML in addition to the base component class. /* Core button */ .Button { /* \u2026 */ } /* Default button style */ .Button--default { /* \u2026 */ } <button class=\"Button Button--primary\">\u2026</button>","title":"ComponentName--modifierName"},{"location":"CSSStyleGuide/#componentname-descendantname","text":"A component descendant is a class that is attached to a descendant node of a component. It's responsible for applying presentation directly to the descendant on behalf of a particular component. Descendant names must be written in camel case. <article class=\"Tweet\"> <header class=\"Tweet-header\"> <img class=\"Tweet-avatar\" src=\"{$src}\" alt=\"{$alt}\"> \u2026 </header> <div class=\"Tweet-body\"> \u2026 </div> </article>","title":"ComponentName-descendantName"},{"location":"CSSStyleGuide/#componentnamearia-","text":"Almost always, component states can be represented using ARIA (aria-expanded, aria-disabled, etc.) so they are recommended for state-based modifications of components. In the very rare case that there is a state that cannot be represented using ARIA, a CSS class of the format is-stateName can be used. The CSS state name must be Camel case. Never style these attributes/classes directly; they should always be used as an adjoining class or attribute. JS can add/remove these attributes/classes. Every component must define its own styles for the state (as they are scoped to the component). .Tweet { /* \u2026 */ } .Tweet[aria-expanded=true] { /* \u2026 */ } .Tweet.is-blorked { /* \u2026 */ } <article class=\"Tweet is-blorked\" aria-expanded=\"true\"> \u2026 </article>","title":"ComponentName[aria-]"},{"location":"CSSStyleGuide/#colors","text":"Prefer lower-case hex values, RGB, or RGBA over named, HSL, or HSLA values. Use short-form hex values where applicable. Right: #fff; #f1f2f3; rgb(50, 50, 50); rgba(50, 50, 50, 0.2); Wrong: #FFFFFF; #F1F2F3; white; hsl(120, 100%, 50%); hsla(120, 100%, 50%, 1);","title":"Colors"},{"location":"CSSStyleGuide/#formatting","text":"The following are some high level page formatting style rules.","title":"Formatting"},{"location":"CSSStyleGuide/#spacing","text":"CSS rules should be comma separated but live on new lines: Right: .Content, .Content-edit { \u2026 } Wrong: .Content, .Content-edit { \u2026 } CSS blocks should be separated by a single new line. not two. not 0. Right: .Content { \u2026 } .Content-edit { \u2026 } Wrong: .Content { \u2026 } .Content-edit { \u2026 }","title":"Spacing"},{"location":"CSSStyleGuide/#quotes","text":"Quotes are optional in CSS. We use single quotes as it is visually clearer that the string is not a selector or a style property. Right: background-image: url('/img/you.jpg'); font-family: 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial; Wrong: background-image: url(/img/you.jpg); font-family: Helvetica Neue Light, Helvetica Neue, Helvetica, Arial;","title":"Quotes"},{"location":"CSSStyleGuide/#write-simple-selectors","text":"Avoid sequences of simple selectors (\"compound selectors\"). The only exceptions are state-based selectors that are dynamically added to indicate a state change (for example, a tweet that has \"[aria-expanded=true]\"). Right: /* State-based simple selector. */ tweet[aria-expanded=true] { ... } Wrong: /* Sequence of simple selectors. */ button.foo.bar { ... }","title":"Write Simple Selectors"},{"location":"CSSStyleGuide/#images","text":"Add height and width attributes to images in the html markup to help minimize layout shift during page load. <img src=\"url/to/image.png\" height=\"240\" width=\"160\">","title":"Images"},{"location":"ChromeOS/","text":"Introduction EDIT: You don't need to compile from source in Developer mode, you can just use the Chromebrew -provided version. EDIT2: If your Chromebook is relatively new, you can enable the Linux VM now built into ChromeOS to install Go without developer mode. Follow the steps from the following Google Support article to enable this feature- https://support.google.com/chromebook/answer/9145439 . This has been tested on a Samsung Chromebook Plus on version 71.0.3578.127. If this feature is not available for you, you will need to enable Developer Mode. This tutorial will show you how to install, build, and run Go on Chrome OS. Please note this has only been tested on a 64GB LTE Pixel, however it should work on other Chromebooks. Note that enabling developer mode reduces the security guarantees offered by Chrome OS. Install Go First download the latest version of Go for Linux from the Go Downloads page . After that, open a shell by hitting (CTRL+ALT+T) and typing in shell then hit enter. Then extract it using the following command (when replacing < Go Linux package > with the name of the file you downloaded): sudo tar xpvf ~/Downloads/< Go Linux package > -C /usr/local Go should now be installed you can test this by typing /usr/local/go/bin/go . If it installed correctly, you should see the Go help prompt. Go is now installed. Create a Workspace To keep this simple just create a folder called /usr/local/go/work . Also, create a folder called src inside /usr/local/go/work/ . Set PATH Add the following to ~/.bashrc : export GOPATH=\"/usr/local/go/work\" export PATH=\"${PATH}:/usr/local/go/bin:${GOPATH}/bin\" This will allow you to run your Go programs in your shell. Test if it worked First create a folder inside of your /usr/local/go/src folder. After that create a file in your folder called hello.go with the following in it: package main import \"fmt\" func main () { fmt . Println ( \"Hello, Chrome OS!\" ) } Now, run go install hello . Then, run ${GOPATH}/bin/hello (or just hello if you setup your GOPATH above) and you should see Hello, Chrome OS! . Reporting bugs Please go to Issues to report any issues you have.","title":"ChromeOS"},{"location":"ChromeOS/#introduction","text":"","title":"Introduction"},{"location":"ChromeOS/#edit-you-dont-need-to-compile-from-source-in-developer-mode-you-can-just-use-the-chromebrew-provided-version","text":"","title":"EDIT: You don't need to compile from source in Developer mode, you can just use the Chromebrew-provided version."},{"location":"ChromeOS/#edit2-if-your-chromebook-is-relatively-new-you-can-enable-the-linux-vm-now-built-into-chromeos-to-install-go-without-developer-mode-follow-the-steps-from-the-following-google-support-article-to-enable-this-feature--httpssupportgooglecomchromebookanswer9145439-this-has-been-tested-on-a-samsung-chromebook-plus-on-version-7103578127-if-this-feature-is-not-available-for-you-you-will-need-to-enable-developer-mode","text":"This tutorial will show you how to install, build, and run Go on Chrome OS. Please note this has only been tested on a 64GB LTE Pixel, however it should work on other Chromebooks. Note that enabling developer mode reduces the security guarantees offered by Chrome OS.","title":"EDIT2: If your Chromebook is relatively new, you can enable the Linux VM now built into ChromeOS to install Go without developer mode. Follow the steps from the following Google Support article to enable this feature- https://support.google.com/chromebook/answer/9145439. This has been tested on a Samsung Chromebook Plus on version 71.0.3578.127. If this feature is not available for you, you will need to enable Developer Mode."},{"location":"ChromeOS/#install-go","text":"First download the latest version of Go for Linux from the Go Downloads page . After that, open a shell by hitting (CTRL+ALT+T) and typing in shell then hit enter. Then extract it using the following command (when replacing < Go Linux package > with the name of the file you downloaded): sudo tar xpvf ~/Downloads/< Go Linux package > -C /usr/local Go should now be installed you can test this by typing /usr/local/go/bin/go . If it installed correctly, you should see the Go help prompt. Go is now installed.","title":"Install Go"},{"location":"ChromeOS/#create-a-workspace","text":"To keep this simple just create a folder called /usr/local/go/work . Also, create a folder called src inside /usr/local/go/work/ .","title":"Create a Workspace"},{"location":"ChromeOS/#set-path","text":"Add the following to ~/.bashrc : export GOPATH=\"/usr/local/go/work\" export PATH=\"${PATH}:/usr/local/go/bin:${GOPATH}/bin\" This will allow you to run your Go programs in your shell.","title":"Set PATH"},{"location":"ChromeOS/#test-if-it-worked","text":"First create a folder inside of your /usr/local/go/src folder. After that create a file in your folder called hello.go with the following in it: package main import \"fmt\" func main () { fmt . Println ( \"Hello, Chrome OS!\" ) } Now, run go install hello . Then, run ${GOPATH}/bin/hello (or just hello if you setup your GOPATH above) and you should see Hello, Chrome OS! .","title":"Test if it worked"},{"location":"ChromeOS/#reporting-bugs","text":"Please go to Issues to report any issues you have.","title":"Reporting bugs"},{"location":"CodeReview/","text":"Be sure to familiarize yourself with the code review process from the official Contribution Guide first. Reviewer Parlance There are several terms code reviews may use that you should become familiar with. LGTM \u2014 looks good to me SGTM \u2014 sounds good to me PTAL \u2014 please take a look s/foo/bar/ \u2014 please replace foo with bar ; this is sed syntax s/foo/bar/g \u2014 please replace foo with bar throughout your entire change CL Directives R=foo \u2014 assign a reviewer within the Go CL dashboard RELNOTE=yes or RELNOTE=<subject> \u2014 tag for release notes; scraped by the relnote tool DO NOT SUBMIT (in the commit message) \u2014 block submission; see the \"Work in progress\" section below Updates #1234 or Fixes #1234 (in the commit message) \u2014 link the CL from the GitHub issue and optionally close the issue after the CL is merged Email Messages from a code review are typically sent to three places: the reviewers, if any the golang-codereviews group the owner Please do NOT reply code review via email, as the message will not be relayed to Gerrit . Always click on the link and post reply in Gerrit. Work in progress If you have changes that aren't ready to be reviewed, you can put a giant DO NOT REVIEW as the second line of the CL description, so that people who see it know not to look any further. Don't make it the first line, since then it will become the subject for the entire review, even after you've changed the description. Similarly, if you would like to ensure that your changes are not merged by mistake, you can put DO NOT SUBMIT as the second line of the CL description. If you don't need Gerrit's features, but just want to backup your work, share work between multiple clients, or have a staging UI to examine your changes, you can use a regular git remote. To use GitHub as a git remote, you can either fork github.com/golang/go or create a new repo. There are trade-offs. Forked repos will have a faster first push. Non-forked repos can be private. Forked repos are associated in GitHub's system. As a result, they are easily discoverable and support cross-repo comparisons in the GitHub UI; however, this also means that references to issues in commit messages in forked repos will create references to your fork in the issue. To add your git remote, run something like: $ git remote add fork git@github.com:yourusername/go.git You can then push changes to the \"fork\" remote with git push fork branchname . Gerrit's code review model is to rewrite a single commit until it is correct. GitHub will try to prevent you from accidentally overwriting your existing branch. You can work around this by forcing the push: git push --force fork branchname . Alternatively, you can set up your forked remote as a mirror by cloning it initially with: $ git remote add --mirror = push fork git@github.com:yourusername/go.git Then running git push fork will update GitHub to perfectly mirror everything (all branches, all tags, etc.). This is handy, but take care when using this on multiple clients. You are bypassing the usual git safeguards, so it is easy to overwrite (and thus lose) work pushed by a different client.","title":"CodeReview"},{"location":"CodeReview/#reviewer-parlance","text":"There are several terms code reviews may use that you should become familiar with. LGTM \u2014 looks good to me SGTM \u2014 sounds good to me PTAL \u2014 please take a look s/foo/bar/ \u2014 please replace foo with bar ; this is sed syntax s/foo/bar/g \u2014 please replace foo with bar throughout your entire change","title":"Reviewer Parlance"},{"location":"CodeReview/#cl-directives","text":"R=foo \u2014 assign a reviewer within the Go CL dashboard RELNOTE=yes or RELNOTE=<subject> \u2014 tag for release notes; scraped by the relnote tool DO NOT SUBMIT (in the commit message) \u2014 block submission; see the \"Work in progress\" section below Updates #1234 or Fixes #1234 (in the commit message) \u2014 link the CL from the GitHub issue and optionally close the issue after the CL is merged","title":"CL Directives"},{"location":"CodeReview/#email","text":"Messages from a code review are typically sent to three places: the reviewers, if any the golang-codereviews group the owner Please do NOT reply code review via email, as the message will not be relayed to Gerrit . Always click on the link and post reply in Gerrit.","title":"Email"},{"location":"CodeReview/#work-in-progress","text":"If you have changes that aren't ready to be reviewed, you can put a giant DO NOT REVIEW as the second line of the CL description, so that people who see it know not to look any further. Don't make it the first line, since then it will become the subject for the entire review, even after you've changed the description. Similarly, if you would like to ensure that your changes are not merged by mistake, you can put DO NOT SUBMIT as the second line of the CL description. If you don't need Gerrit's features, but just want to backup your work, share work between multiple clients, or have a staging UI to examine your changes, you can use a regular git remote. To use GitHub as a git remote, you can either fork github.com/golang/go or create a new repo. There are trade-offs. Forked repos will have a faster first push. Non-forked repos can be private. Forked repos are associated in GitHub's system. As a result, they are easily discoverable and support cross-repo comparisons in the GitHub UI; however, this also means that references to issues in commit messages in forked repos will create references to your fork in the issue. To add your git remote, run something like: $ git remote add fork git@github.com:yourusername/go.git You can then push changes to the \"fork\" remote with git push fork branchname . Gerrit's code review model is to rewrite a single commit until it is correct. GitHub will try to prevent you from accidentally overwriting your existing branch. You can work around this by forcing the push: git push --force fork branchname . Alternatively, you can set up your forked remote as a mirror by cloning it initially with: $ git remote add --mirror = push fork git@github.com:yourusername/go.git Then running git push fork will update GitHub to perfectly mirror everything (all branches, all tags, etc.). This is handy, but take care when using this on multiple clients. You are bypassing the usual git safeguards, so it is easy to overwrite (and thus lose) work pushed by a different client.","title":"Work in progress"},{"location":"CodeReviewComments/","text":"Go Code Review Comments This page collects common comments made during reviews of Go code, so that a single detailed explanation can be referred to by shorthands. This is a laundry list of common mistakes, not a comprehensive style guide. You can view this as a supplement to Effective Go . Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars. Gofmt Comment Sentences Contexts Copying Crypto Rand Declaring Empty Slices Doc Comments Don't Panic Error Strings Examples Goroutine Lifetimes Handle Errors Imports Import Blank Import Dot In-Band Errors Indent Error Flow Initialisms Interfaces Line Length Mixed Caps Named Result Parameters Naked Returns Package Comments Package Names Pass Values Receiver Names Receiver Type Synchronous Functions Useful Test Failures Variable Names Gofmt Run gofmt on your code to automatically fix the majority of mechanical style issues. Almost all Go code in the wild uses gofmt . The rest of this document addresses non-mechanical style points. An alternative is to use goimports , a superset of gofmt which additionally adds (and removes) import lines as necessary. Comment Sentences See https://golang.org/doc/effective_go.html#commentary . Comments documenting declarations should be full sentences, even if that seems a little redundant. This approach makes them format well when extracted into godoc documentation. Comments should begin with the name of the thing being described and end in a period: // Request represents a request to run a command. type Request struct { ... // Encode writes the JSON encoding of req to w. func Encode ( w io . Writer , req * Request ) { ... and so on. Contexts Values of the context.Context type carry security credentials, tracing information, deadlines, and cancellation signals across API and process boundaries. Go programs pass Contexts explicitly along the entire function call chain from incoming RPCs and HTTP requests to outgoing requests. Most functions that use a Context should accept it as their first parameter: func F(ctx context.Context, /* other arguments */) {} A function that is never request-specific may use context.Background(), but err on the side of passing a Context even if you think you don't need to. The default case is to pass a Context; only use context.Background() directly if you have a good reason why the alternative is a mistake. Don't add a Context member to a struct type; instead add a ctx parameter to each method on that type that needs to pass it along. The one exception is for methods whose signature must match an interface in the standard library or in a third party library. Don't create custom Context types or use interfaces other than Context in function signatures. If you have application data to pass around, put it in a parameter, in the receiver, in globals, or, if it truly belongs there, in a Context value. Contexts are immutable, so it's fine to pass the same ctx to multiple calls that share the same deadline, cancellation signal, credentials, parent trace, etc. Copying To avoid unexpected aliasing, be careful when copying a struct from another package. For example, the bytes.Buffer type contains a []byte slice. If you copy a Buffer , the slice in the copy may alias the array in the original, causing subsequent method calls to have surprising effects. In general, do not copy a value of type T if its methods are associated with the pointer type, *T . Crypto Rand Do not use package math/rand to generate keys, even throwaway ones. Unseeded, the generator is completely predictable. Seeded with time.Nanoseconds() , there are just a few bits of entropy. Instead, use crypto/rand 's Reader, and if you need text, print to hexadecimal or base64: import ( \"crypto/rand\" // \"encoding/base64\" // \"encoding/hex\" \"fmt\" ) func Key () string { buf := make ([] byte , 16 ) _ , err := rand . Read ( buf ) if err != nil { panic ( err ) // out of randomness, should never happen } return fmt . Sprintf ( \"%x\" , buf ) // or hex.EncodeToString(buf) // or base64.StdEncoding.EncodeToString(buf) } Declaring Empty Slices When declaring an empty slice, prefer var t [] string over t := [] string {} The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent\u2014their len and cap are both zero\u2014but the nil slice is the preferred style. Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a nil slice encodes to null , while []string{} encodes to the JSON array [] ). When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors. For more discussion about nil in Go see Francesc Campoy's talk Understanding Nil . Doc Comments All top-level, exported names should have doc comments, as should non-trivial unexported type or function declarations. See https://golang.org/doc/effective_go.html#commentary for more information about commentary conventions. Don't Panic See https://golang.org/doc/effective_go.html#errors . Don't use panic for normal error handling. Use error and multiple return values. Error Strings Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use fmt.Errorf(\"something bad\") not fmt.Errorf(\"Something bad\") , so that log.Printf(\"Reading %s: %v\", filename, err) formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages. Examples When adding a new package, include examples of intended usage: a runnable Example, or a simple test demonstrating a complete call sequence. Read more about testable Example() functions . Goroutine Lifetimes When you spawn goroutines, make it clear when - or whether - they exit. Goroutines can leak by blocking on channel sends or receives: the garbage collector will not terminate a goroutine even if the channels it is blocked on are unreachable. Even when goroutines do not leak, leaving them in-flight when they are no longer needed can cause other subtle and hard-to-diagnose problems. Sends on closed channels panic. Modifying still-in-use inputs \"after the result isn't needed\" can still lead to data races. And leaving goroutines in-flight for arbitrarily long can lead to unpredictable memory usage. Try to keep concurrent code simple enough that goroutine lifetimes are obvious. If that just isn't feasible, document when and why the goroutines exit. Handle Errors See https://golang.org/doc/effective_go.html#errors . Do not discard errors using _ variables. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic. Imports Avoid renaming imports except to avoid a name collision; good package names should not require renaming. In the event of collision, prefer to rename the most local or project-specific import. Imports are organized in groups, with blank lines between them. The standard library packages are always in the first group. package main import ( \"fmt\" \"hash/adler32\" \"os\" \"appengine/foo\" \"appengine/user\" \"github.com/foo/bar\" \"rsc.io/goversion/version\" ) goimports will do this for you. Import Blank Packages that are imported only for their side effects (using the syntax import _ \"pkg\" ) should only be imported in the main package of a program, or in tests that require them. Import Dot The import . form can be useful in tests that, due to circular dependencies, cannot be made part of the package being tested: package foo_test import ( \"bar/testutil\" // also imports \"foo\" . \"foo\" ) In this case, the test file cannot be in package foo because it uses bar/testutil, which imports foo. So we use the 'import .' form to let the file pretend to be part of package foo even though it is not. Except for this one case, do not use import . in your programs. It makes the programs much harder to read because it is unclear whether a name like Quux is a top-level identifier in the current package or in an imported package. In-Band Errors In C and similar languages, it's common for functions to return values like -1 or null to signal errors or missing results: // Lookup returns the value for key or \"\" if there is no mapping for key. func Lookup ( key string ) string // Failing to check a for an in-band error value can lead to bugs: Parse ( Lookup ( key )) // returns \"parse failure for value\" instead of \"no value for key\" Go's support for multiple return values provides a better solution. Instead of requiring clients to check for an in-band error value, a function should return an additional value to indicate whether its other return values are valid. This return value may be an error, or a boolean when no explanation is needed. It should be the final return value. // Lookup returns the value for key or ok=false if there is no mapping for key. func Lookup ( key string ) ( value string , ok bool ) This prevents the caller from using the result incorrectly: Parse ( Lookup ( key )) // compile-time error And encourages more robust and readable code: value , ok := Lookup ( key ) if ! ok { return fmt . Errorf ( \"no value for %q\" , key ) } return Parse ( value ) This rule applies to exported functions but is also useful for unexported functions. Return values like nil, \"\", 0, and -1 are fine when they are valid results for a function, that is, when the caller need not handle them differently from other values. Some standard library functions, like those in package \"strings\", return in-band error values. This greatly simplifies string-manipulation code at the cost of requiring more diligence from the programmer. In general, Go code should return additional values for errors. Indent Error Flow Try to keep the normal code path at a minimal indentation, and indent the error handling, dealing with it first. This improves the readability of the code by permitting visually scanning the normal path quickly. For instance, don't write: if err != nil { // error handling } else { // normal code } Instead, write: if err != nil { // error handling return // or continue, etc. } // normal code If the if statement has an initialization statement, such as: if x , err := f (); err != nil { // error handling return } else { // use x } then this may require moving the short variable declaration to its own line: x , err := f () if err != nil { // error handling return } // use x Initialisms Words in names that are initialisms or acronyms (e.g. \"URL\" or \"NATO\") have a consistent case. For example, \"URL\" should appear as \"URL\" or \"url\" (as in \"urlPony\", or \"URLPony\"), never as \"Url\". As an example: ServeHTTP not ServeHttp. For identifiers with multiple initialized \"words\", use for example \"xmlHTTPRequest\" or \"XMLHTTPRequest\". This rule also applies to \"ID\" when it is short for \"identifier\" (which is pretty much all cases when it's not the \"id\" as in \"ego\", \"superego\"), so write \"appID\" instead of \"appId\". Code generated by the protocol buffer compiler is exempt from this rule. Human-written code is held to a higher standard than machine-written code. Interfaces Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values. The implementing package should return concrete (usually pointer or struct) types: that way, new methods can be added to implementations without requiring extensive refactoring. Do not define interfaces on the implementor side of an API \"for mocking\"; instead, design the API so that it can be tested using the public API of the real implementation. Do not define interfaces before they are used: without a realistic example of usage, it is too difficult to see whether an interface is even necessary, let alone what methods it ought to contain. package consumer // consumer.go type Thinger interface { Thing () bool } func Foo ( t Thinger ) string { \u2026 } package consumer // consumer_test.go type fakeThinger struct { \u2026 } func ( t fakeThinger ) Thing () bool { \u2026 } \u2026 if Foo ( fakeThinger { \u2026 }) == \"x\" { \u2026 } // DO NOT DO IT!!! package producer type Thinger interface { Thing () bool } type defaultThinger struct { \u2026 } func ( t defaultThinger ) Thing () bool { \u2026 } func NewThinger () Thinger { return defaultThinger { \u2026 } } Instead return a concrete type and let the consumer mock the producer implementation. package producer type Thinger struct { \u2026 } func ( t Thinger ) Thing () bool { \u2026 } func NewThinger () Thinger { return Thinger { \u2026 } } Line Length There is no rigid line length limit in Go code, but avoid uncomfortably long lines. Similarly, don't add line breaks to keep lines short when they are more readable long\u2013for example, if they are repetitive. Most of the time when people wrap lines \"unnaturally\" (in the middle of function calls or function declarations, more or less, say, though some exceptions are around), the wrapping would be unnecessary if they had a reasonable number of parameters and reasonably short variable names. Long lines seem to go with long names, and getting rid of the long names helps a lot. In other words, break lines because of the semantics of what you're writing (as a general rule) and not because of the length of the line. If you find that this produces lines that are too long, then change the names or the semantics and you'll probably get a good result. This is, actually, exactly the same advice about how long a function should be. There's no rule \"never have a function more than N lines long\", but there is definitely such a thing as too long of a function, and of too repetitive tiny functions, and the solution is to change where the function boundaries are, not to start counting lines. Mixed Caps See https://golang.org/doc/effective_go.html#mixed-caps . This applies even when it breaks conventions in other languages. For example an unexported constant is maxLength not MaxLength or MAX_LENGTH . Also see Initialisms . Named Result Parameters Consider what it will look like in godoc. Named result parameters like: func ( n * Node ) Parent1 () ( node * Node ) {} func ( n * Node ) Parent2 () ( node * Node , err error ) {} will be repetitive in godoc; better to use: func ( n * Node ) Parent1 () * Node {} func ( n * Node ) Parent2 () ( * Node , error ) {} On the other hand, if a function returns two or three parameters of the same type, or if the meaning of a result isn't clear from context, adding names may be useful in some contexts. Don't name result parameters just to avoid declaring a var inside the function; that trades off a minor implementation brevity at the cost of unnecessary API verbosity. func ( f * Foo ) Location () ( float64 , float64 , error ) is less clear than: // Location returns f's latitude and longitude. // Negative values mean south and west, respectively. func ( f * Foo ) Location () ( lat , long float64 , err error ) Naked returns are okay if the function is a handful of lines. Once it's a medium sized function, be explicit with your return values. Corollary: it's not worth it to name result parameters just because it enables you to use naked returns. Clarity of docs is always more important than saving a line or two in your function. Finally, in some cases you need to name a result parameter in order to change it in a deferred closure. That is always OK. Naked Returns A return statement without arguments returns the named return values. This is known as a \"naked\" return. func split ( sum int ) ( x , y int ) { x = sum * 4 / 9 y = sum - x return } See Named Result Parameters . Package Comments Package comments, like all comments to be presented by godoc, must appear adjacent to the package clause, with no blank line. // Package math provides basic constants and mathematical functions. package math /* Package template implements data-driven templates for generating textual output such as HTML. .... */ package template For \"package main\" comments, other styles of comment are fine after the binary name (and it may be capitalized if it comes first), For example, for a package main in the directory seedgen you could write: // Binary seedgen ... package main or // Command seedgen ... package main or // Program seedgen ... package main or // The seedgen command ... package main or // The seedgen program ... package main or // Seedgen .. package main These are examples, and sensible variants of these are acceptable. Note that starting the sentence with a lower-case word is not among the acceptable options for package comments, as these are publicly-visible and should be written in proper English, including capitalizing the first word of the sentence. When the binary name is the first word, capitalizing it is required even though it does not strictly match the spelling of the command-line invocation. See https://golang.org/doc/effective_go.html#commentary for more information about commentary conventions. Package Names All references to names in your package will be done using the package name, so you can omit that name from the identifiers. For example, if you are in package chubby, you don't need type ChubbyFile, which clients will write as chubby.ChubbyFile . Instead, name the type File , which clients will write as chubby.File . Avoid meaningless package names like util, common, misc, api, types, and interfaces. See http://golang.org/doc/effective_go.html#package-names and http://blog.golang.org/package-names for more. Pass Values Don't pass pointers as function arguments just to save a few bytes. If a function refers to its argument x only as *x throughout, then the argument shouldn't be a pointer. Common instances of this include passing a pointer to a string ( *string ) or a pointer to an interface value ( *io.Reader ). In both cases the value itself is a fixed size and can be passed directly. This advice does not apply to large structs, or even small structs that might grow. Receiver Names The name of a method's receiver should be a reflection of its identity; often a one or two letter abbreviation of its type suffices (such as \"c\" or \"cl\" for \"Client\"). Don't use generic names such as \"me\", \"this\" or \"self\", identifiers typical of object-oriented languages that gives the method a special meaning. In Go, the receiver of a method is just another parameter and therefore, should be named accordingly. The name need not be as descriptive as that of a method argument, as its role is obvious and serves no documentary purpose. It can be very short as it will appear on almost every line of every method of the type; familiarity admits brevity. Be consistent, too: if you call the receiver \"c\" in one method, don't call it \"cl\" in another. Receiver Type Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers. If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines: If the receiver is a map, func or chan, don't use a pointer to them. If the receiver is a slice and the method doesn't reslice or reallocate the slice, don't use a pointer to it. If the method needs to mutate the receiver, the receiver must be a pointer. If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying. If the receiver is a large struct or array, a pointer receiver is more efficient. How large is large? Assume it's equivalent to passing all its elements as arguments to the method. If that feels too large, it's also too large for the receiver. Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer. If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader. If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense. A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can't always succeed.) Don't choose a value receiver type for this reason without profiling first. Don't mix receiver types. Choose either pointers or struct types for all available methods. Finally, when in doubt, use a pointer receiver. Synchronous Functions Prefer synchronous functions - functions which return their results directly or finish any callbacks or channel ops before returning - over asynchronous ones. Synchronous functions keep goroutines localized within a call, making it easier to reason about their lifetimes and avoid leaks and data races. They're also easier to test: the caller can pass an input and check the output without the need for polling or synchronization. If callers need more concurrency, they can add it easily by calling the function from a separate goroutine. But it is quite difficult - sometimes impossible - to remove unnecessary concurrency at the caller side. Useful Test Failures Tests should fail with helpful messages saying what was wrong, with what inputs, what was actually got, and what was expected. It may be tempting to write a bunch of assertFoo helpers, but be sure your helpers produce useful error messages. Assume that the person debugging your failing test is not you, and is not your team. A typical Go test fails like: if got != tt . want { t . Errorf ( \"Foo(%q) = %d; want %d\" , tt . in , got , tt . want ) // or Fatalf, if test can't test anything more past this point } Note that the order here is actual != expected, and the message uses that order too. Some test frameworks encourage writing these backwards: 0 != x, \"expected 0, got x\", and so on. Go does not. If that seems like a lot of typing, you may want to write a [[table-driven test|TableDrivenTests]]. Another common technique to disambiguate failing tests when using a test helper with different input is to wrap each caller with a different TestFoo function, so the test fails with that name: func TestSingleValue ( t * testing . T ) { testHelper ( t , [] int { 80 }) } func TestNoValues ( t * testing . T ) { testHelper ( t , [] int {}) } In any case, the onus is on you to fail with a helpful message to whoever's debugging your code in the future. Variable Names Variable names in Go should be short rather than long. This is especially true for local variables with limited scope. Prefer c to lineCount . Prefer i to sliceIndex . The basic rule: the further from its declaration that a name is used, the more descriptive the name must be. For a method receiver, one or two letters is sufficient. Common variables such as loop indices and readers can be a single letter ( i , r ). More unusual things and global variables need more descriptive names.","title":"CodeReviewComments"},{"location":"CodeReviewComments/#go-code-review-comments","text":"This page collects common comments made during reviews of Go code, so that a single detailed explanation can be referred to by shorthands. This is a laundry list of common mistakes, not a comprehensive style guide. You can view this as a supplement to Effective Go . Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars. Gofmt Comment Sentences Contexts Copying Crypto Rand Declaring Empty Slices Doc Comments Don't Panic Error Strings Examples Goroutine Lifetimes Handle Errors Imports Import Blank Import Dot In-Band Errors Indent Error Flow Initialisms Interfaces Line Length Mixed Caps Named Result Parameters Naked Returns Package Comments Package Names Pass Values Receiver Names Receiver Type Synchronous Functions Useful Test Failures Variable Names","title":"Go Code Review Comments"},{"location":"CodeReviewComments/#gofmt","text":"Run gofmt on your code to automatically fix the majority of mechanical style issues. Almost all Go code in the wild uses gofmt . The rest of this document addresses non-mechanical style points. An alternative is to use goimports , a superset of gofmt which additionally adds (and removes) import lines as necessary.","title":"Gofmt"},{"location":"CodeReviewComments/#comment-sentences","text":"See https://golang.org/doc/effective_go.html#commentary . Comments documenting declarations should be full sentences, even if that seems a little redundant. This approach makes them format well when extracted into godoc documentation. Comments should begin with the name of the thing being described and end in a period: // Request represents a request to run a command. type Request struct { ... // Encode writes the JSON encoding of req to w. func Encode ( w io . Writer , req * Request ) { ... and so on.","title":"Comment Sentences"},{"location":"CodeReviewComments/#contexts","text":"Values of the context.Context type carry security credentials, tracing information, deadlines, and cancellation signals across API and process boundaries. Go programs pass Contexts explicitly along the entire function call chain from incoming RPCs and HTTP requests to outgoing requests. Most functions that use a Context should accept it as their first parameter: func F(ctx context.Context, /* other arguments */) {} A function that is never request-specific may use context.Background(), but err on the side of passing a Context even if you think you don't need to. The default case is to pass a Context; only use context.Background() directly if you have a good reason why the alternative is a mistake. Don't add a Context member to a struct type; instead add a ctx parameter to each method on that type that needs to pass it along. The one exception is for methods whose signature must match an interface in the standard library or in a third party library. Don't create custom Context types or use interfaces other than Context in function signatures. If you have application data to pass around, put it in a parameter, in the receiver, in globals, or, if it truly belongs there, in a Context value. Contexts are immutable, so it's fine to pass the same ctx to multiple calls that share the same deadline, cancellation signal, credentials, parent trace, etc.","title":"Contexts"},{"location":"CodeReviewComments/#copying","text":"To avoid unexpected aliasing, be careful when copying a struct from another package. For example, the bytes.Buffer type contains a []byte slice. If you copy a Buffer , the slice in the copy may alias the array in the original, causing subsequent method calls to have surprising effects. In general, do not copy a value of type T if its methods are associated with the pointer type, *T .","title":"Copying"},{"location":"CodeReviewComments/#crypto-rand","text":"Do not use package math/rand to generate keys, even throwaway ones. Unseeded, the generator is completely predictable. Seeded with time.Nanoseconds() , there are just a few bits of entropy. Instead, use crypto/rand 's Reader, and if you need text, print to hexadecimal or base64: import ( \"crypto/rand\" // \"encoding/base64\" // \"encoding/hex\" \"fmt\" ) func Key () string { buf := make ([] byte , 16 ) _ , err := rand . Read ( buf ) if err != nil { panic ( err ) // out of randomness, should never happen } return fmt . Sprintf ( \"%x\" , buf ) // or hex.EncodeToString(buf) // or base64.StdEncoding.EncodeToString(buf) }","title":"Crypto Rand"},{"location":"CodeReviewComments/#declaring-empty-slices","text":"When declaring an empty slice, prefer var t [] string over t := [] string {} The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent\u2014their len and cap are both zero\u2014but the nil slice is the preferred style. Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a nil slice encodes to null , while []string{} encodes to the JSON array [] ). When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors. For more discussion about nil in Go see Francesc Campoy's talk Understanding Nil .","title":"Declaring Empty Slices"},{"location":"CodeReviewComments/#doc-comments","text":"All top-level, exported names should have doc comments, as should non-trivial unexported type or function declarations. See https://golang.org/doc/effective_go.html#commentary for more information about commentary conventions.","title":"Doc Comments"},{"location":"CodeReviewComments/#dont-panic","text":"See https://golang.org/doc/effective_go.html#errors . Don't use panic for normal error handling. Use error and multiple return values.","title":"Don't Panic"},{"location":"CodeReviewComments/#error-strings","text":"Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use fmt.Errorf(\"something bad\") not fmt.Errorf(\"Something bad\") , so that log.Printf(\"Reading %s: %v\", filename, err) formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages.","title":"Error Strings"},{"location":"CodeReviewComments/#examples","text":"When adding a new package, include examples of intended usage: a runnable Example, or a simple test demonstrating a complete call sequence. Read more about testable Example() functions .","title":"Examples"},{"location":"CodeReviewComments/#goroutine-lifetimes","text":"When you spawn goroutines, make it clear when - or whether - they exit. Goroutines can leak by blocking on channel sends or receives: the garbage collector will not terminate a goroutine even if the channels it is blocked on are unreachable. Even when goroutines do not leak, leaving them in-flight when they are no longer needed can cause other subtle and hard-to-diagnose problems. Sends on closed channels panic. Modifying still-in-use inputs \"after the result isn't needed\" can still lead to data races. And leaving goroutines in-flight for arbitrarily long can lead to unpredictable memory usage. Try to keep concurrent code simple enough that goroutine lifetimes are obvious. If that just isn't feasible, document when and why the goroutines exit.","title":"Goroutine Lifetimes"},{"location":"CodeReviewComments/#handle-errors","text":"See https://golang.org/doc/effective_go.html#errors . Do not discard errors using _ variables. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic.","title":"Handle Errors"},{"location":"CodeReviewComments/#imports","text":"Avoid renaming imports except to avoid a name collision; good package names should not require renaming. In the event of collision, prefer to rename the most local or project-specific import. Imports are organized in groups, with blank lines between them. The standard library packages are always in the first group. package main import ( \"fmt\" \"hash/adler32\" \"os\" \"appengine/foo\" \"appengine/user\" \"github.com/foo/bar\" \"rsc.io/goversion/version\" ) goimports will do this for you.","title":"Imports"},{"location":"CodeReviewComments/#import-blank","text":"Packages that are imported only for their side effects (using the syntax import _ \"pkg\" ) should only be imported in the main package of a program, or in tests that require them.","title":"Import Blank"},{"location":"CodeReviewComments/#import-dot","text":"The import . form can be useful in tests that, due to circular dependencies, cannot be made part of the package being tested: package foo_test import ( \"bar/testutil\" // also imports \"foo\" . \"foo\" ) In this case, the test file cannot be in package foo because it uses bar/testutil, which imports foo. So we use the 'import .' form to let the file pretend to be part of package foo even though it is not. Except for this one case, do not use import . in your programs. It makes the programs much harder to read because it is unclear whether a name like Quux is a top-level identifier in the current package or in an imported package.","title":"Import Dot"},{"location":"CodeReviewComments/#in-band-errors","text":"In C and similar languages, it's common for functions to return values like -1 or null to signal errors or missing results: // Lookup returns the value for key or \"\" if there is no mapping for key. func Lookup ( key string ) string // Failing to check a for an in-band error value can lead to bugs: Parse ( Lookup ( key )) // returns \"parse failure for value\" instead of \"no value for key\" Go's support for multiple return values provides a better solution. Instead of requiring clients to check for an in-band error value, a function should return an additional value to indicate whether its other return values are valid. This return value may be an error, or a boolean when no explanation is needed. It should be the final return value. // Lookup returns the value for key or ok=false if there is no mapping for key. func Lookup ( key string ) ( value string , ok bool ) This prevents the caller from using the result incorrectly: Parse ( Lookup ( key )) // compile-time error And encourages more robust and readable code: value , ok := Lookup ( key ) if ! ok { return fmt . Errorf ( \"no value for %q\" , key ) } return Parse ( value ) This rule applies to exported functions but is also useful for unexported functions. Return values like nil, \"\", 0, and -1 are fine when they are valid results for a function, that is, when the caller need not handle them differently from other values. Some standard library functions, like those in package \"strings\", return in-band error values. This greatly simplifies string-manipulation code at the cost of requiring more diligence from the programmer. In general, Go code should return additional values for errors.","title":"In-Band Errors"},{"location":"CodeReviewComments/#indent-error-flow","text":"Try to keep the normal code path at a minimal indentation, and indent the error handling, dealing with it first. This improves the readability of the code by permitting visually scanning the normal path quickly. For instance, don't write: if err != nil { // error handling } else { // normal code } Instead, write: if err != nil { // error handling return // or continue, etc. } // normal code If the if statement has an initialization statement, such as: if x , err := f (); err != nil { // error handling return } else { // use x } then this may require moving the short variable declaration to its own line: x , err := f () if err != nil { // error handling return } // use x","title":"Indent Error Flow"},{"location":"CodeReviewComments/#initialisms","text":"Words in names that are initialisms or acronyms (e.g. \"URL\" or \"NATO\") have a consistent case. For example, \"URL\" should appear as \"URL\" or \"url\" (as in \"urlPony\", or \"URLPony\"), never as \"Url\". As an example: ServeHTTP not ServeHttp. For identifiers with multiple initialized \"words\", use for example \"xmlHTTPRequest\" or \"XMLHTTPRequest\". This rule also applies to \"ID\" when it is short for \"identifier\" (which is pretty much all cases when it's not the \"id\" as in \"ego\", \"superego\"), so write \"appID\" instead of \"appId\". Code generated by the protocol buffer compiler is exempt from this rule. Human-written code is held to a higher standard than machine-written code.","title":"Initialisms"},{"location":"CodeReviewComments/#interfaces","text":"Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values. The implementing package should return concrete (usually pointer or struct) types: that way, new methods can be added to implementations without requiring extensive refactoring. Do not define interfaces on the implementor side of an API \"for mocking\"; instead, design the API so that it can be tested using the public API of the real implementation. Do not define interfaces before they are used: without a realistic example of usage, it is too difficult to see whether an interface is even necessary, let alone what methods it ought to contain. package consumer // consumer.go type Thinger interface { Thing () bool } func Foo ( t Thinger ) string { \u2026 } package consumer // consumer_test.go type fakeThinger struct { \u2026 } func ( t fakeThinger ) Thing () bool { \u2026 } \u2026 if Foo ( fakeThinger { \u2026 }) == \"x\" { \u2026 } // DO NOT DO IT!!! package producer type Thinger interface { Thing () bool } type defaultThinger struct { \u2026 } func ( t defaultThinger ) Thing () bool { \u2026 } func NewThinger () Thinger { return defaultThinger { \u2026 } } Instead return a concrete type and let the consumer mock the producer implementation. package producer type Thinger struct { \u2026 } func ( t Thinger ) Thing () bool { \u2026 } func NewThinger () Thinger { return Thinger { \u2026 } }","title":"Interfaces"},{"location":"CodeReviewComments/#line-length","text":"There is no rigid line length limit in Go code, but avoid uncomfortably long lines. Similarly, don't add line breaks to keep lines short when they are more readable long\u2013for example, if they are repetitive. Most of the time when people wrap lines \"unnaturally\" (in the middle of function calls or function declarations, more or less, say, though some exceptions are around), the wrapping would be unnecessary if they had a reasonable number of parameters and reasonably short variable names. Long lines seem to go with long names, and getting rid of the long names helps a lot. In other words, break lines because of the semantics of what you're writing (as a general rule) and not because of the length of the line. If you find that this produces lines that are too long, then change the names or the semantics and you'll probably get a good result. This is, actually, exactly the same advice about how long a function should be. There's no rule \"never have a function more than N lines long\", but there is definitely such a thing as too long of a function, and of too repetitive tiny functions, and the solution is to change where the function boundaries are, not to start counting lines.","title":"Line Length"},{"location":"CodeReviewComments/#mixed-caps","text":"See https://golang.org/doc/effective_go.html#mixed-caps . This applies even when it breaks conventions in other languages. For example an unexported constant is maxLength not MaxLength or MAX_LENGTH . Also see Initialisms .","title":"Mixed Caps"},{"location":"CodeReviewComments/#named-result-parameters","text":"Consider what it will look like in godoc. Named result parameters like: func ( n * Node ) Parent1 () ( node * Node ) {} func ( n * Node ) Parent2 () ( node * Node , err error ) {} will be repetitive in godoc; better to use: func ( n * Node ) Parent1 () * Node {} func ( n * Node ) Parent2 () ( * Node , error ) {} On the other hand, if a function returns two or three parameters of the same type, or if the meaning of a result isn't clear from context, adding names may be useful in some contexts. Don't name result parameters just to avoid declaring a var inside the function; that trades off a minor implementation brevity at the cost of unnecessary API verbosity. func ( f * Foo ) Location () ( float64 , float64 , error ) is less clear than: // Location returns f's latitude and longitude. // Negative values mean south and west, respectively. func ( f * Foo ) Location () ( lat , long float64 , err error ) Naked returns are okay if the function is a handful of lines. Once it's a medium sized function, be explicit with your return values. Corollary: it's not worth it to name result parameters just because it enables you to use naked returns. Clarity of docs is always more important than saving a line or two in your function. Finally, in some cases you need to name a result parameter in order to change it in a deferred closure. That is always OK.","title":"Named Result Parameters"},{"location":"CodeReviewComments/#naked-returns","text":"A return statement without arguments returns the named return values. This is known as a \"naked\" return. func split ( sum int ) ( x , y int ) { x = sum * 4 / 9 y = sum - x return } See Named Result Parameters .","title":"Naked Returns"},{"location":"CodeReviewComments/#package-comments","text":"Package comments, like all comments to be presented by godoc, must appear adjacent to the package clause, with no blank line. // Package math provides basic constants and mathematical functions. package math /* Package template implements data-driven templates for generating textual output such as HTML. .... */ package template For \"package main\" comments, other styles of comment are fine after the binary name (and it may be capitalized if it comes first), For example, for a package main in the directory seedgen you could write: // Binary seedgen ... package main or // Command seedgen ... package main or // Program seedgen ... package main or // The seedgen command ... package main or // The seedgen program ... package main or // Seedgen .. package main These are examples, and sensible variants of these are acceptable. Note that starting the sentence with a lower-case word is not among the acceptable options for package comments, as these are publicly-visible and should be written in proper English, including capitalizing the first word of the sentence. When the binary name is the first word, capitalizing it is required even though it does not strictly match the spelling of the command-line invocation. See https://golang.org/doc/effective_go.html#commentary for more information about commentary conventions.","title":"Package Comments"},{"location":"CodeReviewComments/#package-names","text":"All references to names in your package will be done using the package name, so you can omit that name from the identifiers. For example, if you are in package chubby, you don't need type ChubbyFile, which clients will write as chubby.ChubbyFile . Instead, name the type File , which clients will write as chubby.File . Avoid meaningless package names like util, common, misc, api, types, and interfaces. See http://golang.org/doc/effective_go.html#package-names and http://blog.golang.org/package-names for more.","title":"Package Names"},{"location":"CodeReviewComments/#pass-values","text":"Don't pass pointers as function arguments just to save a few bytes. If a function refers to its argument x only as *x throughout, then the argument shouldn't be a pointer. Common instances of this include passing a pointer to a string ( *string ) or a pointer to an interface value ( *io.Reader ). In both cases the value itself is a fixed size and can be passed directly. This advice does not apply to large structs, or even small structs that might grow.","title":"Pass Values"},{"location":"CodeReviewComments/#receiver-names","text":"The name of a method's receiver should be a reflection of its identity; often a one or two letter abbreviation of its type suffices (such as \"c\" or \"cl\" for \"Client\"). Don't use generic names such as \"me\", \"this\" or \"self\", identifiers typical of object-oriented languages that gives the method a special meaning. In Go, the receiver of a method is just another parameter and therefore, should be named accordingly. The name need not be as descriptive as that of a method argument, as its role is obvious and serves no documentary purpose. It can be very short as it will appear on almost every line of every method of the type; familiarity admits brevity. Be consistent, too: if you call the receiver \"c\" in one method, don't call it \"cl\" in another.","title":"Receiver Names"},{"location":"CodeReviewComments/#receiver-type","text":"Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers. If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines: If the receiver is a map, func or chan, don't use a pointer to them. If the receiver is a slice and the method doesn't reslice or reallocate the slice, don't use a pointer to it. If the method needs to mutate the receiver, the receiver must be a pointer. If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying. If the receiver is a large struct or array, a pointer receiver is more efficient. How large is large? Assume it's equivalent to passing all its elements as arguments to the method. If that feels too large, it's also too large for the receiver. Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer. If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader. If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense. A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can't always succeed.) Don't choose a value receiver type for this reason without profiling first. Don't mix receiver types. Choose either pointers or struct types for all available methods. Finally, when in doubt, use a pointer receiver.","title":"Receiver Type"},{"location":"CodeReviewComments/#synchronous-functions","text":"Prefer synchronous functions - functions which return their results directly or finish any callbacks or channel ops before returning - over asynchronous ones. Synchronous functions keep goroutines localized within a call, making it easier to reason about their lifetimes and avoid leaks and data races. They're also easier to test: the caller can pass an input and check the output without the need for polling or synchronization. If callers need more concurrency, they can add it easily by calling the function from a separate goroutine. But it is quite difficult - sometimes impossible - to remove unnecessary concurrency at the caller side.","title":"Synchronous Functions"},{"location":"CodeReviewComments/#useful-test-failures","text":"Tests should fail with helpful messages saying what was wrong, with what inputs, what was actually got, and what was expected. It may be tempting to write a bunch of assertFoo helpers, but be sure your helpers produce useful error messages. Assume that the person debugging your failing test is not you, and is not your team. A typical Go test fails like: if got != tt . want { t . Errorf ( \"Foo(%q) = %d; want %d\" , tt . in , got , tt . want ) // or Fatalf, if test can't test anything more past this point } Note that the order here is actual != expected, and the message uses that order too. Some test frameworks encourage writing these backwards: 0 != x, \"expected 0, got x\", and so on. Go does not. If that seems like a lot of typing, you may want to write a [[table-driven test|TableDrivenTests]]. Another common technique to disambiguate failing tests when using a test helper with different input is to wrap each caller with a different TestFoo function, so the test fails with that name: func TestSingleValue ( t * testing . T ) { testHelper ( t , [] int { 80 }) } func TestNoValues ( t * testing . T ) { testHelper ( t , [] int {}) } In any case, the onus is on you to fail with a helpful message to whoever's debugging your code in the future.","title":"Useful Test Failures"},{"location":"CodeReviewComments/#variable-names","text":"Variable names in Go should be short rather than long. This is especially true for local variables with limited scope. Prefer c to lineCount . Prefer i to sliceIndex . The basic rule: the further from its declaration that a name is used, the more descriptive the name must be. For a method receiver, one or two letters is sufficient. Common variables such as loop indices and readers can be a single letter ( i , r ). More unusual things and global variables need more descriptive names.","title":"Variable Names"},{"location":"CodeReviewConcurrency/","text":"Code Review: Go Concurrency This page is an addition to the Go Code Review Comments list. The goal of this list is to help to find concurrency-related bugs when reviewing Go code. You may also read through this list just once to refresh your memory and to make sure you are aware of all these concurrency gotchas. \u26a0\ufe0f This page is community authored and maintained. It includes information that is disputed and may be misleading or incorrect. Insufficient synchronisation and race conditions - HTTP handler functions are thread-safe? - Global functions and variables are protected by mutexes or otherwise thread-safe? - Reads of fields and variables are protected? - The loop variable is passed into the goroutine function as an argument? - Methods on thread-safe types don't return pointers to protected structures? - Load() or Delete() calls on a sync.Map after Load() is not a race condition? Testing - Running tests with -race flag in CI/CD? Scalability - A channel is intentionally created with zero capacity? - Not using sync.RWMutex to protect very short operations? Time - time.Ticker is stopped using defer tick.Stop() ? - Comparing time.Time using Equal() , not == ? - Keeping the monotonic component in time.Time argument of time.Since() ? - When comparing system times via t.Before(u) , the monotonic component is stripped from the argument? Insufficient synchronisation and race conditions # RC.1. The HTTP handler function is safe to call concurrently from multiple goroutines? It's easy to overlook HTTP handlers should be thread-safe because they are usually not called explicitly from anywhere in the project code, but only from the internals of the HTTP server. # RC.2. Is there some field or variable access not protected by a mutex where the field or the variable is a primitive or of a type that is not explicitly thread-safe (such as atomic.Value ), while this field can be updated from a concurrent goroutine? It's not safe to skip synchronising reads even to primitive variables because of non-atomic hardware writes and potential memory visibility problems. See also a Typical Data Race: Primitive unprotected variable . # RC.3. A method on a thread-safe type doesn't return a pointer to a protected structure? This is a subtle bug which leads to the unprotected access problem described in the previous item. Example: type Counters struct { mu sync . Mutex vals map [ Key ] * Counter } func ( c * Counters ) Add ( k Key , amount int ) { c . mu . Lock () defer c . mu . Unlock () count , ok := c . vals [ k ] if ! ok { count = & Counter { sum : 0 , num : 0 } c . vals [ k ] = count } count . sum += amount count . n += 1 } func ( c * Counters ) GetCounter ( k Key ) * Counter { c . mu . Lock () defer c . mu . Unlock () return c . vals [ k ] // BUG! Returns a pointer to the structure which must be protected } One possible solution is to return a copy, not a pointer to the structure in GetCounter() : type Counters struct { mu sync . Mutex vals map [ Key ] Counter // Note that now we are storing the Counters directly, not pointers. } ... func ( c * Counters ) GetCounter ( k Key ) ( count Counter , exists bool ) { c . mu . Lock () defer c . mu . Unlock () return c . vals [ k ] } # RC.4. If there is more than one goroutine that can update a sync.Map , you don't call m.Store() or m.Delete() depending on the success of a previous m.Load() call? In other words, the following code is racy: var m sync . Map // Can be called concurrently from multiple goroutines func DoSomething ( k Key , v Value ) { existing , ok := m . Load ( k ) if ! ok { m . Store ( k , v ) // RACE CONDITION - two goroutines can execute this in parallel ... some other logic , assuming the value in `k` is now `v` in the map } ... } Such a race condition could be benign in some cases: for example, the logic between the Load() and Store() calls computes the value to be cached in the map, and this computation always returns the same result and doesn't have side effects. \u26a0\ufe0f Potentially misleading information . \"Race condition\" can refer to logic errors, like this example, which can be benign. But the phrase is also commonly used to refer to violations of the memory model, which are never benign. If the race condition is not benign, use methods sync.Map.LoadOrStore() and LoadAndDelete() to fix it. Scalability # Sc.1. Is this intentional that a channel is created with zero capacity , like make(chan *Foo) ? A goroutine which sends a message to a zero-capacity channel is blocked until another goroutine receives this message. Omitting the capacity in the make() call might be just a mistake which will limit the scalability of the code, and it's likely unit test won't find such a bug. \u26a0\ufe0f Misleading information . Buffered channels do not inherently increase \"scalability\" versus unbuffered channels. However, buffered channels can easily obscure deadlocks and other fundamental design errors that would be immediately apparent with unbuffered channels. # Sc.2. Locking with RWMutex incurs extra overhead compared to plain sync.Mutex , and, furthermore, there might be some scalability issue with the current implementation of RWMutex in Go . Unless the case is very clear (such as an RWMutex used to synchronize many read-only operations each lasting hundreds of milliseconds or more, and the writes which require an exclusive lock seldom happen), there should be some benchmarks proving that RWMutex indeed helps to improve the performance. A typical example where RWMutex certainly does more harm than good is a simple protection of a variable in a struct: type Box struct { mu sync . RWMutex // DON'T DO THIS -- use a simple Mutex instead. x int } func ( b * Box ) Get () int { b . mu . RLock () defer b . mu . RUnlock () return b . x } func ( b * Box ) Set ( x int ) { b . mu . Lock () defer b . mu . Unlock () b . x = x } Time # Tm.1. Is time.Ticker stopped using defer tick.Stop() ? It's a memory leak not to stop the ticker when the function which uses the ticker in a loop returns. # Tm.2. Are time.Time structs compared using Equal() method, not just == ? Quoting the documentation for time.Time : Note that the Go == operator compares not just the time instant but also the Location and the monotonic clock reading. Therefore, Time values should not be used as map or database keys without first guaranteeing that the identical Location has been set for all values, which can be achieved through use of the UTC() or Local() method, and that the monotonic clock reading has been stripped by setting t = t.Round(0) . In general, prefer t.Equal(u) to t == u , since t.Equal() uses the most accurate comparison available and correctly handles the case when only one of its arguments has a monotonic clock reading. # Tm.3. Before calling time.Since(t) , the monotonic component is not stripped from t ? This is a consequence of the previous item. If the monotonic component is stripped from the time.Time structure before passing it into time.Since() function (via calling either UTC() , Local() , In() , Round() , Truncate() , or AddDate() ) the result of time.Since() might be negative on very occasions, such as if the system time has been synced via NTP between the moment when the start time was originally obtained and the moment when time.Since() is called. If the monotonic component is not stripped, time.Since() will always return a positive duration. # Tm.4. If you want to compare system times via t.Before(u) , do you strip the monotonic component from the argument, e.g. via u.Round(0) ? This is another point related to Tm.2 . Sometimes, you need to compare two time.Time structs only by the system time stored in them, specifically. You may need this before storing one of these Time structs on disk or sending them over the network. Imagine, for example, some sort of telemetry agent which pushes a telemetry metric together with time periodically to some remote system: var latestSentTime time . Time func pushMetricPeriodically ( ctx context . Context ) { t := time . NewTicker ( time . Second ) defer t . Stop () for { select { case <- ctx . Done : return case <- t . C : newTime := time . Now (). Round ( 0 ) // Strip monotonic component to compare system time only // Check that the new time is later to avoid messing up the telemetry if the system time // is set backwards on an NTP sync. if latestSentTime . Before ( newTime ) { sendOverNetwork ( NewDataPoint ( newTime , metric ())) latestSentTime = newTime } } } } This code would be wrong without calling Round(0) , i. e. stripping the monotonic component. Reading List Go Code Review Comments : a checklist for reviewing Go code, not concurrency-specific. Go concurrency: - The Go Memory Model - Section about concurrency in Effective Go - Posts in The Go Blog: - Share Memory By Communicating - Go Concurrency Patterns: Timing out, moving on - Go Concurrency Patterns: Context - Go Concurrency Patterns: Pipelines and cancellation - Advanced Go Concurrency Patterns (video) - Rethinking Classical Concurrency Patterns (video) - Understanding Real-World Concurrency Bugs in Go Concurrency, but not specific to Go: - Mechanical Sympathy: Single Writer Principle","title":"CodeReviewConcurrency"},{"location":"CodeReviewConcurrency/#code-review-go-concurrency","text":"This page is an addition to the Go Code Review Comments list. The goal of this list is to help to find concurrency-related bugs when reviewing Go code. You may also read through this list just once to refresh your memory and to make sure you are aware of all these concurrency gotchas. \u26a0\ufe0f This page is community authored and maintained. It includes information that is disputed and may be misleading or incorrect. Insufficient synchronisation and race conditions - HTTP handler functions are thread-safe? - Global functions and variables are protected by mutexes or otherwise thread-safe? - Reads of fields and variables are protected? - The loop variable is passed into the goroutine function as an argument? - Methods on thread-safe types don't return pointers to protected structures? - Load() or Delete() calls on a sync.Map after Load() is not a race condition? Testing - Running tests with -race flag in CI/CD? Scalability - A channel is intentionally created with zero capacity? - Not using sync.RWMutex to protect very short operations? Time - time.Ticker is stopped using defer tick.Stop() ? - Comparing time.Time using Equal() , not == ? - Keeping the monotonic component in time.Time argument of time.Since() ? - When comparing system times via t.Before(u) , the monotonic component is stripped from the argument?","title":"Code Review: Go Concurrency"},{"location":"CodeReviewConcurrency/#insufficient-synchronisation-and-race-conditions","text":"# RC.1. The HTTP handler function is safe to call concurrently from multiple goroutines? It's easy to overlook HTTP handlers should be thread-safe because they are usually not called explicitly from anywhere in the project code, but only from the internals of the HTTP server. # RC.2. Is there some field or variable access not protected by a mutex where the field or the variable is a primitive or of a type that is not explicitly thread-safe (such as atomic.Value ), while this field can be updated from a concurrent goroutine? It's not safe to skip synchronising reads even to primitive variables because of non-atomic hardware writes and potential memory visibility problems. See also a Typical Data Race: Primitive unprotected variable . # RC.3. A method on a thread-safe type doesn't return a pointer to a protected structure? This is a subtle bug which leads to the unprotected access problem described in the previous item. Example: type Counters struct { mu sync . Mutex vals map [ Key ] * Counter } func ( c * Counters ) Add ( k Key , amount int ) { c . mu . Lock () defer c . mu . Unlock () count , ok := c . vals [ k ] if ! ok { count = & Counter { sum : 0 , num : 0 } c . vals [ k ] = count } count . sum += amount count . n += 1 } func ( c * Counters ) GetCounter ( k Key ) * Counter { c . mu . Lock () defer c . mu . Unlock () return c . vals [ k ] // BUG! Returns a pointer to the structure which must be protected } One possible solution is to return a copy, not a pointer to the structure in GetCounter() : type Counters struct { mu sync . Mutex vals map [ Key ] Counter // Note that now we are storing the Counters directly, not pointers. } ... func ( c * Counters ) GetCounter ( k Key ) ( count Counter , exists bool ) { c . mu . Lock () defer c . mu . Unlock () return c . vals [ k ] } # RC.4. If there is more than one goroutine that can update a sync.Map , you don't call m.Store() or m.Delete() depending on the success of a previous m.Load() call? In other words, the following code is racy: var m sync . Map // Can be called concurrently from multiple goroutines func DoSomething ( k Key , v Value ) { existing , ok := m . Load ( k ) if ! ok { m . Store ( k , v ) // RACE CONDITION - two goroutines can execute this in parallel ... some other logic , assuming the value in `k` is now `v` in the map } ... } Such a race condition could be benign in some cases: for example, the logic between the Load() and Store() calls computes the value to be cached in the map, and this computation always returns the same result and doesn't have side effects. \u26a0\ufe0f Potentially misleading information . \"Race condition\" can refer to logic errors, like this example, which can be benign. But the phrase is also commonly used to refer to violations of the memory model, which are never benign. If the race condition is not benign, use methods sync.Map.LoadOrStore() and LoadAndDelete() to fix it.","title":"Insufficient synchronisation and race conditions"},{"location":"CodeReviewConcurrency/#scalability","text":"# Sc.1. Is this intentional that a channel is created with zero capacity , like make(chan *Foo) ? A goroutine which sends a message to a zero-capacity channel is blocked until another goroutine receives this message. Omitting the capacity in the make() call might be just a mistake which will limit the scalability of the code, and it's likely unit test won't find such a bug. \u26a0\ufe0f Misleading information . Buffered channels do not inherently increase \"scalability\" versus unbuffered channels. However, buffered channels can easily obscure deadlocks and other fundamental design errors that would be immediately apparent with unbuffered channels. # Sc.2. Locking with RWMutex incurs extra overhead compared to plain sync.Mutex , and, furthermore, there might be some scalability issue with the current implementation of RWMutex in Go . Unless the case is very clear (such as an RWMutex used to synchronize many read-only operations each lasting hundreds of milliseconds or more, and the writes which require an exclusive lock seldom happen), there should be some benchmarks proving that RWMutex indeed helps to improve the performance. A typical example where RWMutex certainly does more harm than good is a simple protection of a variable in a struct: type Box struct { mu sync . RWMutex // DON'T DO THIS -- use a simple Mutex instead. x int } func ( b * Box ) Get () int { b . mu . RLock () defer b . mu . RUnlock () return b . x } func ( b * Box ) Set ( x int ) { b . mu . Lock () defer b . mu . Unlock () b . x = x }","title":"Scalability"},{"location":"CodeReviewConcurrency/#time","text":"# Tm.1. Is time.Ticker stopped using defer tick.Stop() ? It's a memory leak not to stop the ticker when the function which uses the ticker in a loop returns. # Tm.2. Are time.Time structs compared using Equal() method, not just == ? Quoting the documentation for time.Time : Note that the Go == operator compares not just the time instant but also the Location and the monotonic clock reading. Therefore, Time values should not be used as map or database keys without first guaranteeing that the identical Location has been set for all values, which can be achieved through use of the UTC() or Local() method, and that the monotonic clock reading has been stripped by setting t = t.Round(0) . In general, prefer t.Equal(u) to t == u , since t.Equal() uses the most accurate comparison available and correctly handles the case when only one of its arguments has a monotonic clock reading. # Tm.3. Before calling time.Since(t) , the monotonic component is not stripped from t ? This is a consequence of the previous item. If the monotonic component is stripped from the time.Time structure before passing it into time.Since() function (via calling either UTC() , Local() , In() , Round() , Truncate() , or AddDate() ) the result of time.Since() might be negative on very occasions, such as if the system time has been synced via NTP between the moment when the start time was originally obtained and the moment when time.Since() is called. If the monotonic component is not stripped, time.Since() will always return a positive duration. # Tm.4. If you want to compare system times via t.Before(u) , do you strip the monotonic component from the argument, e.g. via u.Round(0) ? This is another point related to Tm.2 . Sometimes, you need to compare two time.Time structs only by the system time stored in them, specifically. You may need this before storing one of these Time structs on disk or sending them over the network. Imagine, for example, some sort of telemetry agent which pushes a telemetry metric together with time periodically to some remote system: var latestSentTime time . Time func pushMetricPeriodically ( ctx context . Context ) { t := time . NewTicker ( time . Second ) defer t . Stop () for { select { case <- ctx . Done : return case <- t . C : newTime := time . Now (). Round ( 0 ) // Strip monotonic component to compare system time only // Check that the new time is later to avoid messing up the telemetry if the system time // is set backwards on an NTP sync. if latestSentTime . Before ( newTime ) { sendOverNetwork ( NewDataPoint ( newTime , metric ())) latestSentTime = newTime } } } } This code would be wrong without calling Round(0) , i. e. stripping the monotonic component.","title":"Time"},{"location":"CodeReviewConcurrency/#reading-list","text":"Go Code Review Comments : a checklist for reviewing Go code, not concurrency-specific. Go concurrency: - The Go Memory Model - Section about concurrency in Effective Go - Posts in The Go Blog: - Share Memory By Communicating - Go Concurrency Patterns: Timing out, moving on - Go Concurrency Patterns: Context - Go Concurrency Patterns: Pipelines and cancellation - Advanced Go Concurrency Patterns (video) - Rethinking Classical Concurrency Patterns (video) - Understanding Real-World Concurrency Bugs in Go Concurrency, but not specific to Go: - Mechanical Sympathy: Single Writer Principle","title":"Reading List"},{"location":"CodeTools/","text":"An overview of tools that will help improve your Go code All-in-one golangci-lint - Bundle of gofmt , golint , govet and many other tools that shares work between the different linters for better performance. Recommended by the original author to replace gometalinter (Drop-in replacement). DEPRECATED: gometalinter - Automates the installation, configuration and application of gofmt , golint , govet and several other code validation tools. Code Formatting Articles Formatting Go Code with gofmt Tools gofmt - Start with the standard Go code formatter golint - Detects style mistakes in Go code goimports - Format code and fix your import statements gofumpt - A stricter gofmt revive - Fast, configurable, extensible, flexible, and beautiful linter for Go Code generation, Templating and Generics json-to-go - Generate Go structs from JSON. Go gen - Type-driven code generation (generics) gojson - Another Go struct generator. gotemplate - Package-based templating system for Go sqlgen - Generate Go code for SQL interactions. zek - Generate Go struct from XML. Refactoring Articles Refactoring with go fmt gorename - easy refactoring Refactoring Tools - An overview of refactoring tools for Go. Quick renaming with gofmt Tools eg - Example-based refactoring tool for Go gofmt - Start with the standard Go code formatter gorename - Renaming tool for Go Error Detection Articles Go Inspection Tools - An overview of tools for Go code inspection. Tools AlignCheck, StructCheck, VarCheck - A suite of tools for checking your code. errcheck - Ensure you check your error conditions. go vet - Read this first on how to use the go vet command. SafeSQL - Protect against unsafe SQL in your code. Navigation Go Guru - User Manual - A tool for understanding Go code. Pythia - A browser-based UI for Go Guru. Visualization godepgraph - A tool for generating dependency graphs of Go code.","title":"CodeTools"},{"location":"CodeTools/#all-in-one","text":"golangci-lint - Bundle of gofmt , golint , govet and many other tools that shares work between the different linters for better performance. Recommended by the original author to replace gometalinter (Drop-in replacement). DEPRECATED: gometalinter - Automates the installation, configuration and application of gofmt , golint , govet and several other code validation tools.","title":"All-in-one"},{"location":"CodeTools/#code-formatting","text":"","title":"Code Formatting"},{"location":"CodeTools/#articles","text":"Formatting Go Code with gofmt","title":"Articles"},{"location":"CodeTools/#tools","text":"gofmt - Start with the standard Go code formatter golint - Detects style mistakes in Go code goimports - Format code and fix your import statements gofumpt - A stricter gofmt revive - Fast, configurable, extensible, flexible, and beautiful linter for Go","title":"Tools"},{"location":"CodeTools/#code-generation-templating-and-generics","text":"json-to-go - Generate Go structs from JSON. Go gen - Type-driven code generation (generics) gojson - Another Go struct generator. gotemplate - Package-based templating system for Go sqlgen - Generate Go code for SQL interactions. zek - Generate Go struct from XML.","title":"Code generation, Templating and Generics"},{"location":"CodeTools/#refactoring","text":"","title":"Refactoring"},{"location":"CodeTools/#articles_1","text":"Refactoring with go fmt gorename - easy refactoring Refactoring Tools - An overview of refactoring tools for Go. Quick renaming with gofmt","title":"Articles"},{"location":"CodeTools/#tools_1","text":"eg - Example-based refactoring tool for Go gofmt - Start with the standard Go code formatter gorename - Renaming tool for Go","title":"Tools"},{"location":"CodeTools/#error-detection","text":"","title":"Error Detection"},{"location":"CodeTools/#articles_2","text":"Go Inspection Tools - An overview of tools for Go code inspection.","title":"Articles"},{"location":"CodeTools/#tools_2","text":"AlignCheck, StructCheck, VarCheck - A suite of tools for checking your code. errcheck - Ensure you check your error conditions. go vet - Read this first on how to use the go vet command. SafeSQL - Protect against unsafe SQL in your code.","title":"Tools"},{"location":"CodeTools/#navigation","text":"Go Guru - User Manual - A tool for understanding Go code. Pythia - A browser-based UI for Go Guru.","title":"Navigation"},{"location":"CodeTools/#visualization","text":"godepgraph - A tool for generating dependency graphs of Go code.","title":"Visualization"},{"location":"Comments/","text":"Comments Every package should have a package comment. It should immediately precede the package statement in one of the files in the package. (It only needs to appear in one file.) It should begin with a single sentence that begins \"Package packagename \" and give a concise summary of the package functionality. This introductory sentence will be used in godoc's list of all packages. Subsequent sentences and/or paragraphs can give more details. Sentences should be properly punctuated. // Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman Nearly every top-level type, const, var and func should have a comment. A comment for bar should be in the form \" bar floats on high o'er vales and hills.\". The first letter of bar should not be capitalized unless it's capitalized in the code. // enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit () os . Error { ... } All text that you indent inside a comment, godoc will render as a pre-formatted block. This facilitates code samples. // fight can be used on any enemy and returns whether Superman won. // // Examples: // // fight(\"a random potato\") // fight(LexLuthor{}) // func fight ( enemy interface {}) bool { ... }","title":"Comments"},{"location":"Comments/#comments","text":"Every package should have a package comment. It should immediately precede the package statement in one of the files in the package. (It only needs to appear in one file.) It should begin with a single sentence that begins \"Package packagename \" and give a concise summary of the package functionality. This introductory sentence will be used in godoc's list of all packages. Subsequent sentences and/or paragraphs can give more details. Sentences should be properly punctuated. // Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman Nearly every top-level type, const, var and func should have a comment. A comment for bar should be in the form \" bar floats on high o'er vales and hills.\". The first letter of bar should not be capitalized unless it's capitalized in the code. // enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit () os . Error { ... } All text that you indent inside a comment, godoc will render as a pre-formatted block. This facilitates code samples. // fight can be used on any enemy and returns whether Superman won. // // Examples: // // fight(\"a random potato\") // fight(LexLuthor{}) // func fight ( enemy interface {}) bool { ... }","title":"Comments"},{"location":"CommitMessage/","text":"Commit messages Commit messages, also known as CL (changelist) descriptions, should be formatted per https://tip.golang.org/doc/contribute.html#commit_messages . For example, net/http: frob the quux before blarfing [longer description here in the body] Fixes #nnnn Notably, for the subject (the first line of description): the name of the package affected by the change goes before the colon the part after the colon uses the verb tense + phrase that completes the blank in, \"This change modifies Go to ___________\" the verb after the colon is lowercase there is no trailing period it should be kept as short as possible (many git viewing tools prefer under ~76 characters, though Go isn't super strict about this). For the body (the rest of the description): the text should be wrapped to ~76 characters (to appease git viewing tools, mainly), unless you really need longer lines (e.g. for ASCII art, tables, or long links) the Fixes line goes after the body with a blank newline separating the two there is no Markdown in the commit message we do not use Signed-off-by lines. Don't add them. Our Gerrit server & GitHub bots enforce CLA compliance instead. when referencing CLs, prefer saying \"CL nnn\" or using a golang.org/cl/nnn shortlink over a direct Gerrit URL or git hash, since that's more future-proof. when moving code between repos, include the CL, repository name, and git hash that it was moved from/to, so it is easier to trace history/blame. Please don't use alternate GitHub-supported aliases like Close or Resolves instead of Fixes . To link a commit to an issue without marking it fixed\u2014for example, if the commit is working toward a fix but not yet a complete fix\u2014GitHub requires only that the issue is mentioned by number in the commit message. By convention, Go commits mention this at the bottom of the message using For , where Fixes might be expected, even if the number is also mentioned in the body of the commit message. For example: Refactor func Foo. This will make the handling of <corner case> shorter and easier to test. For #nnnn It is common in other Git projects to use Updates instead of For , and that is acceptable too, even though it makes little sense (the commit does not update the issue). More precise phrasings are fine too. Don't be too pedantic in code reviews: it's not worth asking people to change from Updates or something else to For , or vice versa. Reverts You can roll back a change using the Gerrit Revert button. Gerrit will generate a description for you. Edit the description to add the Gerrit CL number being rolled back next to or instead of the Git revision number. Do not use the Gerrit UI to create a revert of a revert, as that notifies people right away. Instead, mail it as a new change, and in the description explain that it is a roll forward of CL NNNNNN which was rolled back by CL NNNNNN. Other repos For non-\"go\" repos (\"crypto\", \"tools\", \"net\", etc), the subject is still the name of the package, but you need to fully-qualify the issue number with the GitHub org/repo syntax: ``` cipher/rot13: add new super secure cipher Fixes golang/go#1234 ```` Notably, the first line subject should not contain the x/crypto/ prefix. We only do that for the issue tracker. Non-normative references Please heed my plea and write good CL descriptions for Go\u2014and for any other project you work on. The CL description is a public document that explains to the future what has been done and why. GitHub Pull Requests If you're using GitHub Pull Requests, your commit message is constructed by GerritBot based on your PR's title & description. See https://github.com/golang/go/wiki/GerritBot#how-does-gerritbot-determine-the-final-commit-message If somebody asks you to modify your commit message, you'll need to modify your PR.","title":"CommitMessage"},{"location":"CommitMessage/#commit-messages","text":"Commit messages, also known as CL (changelist) descriptions, should be formatted per https://tip.golang.org/doc/contribute.html#commit_messages . For example, net/http: frob the quux before blarfing [longer description here in the body] Fixes #nnnn Notably, for the subject (the first line of description): the name of the package affected by the change goes before the colon the part after the colon uses the verb tense + phrase that completes the blank in, \"This change modifies Go to ___________\" the verb after the colon is lowercase there is no trailing period it should be kept as short as possible (many git viewing tools prefer under ~76 characters, though Go isn't super strict about this). For the body (the rest of the description): the text should be wrapped to ~76 characters (to appease git viewing tools, mainly), unless you really need longer lines (e.g. for ASCII art, tables, or long links) the Fixes line goes after the body with a blank newline separating the two there is no Markdown in the commit message we do not use Signed-off-by lines. Don't add them. Our Gerrit server & GitHub bots enforce CLA compliance instead. when referencing CLs, prefer saying \"CL nnn\" or using a golang.org/cl/nnn shortlink over a direct Gerrit URL or git hash, since that's more future-proof. when moving code between repos, include the CL, repository name, and git hash that it was moved from/to, so it is easier to trace history/blame. Please don't use alternate GitHub-supported aliases like Close or Resolves instead of Fixes . To link a commit to an issue without marking it fixed\u2014for example, if the commit is working toward a fix but not yet a complete fix\u2014GitHub requires only that the issue is mentioned by number in the commit message. By convention, Go commits mention this at the bottom of the message using For , where Fixes might be expected, even if the number is also mentioned in the body of the commit message. For example: Refactor func Foo. This will make the handling of <corner case> shorter and easier to test. For #nnnn It is common in other Git projects to use Updates instead of For , and that is acceptable too, even though it makes little sense (the commit does not update the issue). More precise phrasings are fine too. Don't be too pedantic in code reviews: it's not worth asking people to change from Updates or something else to For , or vice versa.","title":"Commit messages"},{"location":"CommitMessage/#reverts","text":"You can roll back a change using the Gerrit Revert button. Gerrit will generate a description for you. Edit the description to add the Gerrit CL number being rolled back next to or instead of the Git revision number. Do not use the Gerrit UI to create a revert of a revert, as that notifies people right away. Instead, mail it as a new change, and in the description explain that it is a roll forward of CL NNNNNN which was rolled back by CL NNNNNN.","title":"Reverts"},{"location":"CommitMessage/#other-repos","text":"For non-\"go\" repos (\"crypto\", \"tools\", \"net\", etc), the subject is still the name of the package, but you need to fully-qualify the issue number with the GitHub org/repo syntax: ``` cipher/rot13: add new super secure cipher Fixes golang/go#1234 ```` Notably, the first line subject should not contain the x/crypto/ prefix. We only do that for the issue tracker.","title":"Other repos"},{"location":"CommitMessage/#non-normative-references","text":"Please heed my plea and write good CL descriptions for Go\u2014and for any other project you work on. The CL description is a public document that explains to the future what has been done and why.","title":"Non-normative references"},{"location":"CommitMessage/#github-pull-requests","text":"If you're using GitHub Pull Requests, your commit message is constructed by GerritBot based on your PR's title & description. See https://github.com/golang/go/wiki/GerritBot#how-does-gerritbot-determine-the-final-commit-message If somebody asks you to modify your commit message, you'll need to modify your PR.","title":"GitHub Pull Requests"},{"location":"CommonMistakes/","text":"Table of Contents Introduction Using reference to loop iterator variable Using goroutines on loop iterator variables Introduction When new programmers start using Go or when old Go programmers start using a new concept, there are some common mistakes that many of them make. Here is a non-exhaustive list of some frequent mistakes that show up on the mailing lists and in IRC. Using reference to loop iterator variable In Go, the loop iterator variable is a single variable that takes different values in each loop iteration. This is very efficient, but might lead to unintended behavior when used incorrectly. For example, see the following program: func main () { var out [] * int for i := 0 ; i < 3 ; i ++ { out = append ( out , & i ) } fmt . Println ( \"Values:\" , * out [ 0 ], * out [ 1 ], * out [ 2 ]) fmt . Println ( \"Addresses:\" , out [ 0 ], out [ 1 ], out [ 2 ]) } It will output unexpected results: Values: 3 3 3 Addresses: 0x40e020 0x40e020 0x40e020 Explanation: in each iteration we append the address of i to the out slice, but since it is the same variable, we append the same address which eventually contains the last value that was assigned to i . One of the solutions is to copy the loop variable into a new variable: for i := 0; i < 3; i++ { + i := i // Copy i into a new variable. out = append(out, &i) } The new output of the program is what was expected: Values: 0 1 2 Addresses: 0x40e020 0x40e024 0x40e028 Explanation: the line i := i copies the loop variable i into a new variable scoped to the for loop body block, also called i . The address of the new variable is the one that is appended to the array, which makes it outlive the for loop body block. In each loop iteration a new variable is created. While this example might look a bit obvious, the same unexpected behavior could be more hidden in some other cases. For example, the loop variable can be an array and the reference can be a slice: func main () { var out [][] int for _ , i := range [][ 1 ] int {{ 1 }, { 2 }, { 3 }} { out = append ( out , i [:]) } fmt . Println ( \"Values:\" , out ) } Output: Values: [[3] [3] [3]] The same issue can be demonstrated also when the loop variable is being used in a Goroutine (see the following section). Using goroutines on loop iterator variables When iterating in Go, one might attempt to use goroutines to process data in parallel. For example, you might write something like this, using a closure: for _ , val := range values { go func () { fmt . Println ( val ) }() } The above for loops might not do what you expect because their val variable is actually a single variable that takes on the value of each slice element. Because the closures are all only bound to that one variable, there is a very good chance that when you run this code you will see the last element printed for every iteration instead of each value in sequence, because the goroutines will probably not begin executing until after the loop. The proper way to write that closure loop is: for _ , val := range values { go func ( val interface {}) { fmt . Println ( val ) }( val ) } By adding val as a parameter to the closure, val is evaluated at each iteration and placed on the stack for the goroutine, so each slice element is available to the goroutine when it is eventually executed. It is also important to note that variables declared within the body of a loop are not shared between iterations, and thus can be used separately in a closure. The following code uses a common index variable i to create separate val s, which results in the expected behavior: for i := range valslice { val := valslice [ i ] go func () { fmt . Println ( val ) }() } Note that without executing this closure as a goroutine, the code runs as expected. The following example prints out the integers between 1 and 10. for i := 1 ; i <= 10 ; i ++ { func () { fmt . Println ( i ) }() } Even though the closures all still close over the same variable (in this case, i ), they are executed before the variable changes, resulting in the desired behavior. http://golang.org/doc/go_faq.html#closures_and_goroutines You may find another, similar situation like the following: for _ , val := range values { go val . MyMethod () } func ( v * val ) MyMethod () { fmt . Println ( v ) } The above example also will print last element of values, the reason is same as closure. To fix the issue declare another variable inside the loop. for _ , val := range values { newVal := val go newVal . MyMethod () } func ( v * val ) MyMethod () { fmt . Println ( v ) }","title":"CommonMistakes"},{"location":"CommonMistakes/#table-of-contents","text":"Introduction Using reference to loop iterator variable Using goroutines on loop iterator variables","title":"Table of Contents"},{"location":"CommonMistakes/#introduction","text":"When new programmers start using Go or when old Go programmers start using a new concept, there are some common mistakes that many of them make. Here is a non-exhaustive list of some frequent mistakes that show up on the mailing lists and in IRC.","title":"Introduction"},{"location":"CommonMistakes/#using-reference-to-loop-iterator-variable","text":"In Go, the loop iterator variable is a single variable that takes different values in each loop iteration. This is very efficient, but might lead to unintended behavior when used incorrectly. For example, see the following program: func main () { var out [] * int for i := 0 ; i < 3 ; i ++ { out = append ( out , & i ) } fmt . Println ( \"Values:\" , * out [ 0 ], * out [ 1 ], * out [ 2 ]) fmt . Println ( \"Addresses:\" , out [ 0 ], out [ 1 ], out [ 2 ]) } It will output unexpected results: Values: 3 3 3 Addresses: 0x40e020 0x40e020 0x40e020 Explanation: in each iteration we append the address of i to the out slice, but since it is the same variable, we append the same address which eventually contains the last value that was assigned to i . One of the solutions is to copy the loop variable into a new variable: for i := 0; i < 3; i++ { + i := i // Copy i into a new variable. out = append(out, &i) } The new output of the program is what was expected: Values: 0 1 2 Addresses: 0x40e020 0x40e024 0x40e028 Explanation: the line i := i copies the loop variable i into a new variable scoped to the for loop body block, also called i . The address of the new variable is the one that is appended to the array, which makes it outlive the for loop body block. In each loop iteration a new variable is created. While this example might look a bit obvious, the same unexpected behavior could be more hidden in some other cases. For example, the loop variable can be an array and the reference can be a slice: func main () { var out [][] int for _ , i := range [][ 1 ] int {{ 1 }, { 2 }, { 3 }} { out = append ( out , i [:]) } fmt . Println ( \"Values:\" , out ) } Output: Values: [[3] [3] [3]] The same issue can be demonstrated also when the loop variable is being used in a Goroutine (see the following section).","title":"Using reference to loop iterator variable"},{"location":"CommonMistakes/#using-goroutines-on-loop-iterator-variables","text":"When iterating in Go, one might attempt to use goroutines to process data in parallel. For example, you might write something like this, using a closure: for _ , val := range values { go func () { fmt . Println ( val ) }() } The above for loops might not do what you expect because their val variable is actually a single variable that takes on the value of each slice element. Because the closures are all only bound to that one variable, there is a very good chance that when you run this code you will see the last element printed for every iteration instead of each value in sequence, because the goroutines will probably not begin executing until after the loop. The proper way to write that closure loop is: for _ , val := range values { go func ( val interface {}) { fmt . Println ( val ) }( val ) } By adding val as a parameter to the closure, val is evaluated at each iteration and placed on the stack for the goroutine, so each slice element is available to the goroutine when it is eventually executed. It is also important to note that variables declared within the body of a loop are not shared between iterations, and thus can be used separately in a closure. The following code uses a common index variable i to create separate val s, which results in the expected behavior: for i := range valslice { val := valslice [ i ] go func () { fmt . Println ( val ) }() } Note that without executing this closure as a goroutine, the code runs as expected. The following example prints out the integers between 1 and 10. for i := 1 ; i <= 10 ; i ++ { func () { fmt . Println ( i ) }() } Even though the closures all still close over the same variable (in this case, i ), they are executed before the variable changes, resulting in the desired behavior. http://golang.org/doc/go_faq.html#closures_and_goroutines You may find another, similar situation like the following: for _ , val := range values { go val . MyMethod () } func ( v * val ) MyMethod () { fmt . Println ( v ) } The above example also will print last element of values, the reason is same as closure. To fix the issue declare another variable inside the loop. for _ , val := range values { newVal := val go newVal . MyMethod () } func ( v * val ) MyMethod () { fmt . Println ( v ) }","title":"Using goroutines on loop iterator variables"},{"location":"CompilerOptimizations/","text":"Compiler And Runtime Optimizations This page lists optimizations done by the compilers. Note that these are not guaranteed by the language specification. Interface values Zero-width types in interface values Putting a zero-width type in an interface value doesn't allocate. gc: 1.0+ gccgo: ? Word-sized value in an interface value Putting a word-sized-or-less non-pointer type in an interface value doesn't allocate. gc: 1.0-1.3, but not in 1.4+ gccgo: never string and []byte Map lookup by []byte For a map m of type map[string]T and []byte b , m[string(b)] doesn't allocate. (the temporary string copy of the byte slice isn't made) gc: 1.4+ gccgo: ? range over []byte (s) No allocation when converting a string into a []byte for ranging over the bytes: s := \"foo\" for i , c := range [] byte ( s ) { // ... } conversion for string comparison No allocation done when converting a []byte into a string for comparison purposes var b1 string var b2 [] byte var x = string ( b1 ) == string ( b2 ) // memeq var y = string ( b1 ) < string ( b2 ) // lexicographical comparison gc: 1.5+ (CL 3790) gccgo: ? Escape analysis and Inlining Use -gcflags -m to observe the result of escape analysis and inlining decisions for the gc toolchain. (TODO: explain the output of -gcflags -m ). Escape analysis Gc compiler does global escape analysis across function and package boundaries. However, there are lots of cases where it gives up. For example, anything assigned to any kind of indirection ( *p = ... ) is considered escaped. Other things that can inhibit analysis are: function calls, package boundaries, slice literals, subslicing and indexing, etc. Full rules are too complex to describe, so check the -m output. gc: 1.0+ gccgo: 8.0+. Function Inlining Only short and simple functions are inlined. To be inlined a function must conform to the rules: function should be simple enough, the number of AST nodes must less than the budget (80); function doesn't contain complex things like closures, defer, recover, select, etc; function isn't prefixed by go:noinline; function isn't prefixed by go:uintptrescapes, since the escape information will be lost during inlining; function has body; etc. gc: 1.0+ gccgo: -O1 and above. Idioms Optimized memclr For a slice or array s, loops of the form for i := range s { s [ i ] = < zero value for element of s > } are converted into efficient runtime memclr calls. Issue and commit . gc: 1.5+ gccgo: ? Non-scannable objects Garbage collector does not scan underlying buffers of slices, channels and maps when element type does not contain pointers (both key and value for maps). This allows to hold large data sets in memory without paying high price during garbage collection. For example, the following map won't visibly affect GC time: type Key [ 64 ] byte // SHA-512 hash type Value struct { Name [ 32 ] byte Balance uint64 Timestamp int64 } m := make ( map [ Key ] Value , 1e8 ) gc: 1.5+ gccgo: ?","title":"CompilerOptimizations"},{"location":"CompilerOptimizations/#compiler-and-runtime-optimizations","text":"This page lists optimizations done by the compilers. Note that these are not guaranteed by the language specification.","title":"Compiler And Runtime Optimizations"},{"location":"CompilerOptimizations/#interface-values","text":"","title":"Interface values"},{"location":"CompilerOptimizations/#zero-width-types-in-interface-values","text":"Putting a zero-width type in an interface value doesn't allocate. gc: 1.0+ gccgo: ?","title":"Zero-width types in interface values"},{"location":"CompilerOptimizations/#word-sized-value-in-an-interface-value","text":"Putting a word-sized-or-less non-pointer type in an interface value doesn't allocate. gc: 1.0-1.3, but not in 1.4+ gccgo: never","title":"Word-sized value in an interface value"},{"location":"CompilerOptimizations/#string-and-byte","text":"","title":"string and []byte"},{"location":"CompilerOptimizations/#map-lookup-by-byte","text":"For a map m of type map[string]T and []byte b , m[string(b)] doesn't allocate. (the temporary string copy of the byte slice isn't made) gc: 1.4+ gccgo: ?","title":"Map lookup by []byte"},{"location":"CompilerOptimizations/#range-over-bytes","text":"No allocation when converting a string into a []byte for ranging over the bytes: s := \"foo\" for i , c := range [] byte ( s ) { // ... }","title":"range over []byte(s)"},{"location":"CompilerOptimizations/#conversion-for-string-comparison","text":"No allocation done when converting a []byte into a string for comparison purposes var b1 string var b2 [] byte var x = string ( b1 ) == string ( b2 ) // memeq var y = string ( b1 ) < string ( b2 ) // lexicographical comparison gc: 1.5+ (CL 3790) gccgo: ?","title":"conversion for string comparison"},{"location":"CompilerOptimizations/#escape-analysis-and-inlining","text":"Use -gcflags -m to observe the result of escape analysis and inlining decisions for the gc toolchain. (TODO: explain the output of -gcflags -m ).","title":"Escape analysis and Inlining"},{"location":"CompilerOptimizations/#escape-analysis","text":"Gc compiler does global escape analysis across function and package boundaries. However, there are lots of cases where it gives up. For example, anything assigned to any kind of indirection ( *p = ... ) is considered escaped. Other things that can inhibit analysis are: function calls, package boundaries, slice literals, subslicing and indexing, etc. Full rules are too complex to describe, so check the -m output. gc: 1.0+ gccgo: 8.0+.","title":"Escape analysis"},{"location":"CompilerOptimizations/#function-inlining","text":"Only short and simple functions are inlined. To be inlined a function must conform to the rules: function should be simple enough, the number of AST nodes must less than the budget (80); function doesn't contain complex things like closures, defer, recover, select, etc; function isn't prefixed by go:noinline; function isn't prefixed by go:uintptrescapes, since the escape information will be lost during inlining; function has body; etc. gc: 1.0+ gccgo: -O1 and above.","title":"Function Inlining"},{"location":"CompilerOptimizations/#idioms","text":"","title":"Idioms"},{"location":"CompilerOptimizations/#optimized-memclr","text":"For a slice or array s, loops of the form for i := range s { s [ i ] = < zero value for element of s > } are converted into efficient runtime memclr calls. Issue and commit . gc: 1.5+ gccgo: ?","title":"Optimized memclr"},{"location":"CompilerOptimizations/#non-scannable-objects","text":"Garbage collector does not scan underlying buffers of slices, channels and maps when element type does not contain pointers (both key and value for maps). This allows to hold large data sets in memory without paying high price during garbage collection. For example, the following map won't visibly affect GC time: type Key [ 64 ] byte // SHA-512 hash type Value struct { Name [ 32 ] byte Balance uint64 Timestamp int64 } m := make ( map [ Key ] Value , 1e8 ) gc: 1.5+ gccgo: ?","title":"Non-scannable objects"},{"location":"Conferences/","text":"Go Conferences and Major Events Upcoming Please keep all items in chronological order. There is also a map of the confirmed 2019 conferences at j.mp/goconmap . The map will be updated about once a week from the entries below. Errors in the map can be reported to van@golang.org . Name Date Location Website O'Reilly OSS Superstream: Go 2021-04-29 Online website GopherCon Europe 2021-05-26-28 Online https://gophercon.eu GoWest Conference 2021 2021-10-23 Online/ Salt Lake City, Ut USA https://gowestconf.com CFP: https://www.papercall.io/gowestconf21 GopherCon 2021-12-05-08 San Diego & Online website: https://www.gophercon.com/ CFP: https://www.papercall.io/gophercon-2021 Archives Please keep all items in reverse chronological order (most recent first) Name Date Location Talk, Video Archives GopherCon Russia 2021 Online 2021-04-23-25 Online https://www.gophercon-russia.ru/en GopherCon Singapore 2020 tbd due to COVID-19 Singapore https://2020.gophercon.sg/ CFP: https://www.papercall.io/gopherconsg-2020 GopherConIndia 2020 tbd due to COVID-19 Goa, India https://gopherconindia.com/ CFP: https://www.papercall.io/gci20 All Systems Go 2020-12-03 Online https://allsystemsgo.space GopherChina 2020 2020-11-21/22 ShangHai, China https://www.gopherchina.org GoLab 2020 2020-10-19-25 Online https://golab.io GothamGo 2020-10-02 New York City, NY USA http://gothamgo.com/ Go West Online 2020-10-02 Online https://www.gowestconf.com/ ~GopherCon UK~ 2020-08-21-23 ~London, UK~ https://www.gophercon.co.uk/ CANCELLED DUE TO COVID-19 GopherCon Russia 2020/2 Online 2020-08-08-09 Moscow, Russia https://www.gophercon-russia.ru/en GopherCon Turkey (Online) 2020-07-25 Istanbul, Turkey https://gophercon.ist/ GopherCon Europe 2020-07 Berlin, Germany https://gophercon.berlin/ GopherCon Africa 2020 2020-07-14-16 Lagos, Nigeria https://www.gophercon.africa/ GoWayFest 4.0 (online edition) 2020-07-11-12 Minsk, Belarus https://goway.io CFP: https://www.papercall.io/gowayfest4 GoCon Sendai 2020-07-04 Sendai, Japan http://sendai.gocon.jp/ ~GoCon Canada~ 2020-05-25-26 ~Toronto, Canada~ https://gocon.ca CANCELLED DUE TO COVID-19 GoWest 2020-05-08 Salt Lake City, UT USA https://gowestconf.com CFP: https://www.papercall.io/gowestconf GoRemoteFest 2020-04-26 Online https://www.goremotefest.com EU Go Contributor Summit 2020-04-23 Berlin, Germany CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS dotGo 2020-03-30 Paris, France https://2020.dotgo.eu/ CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS GopherCon Russia 2020 Online 2020-03-28 Moscow, Russia https://www.gophercon-russia.ru/en Capital Go 2020 2020-03-26-27 McLean, Virginia USA http://capitalgolang.com CANCELLED DUE TO COVID-19 CORONAVIRUS GopherCon Israel 2020-02-03 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2020-02-02 Brussels, Belgium https://fosdem.org/2020/schedule/track/go/ GoDays 2020-01-21-23 Berlin, Germany https://www.godays.io/ CFP: https://www.godays.io/cfp Gopherpalooza 2019-11-07-08 Mountain View, CA USA http://gopherpalooza.com/ GopherCon Vietnam 2019 2019-11-02 Ho Chi Minh City, Vietnam https://gophercon.vn Golang Piter 2019-11-01 St. Petersburg, Russia https://golangpiter.com Go Conference Tokyo 2019-10-28 Tokyo, Japan https://gocon.jp/ GoLab 2019 2019-10-20-22 Florence, Italy https://golab.io GolangConf 2019 2019-10-07 Moscow, Russia CfP: https://www.papercall.io/golangconf GopherConBR 2019 2019-09-27-28 Florian\u00f3polis, Brazil http://2019.gopherconbr.org OpenGo 2019 2019-09-23-25 Hollywood, FL USA https://opengo.io/ GopherCon UK 2019-08-21-23 London, UK https://www.gophercon.co.uk/ GopherCon 2019 2019-07-24-27 San Diego, CA USA https://www.gophercon.com/ GopherShip 2019-07-20 Moscow, Russia https://gophership.ru Go Conference '19 Summer in Fukuoka 2019-07-13 Fukuoka, Japan https://fukuoka.gocon.jp/ GoWayFest 3.0 2019-07-05 Minsk, Belarus https://goway.io CFP: https://www.papercall.io/gowayfest3 Gophercon Poland 2019-06-27 Gdansk, Poland @GopherConPL CFP: https://eventil.com/events/GopherConPL/cfp GoGoConf 2019-06-14 Krakow, Poland https://www.gogoconf.rocks CFP: https://www.papercall.io/gogoconf GopherCon Europe 2019-06-01-05-30 Tenerife, Canary Islands, Spain https://www.gophercon.es CFP: https://www.papercall.io/gophercon-eu-2019 GoCon Canada 2019-05-31 Toronto, Canada https://gocon.ca CFP: https://www.papercall.io/goconca Go Conference Tokyo 2019-05-18 Tokyo, Japan https://gocon.jp/ CFP: https://www.papercall.io/gocon-tokyo-2019 GopherCon Singapore 2019 2019-05-03 Singapore https://2019.gophercon.sg/ CFP: https://www.papercall.io/gopherconsg2019 GopherChina 2019 2019-04-27 China BeiJing https://gopherchina.org/ GopherCon Russia 2019-04-13 Moscow, Russia https://www.gophercon-russia.ru/en GothamGo 2019-04-12 New York City, NY USA http://gothamgo.com/ CFP https://www.papercall.io/gothamgo2019 CodeFest X 2019-03-30-31 Novosibirsk, Russia dotGo 2019 2019-03-25 Paris, France https://2019.dotgo.eu/ GopherCon Israel 2019-02-11 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2019-02-02 Brussels, Belgium https://fosdem.org/2019/schedule/track/go/ GoDays 2019-01-30 Berlin, Germany https://www.godays.io/ GopherCon India 2019 2019-01-18-19 Goa, India https://gopherconindia.com/ 2018 GopherCon Vietnam 2018 2018-12-08 Ho Chi Minh City, Vietnam http://gophercon.vn Go Conference Tokyo 2018-11-25 Tokyo, Japan https://gocon.connpass.com/event/109368/ GoGoConf 2018-10-25 Krakow, Poland https://www.gogoconf.rocks GoLab 2018 2018-10-22-23 Florence, Italy https://golab.io Gopherpalooza 2018 2018-10-12 San Francisco, CA http://gopherpalooza.com/ Go Stockholm Conference 2018-10-06 Stockholm, Sweden https://www.eventbrite.com/e/go-stockholm-conference-tickets-49325007425 GoWayFest 2.0 2018-09-28 Minsk, Belarus https://goway.io GopherCon Brasil 2018 2018-09-27-29 Florian\u00f3polis, Brazil https://2018.gopherconbr.org/en CFP https://www.papercall.io/gopherconbrasil2018 GopherCon Denver 2018 2018-08-27-30 Denver, CO https://www.gophercon.com/ Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdatAqf-2_125H4sGzaWngM Lightning Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdMEZScpaoRX-vyt6pRUvfM GopherCon UK 2018 2018-08-01-03 London, UK https://www.gophercon.co.uk/ Go Northwest 2018 2018-07-30 Seattle, WA, USA http://gonorthwest.io/ GopherCon Europe - Iceland 2018-06-01-02 Reykjavik, Iceland Talks Website GopherCon SG 2018 2018-05-04 Singapore https://2018.gophercon.sg/ GothamGo 2018 2018-04-27 New York, USA http://gothamgo.com/ Go Conference Tokyo 2018-04-15 Tokyo, Japan https://gocon.connpass.com/event/82515/ GopherCon China 2018 2018-04-14-15 Shanghai, China http://www.gopherchina.org/ GopherCon Russia 2018 2018-03-17 Moscow, Russia http://gophercon-russia.ru/en GopherConRu/talks GopherCon India 2018 2018-03-09-10 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2018 2018-02-03-04 Brussels, Belgium https://fosdem.org/2018/schedule/track/go/ 2017 GopherCon Brasil 2017 2017-11-17-19 Florian\u00f3polis, Brazil https://2017.gopherconbr.org/en dotGo 2017-11-06 Paris, France https://www.dotgo.eu Go Conference Tokyo 2017-11-05 Tokyo, Japan https://gocon.connpass.com/event/66615/ GothamGo 2017-10-05-06 New York, USA http://gothamgo.com/ Golang UK 2017-08-16-18 London, UK https://golanguk.com GopherCon Denver 2017-07-12-15 Denver, CO http://gophercon.com GopherCon Singapore 2017 2017-05-25-26 Singapore https://2017.gophercon.sg Capital Go Language Conference 2017-04-24-25 Washington, DC http://www.capitalgolang.com/ GopherChina 2017 2017-04-15-16 Shanghai http://www.bagevent.com/event/357764 Go Conference Tokyo 2017-03-25 Tokyo, Japan https://gocon.connpass.com/event/52441/ GopherCon India 2017 2017-02-24-25 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2017-02-05 Brussels, Belgium https://fosdem.org/2017/schedule/track/go/ GoLab 2017-01-20-21 Florence, Italy http://golab.io 2016 GothamGo 2016-11-18 New York, USA http://gothamgo.com/ GopherCon Brasil 2016-11-04-05 Florian\u00f3polis, Brazil https://2016.gopherconbr.org/en/ dotGo 2016-10-10 Paris, France http://2016.dotgo.eu Golang UK 2016-08-18 London, UK http://golanguk.com GopherCon Denver 2016-07-11 Denver, CO http://gophercon.com Gopherfest 2016-05-16 San Francisco, USA http://www.gopherfest.org/ Go Conference Tokyo 2016-04-23 Tokyo, Japan http://gocon.connpass.com/event/27521/ Gopher China 2016-04-16 Beijing, China http://www.gopherchina.org GopherCon Dubai 2016-02-23 Dubai, UAE http://www.gophercon.ae GopherCon India 2016-02-19 Bengaluru, India videos FOSDEM 2016-01-30 Brussels, Belgium https://video.fosdem.org/2016/h1302/ Gopher Gala 2016-01-22 Earth 2015 GoLab 2015-12-15 Florence, Italy http://golab.io Go Conference Tokyo 2015-12-06 Tokyo, Japan https://gocon.connpass.com/event/22930/ GopherFest SV 2015-11-18 Facebook, Menlo Park, CA videos dotGo 2015-11-09 Paris, France videos GothamGo 2015-10-02 NY, NY videos GolangUK 2015-08-21 London, UK videos GopherCon Denver 2015-07-07 Denver, CO keynotes , lightning Go Conference Tokyo 2015-06-20 Tokyo, Japan https://gocon.connpass.com/event/14063/ GopherfestSF 2015-06-25 San Francisco, CA videos GopherCon India 2015-03-17 Bengaluru, India videos Go Devroom FOSDEM 2015-03-04 Brussels, Belgium videos Gopher China 2015-04-25 Shanghai, China London Go Gathering 2015-02-03 London, UK videos 2014 Go Conference Tokyo 2014-11-30 Tokyo, Japan https://gocon.connpass.com/event/9748/ GothamGo 2014-11-15 NYC, NY videos dotGo 2014-09-10 Paris, France videos Go Devroom FOSDEM 2014-06-30 Brussels, Belgium videos Go Conference Tokyo 2014-05-31 Tokyo, Japan https://gocon.connpass.com/event/6370/ GopherCon Denver 2014-04-24 Denver, CO videos 2013 Go Conference Tokyo 2013-10-14 Tokyo, Japan https://gocon.connpass.com/event/3510/ Go Conference Tokyo 2013-04-13 Tokyo, Japan https://gocon.connpass.com/event/1906/","title":"Conferences"},{"location":"Conferences/#go-conferences-and-major-events","text":"","title":"Go Conferences and Major Events"},{"location":"Conferences/#upcoming","text":"Please keep all items in chronological order. There is also a map of the confirmed 2019 conferences at j.mp/goconmap . The map will be updated about once a week from the entries below. Errors in the map can be reported to van@golang.org . Name Date Location Website O'Reilly OSS Superstream: Go 2021-04-29 Online website GopherCon Europe 2021-05-26-28 Online https://gophercon.eu GoWest Conference 2021 2021-10-23 Online/ Salt Lake City, Ut USA https://gowestconf.com CFP: https://www.papercall.io/gowestconf21 GopherCon 2021-12-05-08 San Diego & Online website: https://www.gophercon.com/ CFP: https://www.papercall.io/gophercon-2021","title":"Upcoming"},{"location":"Conferences/#archives","text":"Please keep all items in reverse chronological order (most recent first) Name Date Location Talk, Video Archives GopherCon Russia 2021 Online 2021-04-23-25 Online https://www.gophercon-russia.ru/en GopherCon Singapore 2020 tbd due to COVID-19 Singapore https://2020.gophercon.sg/ CFP: https://www.papercall.io/gopherconsg-2020 GopherConIndia 2020 tbd due to COVID-19 Goa, India https://gopherconindia.com/ CFP: https://www.papercall.io/gci20 All Systems Go 2020-12-03 Online https://allsystemsgo.space GopherChina 2020 2020-11-21/22 ShangHai, China https://www.gopherchina.org GoLab 2020 2020-10-19-25 Online https://golab.io GothamGo 2020-10-02 New York City, NY USA http://gothamgo.com/ Go West Online 2020-10-02 Online https://www.gowestconf.com/ ~GopherCon UK~ 2020-08-21-23 ~London, UK~ https://www.gophercon.co.uk/ CANCELLED DUE TO COVID-19 GopherCon Russia 2020/2 Online 2020-08-08-09 Moscow, Russia https://www.gophercon-russia.ru/en GopherCon Turkey (Online) 2020-07-25 Istanbul, Turkey https://gophercon.ist/ GopherCon Europe 2020-07 Berlin, Germany https://gophercon.berlin/ GopherCon Africa 2020 2020-07-14-16 Lagos, Nigeria https://www.gophercon.africa/ GoWayFest 4.0 (online edition) 2020-07-11-12 Minsk, Belarus https://goway.io CFP: https://www.papercall.io/gowayfest4 GoCon Sendai 2020-07-04 Sendai, Japan http://sendai.gocon.jp/ ~GoCon Canada~ 2020-05-25-26 ~Toronto, Canada~ https://gocon.ca CANCELLED DUE TO COVID-19 GoWest 2020-05-08 Salt Lake City, UT USA https://gowestconf.com CFP: https://www.papercall.io/gowestconf GoRemoteFest 2020-04-26 Online https://www.goremotefest.com EU Go Contributor Summit 2020-04-23 Berlin, Germany CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS dotGo 2020-03-30 Paris, France https://2020.dotgo.eu/ CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS GopherCon Russia 2020 Online 2020-03-28 Moscow, Russia https://www.gophercon-russia.ru/en Capital Go 2020 2020-03-26-27 McLean, Virginia USA http://capitalgolang.com CANCELLED DUE TO COVID-19 CORONAVIRUS GopherCon Israel 2020-02-03 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2020-02-02 Brussels, Belgium https://fosdem.org/2020/schedule/track/go/ GoDays 2020-01-21-23 Berlin, Germany https://www.godays.io/ CFP: https://www.godays.io/cfp Gopherpalooza 2019-11-07-08 Mountain View, CA USA http://gopherpalooza.com/ GopherCon Vietnam 2019 2019-11-02 Ho Chi Minh City, Vietnam https://gophercon.vn Golang Piter 2019-11-01 St. Petersburg, Russia https://golangpiter.com Go Conference Tokyo 2019-10-28 Tokyo, Japan https://gocon.jp/ GoLab 2019 2019-10-20-22 Florence, Italy https://golab.io GolangConf 2019 2019-10-07 Moscow, Russia CfP: https://www.papercall.io/golangconf GopherConBR 2019 2019-09-27-28 Florian\u00f3polis, Brazil http://2019.gopherconbr.org OpenGo 2019 2019-09-23-25 Hollywood, FL USA https://opengo.io/ GopherCon UK 2019-08-21-23 London, UK https://www.gophercon.co.uk/ GopherCon 2019 2019-07-24-27 San Diego, CA USA https://www.gophercon.com/ GopherShip 2019-07-20 Moscow, Russia https://gophership.ru Go Conference '19 Summer in Fukuoka 2019-07-13 Fukuoka, Japan https://fukuoka.gocon.jp/ GoWayFest 3.0 2019-07-05 Minsk, Belarus https://goway.io CFP: https://www.papercall.io/gowayfest3 Gophercon Poland 2019-06-27 Gdansk, Poland @GopherConPL CFP: https://eventil.com/events/GopherConPL/cfp GoGoConf 2019-06-14 Krakow, Poland https://www.gogoconf.rocks CFP: https://www.papercall.io/gogoconf GopherCon Europe 2019-06-01-05-30 Tenerife, Canary Islands, Spain https://www.gophercon.es CFP: https://www.papercall.io/gophercon-eu-2019 GoCon Canada 2019-05-31 Toronto, Canada https://gocon.ca CFP: https://www.papercall.io/goconca Go Conference Tokyo 2019-05-18 Tokyo, Japan https://gocon.jp/ CFP: https://www.papercall.io/gocon-tokyo-2019 GopherCon Singapore 2019 2019-05-03 Singapore https://2019.gophercon.sg/ CFP: https://www.papercall.io/gopherconsg2019 GopherChina 2019 2019-04-27 China BeiJing https://gopherchina.org/ GopherCon Russia 2019-04-13 Moscow, Russia https://www.gophercon-russia.ru/en GothamGo 2019-04-12 New York City, NY USA http://gothamgo.com/ CFP https://www.papercall.io/gothamgo2019 CodeFest X 2019-03-30-31 Novosibirsk, Russia dotGo 2019 2019-03-25 Paris, France https://2019.dotgo.eu/ GopherCon Israel 2019-02-11 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2019-02-02 Brussels, Belgium https://fosdem.org/2019/schedule/track/go/ GoDays 2019-01-30 Berlin, Germany https://www.godays.io/ GopherCon India 2019 2019-01-18-19 Goa, India https://gopherconindia.com/ 2018 GopherCon Vietnam 2018 2018-12-08 Ho Chi Minh City, Vietnam http://gophercon.vn Go Conference Tokyo 2018-11-25 Tokyo, Japan https://gocon.connpass.com/event/109368/ GoGoConf 2018-10-25 Krakow, Poland https://www.gogoconf.rocks GoLab 2018 2018-10-22-23 Florence, Italy https://golab.io Gopherpalooza 2018 2018-10-12 San Francisco, CA http://gopherpalooza.com/ Go Stockholm Conference 2018-10-06 Stockholm, Sweden https://www.eventbrite.com/e/go-stockholm-conference-tickets-49325007425 GoWayFest 2.0 2018-09-28 Minsk, Belarus https://goway.io GopherCon Brasil 2018 2018-09-27-29 Florian\u00f3polis, Brazil https://2018.gopherconbr.org/en CFP https://www.papercall.io/gopherconbrasil2018 GopherCon Denver 2018 2018-08-27-30 Denver, CO https://www.gophercon.com/ Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdatAqf-2_125H4sGzaWngM Lightning Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdMEZScpaoRX-vyt6pRUvfM GopherCon UK 2018 2018-08-01-03 London, UK https://www.gophercon.co.uk/ Go Northwest 2018 2018-07-30 Seattle, WA, USA http://gonorthwest.io/ GopherCon Europe - Iceland 2018-06-01-02 Reykjavik, Iceland Talks Website GopherCon SG 2018 2018-05-04 Singapore https://2018.gophercon.sg/ GothamGo 2018 2018-04-27 New York, USA http://gothamgo.com/ Go Conference Tokyo 2018-04-15 Tokyo, Japan https://gocon.connpass.com/event/82515/ GopherCon China 2018 2018-04-14-15 Shanghai, China http://www.gopherchina.org/ GopherCon Russia 2018 2018-03-17 Moscow, Russia http://gophercon-russia.ru/en GopherConRu/talks GopherCon India 2018 2018-03-09-10 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2018 2018-02-03-04 Brussels, Belgium https://fosdem.org/2018/schedule/track/go/ 2017 GopherCon Brasil 2017 2017-11-17-19 Florian\u00f3polis, Brazil https://2017.gopherconbr.org/en dotGo 2017-11-06 Paris, France https://www.dotgo.eu Go Conference Tokyo 2017-11-05 Tokyo, Japan https://gocon.connpass.com/event/66615/ GothamGo 2017-10-05-06 New York, USA http://gothamgo.com/ Golang UK 2017-08-16-18 London, UK https://golanguk.com GopherCon Denver 2017-07-12-15 Denver, CO http://gophercon.com GopherCon Singapore 2017 2017-05-25-26 Singapore https://2017.gophercon.sg Capital Go Language Conference 2017-04-24-25 Washington, DC http://www.capitalgolang.com/ GopherChina 2017 2017-04-15-16 Shanghai http://www.bagevent.com/event/357764 Go Conference Tokyo 2017-03-25 Tokyo, Japan https://gocon.connpass.com/event/52441/ GopherCon India 2017 2017-02-24-25 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2017-02-05 Brussels, Belgium https://fosdem.org/2017/schedule/track/go/ GoLab 2017-01-20-21 Florence, Italy http://golab.io 2016 GothamGo 2016-11-18 New York, USA http://gothamgo.com/ GopherCon Brasil 2016-11-04-05 Florian\u00f3polis, Brazil https://2016.gopherconbr.org/en/ dotGo 2016-10-10 Paris, France http://2016.dotgo.eu Golang UK 2016-08-18 London, UK http://golanguk.com GopherCon Denver 2016-07-11 Denver, CO http://gophercon.com Gopherfest 2016-05-16 San Francisco, USA http://www.gopherfest.org/ Go Conference Tokyo 2016-04-23 Tokyo, Japan http://gocon.connpass.com/event/27521/ Gopher China 2016-04-16 Beijing, China http://www.gopherchina.org GopherCon Dubai 2016-02-23 Dubai, UAE http://www.gophercon.ae GopherCon India 2016-02-19 Bengaluru, India videos FOSDEM 2016-01-30 Brussels, Belgium https://video.fosdem.org/2016/h1302/ Gopher Gala 2016-01-22 Earth 2015 GoLab 2015-12-15 Florence, Italy http://golab.io Go Conference Tokyo 2015-12-06 Tokyo, Japan https://gocon.connpass.com/event/22930/ GopherFest SV 2015-11-18 Facebook, Menlo Park, CA videos dotGo 2015-11-09 Paris, France videos GothamGo 2015-10-02 NY, NY videos GolangUK 2015-08-21 London, UK videos GopherCon Denver 2015-07-07 Denver, CO keynotes , lightning Go Conference Tokyo 2015-06-20 Tokyo, Japan https://gocon.connpass.com/event/14063/ GopherfestSF 2015-06-25 San Francisco, CA videos GopherCon India 2015-03-17 Bengaluru, India videos Go Devroom FOSDEM 2015-03-04 Brussels, Belgium videos Gopher China 2015-04-25 Shanghai, China London Go Gathering 2015-02-03 London, UK videos 2014 Go Conference Tokyo 2014-11-30 Tokyo, Japan https://gocon.connpass.com/event/9748/ GothamGo 2014-11-15 NYC, NY videos dotGo 2014-09-10 Paris, France videos Go Devroom FOSDEM 2014-06-30 Brussels, Belgium videos Go Conference Tokyo 2014-05-31 Tokyo, Japan https://gocon.connpass.com/event/6370/ GopherCon Denver 2014-04-24 Denver, CO videos 2013 Go Conference Tokyo 2013-10-14 Tokyo, Japan https://gocon.connpass.com/event/3510/ Go Conference Tokyo 2013-04-13 Tokyo, Japan https://gocon.connpass.com/event/1906/","title":"Archives"},{"location":"Configuring-GoLand-for-WebAssembly/","text":"\u2190 Back to the main WebAssembly page. Configuring GoLand for WebAssembly (Wasm) projects Initial project configuration When you first open or start a WebAssembly project in GoLand, it won't understand the \" syscall/js \" package. That's easily fixable, by changing the GOOS and GOARCH values in the project settings, as per the screenshots below. Note - The screenshot below shows how to access Settings on a Linux desktop. If you're using macOS, you'll probably need to access them through the standard macOS Preferences option. Configuring Run/Debug settings With the initial project settings changed, you'll probably want to configure the Run/Debug settings next. That will let you recompile the .wasm file by just launching Run ( Shift + F10 on Linux). Finished, your GoLand setup should now be complete. \u2190 Back to the main WebAssembly page.","title":"Configuring GoLand for WebAssembly"},{"location":"Configuring-GoLand-for-WebAssembly/#-back-to-the-main-webassembly-page","text":"","title":"\u2190 Back to the main WebAssembly page."},{"location":"Configuring-GoLand-for-WebAssembly/#configuring-goland-for-webassembly-wasm-projects","text":"","title":"Configuring GoLand for WebAssembly (Wasm) projects"},{"location":"Configuring-GoLand-for-WebAssembly/#initial-project-configuration","text":"When you first open or start a WebAssembly project in GoLand, it won't understand the \" syscall/js \" package. That's easily fixable, by changing the GOOS and GOARCH values in the project settings, as per the screenshots below. Note - The screenshot below shows how to access Settings on a Linux desktop. If you're using macOS, you'll probably need to access them through the standard macOS Preferences option.","title":"Initial project configuration"},{"location":"Configuring-GoLand-for-WebAssembly/#configuring-rundebug-settings","text":"With the initial project settings changed, you'll probably want to configure the Run/Debug settings next. That will let you recompile the .wasm file by just launching Run ( Shift + F10 on Linux). Finished, your GoLand setup should now be complete.","title":"Configuring Run/Debug settings"},{"location":"Configuring-GoLand-for-WebAssembly/#-back-to-the-main-webassembly-page_1","text":"","title":"\u2190 Back to the main WebAssembly page."},{"location":"Contributing-to-gopls/","text":"This page has been subsumed into the committed markdown of x/tools repository Please do not edit this page!","title":"Contributing to gopls"},{"location":"CoreDumpDebugging/","text":"Originally published at https://rakyll.org/coredumps/ . Debugging is highly useful to examine the execution flow and to understand the current state of a program. A core file is a file that contains the memory dump of a running process and its process status. It is primarily used for post-mortem debugging of a program, as well as to understand a program's state while it is still running. These two cases make debugging of core dumps a good diagnostics aid to postmortem and analyze production services. I will use a simple hello world web server in this article, but in real life our programs might get very complicated easily. The availability of core dump analysis gives you an opportunity to resurrect a program from specific snapshot and look into cases that might only reproducible in certain conditions/environments. Note : This flow only works on Linux at this point end-to-end, I am not quite sure about the other Unixes but it is not yet supported on macOS. Windows is not supported at this point. Before we begin, you need to make sure that your ulimit for core dumps are at a reasonable level. It is by default 0 which means the max core file size can only be zero. I usually set it to unlimited on my development machine by typing: $ ulimit -c unlimited Then, make sure you have delve installed on your machine. Here is a main.go that contains a simple handler and it starts an HTTP server. $ cat main.go package main import ( \"fmt\" \"log\" \"net/http\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"hello world\\n\") }) log.Fatal(http.ListenAndServe(\"localhost:7777\", nil)) } Let's build this and have a binary. $ go build . Let\u2019s assume, in the future, there is something messy going on with this server but you are not so sure about what it might be. You might have instrumented your program in various ways but it might not be enough for getting any clue from the existing instrumentation data. Basically, in a situation like this, it would be nice to have a snapshot of the current process, and then use that snapshot to dive into to the current state of your program with your existing debugging tools. There are several ways to obtain a core file. You might have been already familiar with crash dumps, these are basically core dumps written to disk when a program is crashing. Go doesn't enable crash dumps by default but gives you this option on Ctrl+backslash when GOTRACEBACK env variable is set to \"crash\". $ GOTRACEBACK=crash ./hello (Ctrl+\\) It will crash the program with stack trace printed and core dump file will be written. Another option is to retrieve a core dump from a running process without having to kill a process. With gcore , it is possible to get the core files without crashing. Let\u2019s start the server again: $ ./hello & $ gcore 546 # 546 is the PID of hello. We have a dump without crashing the process. The next step is to load the core file to delve and start analyzing. $ dlv core ./hello core.546 Alright, this is it! This is no different than the typical delve interactive. You can backtrace, list, see variables, and more. Some features will be disabled given a core dump is a snapshot and not a currently running process, but the execution flow and the program state will be entirely accessible. (dlv) bt 0 0x0000000000457774 in runtime.raise at /usr/lib/go/src/runtime/sys_linux_amd64.s:110 1 0x000000000043f7fb in runtime.dieFromSignal at /usr/lib/go/src/runtime/signal_unix.go:323 2 0x000000000043f9a1 in runtime.crash at /usr/lib/go/src/runtime/signal_unix.go:409 3 0x000000000043e982 in runtime.sighandler at /usr/lib/go/src/runtime/signal_sighandler.go:129 4 0x000000000043f2d1 in runtime.sigtrampgo at /usr/lib/go/src/runtime/signal_unix.go:257 5 0x00000000004579d3 in runtime.sigtramp at /usr/lib/go/src/runtime/sys_linux_amd64.s:262 6 0x00007ff68afec330 in (nil) at :0 7 0x000000000040f2d6 in runtime.notetsleep at /usr/lib/go/src/runtime/lock_futex.go:209 8 0x0000000000435be5 in runtime.sysmon at /usr/lib/go/src/runtime/proc.go:3866 9 0x000000000042ee2e in runtime.mstart1 at /usr/lib/go/src/runtime/proc.go:1182 10 0x000000000042ed04 in runtime.mstart at /usr/lib/go/src/runtime/proc.go:1152 (dlv) ls > runtime.raise() /usr/lib/go/src/runtime/sys_linux_amd64.s:110 (PC: 0x457774) 105: SYSCALL 106: MOVL AX, DI // arg 1 tid 107: MOVL sig+0(FP), SI // arg 2 108: MOVL $200, AX // syscall - tkill 109: SYSCALL => 110: RET 111: 112: TEXT runtime\u00b7raiseproc(SB),NOSPLIT,$0 113: MOVL $39, AX // syscall - getpid 114: SYSCALL 115: MOVL AX, DI // arg 1 pid","title":"CoreDumpDebugging"},{"location":"Courses/","text":"Introduction Go is a great language for CS majors. This page presents some university courses that use Go. For a list of free and commercial Go training classes, see the Learn wiki . Language University of Helsinki, Department of Computer Science used to have a course named Introduction to Go, taught by K. B\u00e4ckman: http://www.cs.helsinki.fi/courses/582336 in Spring 2010. University of Sofia \"St. Kliment Ohridski\", Faculty of Mathematics and Informatics has elective course named \"Programming with Go\", taught by K. Vladimiroff: http://fmi.golang.bg (bulgarian) and their [ public lectures ] - (also in bulgarian) Free University of Berlin (Germany) had a course Introduction to Go Programming in Spring 2013. J.W. Goethe University (Frankfurt/Main, Germany) had a course Introduction to Go Programming in Spring 2015 (in german) University of Pennsylvania had a course on Go Programming in Spring 2017. SUNY Potsdam (Potsdam, NY) \"Selected languages course with Go\", taught by Dr. Brian C. Ladd (Associate Professor of Computer Science). First class in Spring 2017 University of Milan has a course named \"Computer Programming\" taught by Paolo Boldi: http://boldi.di.unimi.it/Corsi/Inf2018/ Programming Concepts President University (Cikarang, West Java, Indonesia) had a course Programming Concepts for every junior students (using C, Go and Javascript). Web CS 4830: Science and Engineering of the WWW taught by Ryanne Dolan at University of Missouri: http://4830.ryannedolan.info/ CSCI 130: Web Programming taught by Todd McLeod at California State University Fresno CSCI 194: Adv. Web Programming taught by Todd McLeod at California State University Fresno CIT 90: Data Drive Websites taught by Todd McLeod at Fresno City College CIT 94: Server Side Scripting taught by Todd McLeod at Fresno City College Concurrency Go is being used at the end of a yearlong freshman computer science class at KTH: http://yourbasic.org/golang/concurrent-programming/ Go, Concurrent and Systems Programming from Rochester Institute of Technology: http://www.cs.rit.edu/~ats/go-2011-2/index.xml Free University of Berlin (Germany) had a course on Concurrent Programming with Go as a reference language in 2013. University of Duisburg-Essen (Germany) had a lecture about Go and CSP within their course on Concurrent systems modelling in summer 2014. [ Slides ] University of Stavanger, Norway. We use Go to teach concurrency principles in DAT320 Operating Systems. http://www.uis.no/studies/study-courses/?code=DAT320_1&parentcat=9835 University of Troms\u00f8, Norway. Concurrent and Data-Intensive Programming (INF-2200) . University of Victoria (Canada) used Go in the section on Concurrency as a part of Programming Languages (CSC 330) Distributed Computing Distributed Computer Systems (CS 138) at Brown: http://cs.brown.edu/courses/cs138/s16/syllabus.html Distributed Systems course (COS 418) at Princeton: https://www.cs.princeton.edu/courses/archive/fall16/cos418/ Distributed Systems course (15-440) at CMU: http://www.cs.cmu.edu/~dga/15-440/F12/index.html (see also http://da-data.blogspot.se/2013/02/teaching-distributed-systems-in-go.html ) 6.824 Distributed Systems at MIT is using Go in its labs: http://pdos.csail.mit.edu/6.824/ . CSE 223B, Spring 2014: Distributed Computing and Systems at UC San Diego http://cseweb.ucsd.edu/classes/sp14/cse223B-a/index.html Dixie State University teaches Go in an introductory course to programming languages and later on in distributed systems. CS 352, Computer Organization and Design, at the University of Wisconsin, Eau Claire: http://cs.uwec.edu/~buipj/teaching/cs.352.f13/lab_01_high_performance_computing.html KTH Stockholm uses Go to teach concurrency: DD1396 Parallel and Concurrent Programming. https://www.kth.se/student/kurser/kurs/DD1396 Norwegian University of Science and Technology: TTK4145 Real-Time Programming http://www.itk.ntnu.no/fag/TTK4145/information/ University of Stavanger, Norway. We use Go to build a replicated state machine based on Paxos in DAT520 Distributed Systems. http://www.uis.no/studies/study-courses/?code=DAT520_1&parentcat=9835 Moscow State University, Russia. Go is used in graduate course on \"Selected Topics in Distributed Systems Engineering\" D7024E - Mobile and Distributed Computing Systems at Lule\u00e5 University of Technology. Go is used to implement the DHT algorithm Chord and create a data replication system. http://www.ltu.se/edu/course/D70/D7024E/D7024E-Mobila-och-distribuerade-datorsystem-1.67844?l=en&kursView=kursplan University of Troms\u00f8, Norway. Distributed Systems Fundamentals (INF-3200) and Advanced Distributed Systems (INF-3203) . Networking Computer Networking (COS 461) at Princeton: http://www.cs.princeton.edu/courses/archive/spring16/cos461/ (See Assignment 1 https://github.com/PrincetonUniversity/COS461-Spring2016/tree/master/notebook/assignment1 and Assignment 4 http://www.cs.princeton.edu/courses/archive/spring16/cos461/assignments/ . Compiler Design Compiler Design (CS712/CS812) at the University of New Hampshire: http://www.cs.unh.edu/~cs712/ . In Fall 2016 we are compiling a subset of Go to LLVM code. Introduction to Compilers (6197, Spanish) at Rey Juan Carlos University of Madrid: http://lsub.org/comp . Students write a compiler in Go that implements a language for drawing graphics. Security Computer Systems Security (CS166) At Brown University. In particular, the final Dropbox Project .","title":"Courses"},{"location":"Courses/#introduction","text":"Go is a great language for CS majors. This page presents some university courses that use Go. For a list of free and commercial Go training classes, see the Learn wiki .","title":"Introduction"},{"location":"Courses/#language","text":"University of Helsinki, Department of Computer Science used to have a course named Introduction to Go, taught by K. B\u00e4ckman: http://www.cs.helsinki.fi/courses/582336 in Spring 2010. University of Sofia \"St. Kliment Ohridski\", Faculty of Mathematics and Informatics has elective course named \"Programming with Go\", taught by K. Vladimiroff: http://fmi.golang.bg (bulgarian) and their [ public lectures ] - (also in bulgarian) Free University of Berlin (Germany) had a course Introduction to Go Programming in Spring 2013. J.W. Goethe University (Frankfurt/Main, Germany) had a course Introduction to Go Programming in Spring 2015 (in german) University of Pennsylvania had a course on Go Programming in Spring 2017. SUNY Potsdam (Potsdam, NY) \"Selected languages course with Go\", taught by Dr. Brian C. Ladd (Associate Professor of Computer Science). First class in Spring 2017 University of Milan has a course named \"Computer Programming\" taught by Paolo Boldi: http://boldi.di.unimi.it/Corsi/Inf2018/","title":"Language"},{"location":"Courses/#programming-concepts","text":"President University (Cikarang, West Java, Indonesia) had a course Programming Concepts for every junior students (using C, Go and Javascript).","title":"Programming Concepts"},{"location":"Courses/#web","text":"CS 4830: Science and Engineering of the WWW taught by Ryanne Dolan at University of Missouri: http://4830.ryannedolan.info/ CSCI 130: Web Programming taught by Todd McLeod at California State University Fresno CSCI 194: Adv. Web Programming taught by Todd McLeod at California State University Fresno CIT 90: Data Drive Websites taught by Todd McLeod at Fresno City College CIT 94: Server Side Scripting taught by Todd McLeod at Fresno City College","title":"Web"},{"location":"Courses/#concurrency","text":"Go is being used at the end of a yearlong freshman computer science class at KTH: http://yourbasic.org/golang/concurrent-programming/ Go, Concurrent and Systems Programming from Rochester Institute of Technology: http://www.cs.rit.edu/~ats/go-2011-2/index.xml Free University of Berlin (Germany) had a course on Concurrent Programming with Go as a reference language in 2013. University of Duisburg-Essen (Germany) had a lecture about Go and CSP within their course on Concurrent systems modelling in summer 2014. [ Slides ] University of Stavanger, Norway. We use Go to teach concurrency principles in DAT320 Operating Systems. http://www.uis.no/studies/study-courses/?code=DAT320_1&parentcat=9835 University of Troms\u00f8, Norway. Concurrent and Data-Intensive Programming (INF-2200) . University of Victoria (Canada) used Go in the section on Concurrency as a part of Programming Languages (CSC 330)","title":"Concurrency"},{"location":"Courses/#distributed-computing","text":"Distributed Computer Systems (CS 138) at Brown: http://cs.brown.edu/courses/cs138/s16/syllabus.html Distributed Systems course (COS 418) at Princeton: https://www.cs.princeton.edu/courses/archive/fall16/cos418/ Distributed Systems course (15-440) at CMU: http://www.cs.cmu.edu/~dga/15-440/F12/index.html (see also http://da-data.blogspot.se/2013/02/teaching-distributed-systems-in-go.html ) 6.824 Distributed Systems at MIT is using Go in its labs: http://pdos.csail.mit.edu/6.824/ . CSE 223B, Spring 2014: Distributed Computing and Systems at UC San Diego http://cseweb.ucsd.edu/classes/sp14/cse223B-a/index.html Dixie State University teaches Go in an introductory course to programming languages and later on in distributed systems. CS 352, Computer Organization and Design, at the University of Wisconsin, Eau Claire: http://cs.uwec.edu/~buipj/teaching/cs.352.f13/lab_01_high_performance_computing.html KTH Stockholm uses Go to teach concurrency: DD1396 Parallel and Concurrent Programming. https://www.kth.se/student/kurser/kurs/DD1396 Norwegian University of Science and Technology: TTK4145 Real-Time Programming http://www.itk.ntnu.no/fag/TTK4145/information/ University of Stavanger, Norway. We use Go to build a replicated state machine based on Paxos in DAT520 Distributed Systems. http://www.uis.no/studies/study-courses/?code=DAT520_1&parentcat=9835 Moscow State University, Russia. Go is used in graduate course on \"Selected Topics in Distributed Systems Engineering\" D7024E - Mobile and Distributed Computing Systems at Lule\u00e5 University of Technology. Go is used to implement the DHT algorithm Chord and create a data replication system. http://www.ltu.se/edu/course/D70/D7024E/D7024E-Mobila-och-distribuerade-datorsystem-1.67844?l=en&kursView=kursplan University of Troms\u00f8, Norway. Distributed Systems Fundamentals (INF-3200) and Advanced Distributed Systems (INF-3203) .","title":"Distributed Computing"},{"location":"Courses/#networking","text":"Computer Networking (COS 461) at Princeton: http://www.cs.princeton.edu/courses/archive/spring16/cos461/ (See Assignment 1 https://github.com/PrincetonUniversity/COS461-Spring2016/tree/master/notebook/assignment1 and Assignment 4 http://www.cs.princeton.edu/courses/archive/spring16/cos461/assignments/ .","title":"Networking"},{"location":"Courses/#compiler-design","text":"Compiler Design (CS712/CS812) at the University of New Hampshire: http://www.cs.unh.edu/~cs712/ . In Fall 2016 we are compiling a subset of Go to LLVM code. Introduction to Compilers (6197, Spanish) at Rey Juan Carlos University of Madrid: http://lsub.org/comp . Students write a compiler in Go that implements a language for drawing graphics.","title":"Compiler Design"},{"location":"Courses/#security","text":"Computer Systems Security (CS166) At Brown University. In particular, the final Dropbox Project .","title":"Security"},{"location":"CreatingSubRepository/","text":"This page outlines the steps that need to be done to create a new golang.org/x repository, in order for it to have the same properties as all existing golang.org/x repositories: - a golang.org/x redirect - automatic git mirroring from Gerrit to GitHub - automatic importing of GitHub PRs into Gerrit CLs Steps Create a new empty Gerrit repository at https://go.googlesource.com , complete with a description. Create an initial commit with AUTHORS , CONTRIBUTORS , LICENSE , PATENTS , CONTRIBUTING.md , and README.md files and push it directly to the Gerrit repository. See example commit . See the internal team instructions at go/go-gerrit#new-repository for how to create a repository. Create a new empty GitHub repository at @golang with the same name and description. Turn off Wikis, Issues, Projects in repository settings. On \"Manage access\" tab: Add \"golang org admins\" team with Admin access. Add \"gophers\" team with Write access. Add \"robots\" team with Write access (can only be done by a maintainer of golang organization; ask someone else if you're not). Create \"cla: yes\" and \"cla: no\" labels, they need to exist so that @googlebot can automatically apply them. (Without a \"cla: yes\" label, PRs won't be imported into Gerrit.) Modify the x/build/repos package. Update x/website's version of x/build to include modified x/build/repos package. Redeploy all affected commands (or ask an x/build owner to deploy if you're not; the order shouldn't matter): x/build/cmd/gitmirror x/build/maintner/maintnerd Note that it's expected for the new repo not to appear in maintner until first issue or PR is created (see #25744 ). x/build/cmd/gerritbot x/build/app/appengine x/website/cmd/golangorg You're done.","title":"CreatingSubRepository"},{"location":"CreatingSubRepository/#steps","text":"Create a new empty Gerrit repository at https://go.googlesource.com , complete with a description. Create an initial commit with AUTHORS , CONTRIBUTORS , LICENSE , PATENTS , CONTRIBUTING.md , and README.md files and push it directly to the Gerrit repository. See example commit . See the internal team instructions at go/go-gerrit#new-repository for how to create a repository. Create a new empty GitHub repository at @golang with the same name and description. Turn off Wikis, Issues, Projects in repository settings. On \"Manage access\" tab: Add \"golang org admins\" team with Admin access. Add \"gophers\" team with Write access. Add \"robots\" team with Write access (can only be done by a maintainer of golang organization; ask someone else if you're not). Create \"cla: yes\" and \"cla: no\" labels, they need to exist so that @googlebot can automatically apply them. (Without a \"cla: yes\" label, PRs won't be imported into Gerrit.) Modify the x/build/repos package. Update x/website's version of x/build to include modified x/build/repos package. Redeploy all affected commands (or ask an x/build owner to deploy if you're not; the order shouldn't matter): x/build/cmd/gitmirror x/build/maintner/maintnerd Note that it's expected for the new repo not to appear in maintner until first issue or PR is created (see #25744 ). x/build/cmd/gerritbot x/build/app/appengine x/website/cmd/golangorg You're done.","title":"Steps"},{"location":"CustomPprofProfiles/","text":"Originally published at https://rakyll.org/custom-profiles/ . Go provides several pprof profiles out of the box to gather profiling data from Go programs. The builtin profiles provided by the runtime/pprof package: profile : CPU profile determines where a program spends its time while actively consuming CPU cycles (as opposed while sleeping or waiting for I/O). heap : Heap profile reports the currently live allocations; used to monitor current memory usage or check for memory leaks. threadcreate : Thread creation profile reports the sections of the program that lead the creation of new OS threads. goroutine : Goroutine profile report the stack traces of all current goroutines. block : Block profile show where goroutines block waiting on synchronization primitives (including timer channels). Block profile is not enabled by default; use runtime.SetBlockProfileRate to enable it. mutex : Mutex profile reports the lock contentions. When you think your CPU is not fully utilized due to a mutex contention, use this profile. Mutex profile is not enabled by default, see runtime.SetMutexProfileFraction to enable. Additional to the builtin profiles, runtime/pprof package allows you to export your custom profiles, and instrument your code to record execution stacks that contributes to this profile. Imagine we have a blob server, and we are writing a Go client for it. And our users want to be able to profile the opened blobs on the client. We can create a profile and record the events of blob opening and closing, so the user can tell how many open blobs they are at any time. Here is a blobstore package that allows you to open some blobs. We will create a new custom profile and start recording execution stacks that contributes to opening of blobs: package blobstore import \"runtime/pprof\" var openBlobProfile = pprof . NewProfile ( \"blobstore.Open\" ) // Open opens a blob, all opened blobs need // to be closed when no longer in use. func Open ( name string ) ( * Blob , error ) { blob := & Blob { name : name } // TODO: Initialize the blob... openBlobProfile . Add ( blob , 2 ) // add the current execution stack to the profile return blob , nil } And once users want to close the blob, we need to remove the execution stack associated with the current blob from the profile: // Close closes the blob and frees the // underlying resources. func ( b * Blob ) Close () error { // TODO: Free other resources. openBlobProfile . Remove ( b ) return nil } And now, from the programs using this package, we should be able to retrieve blobstore.Open profile data and use our daily pprof tools to examine and visualize them. Let's write a small main program than opens some blobs: package main import ( \"fmt\" \"math/rand\" \"net/http\" _ \"net/http/pprof\" // as a side effect, registers the pprof endpoints. \"time\" \"myproject.org/blobstore\" ) func main() { for i := 0; i < 1000; i++ { name := fmt.Sprintf(\"task-blob-%d\", i) go func() { b, err := blobstore.Open(name) if err != nil { // TODO: Handle error. } defer b.Close() // TODO: Perform some work, write to the blob. }() } http.ListenAndServe(\"localhost:8888\", nil) } Start the server, then use go tool to read and visualize the profile data: $ go tool pprof http://localhost:8888/debug/pprof/blobstore.Open (pprof) top Showing nodes accounting for 800, 100% of 800 total flat flat% sum% cum cum% 800 100% 100% 800 100% main.main.func1 /Users/jbd/src/hello/main.go You will see that there are 800 open blobs and all openings are coming from main.main.func1. In this small example, there is nothing more to see, but in a complex server you can examine the hottest spots that works with an open blob and find out bottlenecks or leaks.","title":"CustomPprofProfiles"},{"location":"Darwin/","text":"Go on Darwin Kernel version Distributions Architectures Initial support version Final support version 18 macOS Mojave 10.14, iOS 12 amd64, arm64, 386 Go 1.12 17 macOS High Sierra 10.13, iOS 11 amd64, arm64, 386 Go 1.7.1 * 16 macOS Sierra 10.12, iOS 10 amd64, arm, arm64, 386 Go 1.7.1 ** 15 OS X El Capitan 10.11 amd64, 386 Go 1 * 15 iOS 9 arm, arm64 Go 1.5 14 OS X Yosemite 10.10 amd64, 386 Go 1 * 14 iOS 7, iOS 8 arm, arm64 Go 1.5 13 OS X Mavericks 10.9 amd64, 386 Go 1 * Go 1.10.8 12 OS X Mountain Lion 10.8 amd64, 386 Go 1 * Go 1.10.8 11 OS X Lion 10.7 amd64, 386 Go 1 * Go 1.7.6 10 Mac OS X Snow Leopard 10.6 amd64, 386 Go 1 Go 1.4.3 * Go 1.5 or above is recommended. ** See golang/go#16570 and golang/go#19772 . * See golang/go#22037 .","title":"Darwin"},{"location":"Darwin/#go-on-darwin","text":"Kernel version Distributions Architectures Initial support version Final support version 18 macOS Mojave 10.14, iOS 12 amd64, arm64, 386 Go 1.12 17 macOS High Sierra 10.13, iOS 11 amd64, arm64, 386 Go 1.7.1 * 16 macOS Sierra 10.12, iOS 10 amd64, arm, arm64, 386 Go 1.7.1 ** 15 OS X El Capitan 10.11 amd64, 386 Go 1 * 15 iOS 9 arm, arm64 Go 1.5 14 OS X Yosemite 10.10 amd64, 386 Go 1 * 14 iOS 7, iOS 8 arm, arm64 Go 1.5 13 OS X Mavericks 10.9 amd64, 386 Go 1 * Go 1.10.8 12 OS X Mountain Lion 10.8 amd64, 386 Go 1 * Go 1.10.8 11 OS X Lion 10.7 amd64, 386 Go 1 * Go 1.7.6 10 Mac OS X Snow Leopard 10.6 amd64, 386 Go 1 Go 1.4.3 * Go 1.5 or above is recommended. ** See golang/go#16570 and golang/go#19772 . * See golang/go#22037 .","title":"Go on Darwin"},{"location":"DashboardBuilders/","text":"Builders Build configs (at the top) and host configs (bottom) are listed here: https://farmer.golang.org/builders A builder runs on a certain host type. (e.g. linux-386-387 is a build type. It runs on host-linux-kubestd , a Kubernetes-based linux/amd64 host) They come from the file https://github.com/golang/build/blob/master/dashboard/builders.go For design details about the coordinator, see https://golang.org/s/builderplan How to set up a builder talk to golang-dev@ to get a builder host type & hash (they can get one from using the golang.org/x/build/cmd/genbuilderkey tool), and put that in ~/.gobuildkey or ~/.gobuildkey-host-foo-bar or the file pointed to by env var $GO_BUILD_KEY_PATH . define your new builder in https://github.com/golang/build/blob/master/dashboard/builders.go with a new HostConfig and BuildConfig. have golang-dev deploy the build coordinator rebuilt with the dashboard/builders.go change have golang-dev modify golang.org/x/build/cmd/buildlet/Makefile to add your port and to uploads its buildlet binary to Google Cloud Storage (you can do this step out of order if your compiler changes aren't yet upstream) verify you can see the new host & build configs at https://farmer.golang.org/builders (Interm/testing step) Test that your builder key works and you can register: go get -u golang.org/x/build/cmd/buildlet buildlet -coordinator=farmer.golang.org -reverse-type=host-foo-bar -reboot=false verify it shows up at https://farmer.golang.org/#pools in \"Reverse pool summary\" and \"Reverse pool machine detail\" Modify the golang.org/x/build/cmd/buildlet/stage0 binary if/as needed to pass the right flags to the buildlet binary. Put your stage0 binary on your builder, run in a loop under your operating system's process supervisor (systemd, etc). The stage0 binary is responsible for conditionally re-downloading the buildlet binary from Google Cloud Storage for each build. (This lets us evolve the build system without involving each machine owner) For WIP ports, the steps above can be done out of order as needed. But as a port matures, be sure each step above is done. In particular, make sure that you're not just running a fixed copy of the buildlet binary in a loop forever. We need to be able to update it over time without your involvement. You should be running the stage0 binary (or equivalent shell script or similar for your platform) in a loop instead. Builder Requirements internet connection (at least be able to access Google and https://farmer.golang.org ) preferably with two or more (V)CPUs at least 512MiB of memory (1GB or more highly recommended. 512MB might need a small GOGC setting to avoid thrashing.) Security notes Generally, community-run builders only run code that's already been reviewed & submitted. We only enable pre-submit testing for builders run by the Go team that have a lot of hardware available. However, the Gomote tool is available for a number of people on the Go team and in the Go community that lets them have arbitrary access to the builders for development & debugging. For paranoia reasons, you might want to run your builder in an isolated network that can't access any of your internal resources.","title":"DashboardBuilders"},{"location":"DashboardBuilders/#builders","text":"Build configs (at the top) and host configs (bottom) are listed here: https://farmer.golang.org/builders A builder runs on a certain host type. (e.g. linux-386-387 is a build type. It runs on host-linux-kubestd , a Kubernetes-based linux/amd64 host) They come from the file https://github.com/golang/build/blob/master/dashboard/builders.go For design details about the coordinator, see https://golang.org/s/builderplan","title":"Builders"},{"location":"DashboardBuilders/#how-to-set-up-a-builder","text":"talk to golang-dev@ to get a builder host type & hash (they can get one from using the golang.org/x/build/cmd/genbuilderkey tool), and put that in ~/.gobuildkey or ~/.gobuildkey-host-foo-bar or the file pointed to by env var $GO_BUILD_KEY_PATH . define your new builder in https://github.com/golang/build/blob/master/dashboard/builders.go with a new HostConfig and BuildConfig. have golang-dev deploy the build coordinator rebuilt with the dashboard/builders.go change have golang-dev modify golang.org/x/build/cmd/buildlet/Makefile to add your port and to uploads its buildlet binary to Google Cloud Storage (you can do this step out of order if your compiler changes aren't yet upstream) verify you can see the new host & build configs at https://farmer.golang.org/builders (Interm/testing step) Test that your builder key works and you can register: go get -u golang.org/x/build/cmd/buildlet buildlet -coordinator=farmer.golang.org -reverse-type=host-foo-bar -reboot=false verify it shows up at https://farmer.golang.org/#pools in \"Reverse pool summary\" and \"Reverse pool machine detail\" Modify the golang.org/x/build/cmd/buildlet/stage0 binary if/as needed to pass the right flags to the buildlet binary. Put your stage0 binary on your builder, run in a loop under your operating system's process supervisor (systemd, etc). The stage0 binary is responsible for conditionally re-downloading the buildlet binary from Google Cloud Storage for each build. (This lets us evolve the build system without involving each machine owner) For WIP ports, the steps above can be done out of order as needed. But as a port matures, be sure each step above is done. In particular, make sure that you're not just running a fixed copy of the buildlet binary in a loop forever. We need to be able to update it over time without your involvement. You should be running the stage0 binary (or equivalent shell script or similar for your platform) in a loop instead.","title":"How to set up a builder"},{"location":"DashboardBuilders/#builder-requirements","text":"internet connection (at least be able to access Google and https://farmer.golang.org ) preferably with two or more (V)CPUs at least 512MiB of memory (1GB or more highly recommended. 512MB might need a small GOGC setting to avoid thrashing.)","title":"Builder Requirements"},{"location":"DashboardBuilders/#security-notes","text":"Generally, community-run builders only run code that's already been reviewed & submitted. We only enable pre-submit testing for builders run by the Go team that have a lot of hardware available. However, the Gomote tool is available for a number of people on the Go team and in the Go community that lets them have arbitrary access to the builders for development & debugging. For paranoia reasons, you might want to run your builder in an isolated network that can't access any of your internal resources.","title":"Security notes"},{"location":"Deprecated/","text":"Sometimes a struct field, function, type, or even a whole package becomes redundant or unnecessary, but must be kept for compatibility with existing programs. To signal that an identifier should not be used, add a paragraph to its doc comment that begins with Deprecated: followed by some information about the deprecation, and a recommendation on what to use instead, if applicable. The paragraph does not have to be the last paragraph in the doc comment. Some tools will warn on use of deprecated identifiers and their docs will be hidden by godoc once #17056 is implemented . The original issue to document the \"Deprecated\" convention was issue #10909 . Examples type ResponseRecorder struct { // HeaderMap contains the headers explicitly set by the Handler. // It is an internal detail. // // Deprecated: HeaderMap exists for historical compatibility // and should not be used. To access the headers returned by a handler, // use the Response.Header map as returned by the Result method. HeaderMap http.Header // Package rc4 implements the RC4 stream cipher. // // Deprecated: RC4 is cryptographically broken and should not be used // except for compatibility with legacy systems. // // This package is frozen and no new functionality will be added. package rc4 There are a few other examples in the standard library .","title":"Deprecated"},{"location":"Deprecated/#examples","text":"type ResponseRecorder struct { // HeaderMap contains the headers explicitly set by the Handler. // It is an internal detail. // // Deprecated: HeaderMap exists for historical compatibility // and should not be used. To access the headers returned by a handler, // use the Response.Header map as returned by the Result method. HeaderMap http.Header // Package rc4 implements the RC4 stream cipher. // // Deprecated: RC4 is cryptographically broken and should not be used // except for compatibility with legacy systems. // // This package is frozen and no new functionality will be added. package rc4 There are a few other examples in the standard library .","title":"Examples"},{"location":"DesignDocuments/","text":"Go 1.1 Scalable Scheduler net/http/cookiejar Function Calls Go 1.2 xml.Marshaler and Unmarshaler encoding.TextMarshaler and Unmarshaler Runtime Symbol Table Format Field Selectors and Nil Checks x[i:j:k] Slice Syntax Preemptive Scheduler Go 1.3 Contiguous Stacks Go 1.3 Linker Overhaul Go 1.3 Native Client Support Go 1.4 Go channels on steroids Go 1.4 \u201cInternal\u201d Packages Go 1.4 src/pkg \u2192 src Go 1.4 Custom Import Path Checking Go generate: A Proposal The syscall package Go 1.4 Subrepo Renaming Go 1.4 Native Client Support for ARM dev.cc branch plan Go 1.5 Go 1.5 Bootstrap Plan Go Compiler Overhaul Go Execution Tracer Future Proposals New SSA Backend for the Go Compiler Go 1.4+ Garbage Collection (GC) Plan and Roadmap Better GC and Memory Allocator for Go Groups Discussion Precise GC Stack Roots Go 1.3 cmd/go and os/fsnotify Go 1.5 os/fsnotify API Simple Multi-Dimensional Slices (Tables) Go execution modes Building and distributing Go packages as shared libraries NUMA-aware scheduler for Go Go 1.5+ \"External\" Packages Other Tools Go Oracle Binding Go and Java Go Builder Plan gomobile \u2014 a tool for building apps Rejected Proposals Read-only Slices , Evaluation of read-only slices ( rejected ) Go 1.4: unsafe.Pointer arithmetic","title":"DesignDocuments"},{"location":"DesignDocuments/#go-11","text":"Scalable Scheduler net/http/cookiejar Function Calls","title":"Go 1.1"},{"location":"DesignDocuments/#go-12","text":"xml.Marshaler and Unmarshaler encoding.TextMarshaler and Unmarshaler Runtime Symbol Table Format Field Selectors and Nil Checks x[i:j:k] Slice Syntax Preemptive Scheduler","title":"Go 1.2"},{"location":"DesignDocuments/#go-13","text":"Contiguous Stacks Go 1.3 Linker Overhaul Go 1.3 Native Client Support","title":"Go 1.3"},{"location":"DesignDocuments/#go-14","text":"Go channels on steroids Go 1.4 \u201cInternal\u201d Packages Go 1.4 src/pkg \u2192 src Go 1.4 Custom Import Path Checking Go generate: A Proposal The syscall package Go 1.4 Subrepo Renaming Go 1.4 Native Client Support for ARM dev.cc branch plan","title":"Go 1.4"},{"location":"DesignDocuments/#go-15","text":"Go 1.5 Bootstrap Plan Go Compiler Overhaul Go Execution Tracer","title":"Go 1.5"},{"location":"DesignDocuments/#future-proposals","text":"New SSA Backend for the Go Compiler Go 1.4+ Garbage Collection (GC) Plan and Roadmap Better GC and Memory Allocator for Go Groups Discussion Precise GC Stack Roots Go 1.3 cmd/go and os/fsnotify Go 1.5 os/fsnotify API Simple Multi-Dimensional Slices (Tables) Go execution modes Building and distributing Go packages as shared libraries NUMA-aware scheduler for Go Go 1.5+ \"External\" Packages","title":"Future Proposals"},{"location":"DesignDocuments/#other-tools","text":"Go Oracle Binding Go and Java Go Builder Plan gomobile \u2014 a tool for building apps","title":"Other Tools"},{"location":"DesignDocuments/#rejected-proposals","text":"Read-only Slices , Evaluation of read-only slices ( rejected ) Go 1.4: unsafe.Pointer arithmetic","title":"Rejected Proposals"},{"location":"DevExp/","text":"Developer Experience Working Group (draft) Developer Experience Working Group is a team trying to make the Go programming language, libraries and tools more pleasant to use. The team primarily works on the Go project, even though its responsibilities and activities may involve contributing to the ecosystem-wide impactful projects. The group is aimed to cover a highly specialized field of expertise that is not always well-covered by the core team. Goals Making Go a preferred language in industry and education. Helping the language graduate to a mainstream language by enabling the early majority developers. Helping Go to succeed in organizations with opinionated infrastructure and tooling. Projects Ongoing projects, feel free to reach out to the project lead if you want to collaborate: Improvements to the Go installation experience (Chris Broadfoot cbro@golang.org ) Guides on tooling and developer environments (editors and IDEs) (Jaana B. Dogan jbd@golang.org ) Running user studies to systematically analyze and measure friction points (Chris Broadfoot cbro@golang.org , Katrina Owen katrina.owen@gmail.com , Steve Francia sfrancia@google.com ) Improvements to the Go Tour and Go Playground (Chris Broadfoot cbro@golang.org , Steve Francia sfrancia@google.com ) Better guidelines to help new users and visual aids for golang.org (Jaana B. Dogan jbd@golang.org ) Channels Mailing list: golang-devexp Gophers Slack channel if you need synchronous help: #devexp ( invitation ) Responsibilities and Activities Identify the barriers for newcomers and remove them to make Go succeed as a mainstream programming language. Revamp the existing docs and tools. Systematically collect feedback from the Go users to improve friction points in standard library, tools, docs, language and the ecosystem. The group may also run UX studies. Help identifying the critical missing libraries/tools from the ecosystem. At each release cycle, review new standard library APIs to give feedback about usability, self-explanation and documentation. Participate in user-facing Go proposals to give usability feedback. Encourage readable and idiomatic APIs. Be the voice of best practices in API design. Contribute with technical writing on the Go blog to fill the gaps in communication. Roles The group has a variety of roles with specific responsibilities. Although it is not a hard requirement, all contributors are expected to have background and technical expertise in one or more of these fields: API design, developer tooling, readability, programming language design and education, and technical writing. Leads We are expecting this role to require 15 hours of commitment each week. * All responsibilities of the members * Ensuring contributors are sufficiently productive and not blocked * Reaching consensus if there is no obvious answer * Organizing meetings and handling paperwork Members We are expecting this role to require 10 hours of commitment each week. * All responsibilities of the participants * Doing the first CL and proposal reviews * Setting high-level goals and establishing long-term milestones * Mentor community about best practices Participants Participants don't have to commit to any long-term plans, they work as much as they want on gradual improvements and contribute to the discussion. * Creating CLs and proposals * Participating in discussions","title":"DevExp"},{"location":"DevExp/#developer-experience-working-group-draft","text":"Developer Experience Working Group is a team trying to make the Go programming language, libraries and tools more pleasant to use. The team primarily works on the Go project, even though its responsibilities and activities may involve contributing to the ecosystem-wide impactful projects. The group is aimed to cover a highly specialized field of expertise that is not always well-covered by the core team.","title":"Developer Experience Working Group (draft)"},{"location":"DevExp/#goals","text":"Making Go a preferred language in industry and education. Helping the language graduate to a mainstream language by enabling the early majority developers. Helping Go to succeed in organizations with opinionated infrastructure and tooling.","title":"Goals"},{"location":"DevExp/#projects","text":"Ongoing projects, feel free to reach out to the project lead if you want to collaborate: Improvements to the Go installation experience (Chris Broadfoot cbro@golang.org ) Guides on tooling and developer environments (editors and IDEs) (Jaana B. Dogan jbd@golang.org ) Running user studies to systematically analyze and measure friction points (Chris Broadfoot cbro@golang.org , Katrina Owen katrina.owen@gmail.com , Steve Francia sfrancia@google.com ) Improvements to the Go Tour and Go Playground (Chris Broadfoot cbro@golang.org , Steve Francia sfrancia@google.com ) Better guidelines to help new users and visual aids for golang.org (Jaana B. Dogan jbd@golang.org )","title":"Projects"},{"location":"DevExp/#channels","text":"Mailing list: golang-devexp Gophers Slack channel if you need synchronous help: #devexp ( invitation )","title":"Channels"},{"location":"DevExp/#responsibilities-and-activities","text":"Identify the barriers for newcomers and remove them to make Go succeed as a mainstream programming language. Revamp the existing docs and tools. Systematically collect feedback from the Go users to improve friction points in standard library, tools, docs, language and the ecosystem. The group may also run UX studies. Help identifying the critical missing libraries/tools from the ecosystem. At each release cycle, review new standard library APIs to give feedback about usability, self-explanation and documentation. Participate in user-facing Go proposals to give usability feedback. Encourage readable and idiomatic APIs. Be the voice of best practices in API design. Contribute with technical writing on the Go blog to fill the gaps in communication.","title":"Responsibilities and Activities"},{"location":"DevExp/#roles","text":"The group has a variety of roles with specific responsibilities. Although it is not a hard requirement, all contributors are expected to have background and technical expertise in one or more of these fields: API design, developer tooling, readability, programming language design and education, and technical writing.","title":"Roles"},{"location":"DevExp/#leads","text":"We are expecting this role to require 15 hours of commitment each week. * All responsibilities of the members * Ensuring contributors are sufficiently productive and not blocked * Reaching consensus if there is no obvious answer * Organizing meetings and handling paperwork","title":"Leads"},{"location":"DevExp/#members","text":"We are expecting this role to require 10 hours of commitment each week. * All responsibilities of the participants * Doing the first CL and proposal reviews * Setting high-level goals and establishing long-term milestones * Mentor community about best practices","title":"Members"},{"location":"DevExp/#participants","text":"Participants don't have to commit to any long-term plans, they work as much as they want on gradual improvements and contribute to the discussion. * Creating CLs and proposals * Participating in discussions","title":"Participants"},{"location":"Diagnostics/","text":"Moved to golang.org .","title":"Diagnostics"},{"location":"Download-build-farm-failed-logs-and-debugging/","text":"The Go project has all build failed logs storage at GCE, which you can access by the dashboard . You can download all the failed logs by fetchlogs . Download fetchlogs by go get golang.org/x/build/cmd/fetchlogs fetchlogs only download 300 lastest failed logs by default, which is not enough for \"mystery\"/\"flaky\" bugs. fetchlogs -n <the number you want> You may also want to take a look at github.com/aclements/go-misc/greplogs . It's a useful tool by Austin to run grep over logs fetched by fetchlogs. Also github.com/aclements/findflakes can make some guesses as to when a flaky test started failing.","title":"Download build farm failed logs and debugging"},{"location":"DragonFly-BSD/","text":"Go on DragonFly BSD From https://github.com/golang/go/issues/34958#issuecomment-543852995 : Go's DragonFly support policy is that we support the latest stable release primarily, but also try to keep DragonFly master passing, in prep for it to become the latest stable release. But that does mean we need one more builder at the moment. Kernel version Architectures Initial support version Final support version 4.6 or above amd64 Go 1.8 4.4.4 (EOL) amd64 Go 1.8 4.4 through 4.4.3 (EOL) amd64 Go 1.3 * Go 1.7.6 3.8 through 4.2 (EOL) amd64 Go 1.3 * Go 1.7.6 3.6 (EOL) amd64, 386 Go 1.3 Go 1.4.3 * Go 1.5 or above is recommended.","title":"DragonFly BSD"},{"location":"DragonFly-BSD/#go-on-dragonfly-bsd","text":"From https://github.com/golang/go/issues/34958#issuecomment-543852995 : Go's DragonFly support policy is that we support the latest stable release primarily, but also try to keep DragonFly master passing, in prep for it to become the latest stable release. But that does mean we need one more builder at the moment. Kernel version Architectures Initial support version Final support version 4.6 or above amd64 Go 1.8 4.4.4 (EOL) amd64 Go 1.8 4.4 through 4.4.3 (EOL) amd64 Go 1.3 * Go 1.7.6 3.8 through 4.2 (EOL) amd64 Go 1.3 * Go 1.7.6 3.6 (EOL) amd64, 386 Go 1.3 Go 1.4.3 * Go 1.5 or above is recommended.","title":"Go on DragonFly BSD"},{"location":"ErrorValueFAQ/","text":"Error Values: Frequently Asked Questions The Go 2 error values proposal adds functionality to the errors and fmt packages of the standard library for Go 1.13. There is also a compatibility package, golang.org/x/xerrors , for earlier Go versions. We suggest using the xerrors package for backwards compatibility. When you no longer wish to support Go versions before 1.13, use the corresponding standard library functions. This FAQ uses the errors and fmt packages from Go 1.13. How should I change my error-handling code to work with the new features? You need to be prepared that errors you get may be wrapped. If you currently compare errors using == , use errors.Is instead. Example: if err == io.ErrUnexpectedEOF becomes if errors.Is(err, io.ErrUnexpectedEOF) Checks of the form if err != nil need not be changed. Comparisons to io.EOF need not be changed, because io.EOF should never be wrapped. If you check for an error type using a type assertion or type switch, use errors.As instead. Example: if e, ok := err.(*os.PathError); ok becomes var e *os.PathError if errors.As(err, &e) Also use this pattern to check whether an error implements an interface. (This is one of those rare cases when a pointer to an interface is appropriate.) Rewrite a type switch as a sequence of if-elses. I am already using fmt.Errorf with %v or %s to provide context for an error. When should I switch to %w ? It's common to see code like if err := frob(thing); err != nil { return fmt.Errorf(\"while frobbing: %v\", err) } With the new error features, that code continues to work exactly as before, constructing a string that includes the text of err . Changing from %v to %w doesn't change that string, but it does wrap err , allowing the caller to access it using errors.Unwrap , errors.Is or errors.As . So use %w if you want to expose the underlying error to your callers. Keep in mind that doing so may be exposing implementation detail that can constrain the evolution of your code. Callers can depend on the type and value of the error you're wrapping, so changing that error can now break them. For example, if the AccessDatabase function of your package pkg uses Go's database/sql package, then it may encounter a sql.ErrTxDone error. If you return that error with fmt.Errorf(\"accessing DB: %v\", err) then callers won't see that sql.ErrTxtDone is part of the error you return. But if you instead return fmt.Errorf(\"accessing DB: %w\", err) , then a caller could reasonably write err := pkg.AccessDatabase(...) if errors.Is(err, sql.ErrTxDone) ... At that point, you must always return sql.ErrTxDone if you don't want to break your clients, even if you switch to a different database package. How can I add context to an error I'm already returning without breaking clients? Say your code now looks like return err and you decide that you want to add more information to err before you return it. If you write return fmt.Errorf(\"more info: %v\", err) then you might break your clients, because the identity of err is lost; only its message remains. You could instead wrap the error by using %w , writing return fmt.Errorf(\"more info: %w\", err) This will still break clients who use == or type assertion to test errors. But as we discussed in the first question of this FAQ, consumers of errors should migrate to the errors.Is and errors.As functions. If you can be sure that your clients have done so, then it is not a breaking change to switch from return err to return fmt.Errorf(\"more info: %w\", err) I'm writing new code, with no clients. Should I wrap returned errors or not? Since you have no clients, you aren't constrained by backwards compatibility. But you still need to balance two opposing considerations: - Giving client code access to underlying errors can help it make decisions, which can lead to better software. - Every error you expose becomes part of your API: your clients may come to rely on it, so you can't change it. For each error you return, you have to weigh the choice between helping your clients and locking yourself in. Of course, this choice is not unique to errors; as a package author, you make many decisions about whether a feature of your code is important for clients to know or an implementation detail. With errors, though, there is an intermediate choice: you can expose error details to people reading your code's error messages without exposing the errors themselves to client code. One way to do that is to put the details in a string using fmt.Errorf with %s or %v . Another is to write a custom error type, add the details to the string returned by its Error method, and avoid defining an Unwrap method. I maintain a package that exports an error-checking predicate function. How should I adapt to the new features? Your package has a function or method IsX(error) bool that reports whether an error has some property. A natural thought would be to modify IsX to unwrap the error it is passed, checking the property for each error in the chain of wrapped errors. We advise against doing this: the change in behavior could break your users. Your situation is like that of the standard os package, which has several such functions. We recommend the approach we took there. The os package has several predicates, but we treated most of them the same. For concreteness, we'll look at os.IsExist . Instead of changing os.IsExist , we made errors.Is(err, os.ErrExist) behave like it, except that Is unwraps. (We did this by having syscall.Errno implement an Is method, as described in the documentation for errors.Is .) Using errors.Is will always work correctly, because it will exist only in Go versions 1.13 and higher. For older versions of Go, you should recursively unwrap the error yourself, calling os.IsExist on each underlying error. This technique only works if you have control of the errors being wrapped, so you can add Is methods to them. In that case, we recommend: - Don't change your IsX(error) bool function; do change its documentation to clarify that it does not unwrap. - If you don't already have one, add a global variable whose type implements error that represents the condition that your function tests: var ErrX = errors.New(\"has property X\") - Add an Is method to the types for which IsX returns true. The Is method should return true if its argument equals ErrX . If you don't have control of all the errors that can have property X, you should instead consider adding another function that tests for the property while unwrapping, perhaps func IsXUnwrap(err error) bool { for e := err; e != nil; e = errors.Unwrap(e) { if IsX(e) { return true } } return false } Or you could leave things as they are, and let your users do the unwrapping themselves. Either way, you should still change the documentation of IsX to clarify that it does not unwrap. I have a type that implements error and holds a nested error. How should I adapt it to the new features? If your type already exposes the error, write an Unwrap method. For example, perhaps your type looks like type MyError struct { Err error // other fields } func (e *MyError) Error() string { return ... } Then you should add func (e *MyError) Unwrap() error { return e.Err } Your type will then work correctly with the Is and As functions of errors and xerrors . We've done that for os.PathError and other, similar types in the standard library. It's clear that writing an Unwrap method is the right choice if the nested error is exported, or otherwise visible to code outside your package, such as via a method like Unwrap . But if the nested error is not exposed to outside code, you probably should keep it that way. Making the error visible by returning it from Unwrap will enable your clients to depend on the type of the nested error, which can expose implementation details and constrain the evolution of your package. See the discussion of %w above for more.","title":"ErrorValueFAQ"},{"location":"ErrorValueFAQ/#error-values-frequently-asked-questions","text":"The Go 2 error values proposal adds functionality to the errors and fmt packages of the standard library for Go 1.13. There is also a compatibility package, golang.org/x/xerrors , for earlier Go versions. We suggest using the xerrors package for backwards compatibility. When you no longer wish to support Go versions before 1.13, use the corresponding standard library functions. This FAQ uses the errors and fmt packages from Go 1.13.","title":"Error Values: Frequently Asked Questions"},{"location":"ErrorValueFAQ/#how-should-i-change-my-error-handling-code-to-work-with-the-new-features","text":"You need to be prepared that errors you get may be wrapped. If you currently compare errors using == , use errors.Is instead. Example: if err == io.ErrUnexpectedEOF becomes if errors.Is(err, io.ErrUnexpectedEOF) Checks of the form if err != nil need not be changed. Comparisons to io.EOF need not be changed, because io.EOF should never be wrapped. If you check for an error type using a type assertion or type switch, use errors.As instead. Example: if e, ok := err.(*os.PathError); ok becomes var e *os.PathError if errors.As(err, &e) Also use this pattern to check whether an error implements an interface. (This is one of those rare cases when a pointer to an interface is appropriate.) Rewrite a type switch as a sequence of if-elses.","title":"How should I change my error-handling code to work with the new features?"},{"location":"ErrorValueFAQ/#i-am-already-using-fmterrorf-with-v-or-s-to-provide-context-for-an-error-when-should-i-switch-to-w","text":"It's common to see code like if err := frob(thing); err != nil { return fmt.Errorf(\"while frobbing: %v\", err) } With the new error features, that code continues to work exactly as before, constructing a string that includes the text of err . Changing from %v to %w doesn't change that string, but it does wrap err , allowing the caller to access it using errors.Unwrap , errors.Is or errors.As . So use %w if you want to expose the underlying error to your callers. Keep in mind that doing so may be exposing implementation detail that can constrain the evolution of your code. Callers can depend on the type and value of the error you're wrapping, so changing that error can now break them. For example, if the AccessDatabase function of your package pkg uses Go's database/sql package, then it may encounter a sql.ErrTxDone error. If you return that error with fmt.Errorf(\"accessing DB: %v\", err) then callers won't see that sql.ErrTxtDone is part of the error you return. But if you instead return fmt.Errorf(\"accessing DB: %w\", err) , then a caller could reasonably write err := pkg.AccessDatabase(...) if errors.Is(err, sql.ErrTxDone) ... At that point, you must always return sql.ErrTxDone if you don't want to break your clients, even if you switch to a different database package.","title":"I am already using fmt.Errorf with %v or %s to provide context for an error. When should I switch to %w?"},{"location":"ErrorValueFAQ/#how-can-i-add-context-to-an-error-im-already-returning-without-breaking-clients","text":"Say your code now looks like return err and you decide that you want to add more information to err before you return it. If you write return fmt.Errorf(\"more info: %v\", err) then you might break your clients, because the identity of err is lost; only its message remains. You could instead wrap the error by using %w , writing return fmt.Errorf(\"more info: %w\", err) This will still break clients who use == or type assertion to test errors. But as we discussed in the first question of this FAQ, consumers of errors should migrate to the errors.Is and errors.As functions. If you can be sure that your clients have done so, then it is not a breaking change to switch from return err to return fmt.Errorf(\"more info: %w\", err)","title":"How can I add context to an error I'm already returning without breaking clients?"},{"location":"ErrorValueFAQ/#im-writing-new-code-with-no-clients-should-i-wrap-returned-errors-or-not","text":"Since you have no clients, you aren't constrained by backwards compatibility. But you still need to balance two opposing considerations: - Giving client code access to underlying errors can help it make decisions, which can lead to better software. - Every error you expose becomes part of your API: your clients may come to rely on it, so you can't change it. For each error you return, you have to weigh the choice between helping your clients and locking yourself in. Of course, this choice is not unique to errors; as a package author, you make many decisions about whether a feature of your code is important for clients to know or an implementation detail. With errors, though, there is an intermediate choice: you can expose error details to people reading your code's error messages without exposing the errors themselves to client code. One way to do that is to put the details in a string using fmt.Errorf with %s or %v . Another is to write a custom error type, add the details to the string returned by its Error method, and avoid defining an Unwrap method.","title":"I'm writing new code, with no clients. Should I wrap returned errors or not?"},{"location":"ErrorValueFAQ/#i-maintain-a-package-that-exports-an-error-checking-predicate-function-how-should-i-adapt-to-the-new-features","text":"Your package has a function or method IsX(error) bool that reports whether an error has some property. A natural thought would be to modify IsX to unwrap the error it is passed, checking the property for each error in the chain of wrapped errors. We advise against doing this: the change in behavior could break your users. Your situation is like that of the standard os package, which has several such functions. We recommend the approach we took there. The os package has several predicates, but we treated most of them the same. For concreteness, we'll look at os.IsExist . Instead of changing os.IsExist , we made errors.Is(err, os.ErrExist) behave like it, except that Is unwraps. (We did this by having syscall.Errno implement an Is method, as described in the documentation for errors.Is .) Using errors.Is will always work correctly, because it will exist only in Go versions 1.13 and higher. For older versions of Go, you should recursively unwrap the error yourself, calling os.IsExist on each underlying error. This technique only works if you have control of the errors being wrapped, so you can add Is methods to them. In that case, we recommend: - Don't change your IsX(error) bool function; do change its documentation to clarify that it does not unwrap. - If you don't already have one, add a global variable whose type implements error that represents the condition that your function tests: var ErrX = errors.New(\"has property X\") - Add an Is method to the types for which IsX returns true. The Is method should return true if its argument equals ErrX . If you don't have control of all the errors that can have property X, you should instead consider adding another function that tests for the property while unwrapping, perhaps func IsXUnwrap(err error) bool { for e := err; e != nil; e = errors.Unwrap(e) { if IsX(e) { return true } } return false } Or you could leave things as they are, and let your users do the unwrapping themselves. Either way, you should still change the documentation of IsX to clarify that it does not unwrap.","title":"I maintain a package that exports an error-checking predicate function. How should I adapt to the new features?"},{"location":"ErrorValueFAQ/#i-have-a-type-that-implements-error-and-holds-a-nested-error-how-should-i-adapt-it-to-the-new-features","text":"If your type already exposes the error, write an Unwrap method. For example, perhaps your type looks like type MyError struct { Err error // other fields } func (e *MyError) Error() string { return ... } Then you should add func (e *MyError) Unwrap() error { return e.Err } Your type will then work correctly with the Is and As functions of errors and xerrors . We've done that for os.PathError and other, similar types in the standard library. It's clear that writing an Unwrap method is the right choice if the nested error is exported, or otherwise visible to code outside your package, such as via a method like Unwrap . But if the nested error is not exposed to outside code, you probably should keep it that way. Making the error visible by returning it from Unwrap will enable your clients to depend on the type of the nested error, which can expose implementation details and constrain the evolution of your package. See the discussion of %w above for more.","title":"I have a type that implements error and holds a nested error. How should I adapt it to the new features?"},{"location":"Errors/","text":"Errors Errors are indicated by returning an error as an additional return value from a function. A nil value means that there was no error. error s can be turned into strings by calling Error , their only method. You can create an error from a string by calling errors.New : if failure { return errors . New ( \"inverse tachyon pulse failed\" ) } or by using fmt.Errorf : if failure { return fmt . Errorf ( \"inverse tachyon pulse failed\" ) } Error strings should not start with a capital letter because they'll often be prefixed before printing: err := TryInverseTachyonPulse () if err != nil { fmt . Printf ( \"failed to solve problem: %s\\n\" , err ) } If you expect calling code to be able to handle an error, you can distinguish classes of errors either by returning special values, or new types. You only need to distinguish differences that the calling code could be expected to handle in this way as the string allows one to communicate the details of the error. io.EOF is a special value that signals the end of a stream. You can compare error values directly against io.EOF. If you want to carry extra data with the error, you can use a new type: type ParseError struct { Line , Col int } func ( p ParseError ) Error () string { return fmt . Sprintf ( \"parse error on line %d, column %d\" , p . Line , p . Col ) } If you want to create a constant string error, you can use a named type string: type errorConst string const ErrTooManyErrors errorConst = \"too many errors found.\" func ( e errorConst ) Error () string { return string ( e ) } Calling code would test for a special type of error by using a type switch: switch err := err .( type ) { case ParseError : PrintParseError ( err ) } Naming Error types end in \"Error\" and error variables start with \"Err\" or \"err\" : package somepkg // ParseError is type of error returned when there's a parsing problem. type ParseError struct { Line , Col int } var ErrBadAction = errors . New ( \"somepkg: a bad action was performed\" ) // ----- package foo func foo () { res , err := somepkgAction () if err != nil { if err == somepkg . ErrBadAction { } if pe , ok := err .( * somepkg . ParseError ); ok { line , col := pe . Line , pe . Col // .... } } } References Errors (specification): http://golang.org/ref/spec#Errors Package errors : http://golang.org/pkg/errors/ Type switches: http://golang.org/doc/go_spec.html#TypeSwitchStmt","title":"Errors"},{"location":"Errors/#errors","text":"Errors are indicated by returning an error as an additional return value from a function. A nil value means that there was no error. error s can be turned into strings by calling Error , their only method. You can create an error from a string by calling errors.New : if failure { return errors . New ( \"inverse tachyon pulse failed\" ) } or by using fmt.Errorf : if failure { return fmt . Errorf ( \"inverse tachyon pulse failed\" ) } Error strings should not start with a capital letter because they'll often be prefixed before printing: err := TryInverseTachyonPulse () if err != nil { fmt . Printf ( \"failed to solve problem: %s\\n\" , err ) } If you expect calling code to be able to handle an error, you can distinguish classes of errors either by returning special values, or new types. You only need to distinguish differences that the calling code could be expected to handle in this way as the string allows one to communicate the details of the error. io.EOF is a special value that signals the end of a stream. You can compare error values directly against io.EOF. If you want to carry extra data with the error, you can use a new type: type ParseError struct { Line , Col int } func ( p ParseError ) Error () string { return fmt . Sprintf ( \"parse error on line %d, column %d\" , p . Line , p . Col ) } If you want to create a constant string error, you can use a named type string: type errorConst string const ErrTooManyErrors errorConst = \"too many errors found.\" func ( e errorConst ) Error () string { return string ( e ) } Calling code would test for a special type of error by using a type switch: switch err := err .( type ) { case ParseError : PrintParseError ( err ) }","title":"Errors"},{"location":"Errors/#naming","text":"Error types end in \"Error\" and error variables start with \"Err\" or \"err\" : package somepkg // ParseError is type of error returned when there's a parsing problem. type ParseError struct { Line , Col int } var ErrBadAction = errors . New ( \"somepkg: a bad action was performed\" ) // ----- package foo func foo () { res , err := somepkgAction () if err != nil { if err == somepkg . ErrBadAction { } if pe , ok := err .( * somepkg . ParseError ); ok { line , col := pe . Line , pe . Col // .... } } }","title":"Naming"},{"location":"Errors/#references","text":"Errors (specification): http://golang.org/ref/spec#Errors Package errors : http://golang.org/pkg/errors/ Type switches: http://golang.org/doc/go_spec.html#TypeSwitchStmt","title":"References"},{"location":"ExperienceReports/","text":"This page collects experience reports about problems with Go that might inform our design of solutions to those problems. These reports should focus on the problems : they should not focus on and need not propose solutions. To propose solutions, see the proposal process . We hope to use these experience reports to understand where people are having trouble writing Go, to help us prioritize future changes to the Go ecosystem. (We do not promise to reply to these. If you need immediate help answering questions about Go, see https://golang.org/help/ for resources.) The best experience reports tell: (1) what you wanted to do, (2) what you actually did, and (3) why that wasn\u2019t great, illustrating those by real concrete examples, ideally from production use. Please write these reports about the problems most significant to you, post them on your own blog, or on Medium, or as a Github Gist (use a .md extension for Markdown), or as a publicly-readable Google doc, and then link them here. (Talk videos or slides are also welcome, although they are not as convenient for us to digest.) If you do not have permission to edit the wiki to add an article to this list, please file an issue . Please keep the overall page sorted alphabetically by section (Error Handling before Logging, and so on). Within a section, please keep articles sorted chronologically. It's helpful to include a one-phrase summary of the point of each article. Add new sections as appropriate. Table of Contents App and Game Development Concurrency Casting Context Declarations Dependencies Documentation Diagnostics and Debugging Education and Teaching Error Handling Error Values File System Generics GoMobile Immutability Inter Process Communication Large-Scale Software Development Logging Misc/Multiple Modules Performance Porting Slices Syntax Time Tooling Type System Typed nils Vendoring App and Game Development Paul Ruest, \" Go Library Support for Apps and Games \", November 2017 Tad Vizbaras, \" Building Optical Character Recognition (OCR) in Go \", December 2017 Casting Richard Warburton, \" Should Go Casting be permitted when underlying data structures are the same? \", December 2017 Concurrency Sergey Kamardin, \u201c A Million WebSockets and Go ,\u201d August 2017, about the memory overhead of blocked read/write goroutines. Nathaniel J. Smith, \u201c Notes on structured concurrency, or: Go statement considered harmful \u201d, April 2018. Context Sam Vilain, \u201c Using Go's context library for making your logs make sense ,\u201d December 2016, about extracting structured log values from context. Jon Calhoun, \u201c Pitfalls of context values and how to avoid or mitigate them in Go ,\u201d February 2017. Michal \u0160trba, \" Context should go away for Go 2 ,\" August 2017 Axel Wagner, \" Why context.Value matters and how to improve it ,\" August 2017. Dave Cheney, \" Context isn't for cancellation ,\" August 2017. Ross Light, \" Canceling I/O in Go Cap'n Proto ,\" January 2018. Iman Tumorang, \" Avoiding Memory Leak in Golang API ,\" January 2018. Declarations Christophe Meessen, \" Problems with Go's shorthand declaration := \", July 2017, about the shadowing var trap and apparent inconsistency of := . Brian Will, \" Go's := syntax is error-prone with multiple target variables \", August 2017. Dependencies Patrick Bohan, \" Docker => Moby: Go Dependencies ,\" Jun 28, 2017. A new Go team's struggles with dependency management and an approach to deal with them. Judson Lester, \"[untitled gist] ( https://gist.github.com/nyarly/edb6b7a5e3a762da6a5e2da8f59acf07 )\", August 2017. David Collier-Brown, \" Avoiding an NP-Complete Problem by Recycling Multics\u2019 Answer \", September 2018. Adrian Hesketh \" Security vulnerability tracking \", January 2018. Proving to a security auditor that code doesn't contain known vulnerabilities. Diagnostics and Debugging Kevin Burke, \" How I'm running benchmarks and printing their results \", it would be nice if I didn't need so much Unix glue to run and print these. July 2017. John Clarke, Tracking down an intermittent fault (not a race) by running a very slow {hit test failure, increase logging} cycle by running \"do { go test -race } while ( $LASTEXITCODE -eq 0 )\" overnight. Over many nights. Execution trace functionality like https://rr-project.org/ would be transformative. November 2018. guanw , cmd/trace and PySnooper . Comparison of cmd/trace with a (more succinct) Python tracing API. May 2019. Documentation Kevin Burke, \" Need to add documentation for a binary in three different places \", May 2017. Education and Teaching Carl Kingsford and Phillip Compeau, \" Go 2.0 for Teaching \". Experience using Go in an introductory programming course. Error Handling (This section is about writing if err != nil .) Andrew Gerrand, \u201c Error Handling and Go ,\u201d July 2011, showing Go error handling patterns. Martin S\u00fastrik, \u201c Why should I have written ZeroMQ in C, not C++ (part I) ,\u201d May 2012, discussing production problems with C++ exception handling due to error-handling code being far from code that causes the error. Thomi Richards, \u201c The Problems with Errors ,\u201d March 2014, arguing that it's essential for code to document exactly which errors it returns / exceptions it might throw. Roger Peppe, \u201c Lovin' your errors ,\u201d March 2015, discussing idioms for error handling. Bleve, \u201c Deferred Cleanup, Checking Errors, and Potential Problems ,\u201d September 2015, showing a bug related to error handling and defer in Bleve search. Andrew Morgan, \u201c What I Don't Like About Error Handling in Go, and How to Work Around It ,\u201d January 2017, about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose. Andr\u00e9 H\u00e4nsel, \" If \u2160 were to make my own Go\u2026 \", August 2017 Peter Goetz, \" Thinking About New Ways of Error Handling in Go 2 ,\" September 2017, shows how error-prone error handling in Go is and lays out requirements to improve the experience. Error Values (This section is about additional error semantics beyond the Error() string method.) Andrew Morgan, \u201c What I Don't Like About Error Handling in Go, and How to Work Around It ,\u201d January 2017, about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose. Chris Siebenmann, \u201c Go's net package doesn't have opaque errors, just undocumented ones ,\u201d August 2018 Bryan C. Mills, \u201c Error Wrapping and Redundancy in Go ,\u201d September 2019 File System Chris Lewis, \u201c Non-Local File Systems Should Be Supported ,\u201d July 2017. Proposes replacing file system read calls to something more abstracted like the sql package does. Generics \u201c Summary of Go Generics Discussions (living document) .\u201d Bouke van der Bijl, \u201c Idiomatic Generics in Go ,\u201d September 2014. Craig Weber, \u201c Living without generics in Go ,\u201d December 2014. Shashank Sharma, \u201c Poor man's generics in Golang (Go) ,\u201d May 2016. Niek Sanders, \u201c Overhead of Go's generic sort ,\u201d September 2016, documenting the overhead of sorting using sort.Interface instead of specialized code. Jon Calhoun, \u201c Using code generation to survive without generics in Go ,\u201d May 2017. Jon Bodner, \u201c Closures are the Generics for Go ,\u201d June 2017. Andrew Stock, \" Why I miss generics in Go ,\" June 2017 Kevin Burke, \" Code example with lots of interface casts ,\" requires a lot of boilerplate/casts. Ian Lance Taylor, \" The append function ,\" July 2017. DeedleFake, \" The Problem with Interfaces \", July 2017. Kurtis Nusbaum \" Why I'm So Frustrated With Go ,\" June 2017 Juan \u00c1lvarez, \" Generics on Go's stdlib \", July 2017. David Chase, \" A use case for Go Generics in a Go Compiler \", August 2017 Varun Kumar, \" Generics - I Wish You Were Here\u2026 \", August 2017 Sameer Ajmani, \" Go Experience Report for Generics: Google metrics API \", August 2017 Chewxy, \" Tensor Refactor: A Go Experience Report \", September 2017, discusses the lack of generics and how it affects building high performance multidimensional arrays for different data types (having to resort to a lot of pointer ugliness, and manually keeping track of type and runtime type checking) qwerty2501,\" A problem runtime error due to lack of Generics \", October 2017 posener, \" Why I recommend to avoid using the go-kit library \", clear separation of concern need lots of boilerplate code. gokit try code generation to avoid this #70 #308 protoc-gen-gokit , but it looks like a complex solution for the problem. Xavier Leroy, \" A modular module system \", paper about module description for generics. Tobias Gustafsson, \" Experiences implementing PEDS \", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017 A Googler \" govisor/generics.go \". April 27, 2018 GoMobile Vijay, \"[Nested structs and slices not supported in gomobile]\" Immutability Kurtis Nusbaum \" Why I'm So Frustrated With Go ,\" June 2017 Sindre Myren \" Go 2.0: Retain simplicity by trading features \" July 2017 Tobias Gustafsson, \" Experiences implementing PEDS \", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017 Inter Process Communication Pablo R. Larraondo \" A Go interprocess communication model ,\" August 2017 Large-Scale Software Development Russ Cox, \u201c Codebase Refactoring (with help from Go) ,\u201d November 2016, laying out the gradual code repair problem addressed in part by type aliases ( #18130 ). Travis Jeffery, \" I'll take pkg over internal ,\" November 2019; talking about Go project layouts, problems with internal, and why people use pkg. Logging Evan Miller, \u201c Logging can be tricky ,\u201d September 2014, showing how logging can add to application tail latency. Dave Cheney, \u201c Let's talk about logging ,\u201d November 2015, arguing that there are only two log levels. TJ Holowaychuk, \u201c Apex log ,\u201d January 2016, describing a structured log package and how it would be used in production. Paddy Foran, \u201c Logging in Go ,\u201d February 2016, showing how sends Go program logs to Sentry. Martin Angers, \u201c About Go logging for reusable packages ,\u201d March 2016, making suggestions for how to write code that doesn't assume a particular log package. BugReplay.com, \u201c How to use Google Cloud's Free Structured Logging Service With Golang ,\u201d September 2016. Sam Vilain, \u201c Using Go's context library for making your logs make sense ,\u201d December 2016, about extracting structured log values from context. Logmatic, \u201c Our Guide to a Golang Logs World ,\u201d March 2017. Chris Hines, Peter Bourgon, \u201c Proposal: standard Logger interface ,\u201c February 2017, problems related to stdlib logger, especially in the context of libraries, and one proposed solution. Sindre Myren, \" There is nothing Goish about log.Fatal \" August 2017, how poorly log.Fatal plays with defer, and a simple pattern for delaing with it in Go 1.x and Go 2.x. Joonas Loppi, \" An idea to fix Go\u00b4s logging mess \" December 2017, just use *log.Logger as an interface everywhere and compose solutions around it. Misc / Multiple Iman Tumorang, \" Trying Clean Architecture on Golang \" July 2017 Laurent Demailly, \" My Go lang experience, part 1 \" December 2017, a laundry list of pros and cons with current Go from an experienced C/C++/Java/Scripting languages developer perspective. Gokcehan Kara, \" Installation with Go Language can be Simpler \" May 2018, some complications about the installation and distribution of static stripped binaries with version information. Bob Nystrom, \" The Language I Wish Go Was \" October 2010, I wish Go had tuples, unions, constructors, no Nil, exceptions, generics, some syntax sugar, and ponies that shoot Cheez Whiz out of their noses. Modules Paul Jolly - \" Creating a submodule within an existing module \" - covers multi-module repos, cyclic module dependencies and the steps required to move between various \"states\" Chi authors - Github comment - comment on why the Chi authors won't implement Go Modules support yet (due to the import compatibility rule). Sam Whited -\" Supporting Go Modules \" - Things learned from upgrading 20 so modules. TL;DR \u2014 upgrading large modules past v1 is a huge pain and needs tooling, failure modes for modules are very complex and it's easy to screw up adding modules support to existing projects. Stripe Github thread (linked comment down) - reverting support for Go Modules . TL;DR \u2014 Stripe is reverting Go Modules support because there is no clear upgrade path from dep for modules above v1. Referencing bash scripts in GOPATH Go Modules on Badger and Dgraph . TL;DR - Dgraph is dropping support for v2 because it forces non-Go modules users to change their code. A survey on Golang's dependency management modes (GOPATH and Go Modules): status quo, problems and challenges . - The purpose of this report is to help developers better understand the issues in the transition from GOPATH to Go Modules. Performance Kevin Burke, \" Real Life Go Benchmarking ,\" trying to explain to the average developer how to use tools like pprof, maybe this could be easier. July 2016. Nathan Kerr, \" Concurrency Slower? \", shows how to use Go's testing, benchmarking, and profiling tools to improve the performance of a concurrent implementation of a function. April 2017. Porting Shannon Pekary, \" Why GOPP ,\" an attempt to create a 'class' keyword that simply makes a struct to also be an interface to make porting code from object-oriented languages much easier. Slices Richard Warburton, \" Should Go 2.0 support slice comparison? ,\" an argument to treat slices as structs for equality comparison, ignoring backing arrays. \" Deduplicating a slice is too cumbersome ,\" a 10-line function in your source code vs. e.g. Ruby's uniq function. \" Counter-intuitive behaviour of Go variadic functions ,\", January 2018, stumbling blocks encountered when expanding slices into argument lists. Syntax Andr\u00e9 H\u00e4nsel, \" If \u2160 were to make my own Go\u2026 \", August 2017 Bojan Zivanovic, \" Optional function parameters \", May 2020 Raanan Hadar, \" A data scientist's take on Go \", September 2020 Time John Graham-Cumming, \u201c How and Why the Leap Second Affected Cloudflare DNS ,\u201d January 2017, about timing across leap seconds ( #12914 ). Tooling Jonathan Ingram, \u201c gofmt is not opinionated enough \u201d, August 2017, about ongoing debates between developers regarding code style because gofmt is not opinionated enough. Jean-Laurent de Morlhon, \" Pourquoi Maurice ne doit surtout pas coder en GO , talk about Go from a java developper perspective (\"go dep\" is not enough,\u2026), slides are in english. Type System Sam Whited, \u201c Faking Enumeration Types with Consts and Unexported Types \u201d, July 2017, about attempting to ensure compile time correctness of values provided to an API using the type system. Andreas Matuschek, \" Operator Methods \", July 2017, just to remember that there are problems with types without corresponding operators ( #19770 ). Leigh McCulloch, \" Go: Experience Report: Pointers \", July 2017, about pointers being used for both transferring ownership and indicating a lack of value. Jack Lindamood, \" Interface wrapping method erasure \", July 2017, about the loss of information due to type wrappers Sam Whited, \u201c The Case for interface{} \u201d, Aug 2017, two examples of using interface and why one is bad (but necessary) and one is good. James Frasch\u00e9, \" Sum types experience report \", Aug 2017, issues caused by inability to restrict to a closed set of types Robin Eklind, \" Specific use cases. In response to James Frasch\u00e9's 'Sum types experience report' \", Aug 2017, issues caused by inability to restrict to a closed set of types Rick Branson, \" Implicit Pointers = Explicitly Bad \", Sep 2017, issues encountered with parameters/variables with interface types as implicit references Chewxy, \" Tensor Refactor: A Go Experience Report \", September 2017, issues regarding discussion of a type system in Go Walter Schulze, \" Generic functions cannot be passed as values \", September 2017 Walter, Schulze, \" For Sum Types: Multiple return parameters are overrated \", September 2017 Nicolas, Boulay \" Sum type not always the best choice (Typed tagless-final interpretations) , October 2017 Eduard Urbach, \" Type-casting interface{} to chan interface{} \", October 2017 David Vennik, \" Unjumbling Golang OOP primitives \", April 20, 2018 - The problem of the lack of structuring in OOP primitives - dummy functions and redundant boilerplate type bindings. Jelte Fennema, \" Fixing the billion dollar mistake in Go by borrowing from Rust \", June 14, 2018 - Nil pointer dereferences cause panics in production - it would be great if the type system would catch some of those. Mike Schinkel, \" On Typing Strings in Go (More Constrained vs. Less Constrained) , March 2019, Discusses how the benefits of creating types derived from basic types are often outweighed by the need to use constant type-casting in contexts where said type casting provides no extra type safety, i.e. when casting to a less-constrained otherwise-identical type. Mike Schinkel, \" Pros and cons of leveraging Go types , April 2019, Discusses how great Go's type system is but tries to show how really using it can be extremely tedious and make for code that is harder-to-reason-about, so proposes an explicit type alias feature. Typed nils David Cheney, \" Typed nils in Go 2 \", August 2017. Vendoring Jeremy Loy, \" Go Modules and Vendoring \", September 2018. Ian Davis, \" Vendoring for self-contained builds \", January 2019","title":"ExperienceReports"},{"location":"ExperienceReports/#app-and-game-development","text":"Paul Ruest, \" Go Library Support for Apps and Games \", November 2017 Tad Vizbaras, \" Building Optical Character Recognition (OCR) in Go \", December 2017","title":"App and Game Development"},{"location":"ExperienceReports/#casting","text":"Richard Warburton, \" Should Go Casting be permitted when underlying data structures are the same? \", December 2017","title":"Casting"},{"location":"ExperienceReports/#concurrency","text":"Sergey Kamardin, \u201c A Million WebSockets and Go ,\u201d August 2017, about the memory overhead of blocked read/write goroutines. Nathaniel J. Smith, \u201c Notes on structured concurrency, or: Go statement considered harmful \u201d, April 2018.","title":"Concurrency"},{"location":"ExperienceReports/#context","text":"Sam Vilain, \u201c Using Go's context library for making your logs make sense ,\u201d December 2016, about extracting structured log values from context. Jon Calhoun, \u201c Pitfalls of context values and how to avoid or mitigate them in Go ,\u201d February 2017. Michal \u0160trba, \" Context should go away for Go 2 ,\" August 2017 Axel Wagner, \" Why context.Value matters and how to improve it ,\" August 2017. Dave Cheney, \" Context isn't for cancellation ,\" August 2017. Ross Light, \" Canceling I/O in Go Cap'n Proto ,\" January 2018. Iman Tumorang, \" Avoiding Memory Leak in Golang API ,\" January 2018.","title":"Context"},{"location":"ExperienceReports/#declarations","text":"Christophe Meessen, \" Problems with Go's shorthand declaration := \", July 2017, about the shadowing var trap and apparent inconsistency of := . Brian Will, \" Go's := syntax is error-prone with multiple target variables \", August 2017.","title":"Declarations"},{"location":"ExperienceReports/#dependencies","text":"Patrick Bohan, \" Docker => Moby: Go Dependencies ,\" Jun 28, 2017. A new Go team's struggles with dependency management and an approach to deal with them. Judson Lester, \"[untitled gist] ( https://gist.github.com/nyarly/edb6b7a5e3a762da6a5e2da8f59acf07 )\", August 2017. David Collier-Brown, \" Avoiding an NP-Complete Problem by Recycling Multics\u2019 Answer \", September 2018. Adrian Hesketh \" Security vulnerability tracking \", January 2018. Proving to a security auditor that code doesn't contain known vulnerabilities.","title":"Dependencies"},{"location":"ExperienceReports/#diagnostics-and-debugging","text":"Kevin Burke, \" How I'm running benchmarks and printing their results \", it would be nice if I didn't need so much Unix glue to run and print these. July 2017. John Clarke, Tracking down an intermittent fault (not a race) by running a very slow {hit test failure, increase logging} cycle by running \"do { go test -race } while ( $LASTEXITCODE -eq 0 )\" overnight. Over many nights. Execution trace functionality like https://rr-project.org/ would be transformative. November 2018. guanw , cmd/trace and PySnooper . Comparison of cmd/trace with a (more succinct) Python tracing API. May 2019.","title":"Diagnostics and Debugging"},{"location":"ExperienceReports/#documentation","text":"Kevin Burke, \" Need to add documentation for a binary in three different places \", May 2017.","title":"Documentation"},{"location":"ExperienceReports/#education-and-teaching","text":"Carl Kingsford and Phillip Compeau, \" Go 2.0 for Teaching \". Experience using Go in an introductory programming course.","title":"Education and Teaching"},{"location":"ExperienceReports/#error-handling","text":"(This section is about writing if err != nil .) Andrew Gerrand, \u201c Error Handling and Go ,\u201d July 2011, showing Go error handling patterns. Martin S\u00fastrik, \u201c Why should I have written ZeroMQ in C, not C++ (part I) ,\u201d May 2012, discussing production problems with C++ exception handling due to error-handling code being far from code that causes the error. Thomi Richards, \u201c The Problems with Errors ,\u201d March 2014, arguing that it's essential for code to document exactly which errors it returns / exceptions it might throw. Roger Peppe, \u201c Lovin' your errors ,\u201d March 2015, discussing idioms for error handling. Bleve, \u201c Deferred Cleanup, Checking Errors, and Potential Problems ,\u201d September 2015, showing a bug related to error handling and defer in Bleve search. Andrew Morgan, \u201c What I Don't Like About Error Handling in Go, and How to Work Around It ,\u201d January 2017, about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose. Andr\u00e9 H\u00e4nsel, \" If \u2160 were to make my own Go\u2026 \", August 2017 Peter Goetz, \" Thinking About New Ways of Error Handling in Go 2 ,\" September 2017, shows how error-prone error handling in Go is and lays out requirements to improve the experience.","title":"Error Handling"},{"location":"ExperienceReports/#error-values","text":"(This section is about additional error semantics beyond the Error() string method.) Andrew Morgan, \u201c What I Don't Like About Error Handling in Go, and How to Work Around It ,\u201d January 2017, about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose. Chris Siebenmann, \u201c Go's net package doesn't have opaque errors, just undocumented ones ,\u201d August 2018 Bryan C. Mills, \u201c Error Wrapping and Redundancy in Go ,\u201d September 2019","title":"Error Values"},{"location":"ExperienceReports/#file-system","text":"Chris Lewis, \u201c Non-Local File Systems Should Be Supported ,\u201d July 2017. Proposes replacing file system read calls to something more abstracted like the sql package does.","title":"File System"},{"location":"ExperienceReports/#generics","text":"\u201c Summary of Go Generics Discussions (living document) .\u201d Bouke van der Bijl, \u201c Idiomatic Generics in Go ,\u201d September 2014. Craig Weber, \u201c Living without generics in Go ,\u201d December 2014. Shashank Sharma, \u201c Poor man's generics in Golang (Go) ,\u201d May 2016. Niek Sanders, \u201c Overhead of Go's generic sort ,\u201d September 2016, documenting the overhead of sorting using sort.Interface instead of specialized code. Jon Calhoun, \u201c Using code generation to survive without generics in Go ,\u201d May 2017. Jon Bodner, \u201c Closures are the Generics for Go ,\u201d June 2017. Andrew Stock, \" Why I miss generics in Go ,\" June 2017 Kevin Burke, \" Code example with lots of interface casts ,\" requires a lot of boilerplate/casts. Ian Lance Taylor, \" The append function ,\" July 2017. DeedleFake, \" The Problem with Interfaces \", July 2017. Kurtis Nusbaum \" Why I'm So Frustrated With Go ,\" June 2017 Juan \u00c1lvarez, \" Generics on Go's stdlib \", July 2017. David Chase, \" A use case for Go Generics in a Go Compiler \", August 2017 Varun Kumar, \" Generics - I Wish You Were Here\u2026 \", August 2017 Sameer Ajmani, \" Go Experience Report for Generics: Google metrics API \", August 2017 Chewxy, \" Tensor Refactor: A Go Experience Report \", September 2017, discusses the lack of generics and how it affects building high performance multidimensional arrays for different data types (having to resort to a lot of pointer ugliness, and manually keeping track of type and runtime type checking) qwerty2501,\" A problem runtime error due to lack of Generics \", October 2017 posener, \" Why I recommend to avoid using the go-kit library \", clear separation of concern need lots of boilerplate code. gokit try code generation to avoid this #70 #308 protoc-gen-gokit , but it looks like a complex solution for the problem. Xavier Leroy, \" A modular module system \", paper about module description for generics. Tobias Gustafsson, \" Experiences implementing PEDS \", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017 A Googler \" govisor/generics.go \". April 27, 2018","title":"Generics"},{"location":"ExperienceReports/#gomobile","text":"Vijay, \"[Nested structs and slices not supported in gomobile]\"","title":"GoMobile"},{"location":"ExperienceReports/#immutability","text":"Kurtis Nusbaum \" Why I'm So Frustrated With Go ,\" June 2017 Sindre Myren \" Go 2.0: Retain simplicity by trading features \" July 2017 Tobias Gustafsson, \" Experiences implementing PEDS \", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017","title":"Immutability"},{"location":"ExperienceReports/#inter-process-communication","text":"Pablo R. Larraondo \" A Go interprocess communication model ,\" August 2017","title":"Inter Process Communication"},{"location":"ExperienceReports/#large-scale-software-development","text":"Russ Cox, \u201c Codebase Refactoring (with help from Go) ,\u201d November 2016, laying out the gradual code repair problem addressed in part by type aliases ( #18130 ). Travis Jeffery, \" I'll take pkg over internal ,\" November 2019; talking about Go project layouts, problems with internal, and why people use pkg.","title":"Large-Scale Software Development"},{"location":"ExperienceReports/#logging","text":"Evan Miller, \u201c Logging can be tricky ,\u201d September 2014, showing how logging can add to application tail latency. Dave Cheney, \u201c Let's talk about logging ,\u201d November 2015, arguing that there are only two log levels. TJ Holowaychuk, \u201c Apex log ,\u201d January 2016, describing a structured log package and how it would be used in production. Paddy Foran, \u201c Logging in Go ,\u201d February 2016, showing how sends Go program logs to Sentry. Martin Angers, \u201c About Go logging for reusable packages ,\u201d March 2016, making suggestions for how to write code that doesn't assume a particular log package. BugReplay.com, \u201c How to use Google Cloud's Free Structured Logging Service With Golang ,\u201d September 2016. Sam Vilain, \u201c Using Go's context library for making your logs make sense ,\u201d December 2016, about extracting structured log values from context. Logmatic, \u201c Our Guide to a Golang Logs World ,\u201d March 2017. Chris Hines, Peter Bourgon, \u201c Proposal: standard Logger interface ,\u201c February 2017, problems related to stdlib logger, especially in the context of libraries, and one proposed solution. Sindre Myren, \" There is nothing Goish about log.Fatal \" August 2017, how poorly log.Fatal plays with defer, and a simple pattern for delaing with it in Go 1.x and Go 2.x. Joonas Loppi, \" An idea to fix Go\u00b4s logging mess \" December 2017, just use *log.Logger as an interface everywhere and compose solutions around it.","title":"Logging"},{"location":"ExperienceReports/#misc--multiple","text":"Iman Tumorang, \" Trying Clean Architecture on Golang \" July 2017 Laurent Demailly, \" My Go lang experience, part 1 \" December 2017, a laundry list of pros and cons with current Go from an experienced C/C++/Java/Scripting languages developer perspective. Gokcehan Kara, \" Installation with Go Language can be Simpler \" May 2018, some complications about the installation and distribution of static stripped binaries with version information. Bob Nystrom, \" The Language I Wish Go Was \" October 2010, I wish Go had tuples, unions, constructors, no Nil, exceptions, generics, some syntax sugar, and ponies that shoot Cheez Whiz out of their noses.","title":"Misc / Multiple"},{"location":"ExperienceReports/#modules","text":"Paul Jolly - \" Creating a submodule within an existing module \" - covers multi-module repos, cyclic module dependencies and the steps required to move between various \"states\" Chi authors - Github comment - comment on why the Chi authors won't implement Go Modules support yet (due to the import compatibility rule). Sam Whited -\" Supporting Go Modules \" - Things learned from upgrading 20 so modules. TL;DR \u2014 upgrading large modules past v1 is a huge pain and needs tooling, failure modes for modules are very complex and it's easy to screw up adding modules support to existing projects. Stripe Github thread (linked comment down) - reverting support for Go Modules . TL;DR \u2014 Stripe is reverting Go Modules support because there is no clear upgrade path from dep for modules above v1. Referencing bash scripts in GOPATH Go Modules on Badger and Dgraph . TL;DR - Dgraph is dropping support for v2 because it forces non-Go modules users to change their code. A survey on Golang's dependency management modes (GOPATH and Go Modules): status quo, problems and challenges . - The purpose of this report is to help developers better understand the issues in the transition from GOPATH to Go Modules.","title":"Modules"},{"location":"ExperienceReports/#performance","text":"Kevin Burke, \" Real Life Go Benchmarking ,\" trying to explain to the average developer how to use tools like pprof, maybe this could be easier. July 2016. Nathan Kerr, \" Concurrency Slower? \", shows how to use Go's testing, benchmarking, and profiling tools to improve the performance of a concurrent implementation of a function. April 2017.","title":"Performance"},{"location":"ExperienceReports/#porting","text":"Shannon Pekary, \" Why GOPP ,\" an attempt to create a 'class' keyword that simply makes a struct to also be an interface to make porting code from object-oriented languages much easier.","title":"Porting"},{"location":"ExperienceReports/#slices","text":"Richard Warburton, \" Should Go 2.0 support slice comparison? ,\" an argument to treat slices as structs for equality comparison, ignoring backing arrays. \" Deduplicating a slice is too cumbersome ,\" a 10-line function in your source code vs. e.g. Ruby's uniq function. \" Counter-intuitive behaviour of Go variadic functions ,\", January 2018, stumbling blocks encountered when expanding slices into argument lists.","title":"Slices"},{"location":"ExperienceReports/#syntax","text":"Andr\u00e9 H\u00e4nsel, \" If \u2160 were to make my own Go\u2026 \", August 2017 Bojan Zivanovic, \" Optional function parameters \", May 2020 Raanan Hadar, \" A data scientist's take on Go \", September 2020","title":"Syntax"},{"location":"ExperienceReports/#time","text":"John Graham-Cumming, \u201c How and Why the Leap Second Affected Cloudflare DNS ,\u201d January 2017, about timing across leap seconds ( #12914 ).","title":"Time"},{"location":"ExperienceReports/#tooling","text":"Jonathan Ingram, \u201c gofmt is not opinionated enough \u201d, August 2017, about ongoing debates between developers regarding code style because gofmt is not opinionated enough. Jean-Laurent de Morlhon, \" Pourquoi Maurice ne doit surtout pas coder en GO , talk about Go from a java developper perspective (\"go dep\" is not enough,\u2026), slides are in english.","title":"Tooling"},{"location":"ExperienceReports/#type-system","text":"Sam Whited, \u201c Faking Enumeration Types with Consts and Unexported Types \u201d, July 2017, about attempting to ensure compile time correctness of values provided to an API using the type system. Andreas Matuschek, \" Operator Methods \", July 2017, just to remember that there are problems with types without corresponding operators ( #19770 ). Leigh McCulloch, \" Go: Experience Report: Pointers \", July 2017, about pointers being used for both transferring ownership and indicating a lack of value. Jack Lindamood, \" Interface wrapping method erasure \", July 2017, about the loss of information due to type wrappers Sam Whited, \u201c The Case for interface{} \u201d, Aug 2017, two examples of using interface and why one is bad (but necessary) and one is good. James Frasch\u00e9, \" Sum types experience report \", Aug 2017, issues caused by inability to restrict to a closed set of types Robin Eklind, \" Specific use cases. In response to James Frasch\u00e9's 'Sum types experience report' \", Aug 2017, issues caused by inability to restrict to a closed set of types Rick Branson, \" Implicit Pointers = Explicitly Bad \", Sep 2017, issues encountered with parameters/variables with interface types as implicit references Chewxy, \" Tensor Refactor: A Go Experience Report \", September 2017, issues regarding discussion of a type system in Go Walter Schulze, \" Generic functions cannot be passed as values \", September 2017 Walter, Schulze, \" For Sum Types: Multiple return parameters are overrated \", September 2017 Nicolas, Boulay \" Sum type not always the best choice (Typed tagless-final interpretations) , October 2017 Eduard Urbach, \" Type-casting interface{} to chan interface{} \", October 2017 David Vennik, \" Unjumbling Golang OOP primitives \", April 20, 2018 - The problem of the lack of structuring in OOP primitives - dummy functions and redundant boilerplate type bindings. Jelte Fennema, \" Fixing the billion dollar mistake in Go by borrowing from Rust \", June 14, 2018 - Nil pointer dereferences cause panics in production - it would be great if the type system would catch some of those. Mike Schinkel, \" On Typing Strings in Go (More Constrained vs. Less Constrained) , March 2019, Discusses how the benefits of creating types derived from basic types are often outweighed by the need to use constant type-casting in contexts where said type casting provides no extra type safety, i.e. when casting to a less-constrained otherwise-identical type. Mike Schinkel, \" Pros and cons of leveraging Go types , April 2019, Discusses how great Go's type system is but tries to show how really using it can be extremely tedious and make for code that is harder-to-reason-about, so proposes an explicit type alias feature.","title":"Type System"},{"location":"ExperienceReports/#typed-nils","text":"David Cheney, \" Typed nils in Go 2 \", August 2017.","title":"Typed nils"},{"location":"ExperienceReports/#vendoring","text":"Jeremy Loy, \" Go Modules and Vendoring \", September 2018. Ian Davis, \" Vendoring for self-contained builds \", January 2019","title":"Vendoring"},{"location":"FileTreeDocumentation/","text":"This page documents the file tree for a source installation of go1.13.1. $ tree -d -L 2 /usr/lib/go1.13.1 | head /usr/lib/go1.13.1 `-- go |-- api |-- bin |-- doc |-- lib |-- misc |-- pkg |-- src `-- test $ api contains data for Go's API checker $ ls $GOROOT/api README go1.10.txt go1.13.txt go1.4.txt go1.7.txt go1.txt except.txt go1.11.txt go1.2.txt go1.5.txt go1.8.txt next.txt go1.1.txt go1.12.txt go1.3.txt go1.6.txt go1.9.txt $ bin contains the go and gofmt executables $ ls -l $GOROOT/bin total 11576 -rwxr-xr-x 1 root root 9652760 Oct 2 03:02 go -rwxr-xr-x 1 root root 2197756 Oct 2 03:02 gofmt $ doc contains .css, .go, .html, .js, and .png files lib contains the compressed time zone database $ tree $GOROOT/lib | head -n 5 /usr/lib/go1.13.1/go/lib `-- time |-- README |-- update.bash `-- zoneinfo.zip $ misc contains files pertaining to specific build modes and platforms $ tree -d -L 1 $GOROOT/misc | head -n 12 /usr/lib/go1.13.1/go/misc |-- android |-- arm |-- cgo |-- chrome |-- ios |-- linkcheck |-- nacl |-- reboot |-- swig |-- trace `-- wasm $ pkg contains libs, header files, compiled object files, and executables $ tree -d -L 1 $GOROOT/pkg | head -n 6 /usr/lib/go1.13.1/go/pkg |-- include |-- linux_386 |-- linux_386_dynlink |-- obj `-- tool $ src contains the go1.13.1 source code test contains tests of the Go toolchain and runtime","title":"FileTreeDocumentation"},{"location":"FreeBSD/","text":"Go on FreeBSD Kernel version Architectures Initial support version Final support version 13-STABLE amd64, arm, 386 ** 12-STABLE amd64, arm, 386 Go 1.12 ** 11-STABLE amd64, arm, 386 Go 1.7 10-STABLE (EOL) amd64, arm, 386 Go 1.3 * Go 1.12.4 9-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 8-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 7-STABLE (EOL) amd64, 386 Go 1 Go 1.1.2 * Go 1.5 or above is recommended. ** FreeBSD 12/13 requires a kernel with options COMPAT_FREEBSD11 config (this is the default). 64-bit inode aware system calls are available since https://golang.org/cl/143637 . See https://golang.org/issues/22447 .","title":"FreeBSD"},{"location":"FreeBSD/#go-on-freebsd","text":"Kernel version Architectures Initial support version Final support version 13-STABLE amd64, arm, 386 ** 12-STABLE amd64, arm, 386 Go 1.12 ** 11-STABLE amd64, arm, 386 Go 1.7 10-STABLE (EOL) amd64, arm, 386 Go 1.3 * Go 1.12.4 9-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 8-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 7-STABLE (EOL) amd64, 386 Go 1 Go 1.1.2 * Go 1.5 or above is recommended. ** FreeBSD 12/13 requires a kernel with options COMPAT_FREEBSD11 config (this is the default). 64-bit inode aware system calls are available since https://golang.org/cl/143637 . See https://golang.org/issues/22447 .","title":"Go on FreeBSD"},{"location":"FromXToGo/","text":"This page links to blog posts, videos, and slide decks discussing moving a code base to Go from some other language. Python Disqus: Trying out this Go thing Rackspace: Making OpenStack-Powered Rackspace Cloud Files Buzz With Hummingbird Repustate: From Python to Go: migrating our entire API Spacemonkey: Python to Go Why I went from Python to Go (and not node.js) How to Convince Your Company to Go With Golang 5 Reasons Why We switched from Python To Go Stream: Why we switched from Python to Go Code Migration in Production: Rewriting the Sharding Layer of Uber\u2019s Schemaless Datastore Learning Go by porting a medium-sized web backend from Python Node Digg Uber (audio) Apex/TJ Holowaychuk ScaleDrone migrated all websocket servers from Node.js to Go From Node.js To Go, Why One Startup Made The Switch Why did Koding switch from Node.js to Go? Letting Go of Node.js Our Experience with Golang Interview with Steve Kaliski, CTO of Bowery - The tech stack that powers Bowery, Moving from Node.js to Go lang and more C++ dl.google.com by Brad Fitzpatrick Flywheel: Google's mobile image compression proxy Fulfilling a Pikedream: the ups of downs of porting 50k lines of C++ to Go Ruby Book: From Ruby to Golang Toggl: Moving to Go Iron.io: How We Went from 30 Servers to 2: Go Parse: How We Moved Our API From Ruby to Go and Saved Our Sanity Timehop: Why Timehop Chose Go to Replace Our Rails App Scout App: FROM RUBY TO GO: A REWRITE FOR THE FUTURE Steven Yue: From Ruby's Grape to Martini in Go for Building Web API Server Soundcloud: Go at Soundcloud My impressions of Go Our Experience with Golang Rewriting our web analytics tracking infrastructure in Go Java From Java to Go Why one developer switched from Java to Google Go Common Lisp A comparison of three programming languages for a full-fledged next-generation sequencing tool Comparing Ease of Programming in C++, Go, and Java for Implementing a Next-Generation Sequencing Tool .NET Why I Left the .NET Framework Scala CrowdStrike: Moving a Team from Scala to Go Making the move from Scala to Go, and why we\u2019re not going back PHP Switching from PHP to Go (read comments section) A Journey into Microservices ARDUINO WEB ARCHITECTURE, BACK TO THE FUTURE Why I switched from PHP to Go Marco switched to GoLang from PHP and Saved Money, why not you ?! Moving from PHP (Laravel) to Go When All You Have is an ElePHPant (Slides from ConFoo 2016) Perl [How We Migrate From Perl to Golang] ( https://medium.com/@alvintz.v/how-we-migrate-from-perl-to-golang-1520a4951392 ) Haskell Golang\u2019s Real-time GC in Theory and Practice Clojure Rewriting an API Gateway Service from Clojure to Golang: AppsFlyer Experience Report","title":"FromXToGo"},{"location":"FromXToGo/#python","text":"Disqus: Trying out this Go thing Rackspace: Making OpenStack-Powered Rackspace Cloud Files Buzz With Hummingbird Repustate: From Python to Go: migrating our entire API Spacemonkey: Python to Go Why I went from Python to Go (and not node.js) How to Convince Your Company to Go With Golang 5 Reasons Why We switched from Python To Go Stream: Why we switched from Python to Go Code Migration in Production: Rewriting the Sharding Layer of Uber\u2019s Schemaless Datastore Learning Go by porting a medium-sized web backend from Python","title":"Python"},{"location":"FromXToGo/#node","text":"Digg Uber (audio) Apex/TJ Holowaychuk ScaleDrone migrated all websocket servers from Node.js to Go From Node.js To Go, Why One Startup Made The Switch Why did Koding switch from Node.js to Go? Letting Go of Node.js Our Experience with Golang Interview with Steve Kaliski, CTO of Bowery - The tech stack that powers Bowery, Moving from Node.js to Go lang and more","title":"Node"},{"location":"FromXToGo/#c","text":"dl.google.com by Brad Fitzpatrick Flywheel: Google's mobile image compression proxy Fulfilling a Pikedream: the ups of downs of porting 50k lines of C++ to Go","title":"C++"},{"location":"FromXToGo/#ruby","text":"Book: From Ruby to Golang Toggl: Moving to Go Iron.io: How We Went from 30 Servers to 2: Go Parse: How We Moved Our API From Ruby to Go and Saved Our Sanity Timehop: Why Timehop Chose Go to Replace Our Rails App Scout App: FROM RUBY TO GO: A REWRITE FOR THE FUTURE Steven Yue: From Ruby's Grape to Martini in Go for Building Web API Server Soundcloud: Go at Soundcloud My impressions of Go Our Experience with Golang Rewriting our web analytics tracking infrastructure in Go","title":"Ruby"},{"location":"FromXToGo/#java","text":"From Java to Go Why one developer switched from Java to Google Go","title":"Java"},{"location":"FromXToGo/#common-lisp","text":"A comparison of three programming languages for a full-fledged next-generation sequencing tool Comparing Ease of Programming in C++, Go, and Java for Implementing a Next-Generation Sequencing Tool","title":"Common Lisp"},{"location":"FromXToGo/#net","text":"Why I Left the .NET Framework","title":".NET"},{"location":"FromXToGo/#scala","text":"CrowdStrike: Moving a Team from Scala to Go Making the move from Scala to Go, and why we\u2019re not going back","title":"Scala"},{"location":"FromXToGo/#php","text":"Switching from PHP to Go (read comments section) A Journey into Microservices ARDUINO WEB ARCHITECTURE, BACK TO THE FUTURE Why I switched from PHP to Go Marco switched to GoLang from PHP and Saved Money, why not you ?! Moving from PHP (Laravel) to Go When All You Have is an ElePHPant (Slides from ConFoo 2016)","title":"PHP"},{"location":"FromXToGo/#perl","text":"[How We Migrate From Perl to Golang] ( https://medium.com/@alvintz.v/how-we-migrate-from-perl-to-golang-1520a4951392 )","title":"Perl"},{"location":"FromXToGo/#haskell","text":"Golang\u2019s Real-time GC in Theory and Practice","title":"Haskell"},{"location":"FromXToGo/#clojure","text":"Rewriting an API Gateway Service from Clojure to Golang: AppsFlyer Experience Report","title":"Clojure"},{"location":"Frozen/","text":"Sometimes a package reaches the end of its development cycle and is considered complete. It continues to be maintained, meaning regressions or breakages are fixed, but the scope becomes frozen and no new features are meant to be accepted. Freezing a package is a message primarily for developers and contributors to the package, not users. It does not imply that the package should not be used. For that, see the \"Deprecated\" convention . To signal that a package is frozen and is not accepting new features, add a paragraph to its doc comment stating that, and a recommendation on where to look for and where to contribute new features, if applicable. Examples // The syslog package is frozen and is not accepting new features. // Some external packages provide more functionality. See: // // https://godoc.org/?q=syslog // The smtp package is frozen and is not accepting new features. // Some external packages provide more functionality. See: // // https://godoc.org/?q=smtp // The net/rpc package is frozen and is not accepting new features. // The testing/quick package is frozen and is not accepting new features. // The text/tabwriter package is frozen and is not accepting new features. There are some examples in the standard library .","title":"Frozen"},{"location":"Frozen/#examples","text":"// The syslog package is frozen and is not accepting new features. // Some external packages provide more functionality. See: // // https://godoc.org/?q=syslog // The smtp package is frozen and is not accepting new features. // Some external packages provide more functionality. See: // // https://godoc.org/?q=smtp // The net/rpc package is frozen and is not accepting new features. // The testing/quick package is frozen and is not accepting new features. // The text/tabwriter package is frozen and is not accepting new features. There are some examples in the standard library .","title":"Examples"},{"location":"GOPATH/","text":"GOPATH variable Go development using dependencies beyond the standard library is done using Go modules . When using Go modules, the GOPATH variable (which defaults to $HOME/go on Unix and %USERPROFILE%\\go on Windows) is used for the following purposes: The go install command installs binaries to $GOBIN , which defaults to $GOPATH/bin . The go get command caches downloaded modules in $GOMODCACHE , which defaults to $GOPATH/pkg/mod . The go get command caches downloaded checksum database state in $GOPATH/pkg/sumdb . See the go command documentation for full details about the GOPATH variable. The rest of this page concerns the GOPATH development mode, which is now deprecated. GOPATH development mode Before Go modules, Go development using dependencies used \u201cGOPATH development mode,\u201d or \u201cGOPATH mode\u201d for short. In GOPATH mode, the go command used the GOPATH variable for the following purposes: The go install command installed binaries to $GOBIN , which defaults to $GOPATH/bin . The go install command installed the compiled package file for import \"example.com/y/z\" to $GOPATH/pkg/example.com/y/z.a . The go get command downloaded source code satisfying import \"example.com/y/z\" to $GOPATH/src/example.com/y/z . Deprecating and removing GOPATH development mode Go modules are the replacement for GOPATH development mode to add the concept of a package version throughout the Go ecosystem. The transition from GOPATH development mode to Go modules has been gradual, spread across many Go releases: Go 1.11 (August 2018) introduced the GO111MODULE variable, which defaulted to auto . With GO111MODULE=off , the go command used GOPATH mode always. With GO111MODULE=on , the go command used module mode always. With GO111MODULE=auto (or leaving GO111MODULE unset), the go command decided the mode based on the current directory. If the current directory was outside $GOPATH/src and was within a source tree with a go.mod file in its root, then the go command used Go module mode. Otherwise the go command used GOPATH mode. This rule ensured that all commands run in $GOPATH/src were unaffected in auto mode but let users experiment with modules in other directories. Go 1.13 (August 2019) adjusted GO111MODULE=auto mode to remove the $GOPATH/src restriction: if a directory inside $GOPATH/src has a go.mod file, commands run in or below that directory now use module mode. This allows users to continue to organize their checked-out code in an import-based hierarchy but use modules for individual checkouts. Go 1.16 (February 2021) will change the default to GO111MODULE=on , using module mode always. That is, GOPATH mode will be disabled entirely by default. Users who need one to use GOPATH mode for one more release can set GO111MODULE=auto or GO111MODULE=off explicitly. Go 1.NN (???) will remove the GO111MODULE setting and GOPATH mode entirely, using module mode always. Note that removing GOPATH development mode does not mean removing the GOPATH variable. It will still be used for the purposes listed at the top of this page. FAQ Is the GOPATH variable being removed? No. The GOPATH variable (set in the environment or by go env -w ) is not being removed. It will still be used to determine the default binary install location, module cache location, and checksum database cache location, as mentioned at the top of this page. Can I still write code in GOPATH/src/import/path? Yes. Many Go developers appreciate the structure that this convention provides and check out their module repositories into it. All your code needs to get started with modules is a go.mod file. See go mod init . How can I compile one repo in GOPATH/src against changes made in another? If you want to use unpublished changes in one module when building another, you can add a replace line to the other module\u2019s go.mod . For example, if you have checked out golang.org/x/website and golang.org/x/tools to $GOPATH/src/golang.org/x/website and $GOPATH/src/golang.org/x/tools , then to make your local builds of website automatically use changes in tools , you would add this to $GOPATH/src/golang.org/x/website/go.mod : replace golang . org / x / tools => ../ tools Of course, replace directives know nothing about $GOPATH . The same line would work fine if you had checked the two out into $HOME/mycode/website and $HOME/mycode/tools . Why is GOPATH development mode being removed? At its core, GOPATH development mode essentially supplies all those kinds of replace lines automatically, so that the code you build for dependencies is the code you happen to have checked out on your computer. That means your build is affected by old checkouts you happen to have lying around that you might have forgotten about. It means that the build you get on one machine can be different from another, even starting with the same version of the same top-level repo. And it means that the builds you get can be different from the ones another developer in the same project gets. Go modules address all these reproducibility concerns. The root cause of all these problems is that GOPATH mode does not have any concept of a package version . In addition to reproducibility, Go modules provide a clear way to handle proxying and secure downloads. When you git clone a project and then grab its dependencies, those dependencies are being cryptographically checked (using the go.sum file) to make sure they're the same bits the original developer used. The only trusted part is the top-level git clone . Here again, this is only possible because Go modules, in contrast to GOPATH mode, have a concept of a package version. And for future evolution of Go itself, modules clearly mark which version of the Go language a particular tree of files is written in. This makes it possible to disable problematic features\u2014for example, string(1) , which many people think produces \"1\" but actually produces \"\\x01\" (Ctrl-A)\u2014in later versions of Go while keeping older programs building (because they are explicitly marked as having been written for the older version of Go). There are more examples like these. None of this is possible with GOPATH development mode as it exists today. We can't move the ecosystem forward and start really depending on these important properties of Go modules without retiring GOPATH mode. (You might also ask: why not just add those things to GOPATH mode? The answer is: we did, and the result is Go modules.) When was it decided to deprecate GOPATH development mode? The original plan was to deprecate GOPATH mode in Go 1.13, but we wanted to take extra time to make modules even more robust for as many Go users as possible, so the deprecation was pushed back from that release. Discussion on issue #41330 and in the golang-tools group did not identify any remaining blockers for deprecating GOPATH, so it is now scheduled for Go 1.16, with removal in a future release, as stated in the timeline above. What if I have more questions about moving from GOPATH development mode to Go modules? See golang.org/help for a list of resources. If none of those are appropriate, feel free to file an issue here. We want everyone to be successful adopting Go modules.","title":"GOPATH"},{"location":"GOPATH/#gopath-variable","text":"Go development using dependencies beyond the standard library is done using Go modules . When using Go modules, the GOPATH variable (which defaults to $HOME/go on Unix and %USERPROFILE%\\go on Windows) is used for the following purposes: The go install command installs binaries to $GOBIN , which defaults to $GOPATH/bin . The go get command caches downloaded modules in $GOMODCACHE , which defaults to $GOPATH/pkg/mod . The go get command caches downloaded checksum database state in $GOPATH/pkg/sumdb . See the go command documentation for full details about the GOPATH variable. The rest of this page concerns the GOPATH development mode, which is now deprecated.","title":"GOPATH variable"},{"location":"GOPATH/#gopath-development-mode","text":"Before Go modules, Go development using dependencies used \u201cGOPATH development mode,\u201d or \u201cGOPATH mode\u201d for short. In GOPATH mode, the go command used the GOPATH variable for the following purposes: The go install command installed binaries to $GOBIN , which defaults to $GOPATH/bin . The go install command installed the compiled package file for import \"example.com/y/z\" to $GOPATH/pkg/example.com/y/z.a . The go get command downloaded source code satisfying import \"example.com/y/z\" to $GOPATH/src/example.com/y/z .","title":"GOPATH development mode"},{"location":"GOPATH/#deprecating-and-removing-gopath-development-mode","text":"Go modules are the replacement for GOPATH development mode to add the concept of a package version throughout the Go ecosystem. The transition from GOPATH development mode to Go modules has been gradual, spread across many Go releases: Go 1.11 (August 2018) introduced the GO111MODULE variable, which defaulted to auto . With GO111MODULE=off , the go command used GOPATH mode always. With GO111MODULE=on , the go command used module mode always. With GO111MODULE=auto (or leaving GO111MODULE unset), the go command decided the mode based on the current directory. If the current directory was outside $GOPATH/src and was within a source tree with a go.mod file in its root, then the go command used Go module mode. Otherwise the go command used GOPATH mode. This rule ensured that all commands run in $GOPATH/src were unaffected in auto mode but let users experiment with modules in other directories. Go 1.13 (August 2019) adjusted GO111MODULE=auto mode to remove the $GOPATH/src restriction: if a directory inside $GOPATH/src has a go.mod file, commands run in or below that directory now use module mode. This allows users to continue to organize their checked-out code in an import-based hierarchy but use modules for individual checkouts. Go 1.16 (February 2021) will change the default to GO111MODULE=on , using module mode always. That is, GOPATH mode will be disabled entirely by default. Users who need one to use GOPATH mode for one more release can set GO111MODULE=auto or GO111MODULE=off explicitly. Go 1.NN (???) will remove the GO111MODULE setting and GOPATH mode entirely, using module mode always. Note that removing GOPATH development mode does not mean removing the GOPATH variable. It will still be used for the purposes listed at the top of this page.","title":"Deprecating and removing GOPATH development mode"},{"location":"GOPATH/#faq","text":"","title":"FAQ"},{"location":"GOPATH/#is-the-gopath-variable-being-removed","text":"No. The GOPATH variable (set in the environment or by go env -w ) is not being removed. It will still be used to determine the default binary install location, module cache location, and checksum database cache location, as mentioned at the top of this page.","title":"Is the GOPATH variable being removed?"},{"location":"GOPATH/#can-i-still-write-code-in-gopathsrcimportpath","text":"Yes. Many Go developers appreciate the structure that this convention provides and check out their module repositories into it. All your code needs to get started with modules is a go.mod file. See go mod init .","title":"Can I still write code in GOPATH/src/import/path?"},{"location":"GOPATH/#how-can-i-compile-one-repo-in-gopathsrc-against-changes-made-in-another","text":"If you want to use unpublished changes in one module when building another, you can add a replace line to the other module\u2019s go.mod . For example, if you have checked out golang.org/x/website and golang.org/x/tools to $GOPATH/src/golang.org/x/website and $GOPATH/src/golang.org/x/tools , then to make your local builds of website automatically use changes in tools , you would add this to $GOPATH/src/golang.org/x/website/go.mod : replace golang . org / x / tools => ../ tools Of course, replace directives know nothing about $GOPATH . The same line would work fine if you had checked the two out into $HOME/mycode/website and $HOME/mycode/tools .","title":"How can I compile one repo in GOPATH/src against changes made in another?"},{"location":"GOPATH/#why-is-gopath-development-mode-being-removed","text":"At its core, GOPATH development mode essentially supplies all those kinds of replace lines automatically, so that the code you build for dependencies is the code you happen to have checked out on your computer. That means your build is affected by old checkouts you happen to have lying around that you might have forgotten about. It means that the build you get on one machine can be different from another, even starting with the same version of the same top-level repo. And it means that the builds you get can be different from the ones another developer in the same project gets. Go modules address all these reproducibility concerns. The root cause of all these problems is that GOPATH mode does not have any concept of a package version . In addition to reproducibility, Go modules provide a clear way to handle proxying and secure downloads. When you git clone a project and then grab its dependencies, those dependencies are being cryptographically checked (using the go.sum file) to make sure they're the same bits the original developer used. The only trusted part is the top-level git clone . Here again, this is only possible because Go modules, in contrast to GOPATH mode, have a concept of a package version. And for future evolution of Go itself, modules clearly mark which version of the Go language a particular tree of files is written in. This makes it possible to disable problematic features\u2014for example, string(1) , which many people think produces \"1\" but actually produces \"\\x01\" (Ctrl-A)\u2014in later versions of Go while keeping older programs building (because they are explicitly marked as having been written for the older version of Go). There are more examples like these. None of this is possible with GOPATH development mode as it exists today. We can't move the ecosystem forward and start really depending on these important properties of Go modules without retiring GOPATH mode. (You might also ask: why not just add those things to GOPATH mode? The answer is: we did, and the result is Go modules.)","title":"Why is GOPATH development mode being removed?"},{"location":"GOPATH/#when-was-it-decided-to-deprecate-gopath-development-mode","text":"The original plan was to deprecate GOPATH mode in Go 1.13, but we wanted to take extra time to make modules even more robust for as many Go users as possible, so the deprecation was pushed back from that release. Discussion on issue #41330 and in the golang-tools group did not identify any remaining blockers for deprecating GOPATH, so it is now scheduled for Go 1.16, with removal in a future release, as stated in the timeline above.","title":"When was it decided to deprecate GOPATH development mode?"},{"location":"GOPATH/#what-if-i-have-more-questions-about-moving-from-gopath-development-mode-to-go-modules","text":"See golang.org/help for a list of resources. If none of those are appropriate, feel free to file an issue here. We want everyone to be successful adopting Go modules.","title":"What if I have more questions about moving from GOPATH development mode to Go modules?"},{"location":"Gardening/","text":"Gardening What is gardening? \"Gardening\" in open source projects refers to the background maintenance tasks done to keep the project healthy & growing & nice looking. This page lists common Go gardening tasks. Access If you've been regularly active in the Go community for some time, feel free to ask for Gerrit and/or Github access to modify things. See http://golang.org/wiki/GerritAccess and http://golang.org/wiki/GithubAccess Gardening Tasks Before doing any gardening work, especially on the issue tracker, remember to familiarize yourself with the issues life-cycle, described here: Handling Issues - Issue States . Fix red Look at https://build.golang.org/ \u2014 is anything red? Fix or file bugs or nag people. The build dashboard should never be red, even occasionally. If the tree is red, people can't work effectively because TryBots and such will just report failures, masking other problems. Triage new bugs Look at the untriaged issues . For Go, we use the presence of certain labels ( Needs* or WaitingForInfo ) to indicate that an issue has been triaged. Issues labeled Go2 , Proposal , CherryPickCandidate , or gopls have their own, separate triage queues and can be skipped. While triaging the bug: is it a duplicate? Close it, referencing the dup. is it a Question rather than a bug? Reply with something like \"For questions about Go, see https://golang.org/wiki/Questions \". is the subject the correct format? It should start with the package path and a colon: \"net/http: fix crash in Server during foo operation\". is it in a subrepo? Leave the milestone as Unreleased unless it's a subrepo that goes into a release, like http2 . if it is a regression and you can reproduce it, use git bisect to find the bad commit (optional but very helpful). When the issue has been triaged, add an appropriate label (per https://golang.org/wiki/HandlingIssues ) to mark it as such. WaitingForInfo Find bugs that are in state WaitingForInfo ( https://github.com/golang/go/labels/WaitingForInfo ) and ping them, remove the label when replies arrive, or close the bugs if a reply never arrived. \"Unplanned\" bugs \"Unplanned\" issues have a habit of being neglected. Check out old ones and see if they're easily fixable (and can be moved to a Go1.n or Go 1.nMaybe milestone), or should be closed. Pending CLs Review the format of commit messages and presence of tests and formatting of code and typos/grammar in incoming pending CLs. All of that can be done without determining the correctness of the change itself. See https://dev.golang.org/release for the list of pending CLs. Once it has a +1, the owner of that area can give it a +2. Read a +1 as meaning \"triaged\", or \"not obviously wrong\". If it has tests, is formatted properly (references a bug number, probably), and is ready for more review, give it a +1. Pending CLs: ask about tests If a new CL arrives without a test, but could/should have a test, ask if they could add a test. Or suggest how. Pending CLs: run TryBots If you have access (see https://golang.org/wiki/GerritAccess ) to run the TryBots and you see a CL with plausible (and non-malicious) code, kick off the TryBots. (We've never seen malicious code trying to escape our TryBot sandboxes, but that's why it's not automatic yet. Please alert us if you see something.)","title":"Gardening"},{"location":"Gardening/#gardening","text":"","title":"Gardening"},{"location":"Gardening/#what-is-gardening","text":"\"Gardening\" in open source projects refers to the background maintenance tasks done to keep the project healthy & growing & nice looking. This page lists common Go gardening tasks.","title":"What is gardening?"},{"location":"Gardening/#access","text":"If you've been regularly active in the Go community for some time, feel free to ask for Gerrit and/or Github access to modify things. See http://golang.org/wiki/GerritAccess and http://golang.org/wiki/GithubAccess","title":"Access"},{"location":"Gardening/#gardening-tasks","text":"Before doing any gardening work, especially on the issue tracker, remember to familiarize yourself with the issues life-cycle, described here: Handling Issues - Issue States .","title":"Gardening Tasks"},{"location":"Gardening/#fix-red","text":"Look at https://build.golang.org/ \u2014 is anything red? Fix or file bugs or nag people. The build dashboard should never be red, even occasionally. If the tree is red, people can't work effectively because TryBots and such will just report failures, masking other problems.","title":"Fix red"},{"location":"Gardening/#triage-new-bugs","text":"Look at the untriaged issues . For Go, we use the presence of certain labels ( Needs* or WaitingForInfo ) to indicate that an issue has been triaged. Issues labeled Go2 , Proposal , CherryPickCandidate , or gopls have their own, separate triage queues and can be skipped. While triaging the bug: is it a duplicate? Close it, referencing the dup. is it a Question rather than a bug? Reply with something like \"For questions about Go, see https://golang.org/wiki/Questions \". is the subject the correct format? It should start with the package path and a colon: \"net/http: fix crash in Server during foo operation\". is it in a subrepo? Leave the milestone as Unreleased unless it's a subrepo that goes into a release, like http2 . if it is a regression and you can reproduce it, use git bisect to find the bad commit (optional but very helpful). When the issue has been triaged, add an appropriate label (per https://golang.org/wiki/HandlingIssues ) to mark it as such.","title":"Triage new bugs"},{"location":"Gardening/#waitingforinfo","text":"Find bugs that are in state WaitingForInfo ( https://github.com/golang/go/labels/WaitingForInfo ) and ping them, remove the label when replies arrive, or close the bugs if a reply never arrived.","title":"WaitingForInfo"},{"location":"Gardening/#unplanned-bugs","text":"\"Unplanned\" issues have a habit of being neglected. Check out old ones and see if they're easily fixable (and can be moved to a Go1.n or Go 1.nMaybe milestone), or should be closed.","title":"\"Unplanned\" bugs"},{"location":"Gardening/#pending-cls","text":"Review the format of commit messages and presence of tests and formatting of code and typos/grammar in incoming pending CLs. All of that can be done without determining the correctness of the change itself. See https://dev.golang.org/release for the list of pending CLs. Once it has a +1, the owner of that area can give it a +2. Read a +1 as meaning \"triaged\", or \"not obviously wrong\". If it has tests, is formatted properly (references a bug number, probably), and is ready for more review, give it a +1.","title":"Pending CLs"},{"location":"Gardening/#pending-cls-ask-about-tests","text":"If a new CL arrives without a test, but could/should have a test, ask if they could add a test. Or suggest how.","title":"Pending CLs: ask about tests"},{"location":"Gardening/#pending-cls-run-trybots","text":"If you have access (see https://golang.org/wiki/GerritAccess ) to run the TryBots and you see a CL with plausible (and non-malicious) code, kick off the TryBots. (We've never seen malicious code trying to escape our TryBot sandboxes, but that's why it's not automatic yet. Please alert us if you see something.)","title":"Pending CLs: run TryBots"},{"location":"GcToolchainTricks/","text":"Introduction This page documents some less well-known (perhaps advanced) tricks for the gc toolchain (and the Go tool). C code without cgo Use syso file to embed arbitrary self-contained C code Basically, you write your assembly language in GNU as(1) format, but make sure all the interface functions are using Go's ABI (everything on stack, etc., please read Go 1.2 Assembler Introduction for more details). The most important step is compiling that file to file.syso ( gcc -c -O3 -o file.syso file.S ), and put the resulting syso in the package source directory. And then, suppose your assembly function is named Func, you need one stub cmd/asm assembly file to call it: TEXT \u00b7Func(SB),$0-8 // please set the correct parameter size (8) here JMP Func(SB) then you just declare Func in your package and use it, go build will be able to pick up the syso and link it into the package. Notes: * The binary produced won't use cgo, and the overhead is just an unconditional JMP that could be perfectly branch predicted. But, please be aware that because it doesn't use cgo, your assembly function is running on Go stack, and it shouldn't use too much stack (a safe value is less than ~100 bytes) or terrible things will happen. For compute kernels, this requirement isn't too restricting. * Please make sure you\u2018ve included all library dependencies in your C code. libc is not available, and most notably, libgcc is also not available (esp. when you're using gcc __builtin_funcs , please use nm(1) to double-check that your file doesn't contain any undefined symbols). * It's also possible to call back Go functions from C code, but this is left as an exercise for the reader. * this trick is supported on all Go 1.x releases. * the Go linker is pretty capable in that you just need to prepare .syso file for each architecture, not for each OS/Arch combination (assuming you don't use OS-specific constructs, obviously), and the Go linker is perfectly capable to link, for example, Mach-O object files into ELF binaries. So be sure to name your syso file with names like file_amd64.syso , file_386.syso . Bundle data into Go binary There are a lot of ways to bundle data in Go binary, for example: * zip the data files, and append the zip file to end of Go binary, then use zip -A prog to adjust the bundled zip header. You can use archive/zip to open the program as a zip file, and access its contents easily. There are existing packages that helps with this, for example, https://godoc.org/bitbucket.org/tebeka/nrsc ; This requires post-processing the program binary, which is not suitable for non-main packages that require static data. Also, you must collect all data files into one zip file, which means that it's impossible to use multiple packages that utilize this method. * Embed the binary file as a string or []byte in Go program. This method is not recommended, not only because the generated Go source file is much larger than the binary files themselves, also because static large []byte slows down the compilation of the package and the gc compiler uses a lot of memory to compile it (this is a known bug of gc ). For example, see the tools/godoc/static package. * use similar syso technique to bundle the data. Precompile the data file as syso file using GNU as(1) 's .incbin pseudo-instruction. The key trick for the 3 rd alternative is that the linker for the gc toolchain has the ability to link COFF object files of a different architecture into the binary without problem, so you don't need to provide syso files for all supported architectures. As long as the syso file doesn't contain instructions, you can just use one to embed the data. The assembly template to generate the COFF .syso file: /* data.S, as -o data.syso */ .section .rdata,\"dr\" /* put in COFF section .rdata */ .globl _bindataA /* no longer need to prepend package name here */ .globl _ebindataA _bindataA: .incbin \"dataA\" _ebindataA: .globl _bindataB /* no longer need to prepend package name here */ .globl _ebindataB _bindataB: .incbin \"dataB\" _ebindataB: And two other files, first a Plan 9 C source file that assembles the slice for Go: /* slice.c */ #include \"runtime.h\" extern byte _bindataA[], _bindataB[], _ebindataA, _ebindataB; void \u00b7getDataSlices(Slice a, Slice b) { a.array = _bindataA; a.len = a.cap = &_ebindataA - _bindataA; b.array = _bindataB; b.len = b.cap = &_ebindataB - _bindataB; FLUSH(&a); FLUSH(&b); } And finally, the Go file that uses the embedded slide: /* data.go */ package bindata func getDataSlices() ([]byte, []byte) // defined in slice.c var A, B = getDataSlices() Note: you will need an as(1) capable of generating the COFF syso file, you can build one easily on Unix: wget http://ftp.gnu.org/gnu/binutils/binutils-2.22.tar.bz2 # any newer version also works tar xf binutils-2.22.tar.bz2 cd binutils-2.22 mkdir build; cd build ../configure --target=i386-foo-pe --enable-ld=no --enable-gold=no make # use gas/as-new to assemble your data.S # all the other file could be discarded. Drawback of this issue is that it seems incompatible to cgo, so only use it when you don't use cgo, at least for now. I (minux) is working on figuring out why they're incompatible. Including build information in the executable The gc toolchain linker, cmd/link , provides a -X option that may be used to record arbitrary information in a Go string variable at link time. The format is -X importpath.name=val . Here importpath is the name used in an import statement for the package (or main for the main package), name is the name of the string variable defined in the package, and val is the string you want to set that variable to. When using the go tool, use its -ldflags option to pass the -X option to the linker. Let's suppose this file is part of the package company/buildinfo : package buildinfo var BuildTime string You can build the program using this package using go build -ldflags=\"-X 'company/buildinfo.BuildTime=$(date)'\" to record the build time in the string. (The use of $(date) assumes you are using a Unix-style shell.) The string variable must exist, it must be a variable, not a constant, and its value must not be initialized by a function call. There is no warning for using the wrong name in the -X option. You can often find the name to use by running go tool nm on the program, but that will fail if the package name has any non-ASCII characters, or a \" or % character.","title":"GcToolchainTricks"},{"location":"GcToolchainTricks/#introduction","text":"This page documents some less well-known (perhaps advanced) tricks for the gc toolchain (and the Go tool).","title":"Introduction"},{"location":"GcToolchainTricks/#c-code-without-cgo","text":"","title":"C code without cgo"},{"location":"GcToolchainTricks/#use-syso-file-to-embed-arbitrary-self-contained-c-code","text":"Basically, you write your assembly language in GNU as(1) format, but make sure all the interface functions are using Go's ABI (everything on stack, etc., please read Go 1.2 Assembler Introduction for more details). The most important step is compiling that file to file.syso ( gcc -c -O3 -o file.syso file.S ), and put the resulting syso in the package source directory. And then, suppose your assembly function is named Func, you need one stub cmd/asm assembly file to call it: TEXT \u00b7Func(SB),$0-8 // please set the correct parameter size (8) here JMP Func(SB) then you just declare Func in your package and use it, go build will be able to pick up the syso and link it into the package. Notes: * The binary produced won't use cgo, and the overhead is just an unconditional JMP that could be perfectly branch predicted. But, please be aware that because it doesn't use cgo, your assembly function is running on Go stack, and it shouldn't use too much stack (a safe value is less than ~100 bytes) or terrible things will happen. For compute kernels, this requirement isn't too restricting. * Please make sure you\u2018ve included all library dependencies in your C code. libc is not available, and most notably, libgcc is also not available (esp. when you're using gcc __builtin_funcs , please use nm(1) to double-check that your file doesn't contain any undefined symbols). * It's also possible to call back Go functions from C code, but this is left as an exercise for the reader. * this trick is supported on all Go 1.x releases. * the Go linker is pretty capable in that you just need to prepare .syso file for each architecture, not for each OS/Arch combination (assuming you don't use OS-specific constructs, obviously), and the Go linker is perfectly capable to link, for example, Mach-O object files into ELF binaries. So be sure to name your syso file with names like file_amd64.syso , file_386.syso .","title":"Use syso file to embed arbitrary self-contained C code"},{"location":"GcToolchainTricks/#bundle-data-into-go-binary","text":"There are a lot of ways to bundle data in Go binary, for example: * zip the data files, and append the zip file to end of Go binary, then use zip -A prog to adjust the bundled zip header. You can use archive/zip to open the program as a zip file, and access its contents easily. There are existing packages that helps with this, for example, https://godoc.org/bitbucket.org/tebeka/nrsc ; This requires post-processing the program binary, which is not suitable for non-main packages that require static data. Also, you must collect all data files into one zip file, which means that it's impossible to use multiple packages that utilize this method. * Embed the binary file as a string or []byte in Go program. This method is not recommended, not only because the generated Go source file is much larger than the binary files themselves, also because static large []byte slows down the compilation of the package and the gc compiler uses a lot of memory to compile it (this is a known bug of gc ). For example, see the tools/godoc/static package. * use similar syso technique to bundle the data. Precompile the data file as syso file using GNU as(1) 's .incbin pseudo-instruction. The key trick for the 3 rd alternative is that the linker for the gc toolchain has the ability to link COFF object files of a different architecture into the binary without problem, so you don't need to provide syso files for all supported architectures. As long as the syso file doesn't contain instructions, you can just use one to embed the data. The assembly template to generate the COFF .syso file: /* data.S, as -o data.syso */ .section .rdata,\"dr\" /* put in COFF section .rdata */ .globl _bindataA /* no longer need to prepend package name here */ .globl _ebindataA _bindataA: .incbin \"dataA\" _ebindataA: .globl _bindataB /* no longer need to prepend package name here */ .globl _ebindataB _bindataB: .incbin \"dataB\" _ebindataB: And two other files, first a Plan 9 C source file that assembles the slice for Go: /* slice.c */ #include \"runtime.h\" extern byte _bindataA[], _bindataB[], _ebindataA, _ebindataB; void \u00b7getDataSlices(Slice a, Slice b) { a.array = _bindataA; a.len = a.cap = &_ebindataA - _bindataA; b.array = _bindataB; b.len = b.cap = &_ebindataB - _bindataB; FLUSH(&a); FLUSH(&b); } And finally, the Go file that uses the embedded slide: /* data.go */ package bindata func getDataSlices() ([]byte, []byte) // defined in slice.c var A, B = getDataSlices() Note: you will need an as(1) capable of generating the COFF syso file, you can build one easily on Unix: wget http://ftp.gnu.org/gnu/binutils/binutils-2.22.tar.bz2 # any newer version also works tar xf binutils-2.22.tar.bz2 cd binutils-2.22 mkdir build; cd build ../configure --target=i386-foo-pe --enable-ld=no --enable-gold=no make # use gas/as-new to assemble your data.S # all the other file could be discarded. Drawback of this issue is that it seems incompatible to cgo, so only use it when you don't use cgo, at least for now. I (minux) is working on figuring out why they're incompatible.","title":"Bundle data into Go binary"},{"location":"GcToolchainTricks/#including-build-information-in-the-executable","text":"The gc toolchain linker, cmd/link , provides a -X option that may be used to record arbitrary information in a Go string variable at link time. The format is -X importpath.name=val . Here importpath is the name used in an import statement for the package (or main for the main package), name is the name of the string variable defined in the package, and val is the string you want to set that variable to. When using the go tool, use its -ldflags option to pass the -X option to the linker. Let's suppose this file is part of the package company/buildinfo : package buildinfo var BuildTime string You can build the program using this package using go build -ldflags=\"-X 'company/buildinfo.BuildTime=$(date)'\" to record the build time in the string. (The use of $(date) assumes you are using a Unix-style shell.) The string variable must exist, it must be a variable, not a constant, and its value must not be initialized by a function call. There is no warning for using the wrong name in the -X option. You can often find the name to use by running go tool nm on the program, but that will fail if the package name has any non-ASCII characters, or a \" or % character.","title":"Including build information in the executable"},{"location":"GccgoCrossCompilation/","text":"Introduction If you want to run your Go programs on a platform that is not supported by the standard Go compiler gc you can build a version of the GCC compiler that targets your desired target platform, since GCC supports many more platforms. This is possible because there is a Go frontend to GCC named gccgo . Details Definitions Build This is the computer where you are building the cross-compiler. Host The computer that will run the cross-compiler once it's built. This is usually the same as Build. Target This is the destination system, where you want the cross-compiled program to run. More definitions and complex cross situations can be found at the Wikipedia article . Go tools and gccgo You will later need to source code to the Go tool, so you might as well uninstall the version you have installed from your package manager to avoid confusion (fully optional tho). Also build & install gccgo targeting host(!, that's right, you need a gcco compiling for not only target but one for host). Installing Go from source Official Go documentation Build the cross-compiler Build First you have to build your cross-compiling version of GCC. This is complex process as it requires several stages with bootstrapping since there are mutual dependency relations between GCC and libc implementations. A very fine tutorial on how to build a GCC cross-toolchain with eglic (works with glibc too) was written by Jim Blandy and posted at eglibc's mailinglist patches Cross-building instructions . In the final stage where the full GCC is built, simply configure script with \u2013enable-languages=c,c++,go (see official Go documentation ). You can use the ewxb_gcc_cross-compiler_builder script as a starting point. Don't expect that script to work out of the box, but rather as a hint to which steps you're likely to take when building your x-toolchain. If you're lucky enough and want a version of GCC that is not bleeding edge (which you might want to have the latest Go features) you can use a cross-compiler builder to ease the configuration e.g. crosstool-NG that lets you configure GCC with a simple TUI menu. Newer versions of crosstool-NG can build the go language by enabling CT_EXPERIMENTAL and CT_CC_SUPPORT_GOLANG . This will automatically add go to --enable-languages . Symlink You should now have a bin directory with files with names like \" <target >-gcc\", \" <target >-gnu-gccgo\" etc. Because the go build tool does not allow you to specify file-names of the compilers to use (only statically supports the strings 'gc' and 'gccgo') it will look in your $PATH envvar for the first file named 'gccgo' and 'gcc'. You will therefore have to add this directory as an overlay by setting it to be the first one in $PATH when you want to use the cross-compiler and not your normal gcc binary on your system. Since the go tool looks for a binary named gccgo you'll have to make some symlinks for the tools you want it to find. $ cd path/to/cross-comp-gcc/bin $ ln -s <arch>-<os>-gnu-gcc gcc $ ln -s <arch>-<os>-gnu-gccgo gccgo $ ln -s <arch>-<os>-gnu-ar ar $ export PATH=\"path/to/crosscomp-gcc/bin:$PATH\" # Do this whenever you want to use the cross-compilers targeting your target instead of the system default targeting host. etc. With $TARGET set to the target architecture and $PREFIX set to the destination path of the built files, you can make the symlinks with: #!/usr/bin/env bash cd $PREFIX/bin for file in $(find . -type f); do tool_name=$(echo $file | sed -e \"s/${TARGET}-\\(.*\\)$/\\1/\") ln -sf \"$file\" \"$tool_name\" done Test When the cross-compiler is build you should test that it works, both for a simple C program and a simple Go program. $ gccgo -Wall -o helloworld helloworld.go $ file helloworld # verify that the architecture of the binary is the desired target and not a binary that can run on your host machine. $ <upload-command-to-target> helloworld $ <ssh/telnet etc. to target and test run> Gotchas If you haven't compiled a shared object of the go library, libgo , for your target you might want to compile your Go programs statically, just like gc does, to include all what is needed to run your program. Do this by adding the -static switch to gccgo. If you're unsure how your produced ELF file is linked, inspect it with readelf -d <elf> or objdump -T <elf> . Build a cross-gccgo aware version of the Go tool Assumptions Assuming that you've followed the instructions on Installing Go from source you should have a checked out version of the go source at $GOROOT . Envvar $GOROOT is set. The envvars GOARCH_ and _ GOARCH_ and _ GOOS represent the target architecture and operating system. Figure these out and set them to these values when you want to cross-compile. Build You can specify the compiler to use when building with the go tool with go build -compiler gccgo <go-package,files> . This is however not enough. If you have set GOARCH_ and _ GOARCH_ and _ GOOS to something that is not supported by gc but with gccgo you have to build a special version of the go tool that understands these extra architectures. If you compile another version of the go tool with the go tool but specify to use gccgo targeting your host, the resulting go tool will be able to compile programs with all the architectures supported by gccgo. $ cd ~/tmp $ hg clone ~/src/go # [0] $ cd go/src/cmd/go $ go build -o xgo -compiler gccgo . # [1] [2] [3] $ cp xgo ~/bin/ # Or any directory that is in your $PATH * [0 ] Clone Go source to directory outside GOROOT. Needed since the cmd/go we're about to compile is handles specially. * [1 ] Here the GOROOT. Needed since the cmd/go we're about to compile is handles specially. * <code>[1</code>] Here the <em>gccgo</em> that targets <strong>host</strong> must be used, and not the cross-compiling gccgo. Make sure to have you <em>] Here the _gccgo</em> that targets <strong>host</strong> must be used, and not the cross-compiling gccgo. Make sure to have you _ PATH_ set correctly for this. * [2 ] Will produce binary named xgo to distinguish from the existing go-binary. Name it to something suitable, e.g. mgo if your target is MIPS. * [3 ] The compilation step (go build) can fail with some compilation errors since gccgo is lagging behind the go project (at least at go mercurial tip 7f2863716967). Fix those errors by commenting out or something more clever and re-compile. Cross-compile Go programs. With your PATH_ set to find _xgo\\_and the cross-compiling version of_gccgo and _ PATH_ set to find _xgo\\_and the cross-compiling version of_gccgo and _ GOARCH set properly you can now cross-compile using the go tool (named xgo). $ export PATH=\"path/to/xgo/:path/to/crosscomp-gccgo/:$PATH\" $ export GOARCH=\"<you-target's-arch>\" $ export GOOS=\"<you-target's-OS>\" $ xgo build -compiler gccgo <go-package/files> TODO Go-programs importing \"C\" does not seems to work using xgo. Currently blocked by Go issue#7398 This Wiki page was inspired by the lessons learned from \"[golang-nuts] Simplification of MIPS cross-compilation?\" @ https://groups.google.com/forum/#!topic/golang-nuts/PgyS2yoO2jM","title":"GccgoCrossCompilation"},{"location":"GccgoCrossCompilation/#introduction","text":"If you want to run your Go programs on a platform that is not supported by the standard Go compiler gc you can build a version of the GCC compiler that targets your desired target platform, since GCC supports many more platforms. This is possible because there is a Go frontend to GCC named gccgo .","title":"Introduction"},{"location":"GccgoCrossCompilation/#details","text":"","title":"Details"},{"location":"GccgoCrossCompilation/#definitions","text":"Build This is the computer where you are building the cross-compiler. Host The computer that will run the cross-compiler once it's built. This is usually the same as Build. Target This is the destination system, where you want the cross-compiled program to run. More definitions and complex cross situations can be found at the Wikipedia article .","title":"Definitions"},{"location":"GccgoCrossCompilation/#go-tools-and-gccgo","text":"You will later need to source code to the Go tool, so you might as well uninstall the version you have installed from your package manager to avoid confusion (fully optional tho). Also build & install gccgo targeting host(!, that's right, you need a gcco compiling for not only target but one for host). Installing Go from source Official Go documentation","title":"Go tools and gccgo"},{"location":"GccgoCrossCompilation/#build-the-cross-compiler","text":"","title":"Build the cross-compiler"},{"location":"GccgoCrossCompilation/#build","text":"First you have to build your cross-compiling version of GCC. This is complex process as it requires several stages with bootstrapping since there are mutual dependency relations between GCC and libc implementations. A very fine tutorial on how to build a GCC cross-toolchain with eglic (works with glibc too) was written by Jim Blandy and posted at eglibc's mailinglist patches Cross-building instructions . In the final stage where the full GCC is built, simply configure script with \u2013enable-languages=c,c++,go (see official Go documentation ). You can use the ewxb_gcc_cross-compiler_builder script as a starting point. Don't expect that script to work out of the box, but rather as a hint to which steps you're likely to take when building your x-toolchain. If you're lucky enough and want a version of GCC that is not bleeding edge (which you might want to have the latest Go features) you can use a cross-compiler builder to ease the configuration e.g. crosstool-NG that lets you configure GCC with a simple TUI menu. Newer versions of crosstool-NG can build the go language by enabling CT_EXPERIMENTAL and CT_CC_SUPPORT_GOLANG . This will automatically add go to --enable-languages .","title":"Build"},{"location":"GccgoCrossCompilation/#symlink","text":"You should now have a bin directory with files with names like \" <target >-gcc\", \" <target >-gnu-gccgo\" etc. Because the go build tool does not allow you to specify file-names of the compilers to use (only statically supports the strings 'gc' and 'gccgo') it will look in your $PATH envvar for the first file named 'gccgo' and 'gcc'. You will therefore have to add this directory as an overlay by setting it to be the first one in $PATH when you want to use the cross-compiler and not your normal gcc binary on your system. Since the go tool looks for a binary named gccgo you'll have to make some symlinks for the tools you want it to find. $ cd path/to/cross-comp-gcc/bin $ ln -s <arch>-<os>-gnu-gcc gcc $ ln -s <arch>-<os>-gnu-gccgo gccgo $ ln -s <arch>-<os>-gnu-ar ar $ export PATH=\"path/to/crosscomp-gcc/bin:$PATH\" # Do this whenever you want to use the cross-compilers targeting your target instead of the system default targeting host. etc. With $TARGET set to the target architecture and $PREFIX set to the destination path of the built files, you can make the symlinks with: #!/usr/bin/env bash cd $PREFIX/bin for file in $(find . -type f); do tool_name=$(echo $file | sed -e \"s/${TARGET}-\\(.*\\)$/\\1/\") ln -sf \"$file\" \"$tool_name\" done","title":"Symlink"},{"location":"GccgoCrossCompilation/#test","text":"When the cross-compiler is build you should test that it works, both for a simple C program and a simple Go program. $ gccgo -Wall -o helloworld helloworld.go $ file helloworld # verify that the architecture of the binary is the desired target and not a binary that can run on your host machine. $ <upload-command-to-target> helloworld $ <ssh/telnet etc. to target and test run>","title":"Test"},{"location":"GccgoCrossCompilation/#gotchas","text":"If you haven't compiled a shared object of the go library, libgo , for your target you might want to compile your Go programs statically, just like gc does, to include all what is needed to run your program. Do this by adding the -static switch to gccgo. If you're unsure how your produced ELF file is linked, inspect it with readelf -d <elf> or objdump -T <elf> .","title":"Gotchas"},{"location":"GccgoCrossCompilation/#build-a-cross-gccgo-aware-version-of-the-go-tool","text":"","title":"Build a cross-gccgo aware version of the Go tool"},{"location":"GccgoCrossCompilation/#assumptions","text":"Assuming that you've followed the instructions on Installing Go from source you should have a checked out version of the go source at $GOROOT . Envvar $GOROOT is set. The envvars GOARCH_ and _ GOARCH_ and _ GOOS represent the target architecture and operating system. Figure these out and set them to these values when you want to cross-compile.","title":"Assumptions"},{"location":"GccgoCrossCompilation/#build_1","text":"You can specify the compiler to use when building with the go tool with go build -compiler gccgo <go-package,files> . This is however not enough. If you have set GOARCH_ and _ GOARCH_ and _ GOOS to something that is not supported by gc but with gccgo you have to build a special version of the go tool that understands these extra architectures. If you compile another version of the go tool with the go tool but specify to use gccgo targeting your host, the resulting go tool will be able to compile programs with all the architectures supported by gccgo. $ cd ~/tmp $ hg clone ~/src/go # [0] $ cd go/src/cmd/go $ go build -o xgo -compiler gccgo . # [1] [2] [3] $ cp xgo ~/bin/ # Or any directory that is in your $PATH * [0 ] Clone Go source to directory outside GOROOT. Needed since the cmd/go we're about to compile is handles specially. * [1 ] Here the GOROOT. Needed since the cmd/go we're about to compile is handles specially. * <code>[1</code>] Here the <em>gccgo</em> that targets <strong>host</strong> must be used, and not the cross-compiling gccgo. Make sure to have you <em>] Here the _gccgo</em> that targets <strong>host</strong> must be used, and not the cross-compiling gccgo. Make sure to have you _ PATH_ set correctly for this. * [2 ] Will produce binary named xgo to distinguish from the existing go-binary. Name it to something suitable, e.g. mgo if your target is MIPS. * [3 ] The compilation step (go build) can fail with some compilation errors since gccgo is lagging behind the go project (at least at go mercurial tip 7f2863716967). Fix those errors by commenting out or something more clever and re-compile.","title":"Build"},{"location":"GccgoCrossCompilation/#cross-compile-go-programs","text":"With your PATH_ set to find _xgo\\_and the cross-compiling version of_gccgo and _ PATH_ set to find _xgo\\_and the cross-compiling version of_gccgo and _ GOARCH set properly you can now cross-compile using the go tool (named xgo). $ export PATH=\"path/to/xgo/:path/to/crosscomp-gccgo/:$PATH\" $ export GOARCH=\"<you-target's-arch>\" $ export GOOS=\"<you-target's-OS>\" $ xgo build -compiler gccgo <go-package/files>","title":"Cross-compile Go programs."},{"location":"GccgoCrossCompilation/#todo","text":"Go-programs importing \"C\" does not seems to work using xgo. Currently blocked by Go issue#7398 This Wiki page was inspired by the lessons learned from \"[golang-nuts] Simplification of MIPS cross-compilation?\" @ https://groups.google.com/forum/#!topic/golang-nuts/PgyS2yoO2jM","title":"TODO"},{"location":"GerritAccess/","text":"Gerrit Access There are two types of Gerrit access described here, with different powers & responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the Gerrit code review process for some time before requesting access. (For Github access, see https://golang.org/wiki/GithubAccess ) Approver Access (\"approvers\") Approver access gives you power to +2 CLs and submit them. Rules for voting +2 on changes: only +2 things that you're very confident in, and generally only in a directory (or package) that you normally \"own\", unless it's trivial and obviously correct. Rules for submitting changes: if a change touches an area that you own, you can submit any changes after a +2. But elsewhere only submit your own changes after receiving a +2 from the owner of that area. Approver access also gives you power to Trust+1 CLs. Every code change requires two approvers, with at least one +2. The second approver can Trust+1 (a +2 from a second approver also suffices). Rules for voting Trust+1 on changes: only Trust+1 a change if you are confident that the change does not introduce any sort of security vulnerability or other clearly inappropriate code change. As long as you are sure about that, it's OK to Trust+1 a change even if you don't fully understand all the details of the change. If the author of the change is an approver, they may (and are expected to) Trust+1 their own change, but someone else must +2 the change before it can be submitted. To request this access, reference https://go-review.googlesource.com/#/admin/groups/1005,members in your bug. See below. Trybot Access (\"may-start-trybots\") Trybot access lets you kick off a trybot run, testing a CL in Gerrit against the most common builders. The Trybots run in a somewhat-secure and somewhat-isolated environment, but they're not perfectly security hardened. You must skim the CL for anything malicious before starting Trybots. To request this access, reference https://go-review.googlesource.com/#/admin/groups/1030,members in your bug. See below. Requesting Access To get request either of the access types above, file a bug ( https://github.com/golang/go/issues/new?title=access:+&body=See+https://golang.org/wiki/GerritAccess ) and list and state which access you want (its name and group URL), and state your Gerrit email address. Once you have access Go help garden! See https://golang.org/wiki/Gardening .","title":"GerritAccess"},{"location":"GerritAccess/#gerrit-access","text":"There are two types of Gerrit access described here, with different powers & responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the Gerrit code review process for some time before requesting access. (For Github access, see https://golang.org/wiki/GithubAccess )","title":"Gerrit Access"},{"location":"GerritAccess/#approver-access-approvers","text":"Approver access gives you power to +2 CLs and submit them. Rules for voting +2 on changes: only +2 things that you're very confident in, and generally only in a directory (or package) that you normally \"own\", unless it's trivial and obviously correct. Rules for submitting changes: if a change touches an area that you own, you can submit any changes after a +2. But elsewhere only submit your own changes after receiving a +2 from the owner of that area. Approver access also gives you power to Trust+1 CLs. Every code change requires two approvers, with at least one +2. The second approver can Trust+1 (a +2 from a second approver also suffices). Rules for voting Trust+1 on changes: only Trust+1 a change if you are confident that the change does not introduce any sort of security vulnerability or other clearly inappropriate code change. As long as you are sure about that, it's OK to Trust+1 a change even if you don't fully understand all the details of the change. If the author of the change is an approver, they may (and are expected to) Trust+1 their own change, but someone else must +2 the change before it can be submitted. To request this access, reference https://go-review.googlesource.com/#/admin/groups/1005,members in your bug. See below.","title":"Approver Access (\"approvers\")"},{"location":"GerritAccess/#trybot-access-may-start-trybots","text":"Trybot access lets you kick off a trybot run, testing a CL in Gerrit against the most common builders. The Trybots run in a somewhat-secure and somewhat-isolated environment, but they're not perfectly security hardened. You must skim the CL for anything malicious before starting Trybots. To request this access, reference https://go-review.googlesource.com/#/admin/groups/1030,members in your bug. See below.","title":"Trybot Access (\"may-start-trybots\")"},{"location":"GerritAccess/#requesting-access","text":"To get request either of the access types above, file a bug ( https://github.com/golang/go/issues/new?title=access:+&body=See+https://golang.org/wiki/GerritAccess ) and list and state which access you want (its name and group URL), and state your Gerrit email address.","title":"Requesting Access"},{"location":"GerritAccess/#once-you-have-access","text":"Go help garden! See https://golang.org/wiki/Gardening .","title":"Once you have access"},{"location":"GerritBot/","text":"GerritBot is a tool used for importing GitHub Pull Requests (PRs) into Gerrit for code review. It was created because the Go team does all its reviews in Gerrit, but we'd like to allow a more common workflow for contributing code via GitHub PRs. Table of Contents Workflow Feedback and Bug Reports Frequently Asked Questions I'd like to add a feature/fix a bug Workflow A user can upload a PR against any of our GitHub repos just as they would with any other GitHub project that accepts PRs The PR changes will then be imported by GerritBot and a message will be posted to the GitHub PR Issue containing a link to the Gerrit review All comments are handled within Gerrit. Any comments on the GitHub PR will be ignored The PR author can continue to upload commits to the branch used by the PR in order to address feedback from Gerrit Once the code is ready to be merged, a maintainer will submit the change on Gerrit and GerritBot will close the issue Similarly, if a change is closed or abandoned on Gerrit, the corresponding PR will be closed Feedback and Bug Reports Please file an issue and use the x/build/cmd/gerritbot: prefix in the title. Frequently Asked Questions How does GerritBot determine the final commit message? It uses the title and description of the PR to construct the commit message for the Gerrit Change. You can edit this using the GitHub user interface. Why is GerritBot the owner of my change? This is due to an open bug with the way Gerrit handles acting as another user. Once that is fixed, the original author will also be the owner of the change. I heard Gerrit requires one commit per change. Can I upload multiple commits to my PR? You can upload as many commits as you like. GerritBot will handle squashing your commits into one change that Gerrit can handle. I need a Google account to sign up for Gerrit? Why can't I sign in using my GitHub account? This is a limitation of the infrastructure that runs our Gerrit instances and is out of our control, plus you already need a Google account to sign our CLA, a requirement for us to accept your contribution in the first place. I left a reply to a comment in Gerrit but no one but me can see it Replies to comments on code in Gerrit are first saved as drafts and need to be published via the \u201cReply\u201d button. This is to prevent multiple emails per review \u201csession\u201d and is similar to the pending review workflow in GitHub. If you see a number next to the \u201cReply\u201d text in the button, this means you have pending drafts to publish. I'd like to add a feature/fix a bug If the feature/bug is non-trivial, please file an issue first The code is located at x/build/cmd/gerritbot ( GitHub , Gerrit )","title":"GerritBot"},{"location":"GerritBot/#table-of-contents","text":"Workflow Feedback and Bug Reports Frequently Asked Questions I'd like to add a feature/fix a bug","title":"Table of Contents"},{"location":"GerritBot/#workflow","text":"A user can upload a PR against any of our GitHub repos just as they would with any other GitHub project that accepts PRs The PR changes will then be imported by GerritBot and a message will be posted to the GitHub PR Issue containing a link to the Gerrit review All comments are handled within Gerrit. Any comments on the GitHub PR will be ignored The PR author can continue to upload commits to the branch used by the PR in order to address feedback from Gerrit Once the code is ready to be merged, a maintainer will submit the change on Gerrit and GerritBot will close the issue Similarly, if a change is closed or abandoned on Gerrit, the corresponding PR will be closed","title":"Workflow"},{"location":"GerritBot/#feedback-and-bug-reports","text":"Please file an issue and use the x/build/cmd/gerritbot: prefix in the title.","title":"Feedback and Bug Reports"},{"location":"GerritBot/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"GerritBot/#how-does-gerritbot-determine-the-final-commit-message","text":"It uses the title and description of the PR to construct the commit message for the Gerrit Change. You can edit this using the GitHub user interface.","title":"How does GerritBot determine the final commit message?"},{"location":"GerritBot/#why-is-gerritbot-the-owner-of-my-change","text":"This is due to an open bug with the way Gerrit handles acting as another user. Once that is fixed, the original author will also be the owner of the change.","title":"Why is GerritBot the owner of my change?"},{"location":"GerritBot/#i-heard-gerrit-requires-one-commit-per-change-can-i-upload-multiple-commits-to-my-pr","text":"You can upload as many commits as you like. GerritBot will handle squashing your commits into one change that Gerrit can handle.","title":"I heard Gerrit requires one commit per change. Can I upload multiple commits to my PR?"},{"location":"GerritBot/#i-need-a-google-account-to-sign-up-for-gerrit-why-cant-i-sign-in-using-my-github-account","text":"This is a limitation of the infrastructure that runs our Gerrit instances and is out of our control, plus you already need a Google account to sign our CLA, a requirement for us to accept your contribution in the first place.","title":"I need a Google account to sign up for Gerrit? Why can't I sign in using my GitHub account?"},{"location":"GerritBot/#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it","text":"Replies to comments on code in Gerrit are first saved as drafts and need to be published via the \u201cReply\u201d button. This is to prevent multiple emails per review \u201csession\u201d and is similar to the pending review workflow in GitHub. If you see a number next to the \u201cReply\u201d text in the button, this means you have pending drafts to publish.","title":"I left a reply to a comment in Gerrit but no one but me can see it"},{"location":"GerritBot/#id-like-to-add-a-featurefix-a-bug","text":"If the feature/bug is non-trivial, please file an issue first The code is located at x/build/cmd/gerritbot ( GitHub , Gerrit )","title":"I'd like to add a feature/fix a bug"},{"location":"GitHubCodeLayout/","text":"Introduction A common use case is to create a reusable library and an application that consumes it, and host both on GitHub. We will illustrate this with a trivial application called \" uselessd \" that consumes a likewise trivial library called \" useless \". Code Layout The app and both libraries live on GitHub, each in its own repository. $GOPATH is the root of the project - each of your GitHub repos will be checked out several folders below $GOPATH . Your code layout would look like this: $GOPATH/ src/ github.com/ jmcvetta/ useless/ .git/ useless.go useless_test.go README.md uselessd/ .git/ uselessd.go uselessd_test.go README.md Each folder under src/github.com/jmcvetta/ is the root of a separate git checkout. $GOPATH Your $GOPATH variable will point to the root of your Go workspace, as described in How to Write Go Code . Note for Eclipse Users Both Go and Eclipse use the term \"workspace\", but they use it to mean something different. What Go calls a \"workspace\" is what Eclipse calls a \"project\". Whenever this document uses either term, it refers to a Go workspace. Setup the Workspace Let's assume we are starting from scratch. Initialize the two new repositories on GitHub, using the \"Initialize this repository with a README\" option so your repos can be cloned immediately. Then setup the project like this: cd ~/workspace # Standard location for Eclipse workspace mkdir mygo # Create your Go workspace export GOPATH = ~/workspace/mygo # GOPATH = Go workspace cd $GOPATH mkdir -p src/github.com/jmcvetta cd src/github.com/jmcvetta git clone git@github.com:jmcvetta/useless.git git clone git@github.com:jmcvetta/uselessd.git Libraries Conventionally, the name of the repository is the same as the name of the package it contains. Our useless repo contains useless.go which defines package useless : package useless func Foobar () string { return \"Foobar!\" } Applications An application - Go code that will be compiled into an executable command - always defines package main with a main() function. So uselessd.go looks like this: package main import ( \"net/http\" \"golang.org/x/net/websocket\" \"github.com/jmcvetta/useless\" ) func main () { http . Handle ( \"/useless\" , websocket . Handler ( func ( ws * websocket . Conn ) { ws . Write ([] byte ( useless . Foobar ())) })) http . ListenAndServe ( \":3000\" , nil ) } Dependencies Your project will probably depend on some existing packages. The application above depends upon golang.org/x/net/websocket . You can install all dependencies by running \" go get -v ./... \" from the root of your workspace. The \" go get \" command is similar to \" go install \" in that it will attempt to build and install all packages in the workspace (technically, all packages matched by \" ./... \"), except that it will also examine their dependencies and download (and install) any that are missing first. See the output of \" go help packages \" for a full explanation of the \" ... \" syntax. All dependencies will be installed alongside your code under \" $GOPATH/src \". All GitHub repositories checked out by \" go get \" will use the read-only https:// repository by default. To push changes back to GitHub from one of these repositories, change the \" origin/master \" ref in .git/config to match the SSH repository from GitHub. Build During development, you can build the useless library by itself with the command \" go build ...useless \". You could also give the full path to the package name, \" go build github.com/jmcvetta/useless \". To compile uselessd.go and its dependencies into an executable, use the command \" go build ...uselessd \". Example Code FWIW all the repo addresses on this page are real, and the uselessd application should compile if you follow the directions above.","title":"GitHubCodeLayout"},{"location":"GitHubCodeLayout/#introduction","text":"A common use case is to create a reusable library and an application that consumes it, and host both on GitHub. We will illustrate this with a trivial application called \" uselessd \" that consumes a likewise trivial library called \" useless \".","title":"Introduction"},{"location":"GitHubCodeLayout/#code-layout","text":"The app and both libraries live on GitHub, each in its own repository. $GOPATH is the root of the project - each of your GitHub repos will be checked out several folders below $GOPATH . Your code layout would look like this: $GOPATH/ src/ github.com/ jmcvetta/ useless/ .git/ useless.go useless_test.go README.md uselessd/ .git/ uselessd.go uselessd_test.go README.md Each folder under src/github.com/jmcvetta/ is the root of a separate git checkout.","title":"Code Layout"},{"location":"GitHubCodeLayout/#gopath","text":"Your $GOPATH variable will point to the root of your Go workspace, as described in How to Write Go Code .","title":"$GOPATH"},{"location":"GitHubCodeLayout/#note-for-eclipse-users","text":"Both Go and Eclipse use the term \"workspace\", but they use it to mean something different. What Go calls a \"workspace\" is what Eclipse calls a \"project\". Whenever this document uses either term, it refers to a Go workspace.","title":"Note for Eclipse Users"},{"location":"GitHubCodeLayout/#setup-the-workspace","text":"Let's assume we are starting from scratch. Initialize the two new repositories on GitHub, using the \"Initialize this repository with a README\" option so your repos can be cloned immediately. Then setup the project like this: cd ~/workspace # Standard location for Eclipse workspace mkdir mygo # Create your Go workspace export GOPATH = ~/workspace/mygo # GOPATH = Go workspace cd $GOPATH mkdir -p src/github.com/jmcvetta cd src/github.com/jmcvetta git clone git@github.com:jmcvetta/useless.git git clone git@github.com:jmcvetta/uselessd.git","title":"Setup the Workspace"},{"location":"GitHubCodeLayout/#libraries","text":"Conventionally, the name of the repository is the same as the name of the package it contains. Our useless repo contains useless.go which defines package useless : package useless func Foobar () string { return \"Foobar!\" }","title":"Libraries"},{"location":"GitHubCodeLayout/#applications","text":"An application - Go code that will be compiled into an executable command - always defines package main with a main() function. So uselessd.go looks like this: package main import ( \"net/http\" \"golang.org/x/net/websocket\" \"github.com/jmcvetta/useless\" ) func main () { http . Handle ( \"/useless\" , websocket . Handler ( func ( ws * websocket . Conn ) { ws . Write ([] byte ( useless . Foobar ())) })) http . ListenAndServe ( \":3000\" , nil ) }","title":"Applications"},{"location":"GitHubCodeLayout/#dependencies","text":"Your project will probably depend on some existing packages. The application above depends upon golang.org/x/net/websocket . You can install all dependencies by running \" go get -v ./... \" from the root of your workspace. The \" go get \" command is similar to \" go install \" in that it will attempt to build and install all packages in the workspace (technically, all packages matched by \" ./... \"), except that it will also examine their dependencies and download (and install) any that are missing first. See the output of \" go help packages \" for a full explanation of the \" ... \" syntax. All dependencies will be installed alongside your code under \" $GOPATH/src \". All GitHub repositories checked out by \" go get \" will use the read-only https:// repository by default. To push changes back to GitHub from one of these repositories, change the \" origin/master \" ref in .git/config to match the SSH repository from GitHub.","title":"Dependencies"},{"location":"GitHubCodeLayout/#build","text":"During development, you can build the useless library by itself with the command \" go build ...useless \". You could also give the full path to the package name, \" go build github.com/jmcvetta/useless \". To compile uselessd.go and its dependencies into an executable, use the command \" go build ...uselessd \".","title":"Build"},{"location":"GitHubCodeLayout/#example-code","text":"FWIW all the repo addresses on this page are real, and the uselessd application should compile if you follow the directions above.","title":"Example Code"},{"location":"GithubAccess/","text":"Github Access There are two types of Github access described here, with different powers & responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the Github & Gerrit review process for some time before requesting access. See https://golang.org/wiki/Gardening . (For Gerrit access, see https://golang.org/wiki/GerritAccess ) Assignees The \"go-assignees\" group is a read-only group granting no special access, other than it allows the users in the group to be assigned issues. In general, Go doesn't use the \"Assigned to\" field of bugs much. Instead, we just leave a comment saying we'll work on it. But if you want this access, reference https://github.com/orgs/golang/teams/go-assignees and your Github username in your email requesting access. Editors The poorly named \"go-approvers\" group is the set of people who can edit metadata on issues. To request this type of access, reference https://github.com/orgs/golang/teams/go-approvers and your Github username in your email requesting access. Please do not edit any field you're not confident about. Feel free to ask for second opinions. Requesting Access To get request either of the access types above, file a bug ( https://github.com/golang/go/issues/new?title=access:+&body=See+https://golang.org/wiki/GithubAccess ) and list and state which access you want (its name and group URL). Once you have access Go help garden! See https://golang.org/wiki/Gardening .","title":"GithubAccess"},{"location":"GithubAccess/#github-access","text":"There are two types of Github access described here, with different powers & responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the Github & Gerrit review process for some time before requesting access. See https://golang.org/wiki/Gardening . (For Gerrit access, see https://golang.org/wiki/GerritAccess )","title":"Github Access"},{"location":"GithubAccess/#assignees","text":"The \"go-assignees\" group is a read-only group granting no special access, other than it allows the users in the group to be assigned issues. In general, Go doesn't use the \"Assigned to\" field of bugs much. Instead, we just leave a comment saying we'll work on it. But if you want this access, reference https://github.com/orgs/golang/teams/go-assignees and your Github username in your email requesting access.","title":"Assignees"},{"location":"GithubAccess/#editors","text":"The poorly named \"go-approvers\" group is the set of people who can edit metadata on issues. To request this type of access, reference https://github.com/orgs/golang/teams/go-approvers and your Github username in your email requesting access. Please do not edit any field you're not confident about. Feel free to ask for second opinions.","title":"Editors"},{"location":"GithubAccess/#requesting-access","text":"To get request either of the access types above, file a bug ( https://github.com/golang/go/issues/new?title=access:+&body=See+https://golang.org/wiki/GithubAccess ) and list and state which access you want (its name and group URL).","title":"Requesting Access"},{"location":"GithubAccess/#once-you-have-access","text":"Go help garden! See https://golang.org/wiki/Gardening .","title":"Once you have access"},{"location":"Go-1.10-Release-Party/","text":"What's happening? To celebrate the release of Go 1.10 we're to organising a world wide release party during the month of February 2018 \ud83c\udf89 So what is the release date? Go 1.10 was released on February 16. Sounds awesome, how can you get involved? If you host a Go user group or meetup, schedule a meetup during February, and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Spread the word using hashtag #GoReleaseParty Don't forget to add your meetup's details right here. Who's involved? Here is a list of the groups who are participating. - Madrid, Spain: Feb 8 7:30 pm at source{d} . View the event - Copenhagen, Denmark: Feb 15 7:00 pm at Maersk. View the meetup - Minsk, Belarus: Feb 15 7:00 pm at SPACE. View the event - London, UK: Feb 15 6:30 pm at Shazam. View the meetup - Paris, France: Feb 15 7:15 pm at Mobiskill. View the meetup - Orlando, FL, United States: Feb 19 7:00 PM at Familab. View the meetup - Shizuoka, Japan: Feb 20 6:30 pm at Ageya Take. View the event - Jakarta, Indonesia: Feb 20 7:00pm at Hacktiv8. View the event - Tokyo, Japan: Feb 20 7:00 pm at Google Tokyo. View the event - Okayama, Japan: Feb 20 7:00 pm at Kurashiki Coffee Okayama Aoe. View the event - Reston, VA, USA: Feb 21 6:45 pm at Comcast. View the meetup - San Francisco, CA: Feb 21 6:00 pm at Cloudflare View the event - Phoenix, AZ, United States: Feb 22 6:30 PM at Galvanize. View the meetup - Warsaw, Poland: Feb 22 7:00 pm at Kawiarnia Crux View the meetup - Santiago, Chile: Feb 22 7:00 pm at Mercado Libre Chile. View the meetup - Aachen, Germany: Feb 22 7:00pm at hosting.de. View the meetup - Waterloo, Canada: Feb 22 7:00pm at the Lion Brewery in the Heuther Hotel. View the meetup - Lodz, Poland: Feb 22 6:00 pm at Co/Walk HUB View the meetup - \u0130zmir, Turkey: Feb 23 7:30 pm at Drunken Duck View the event - Milan, Italy: Feb 23 8:00 pm at Venini42 View the event - Bengaluru, India: Feb 24 10:00 am at OpenEBS Office Space. View the meetup - Moscow, Russia: Feb 24 11:30 am at Badoo. View the meetup - Yoshkar-Ola, Russia: Feb 24 2:00 pm at iSpring. View the meetup - Zagreb, Croatia: Feb 26 6:00 pm at MaMa. View the meetup - Edmonton, Canada: Feb 26 6:30 pm at Startup Edmonton View the meetup - Berlin, Germany: Feb 26 7:00 pm at n26. View the meetup - Stockholm, Sweden: Feb 27 17:30 at Betalo. View the meetup - Baltimore, MD: Feb 27 06:30pm at ZeroFOX. View the meetup - Joinville, Brazil: Feb 27 7:00 pm at ContaAzul. View the meetup - Brisbane, Australia: Feb 28 6:00 pm at Jumbo Interactive. View the meetup - Frankfurt, Germany: Feb 28 6:30 pm at SANID GmbH, View the meetup - Chicago, IL: Feb 28 6:00pm at Enova. View the meetup & View the meetup - Fort Lauderdale, FL: Mar 1 6:30 pm at Microsoft, View the meetup - Zurich, Switzerland: Mar 1 7:00 pm at Job Cloud. View the meetup - Florian\u00f3polis, Brazil: Mar 17 3:00 pm at Involves. View the meetup - Portland, Oregon: April 24 th 6:00 pm at New Relic. View the meetup If your group is not listed here yet, edit the page and add yourself in a chronological order. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness. Stay in touch Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help. . Slack Channel We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link . Mailing list We have set up a mailing list for meetup organisers to ask questions. What happens in a release party? As with the previous Go 1.6 and Go 1.8 release parties, this is a great opportunity to spread the word about the improvements landing 1.10, and the plans for what is coming next! Resources You can use the slide deck that the Go London User Group in London will use. It's available here ( source ) Please send PR's with corrections/additions Here's a link to the draft Go 1.10 release notes . Here's a link to the talk by Francesc Campoy: The State of Go (February 2018). What'll happen if Go 1.10 isn't out during February? If all else fails\u2026 at least we'll have each other. Who's organising this? Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe. No, seriously, who's organising this? Here are the organisers so far: - Natalie Pistunovich - @NataliePis - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82 - Florin P\u0103\u021ban - @dlsniper Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"Go 1.10 Release Party"},{"location":"Go-1.10-Release-Party/#whats-happening","text":"To celebrate the release of Go 1.10 we're to organising a world wide release party during the month of February 2018 \ud83c\udf89","title":"What's happening?"},{"location":"Go-1.10-Release-Party/#so-what-is-the-release-date","text":"Go 1.10 was released on February 16.","title":"So what is the release date?"},{"location":"Go-1.10-Release-Party/#sounds-awesome-how-can-you-get-involved","text":"If you host a Go user group or meetup, schedule a meetup during February, and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Spread the word using hashtag #GoReleaseParty Don't forget to add your meetup's details right here.","title":"Sounds awesome, how can you get involved?"},{"location":"Go-1.10-Release-Party/#whos-involved","text":"Here is a list of the groups who are participating. - Madrid, Spain: Feb 8 7:30 pm at source{d} . View the event - Copenhagen, Denmark: Feb 15 7:00 pm at Maersk. View the meetup - Minsk, Belarus: Feb 15 7:00 pm at SPACE. View the event - London, UK: Feb 15 6:30 pm at Shazam. View the meetup - Paris, France: Feb 15 7:15 pm at Mobiskill. View the meetup - Orlando, FL, United States: Feb 19 7:00 PM at Familab. View the meetup - Shizuoka, Japan: Feb 20 6:30 pm at Ageya Take. View the event - Jakarta, Indonesia: Feb 20 7:00pm at Hacktiv8. View the event - Tokyo, Japan: Feb 20 7:00 pm at Google Tokyo. View the event - Okayama, Japan: Feb 20 7:00 pm at Kurashiki Coffee Okayama Aoe. View the event - Reston, VA, USA: Feb 21 6:45 pm at Comcast. View the meetup - San Francisco, CA: Feb 21 6:00 pm at Cloudflare View the event - Phoenix, AZ, United States: Feb 22 6:30 PM at Galvanize. View the meetup - Warsaw, Poland: Feb 22 7:00 pm at Kawiarnia Crux View the meetup - Santiago, Chile: Feb 22 7:00 pm at Mercado Libre Chile. View the meetup - Aachen, Germany: Feb 22 7:00pm at hosting.de. View the meetup - Waterloo, Canada: Feb 22 7:00pm at the Lion Brewery in the Heuther Hotel. View the meetup - Lodz, Poland: Feb 22 6:00 pm at Co/Walk HUB View the meetup - \u0130zmir, Turkey: Feb 23 7:30 pm at Drunken Duck View the event - Milan, Italy: Feb 23 8:00 pm at Venini42 View the event - Bengaluru, India: Feb 24 10:00 am at OpenEBS Office Space. View the meetup - Moscow, Russia: Feb 24 11:30 am at Badoo. View the meetup - Yoshkar-Ola, Russia: Feb 24 2:00 pm at iSpring. View the meetup - Zagreb, Croatia: Feb 26 6:00 pm at MaMa. View the meetup - Edmonton, Canada: Feb 26 6:30 pm at Startup Edmonton View the meetup - Berlin, Germany: Feb 26 7:00 pm at n26. View the meetup - Stockholm, Sweden: Feb 27 17:30 at Betalo. View the meetup - Baltimore, MD: Feb 27 06:30pm at ZeroFOX. View the meetup - Joinville, Brazil: Feb 27 7:00 pm at ContaAzul. View the meetup - Brisbane, Australia: Feb 28 6:00 pm at Jumbo Interactive. View the meetup - Frankfurt, Germany: Feb 28 6:30 pm at SANID GmbH, View the meetup - Chicago, IL: Feb 28 6:00pm at Enova. View the meetup & View the meetup - Fort Lauderdale, FL: Mar 1 6:30 pm at Microsoft, View the meetup - Zurich, Switzerland: Mar 1 7:00 pm at Job Cloud. View the meetup - Florian\u00f3polis, Brazil: Mar 17 3:00 pm at Involves. View the meetup - Portland, Oregon: April 24 th 6:00 pm at New Relic. View the meetup If your group is not listed here yet, edit the page and add yourself in a chronological order. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.","title":"Who's involved?"},{"location":"Go-1.10-Release-Party/#stay-in-touch","text":"Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help. .","title":"Stay in touch"},{"location":"Go-1.10-Release-Party/#slack-channel","text":"We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link .","title":"Slack Channel"},{"location":"Go-1.10-Release-Party/#mailing-list","text":"We have set up a mailing list for meetup organisers to ask questions.","title":"Mailing list"},{"location":"Go-1.10-Release-Party/#what-happens-in-a-release-party","text":"As with the previous Go 1.6 and Go 1.8 release parties, this is a great opportunity to spread the word about the improvements landing 1.10, and the plans for what is coming next!","title":"What happens in a release party?"},{"location":"Go-1.10-Release-Party/#resources","text":"You can use the slide deck that the Go London User Group in London will use. It's available here ( source ) Please send PR's with corrections/additions Here's a link to the draft Go 1.10 release notes . Here's a link to the talk by Francesc Campoy: The State of Go (February 2018).","title":"Resources"},{"location":"Go-1.10-Release-Party/#whatll-happen-if-go-110-isnt-out-during-february","text":"If all else fails\u2026 at least we'll have each other.","title":"What'll happen if Go 1.10 isn't out during February?"},{"location":"Go-1.10-Release-Party/#whos-organising-this","text":"Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.","title":"Who's organising this?"},{"location":"Go-1.10-Release-Party/#no-seriously-whos-organising-this","text":"Here are the organisers so far: - Natalie Pistunovich - @NataliePis - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82 - Florin P\u0103\u021ban - @dlsniper Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"No, seriously, who's organising this?"},{"location":"Go-1.6-release-party/","text":"Party recap on tweets Missed or missing the party? Here is a flashback for you: https://storify.com/gobridge/go-16v-world-release-party What's happening? To celebrate the release of Go 1.6 we're organising a world wide release party on February the 17 th , 2016. Hang on, did you say Go 1.6 ships on the 17 th of February? Nope! Go 1.6 ships when it's ready. With that said, things are looking pretty good for a mid Feb release. Using the power of software estimation, a date was plucked from the aether that happened to coincide with several meetups that were already in the works. Sounds awesome, how can you get involved? If you host a Go user group or meetup, schedule a meetup on the 17 th of Feb and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Don't forget to add your details right here. Who's involved? Here is a list of the groups who are participating. - Sydney Go users' group - Go-Miami - San Diego Gophers - PDX Go - GopherConIndia - Belarus Golang User Group - Ukrainian Golang User Groups - Lviv Golang Group - Edmonton Go (Feb 22) - Software Craftsmanship Toulouse - Golang Paris - Polish GLUG Meetup - Google Developer Group Gigcity - Golang Montr\u00e9al (Feb 22 nd ) - Golang Vietnam (Feb 23) - Gophers Katowice - GoSF - Boston Golang - Go-Tampa - Atlanta - GoAKL - Golang Barcelona - Golang Singapore (February 18) - Go Maryland (February 18) - Orange County Gophers - Central Jersey Tech Meetup - Kansas City Golang Meetup - Mexico City Gophers - Women Who Go London - Go Israel - Go User Group Hamburg - Golang Brasil - S\u00e3o Paulo (Saturday, February 20) - Z\u00fcrich Gophers - Switzerland - Golang Reston - GoMAD - GoCon - GDG Golang Berlin (Feb 17) - ATX Golang (Austin) - GoCon Tokyo - Golang Italian Hackers, at Develer - Go London User Group - Seattle Go Programmers - Vilnius Golang - Go DC - GDG Korea Golang (Feb 22) - [Golang ZG, Zagreb Croatia] ( http://www.meetup.com/Golang-ZG/events/228863217/ ) - [Gophers-ir Iran/Tehran] ( https://evand.ir/events/gophers-16 ) (February 18) - Golang Brazil - Porto Alegre (February 17) - [Seattle Go Programmers] ( http://www.meetup.com/golang/events/228465356/ ) (Wed February 17) - [Go Cape Town] ( http://www.meetup.com/gocapetown/events/228874257/ ) - [Golang Hong Kong] ( http://www.meetup.com/GolangHK/events/228551636/ ) - [Golang Lima] ( http://www.meetup.com/es-ES/Golang-Peru/events/228643682/ ) - [Gophers Barranquilla] ( http://www.meetup.com/es-ES/Gophers-Barranquilla/events/228899893/ ) If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness. Stay in touch Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, discuss it online, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help. Slack Channel We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link . Mailing list We have set up a google groups mailing list for meetup organisers to ask questions. At the moment the list is focused on the event on the 17 th , hopefully if that goes well the mailing list will become a useful resource in the future. What happens in a release party? Go 1.6 is the 7 th release of the language which has been open source since November 10 th , 2009 \u2013 that's 6.5 years since the project was open sourced and nearly 4 years since the 1.0 release. A lot has changed in the language since 1.0, so this is a great opportunity to discuss the improvements landing 1.6. Resources Francesc Campoy presented his State of Go talk at FOSDEM, which includes details of the upcoming Go 1.6 release. His slide are available online . Here a Go 1.6 presentation slide deck from the Go Sydney users' group. Feel free to use this for your meetup. talks.godoc.org/github.com/davecheney/gosyd/go1.6.slide Source : https://github.com/davecheney/gosyd/blob/master/go1.6.slide Please send PR's with corrections/additions Go 1.6 new and noteworthy Please help by expanding this section so meetup organisers can share these details with their groups. Go 1.6 release notes (draft) HTTP/2. Go 1.6's net/http package supports HTTP/2 for both the client and server out of the box. Here is a video of @bradfitz giving an overview of Go 1.6's HTTP/2 support . - Garbage Collector improvements. Go 1.6 focused heavily on improvements to the low latency collector shipped in Go 1.5. Rick Hudson gave a presentation at GopherCon 2015 describing the low latency collector delivered in Go 1.5, and gave hints to the improvements being worked on for 1.6. Rick recently recorded an interview with InfoQ which focused on 1.6 in more detail. - GOVENDOREXPERIMENT becomes the default. Go 1.5 added experimental support for a mechanism of including the source of your package's dependencies in the package itself, colloquially known as vendoring . This feature was opt-in during Go 1.5. Go 1.6 makes the vendor support the default, and it's likely that packages will start to use it soon. text/template changes. A long requested ability to trim whitespace in templates has arrived. This template \"{{23 -}} < {{- 45}}\" will produce this output \"23<45\" cgo changes cgo continues to get stricter about sharing data between Go and C. http://tip.golang.org/cmd/cgo/#hdr-Passing_pointers Ian Lance Taylor has put a lot of work into making signal handling more sane. More supported platforms. Go 1.6 adds experimental ports to Linux on 64-bit MIPS (linux/mips64 and linux/mips64le). Note that this is 64 bit MIPS, not the older 32 bit MIPS commonly found in routers. 64-bit PowerPC (linux/ppc64le), Go 1.6 now supports cgo with external linking and is roughly feature complete. Go 1.6 also adds an experimental port to Android on 32-bit x86 (android/386). Did you contribute to Go 1.6 and your contribution is not listed here? Edit this page and add some details about what you did. What'll happen if Go 1.6 comes out early? It'll ruin the surprise, but only a little. Being realistic, even without the difficulty of timezones it's impossible to run every meetup at exactly the same time. As mentioned above, Feb 17 is an arbitrary date. If you're a meetup organiser, Feb 17 th would be great, but your participation is more important than being able to organise your group for exactly the 17 th . What'll happen if Go 1.6 isn't out by the 17 th ? Well \u2026 at least we'll have each other. The feature set of Go 1.6 isn't going to change in the next few weeks. If Go 1.6 ships after the 17 th , it will be a little anticlimactic that we jumped the gun, but it's not a big deal. Who's organising this? Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe. No, seriously, who's organising this? Here are the organisers so far: - Dave Cheney - @davecheney - Carlisia Campos - @carlisia Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"Go 1.6 release party"},{"location":"Go-1.6-release-party/#party-recap-on-tweets","text":"Missed or missing the party? Here is a flashback for you: https://storify.com/gobridge/go-16v-world-release-party","title":"Party recap on tweets"},{"location":"Go-1.6-release-party/#whats-happening","text":"To celebrate the release of Go 1.6 we're organising a world wide release party on February the 17 th , 2016.","title":"What's happening?"},{"location":"Go-1.6-release-party/#hang-on-did-you-say-go-16-ships-on-the-17th-of-february","text":"Nope! Go 1.6 ships when it's ready. With that said, things are looking pretty good for a mid Feb release. Using the power of software estimation, a date was plucked from the aether that happened to coincide with several meetups that were already in the works.","title":"Hang on, did you say Go 1.6 ships on the 17th of February?"},{"location":"Go-1.6-release-party/#sounds-awesome-how-can-you-get-involved","text":"If you host a Go user group or meetup, schedule a meetup on the 17 th of Feb and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Don't forget to add your details right here.","title":"Sounds awesome, how can you get involved?"},{"location":"Go-1.6-release-party/#whos-involved","text":"Here is a list of the groups who are participating. - Sydney Go users' group - Go-Miami - San Diego Gophers - PDX Go - GopherConIndia - Belarus Golang User Group - Ukrainian Golang User Groups - Lviv Golang Group - Edmonton Go (Feb 22) - Software Craftsmanship Toulouse - Golang Paris - Polish GLUG Meetup - Google Developer Group Gigcity - Golang Montr\u00e9al (Feb 22 nd ) - Golang Vietnam (Feb 23) - Gophers Katowice - GoSF - Boston Golang - Go-Tampa - Atlanta - GoAKL - Golang Barcelona - Golang Singapore (February 18) - Go Maryland (February 18) - Orange County Gophers - Central Jersey Tech Meetup - Kansas City Golang Meetup - Mexico City Gophers - Women Who Go London - Go Israel - Go User Group Hamburg - Golang Brasil - S\u00e3o Paulo (Saturday, February 20) - Z\u00fcrich Gophers - Switzerland - Golang Reston - GoMAD - GoCon - GDG Golang Berlin (Feb 17) - ATX Golang (Austin) - GoCon Tokyo - Golang Italian Hackers, at Develer - Go London User Group - Seattle Go Programmers - Vilnius Golang - Go DC - GDG Korea Golang (Feb 22) - [Golang ZG, Zagreb Croatia] ( http://www.meetup.com/Golang-ZG/events/228863217/ ) - [Gophers-ir Iran/Tehran] ( https://evand.ir/events/gophers-16 ) (February 18) - Golang Brazil - Porto Alegre (February 17) - [Seattle Go Programmers] ( http://www.meetup.com/golang/events/228465356/ ) (Wed February 17) - [Go Cape Town] ( http://www.meetup.com/gocapetown/events/228874257/ ) - [Golang Hong Kong] ( http://www.meetup.com/GolangHK/events/228551636/ ) - [Golang Lima] ( http://www.meetup.com/es-ES/Golang-Peru/events/228643682/ ) - [Gophers Barranquilla] ( http://www.meetup.com/es-ES/Gophers-Barranquilla/events/228899893/ ) If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.","title":"Who's involved?"},{"location":"Go-1.6-release-party/#stay-in-touch","text":"Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, discuss it online, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help.","title":"Stay in touch"},{"location":"Go-1.6-release-party/#slack-channel","text":"We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link .","title":"Slack Channel"},{"location":"Go-1.6-release-party/#mailing-list","text":"We have set up a google groups mailing list for meetup organisers to ask questions. At the moment the list is focused on the event on the 17 th , hopefully if that goes well the mailing list will become a useful resource in the future.","title":"Mailing list"},{"location":"Go-1.6-release-party/#what-happens-in-a-release-party","text":"Go 1.6 is the 7 th release of the language which has been open source since November 10 th , 2009 \u2013 that's 6.5 years since the project was open sourced and nearly 4 years since the 1.0 release. A lot has changed in the language since 1.0, so this is a great opportunity to discuss the improvements landing 1.6.","title":"What happens in a release party?"},{"location":"Go-1.6-release-party/#resources","text":"Francesc Campoy presented his State of Go talk at FOSDEM, which includes details of the upcoming Go 1.6 release. His slide are available online . Here a Go 1.6 presentation slide deck from the Go Sydney users' group. Feel free to use this for your meetup. talks.godoc.org/github.com/davecheney/gosyd/go1.6.slide Source : https://github.com/davecheney/gosyd/blob/master/go1.6.slide Please send PR's with corrections/additions","title":"Resources"},{"location":"Go-1.6-release-party/#go-16-new-and-noteworthy","text":"Please help by expanding this section so meetup organisers can share these details with their groups. Go 1.6 release notes (draft) HTTP/2. Go 1.6's net/http package supports HTTP/2 for both the client and server out of the box. Here is a video of @bradfitz giving an overview of Go 1.6's HTTP/2 support . - Garbage Collector improvements. Go 1.6 focused heavily on improvements to the low latency collector shipped in Go 1.5. Rick Hudson gave a presentation at GopherCon 2015 describing the low latency collector delivered in Go 1.5, and gave hints to the improvements being worked on for 1.6. Rick recently recorded an interview with InfoQ which focused on 1.6 in more detail. - GOVENDOREXPERIMENT becomes the default. Go 1.5 added experimental support for a mechanism of including the source of your package's dependencies in the package itself, colloquially known as vendoring . This feature was opt-in during Go 1.5. Go 1.6 makes the vendor support the default, and it's likely that packages will start to use it soon. text/template changes. A long requested ability to trim whitespace in templates has arrived. This template \"{{23 -}} < {{- 45}}\" will produce this output \"23<45\" cgo changes cgo continues to get stricter about sharing data between Go and C. http://tip.golang.org/cmd/cgo/#hdr-Passing_pointers Ian Lance Taylor has put a lot of work into making signal handling more sane. More supported platforms. Go 1.6 adds experimental ports to Linux on 64-bit MIPS (linux/mips64 and linux/mips64le). Note that this is 64 bit MIPS, not the older 32 bit MIPS commonly found in routers. 64-bit PowerPC (linux/ppc64le), Go 1.6 now supports cgo with external linking and is roughly feature complete. Go 1.6 also adds an experimental port to Android on 32-bit x86 (android/386). Did you contribute to Go 1.6 and your contribution is not listed here? Edit this page and add some details about what you did.","title":"Go 1.6 new and noteworthy"},{"location":"Go-1.6-release-party/#whatll-happen-if-go-16-comes-out-early","text":"It'll ruin the surprise, but only a little. Being realistic, even without the difficulty of timezones it's impossible to run every meetup at exactly the same time. As mentioned above, Feb 17 is an arbitrary date. If you're a meetup organiser, Feb 17 th would be great, but your participation is more important than being able to organise your group for exactly the 17 th .","title":"What'll happen if Go 1.6 comes out early?"},{"location":"Go-1.6-release-party/#whatll-happen-if-go-16-isnt-out-by-the-17th","text":"Well \u2026 at least we'll have each other. The feature set of Go 1.6 isn't going to change in the next few weeks. If Go 1.6 ships after the 17 th , it will be a little anticlimactic that we jumped the gun, but it's not a big deal.","title":"What'll happen if Go 1.6 isn't out by the 17th?"},{"location":"Go-1.6-release-party/#whos-organising-this","text":"Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.","title":"Who's organising this?"},{"location":"Go-1.6-release-party/#no-seriously-whos-organising-this","text":"Here are the organisers so far: - Dave Cheney - @davecheney - Carlisia Campos - @carlisia Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"No, seriously, who's organising this?"},{"location":"Go-1.8-Release-Party/","text":"What's happening? To celebrate the release of Go 1.8 we're to organising a world wide release party on February the 16 th , 2017. Hang on, did you say Go 1.8 ships on the 16 th of February? Nope! Go 1.8 is in good shape to ship in early February, but no firm release date has been published; it might be as early as the 1 st of Feb, or it might not. Sounds awesome, how can you get involved? If you host a Go user group or meetup, schedule a meetup on the 16 th of Feb, or as close to it as convenient, and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Spread the word using hashtag #GoReleaseParty Don't forget to add your meetup's details right here. Who's involved? Here is a list of the groups who are participating. - Buenos Aires, Argentina: Feb 16 7:00 pm. Location: Mercado Libre's Headquarters. ( https://www.meetup.com/es-ES/Golang-Argentina/ ) - Orlando, FL: Feb 16 7:00PM, Location TBD, Orlando Gophers - Mexico City, Mexico: Feb 16 7:00pm at Palo-IT, view the meetup for details. - Helsinki, Finland: Feb 16 5:30pm, view the meetup - Tehran, Iran: Feb 16 5pm , at [Clickyab] ( https://clickyab.com ) office. Visit event page for more info or contact @fzerorubigd . - Florence area, Italy: Feb 16 6pm CET, at Develer SRL. Visit event page for more detail or contact @golab_conf . - Aachen, Germany: Feb 16 7pm, view the meetup - Bengaluru, India - Feb 16 th 7.00pm at [Gojek] ( @GojekTech ) office. Contact [ @rbharshetty ] ( @rBharshetty ) or view the [meetup] ( https://www.meetup.com/Golang-Bangalore/events/237156123/ ) for details - Munich, Germany: Feb 15 7pm at Stylight. Contact @lc0d3r , @munich_gophers or view the meetup for details. - Washington DC: Feb 16 7pm at MakeOffices Dupont. View the Golang meetup and [GDG-DC] ( https://www.meetup.com/gdg-dc ) [Meetup] ( https://www.meetup.com/gdg-dc/events/237677174/ ) for details. - Columbia, MD: Feb 16 5:30pm at Tier 1 Consulting Group. See event page - Halifax, Nova Scotia, Canada Postponed due to weather, will be rescheduled Contact @danp for more info. - Belo Horizonte, MG, Brazil: Feb 16 7pm at The Plant. Contact @joaoh82 for more info or go to Go Belo Horizonte - Florian\u00f3lis, SC, Brazil: Feb 16 7pm at Neoway Business Solutions. Contact @ricardolonga for more info or go to Floripa Gophers - S\u00e3o Paulo, Brazil: Feb 16 7pm at TBD. Contact @vdemario for more info or check the meetup page - @GolangParis , France, Feb 16 7pm at Deezer , see meetup page . Ping: gaufres [at] golangparis.org. - Sydney, Australia: Feb 16 6pm at TBD. Contact @chewxy for more info. The event page - Moscow, Russia: Feb 16 7pm. Meetup group . - Novosibirsk, Russia: Feb 19 11am NOVT. Contact @lkalneus for more info. Live stream - @DenverGophers Feb 16 6:00pm at Comcast Viper. View the meetup or contact @apriendeau for more info. - @MinneapolisGo Feb 16 6:00pm at Agosto. View the meetup or contact @corylanou for more info. - Amsterdam, the Netherlands: Feb 16 6pm at Wercker . View the meetup for more details and RSVP. - Wroclaw, Poland: Feb 16 7pm at Kuznicza 10. View the meetup or contact @viru for more details. - Stockholm, Sweden: Feb 21 6pm at TV4. View the meetup or contact @marcusolsson for more details. - New York, NY: Feb 16 at 6:30PM at Stack Overflow. RSVP for meetup Contact @wikiwalk for more details. - Madrid, Spain: Feb 16 at 7:30PM at source{d}, The event will be announced on meetup . Contact @mcuadros_ for more details. - Murcia, Spain: Feb 16 at 7:00PM at CEEIM. Will announce the event on meetup . Contact @ANPez for more details. - Taipei, Taiwan: Feb 16 at 7:30PM at Dcard . RSVP on the kktix page . Contact @kkdai for more details. - Budapest, Hungary: Feb 16 at 7:00PM at Prezi House of Ideas . RSVP on the meetup page . For details please contact the organizer: @gulyasm - Reston, VA: Feb 16 at 6:45PM at Comcast. See more details and RSVP on the meetup page . - Lille, France: Feb 16 at 6:45PM at Epitech Lille . Meetup page . - Hamburg, Germany: Feb 16 at 7PM place at loodse . Meetup page . - Okayama, Japan: Feb 16 7pm at Kurashiki Coffee Shop. See an event page or contact @qt_luigi for more info. - Phoenix, AZ: Feb 16 at 6:30PM, at Brightcove , Scottsdale. See event page or contact @golangPhoenix - Toronto, Canada: Firkin on King, See event page - Seattle, WA: Feb 16 at 6PM at Uber, See event page - Vancouver, BC, Canada: Feb 16 at 6PM at Hootsuite , See event page - San Francisco, CA: Feb 16 at 6:30PM, venue TBD. See event page - Copenhagen, Denmark: Feb 16 th at 6PM, at Vivino. See event page or contact @phr0e or @CphGophers - Leeds, England, UK: Feb 16 th at 6PM, at White Cloth Gallery in Leeds (LS1 4HT). See event page - Zurich, CH, Feb 23 rd at 6:30PM at Unic AG offices in Altstetten. See event page - Framingham, Ma - Feb 16 th 7pm - See event page - Cambridge, Ma - Feb 16 th 6:30pm, at the Google Office in Cambridge - See event page , contact @bostongolang - Tokyo, Japan - Feb 16 th 7pm - See https://gocon.connpass.com/event/48281/ - San Diego, CA @ ScouRED - Feb 16 th 6pm - See event page , contact @carlisia - Philadelphia, PA - Feb 16 th 6PM, at Sidecar. See Meetup page or contact @golangphilly - Milan, Italy - Feb 16 th 6.30pm, at Ibuildings' offices. For info tweet to @kmox83 or @mavimo - See the event page - Singapore - Feb 16 th 7.30pm, at Singapore Power office. See the Meetup page or tweet to @golangSG - Cardiff (Wales UK) - Feb 15 th 18:00 at Tramshed Cardiff. See the Meetup page or tweet to @cdfgolang - Minsk, Belarus - Feb 16 th 7.00pm at Juno. [Meetup Page ->] ( https://www.meetup.com/JunoCrew-meetups/events/237671824/ ) Registration here -> - Bangor (Wales UK) - Feb 16 th 7:00 PM hosted by NorthWalesTech . See the Meetup page or tweet to @northwalestech - Odessa, Ukraine - Feb 25 th 10:00am at VertaMedia. See the meetup page . - Valencia, Spain - Feb 18 th 17:00pm at Oh my Game Bar. Visit the Telegram group or visit our twitter . - Austin, TX (USA) - Feb 16 th 6:30 PM (GMT-6) visit the Austin Go Language User Group Meetup page for details - Hyderabad, India - Feb 16 th 6:30 PM visit the Hyderabad Gophers Meetup page for details or contact @itsbalamurali , @gouthamve for more details. - Edmonton, AB (Canada) - Feb 27 th 6:30 PM visit Edmonton Go and RSVP via the meetup page . - Dallas, TX - Feb 16 th 7:00 PM visit GoDFW and RSVP via the meetup page - Tr\u00f3jmiasto (Gda\u0144sk-Sopot-Gdynia), Poland - Feb 13 th 6:00 PM visit GUGT and RSVP via the meetup page - Istanbul, Turkey - Feb 16 th 7:00 PM at Insider . RSVP via the eventbrite page . - Strasbourg, France - Feb 16 th 6:30 PM at La Plage Digitale . RSVP via the meetup page . - Waterloo, Canada - Feb 16 7:00 PM at the Lion's Brewery at the Heuther Hotel . RSVP via the meetup page . - Republic of Korea - Feb 16 8:00 Pm at GangNam 2 nd TOZ. See the [meetup page] ( https://www.facebook.com/groups/golangko/ ). - Dublin, Ireland - Feb 16 6:30 PM at Arista Networks. Meetup details. - Berlin, Germany - Feb 28 7:00 PM at Amazon. RSVP at Meetup . - Portland, OR (pdxgo) - Feb 16 6:30 PM at Esri R&D Center. RSVP at Meetup . - Lyon, France - Fev 16 7 PM at OVH. RSVP at Meetup - New York - Fev 16 7:00 PM at Nulab . RSVP at Meetup - Dresden, Germany - Feb 16 th 6:30PM at LOVOO . RVSP at http://doodle.com/poll/s2bw6eu4ywhqg9ut - London, UK - Feb 15 th 6:30PM at Skills Matter Code Node RSVP at Meetup - Auckland, NZ - Feb 15 th 6:00PM at Vend, RSVP at Meetup - \ud83c\uddfb\ud83c\uddf3 Saigon, Vietnam - Feb 21 7:00 PM, RSVP at our Facebook Event page - Brno, CZ - Feb 28 th 7:00PM. RSVP via the meetup event page . - Atlanta, GA (USA) - Feb 16 th at 6:30PM EST. RSVP at the Meetup Page or contact @rlmcpherson - Edinburgh, Scotland - Feb 16 th 6:30 PM GMT. RSVP at Meetup or contact @macqueenism or @hackebrot . - Boise, ID (USA) - Feb 16 th 6:00PM (MST). RSVP via the meetup event page . - Cape Town, South Africa - Feb 16 th 6:30PM (SAST). RSVP via the meetup event page or get in touch with @clvnb - Lviv, Ukraine - Feb 24 th 6:30PM (EET). RSVP via the meetup event page - Brest, France - Feb 21th 6:30PM. See the Meetup page If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness. Stay in touch Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help. . Slack Channel We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link . Mailing list We have set up a mailing list for meetup organisers to ask questions. What happens in a release party? As with the previous Go 1.6 and Go 1.7 release parties, this is a great opportunity to spread the word about the improvements landing 1.8, and the plans for the 1.9 development cycle. Resources A sample slide deck that you can use is available here ( source ) Please send PR's with corrections/additions Here's a link to the draft Go 1.8 release notes . Here's a link to the talk by Francesc Campoy: The State of Go (February 2017). What'll happen if Go 1.8 comes out before the 16 th ? This is likely to happen, but many meetups have a January date scheduled and don't want to hold two meetups so close together. The 16 th is an arbitrary date that a quorum of meetups could find that didn't conflict with their existing schedules. If you're a meetup organiser and can hit the Feb 16 th , awesome, but your participation is more important than being able to organise your group for an exact date. What'll happen if Go 1.8 isn't out by the 16 th ? Well \u2026 at least we'll have each other. The feature set of Go 1.8 isn't going to change in over the next month. If Go 1.8 ships after the 16 th , it will be a little anticlimactic that we jumped the gun, but it's not a big deal. Who's organising this? Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe. No, seriously, who's organising this? Here are the organisers so far: - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82 Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"Go 1.8 Release Party"},{"location":"Go-1.8-Release-Party/#whats-happening","text":"To celebrate the release of Go 1.8 we're to organising a world wide release party on February the 16 th , 2017.","title":"What's happening?"},{"location":"Go-1.8-Release-Party/#hang-on-did-you-say-go-18-ships-on-the-16th-of-february","text":"Nope! Go 1.8 is in good shape to ship in early February, but no firm release date has been published; it might be as early as the 1 st of Feb, or it might not.","title":"Hang on, did you say Go 1.8 ships on the 16th of February?"},{"location":"Go-1.8-Release-Party/#sounds-awesome-how-can-you-get-involved","text":"If you host a Go user group or meetup, schedule a meetup on the 16 th of Feb, or as close to it as convenient, and celebrate with Gophers around the world. If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate. After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration. Spread the word using hashtag #GoReleaseParty Don't forget to add your meetup's details right here.","title":"Sounds awesome, how can you get involved?"},{"location":"Go-1.8-Release-Party/#whos-involved","text":"Here is a list of the groups who are participating. - Buenos Aires, Argentina: Feb 16 7:00 pm. Location: Mercado Libre's Headquarters. ( https://www.meetup.com/es-ES/Golang-Argentina/ ) - Orlando, FL: Feb 16 7:00PM, Location TBD, Orlando Gophers - Mexico City, Mexico: Feb 16 7:00pm at Palo-IT, view the meetup for details. - Helsinki, Finland: Feb 16 5:30pm, view the meetup - Tehran, Iran: Feb 16 5pm , at [Clickyab] ( https://clickyab.com ) office. Visit event page for more info or contact @fzerorubigd . - Florence area, Italy: Feb 16 6pm CET, at Develer SRL. Visit event page for more detail or contact @golab_conf . - Aachen, Germany: Feb 16 7pm, view the meetup - Bengaluru, India - Feb 16 th 7.00pm at [Gojek] ( @GojekTech ) office. Contact [ @rbharshetty ] ( @rBharshetty ) or view the [meetup] ( https://www.meetup.com/Golang-Bangalore/events/237156123/ ) for details - Munich, Germany: Feb 15 7pm at Stylight. Contact @lc0d3r , @munich_gophers or view the meetup for details. - Washington DC: Feb 16 7pm at MakeOffices Dupont. View the Golang meetup and [GDG-DC] ( https://www.meetup.com/gdg-dc ) [Meetup] ( https://www.meetup.com/gdg-dc/events/237677174/ ) for details. - Columbia, MD: Feb 16 5:30pm at Tier 1 Consulting Group. See event page - Halifax, Nova Scotia, Canada Postponed due to weather, will be rescheduled Contact @danp for more info. - Belo Horizonte, MG, Brazil: Feb 16 7pm at The Plant. Contact @joaoh82 for more info or go to Go Belo Horizonte - Florian\u00f3lis, SC, Brazil: Feb 16 7pm at Neoway Business Solutions. Contact @ricardolonga for more info or go to Floripa Gophers - S\u00e3o Paulo, Brazil: Feb 16 7pm at TBD. Contact @vdemario for more info or check the meetup page - @GolangParis , France, Feb 16 7pm at Deezer , see meetup page . Ping: gaufres [at] golangparis.org. - Sydney, Australia: Feb 16 6pm at TBD. Contact @chewxy for more info. The event page - Moscow, Russia: Feb 16 7pm. Meetup group . - Novosibirsk, Russia: Feb 19 11am NOVT. Contact @lkalneus for more info. Live stream - @DenverGophers Feb 16 6:00pm at Comcast Viper. View the meetup or contact @apriendeau for more info. - @MinneapolisGo Feb 16 6:00pm at Agosto. View the meetup or contact @corylanou for more info. - Amsterdam, the Netherlands: Feb 16 6pm at Wercker . View the meetup for more details and RSVP. - Wroclaw, Poland: Feb 16 7pm at Kuznicza 10. View the meetup or contact @viru for more details. - Stockholm, Sweden: Feb 21 6pm at TV4. View the meetup or contact @marcusolsson for more details. - New York, NY: Feb 16 at 6:30PM at Stack Overflow. RSVP for meetup Contact @wikiwalk for more details. - Madrid, Spain: Feb 16 at 7:30PM at source{d}, The event will be announced on meetup . Contact @mcuadros_ for more details. - Murcia, Spain: Feb 16 at 7:00PM at CEEIM. Will announce the event on meetup . Contact @ANPez for more details. - Taipei, Taiwan: Feb 16 at 7:30PM at Dcard . RSVP on the kktix page . Contact @kkdai for more details. - Budapest, Hungary: Feb 16 at 7:00PM at Prezi House of Ideas . RSVP on the meetup page . For details please contact the organizer: @gulyasm - Reston, VA: Feb 16 at 6:45PM at Comcast. See more details and RSVP on the meetup page . - Lille, France: Feb 16 at 6:45PM at Epitech Lille . Meetup page . - Hamburg, Germany: Feb 16 at 7PM place at loodse . Meetup page . - Okayama, Japan: Feb 16 7pm at Kurashiki Coffee Shop. See an event page or contact @qt_luigi for more info. - Phoenix, AZ: Feb 16 at 6:30PM, at Brightcove , Scottsdale. See event page or contact @golangPhoenix - Toronto, Canada: Firkin on King, See event page - Seattle, WA: Feb 16 at 6PM at Uber, See event page - Vancouver, BC, Canada: Feb 16 at 6PM at Hootsuite , See event page - San Francisco, CA: Feb 16 at 6:30PM, venue TBD. See event page - Copenhagen, Denmark: Feb 16 th at 6PM, at Vivino. See event page or contact @phr0e or @CphGophers - Leeds, England, UK: Feb 16 th at 6PM, at White Cloth Gallery in Leeds (LS1 4HT). See event page - Zurich, CH, Feb 23 rd at 6:30PM at Unic AG offices in Altstetten. See event page - Framingham, Ma - Feb 16 th 7pm - See event page - Cambridge, Ma - Feb 16 th 6:30pm, at the Google Office in Cambridge - See event page , contact @bostongolang - Tokyo, Japan - Feb 16 th 7pm - See https://gocon.connpass.com/event/48281/ - San Diego, CA @ ScouRED - Feb 16 th 6pm - See event page , contact @carlisia - Philadelphia, PA - Feb 16 th 6PM, at Sidecar. See Meetup page or contact @golangphilly - Milan, Italy - Feb 16 th 6.30pm, at Ibuildings' offices. For info tweet to @kmox83 or @mavimo - See the event page - Singapore - Feb 16 th 7.30pm, at Singapore Power office. See the Meetup page or tweet to @golangSG - Cardiff (Wales UK) - Feb 15 th 18:00 at Tramshed Cardiff. See the Meetup page or tweet to @cdfgolang - Minsk, Belarus - Feb 16 th 7.00pm at Juno. [Meetup Page ->] ( https://www.meetup.com/JunoCrew-meetups/events/237671824/ ) Registration here -> - Bangor (Wales UK) - Feb 16 th 7:00 PM hosted by NorthWalesTech . See the Meetup page or tweet to @northwalestech - Odessa, Ukraine - Feb 25 th 10:00am at VertaMedia. See the meetup page . - Valencia, Spain - Feb 18 th 17:00pm at Oh my Game Bar. Visit the Telegram group or visit our twitter . - Austin, TX (USA) - Feb 16 th 6:30 PM (GMT-6) visit the Austin Go Language User Group Meetup page for details - Hyderabad, India - Feb 16 th 6:30 PM visit the Hyderabad Gophers Meetup page for details or contact @itsbalamurali , @gouthamve for more details. - Edmonton, AB (Canada) - Feb 27 th 6:30 PM visit Edmonton Go and RSVP via the meetup page . - Dallas, TX - Feb 16 th 7:00 PM visit GoDFW and RSVP via the meetup page - Tr\u00f3jmiasto (Gda\u0144sk-Sopot-Gdynia), Poland - Feb 13 th 6:00 PM visit GUGT and RSVP via the meetup page - Istanbul, Turkey - Feb 16 th 7:00 PM at Insider . RSVP via the eventbrite page . - Strasbourg, France - Feb 16 th 6:30 PM at La Plage Digitale . RSVP via the meetup page . - Waterloo, Canada - Feb 16 7:00 PM at the Lion's Brewery at the Heuther Hotel . RSVP via the meetup page . - Republic of Korea - Feb 16 8:00 Pm at GangNam 2 nd TOZ. See the [meetup page] ( https://www.facebook.com/groups/golangko/ ). - Dublin, Ireland - Feb 16 6:30 PM at Arista Networks. Meetup details. - Berlin, Germany - Feb 28 7:00 PM at Amazon. RSVP at Meetup . - Portland, OR (pdxgo) - Feb 16 6:30 PM at Esri R&D Center. RSVP at Meetup . - Lyon, France - Fev 16 7 PM at OVH. RSVP at Meetup - New York - Fev 16 7:00 PM at Nulab . RSVP at Meetup - Dresden, Germany - Feb 16 th 6:30PM at LOVOO . RVSP at http://doodle.com/poll/s2bw6eu4ywhqg9ut - London, UK - Feb 15 th 6:30PM at Skills Matter Code Node RSVP at Meetup - Auckland, NZ - Feb 15 th 6:00PM at Vend, RSVP at Meetup - \ud83c\uddfb\ud83c\uddf3 Saigon, Vietnam - Feb 21 7:00 PM, RSVP at our Facebook Event page - Brno, CZ - Feb 28 th 7:00PM. RSVP via the meetup event page . - Atlanta, GA (USA) - Feb 16 th at 6:30PM EST. RSVP at the Meetup Page or contact @rlmcpherson - Edinburgh, Scotland - Feb 16 th 6:30 PM GMT. RSVP at Meetup or contact @macqueenism or @hackebrot . - Boise, ID (USA) - Feb 16 th 6:00PM (MST). RSVP via the meetup event page . - Cape Town, South Africa - Feb 16 th 6:30PM (SAST). RSVP via the meetup event page or get in touch with @clvnb - Lviv, Ukraine - Feb 24 th 6:30PM (EET). RSVP via the meetup event page - Brest, France - Feb 21th 6:30PM. See the Meetup page If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.","title":"Who's involved?"},{"location":"Go-1.8-Release-Party/#stay-in-touch","text":"Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. As always, if you get stuck, or need help, please contact the organisers directly , we're here to help. .","title":"Stay in touch"},{"location":"Go-1.8-Release-Party/#slack-channel","text":"We have a channel for the release party on the Gophers Slack . If you need an invite to Slack, you can request an automatic invite with this link .","title":"Slack Channel"},{"location":"Go-1.8-Release-Party/#mailing-list","text":"We have set up a mailing list for meetup organisers to ask questions.","title":"Mailing list"},{"location":"Go-1.8-Release-Party/#what-happens-in-a-release-party","text":"As with the previous Go 1.6 and Go 1.7 release parties, this is a great opportunity to spread the word about the improvements landing 1.8, and the plans for the 1.9 development cycle.","title":"What happens in a release party?"},{"location":"Go-1.8-Release-Party/#resources","text":"A sample slide deck that you can use is available here ( source ) Please send PR's with corrections/additions Here's a link to the draft Go 1.8 release notes . Here's a link to the talk by Francesc Campoy: The State of Go (February 2017).","title":"Resources"},{"location":"Go-1.8-Release-Party/#whatll-happen-if-go-18-comes-out-before-the-16th","text":"This is likely to happen, but many meetups have a January date scheduled and don't want to hold two meetups so close together. The 16 th is an arbitrary date that a quorum of meetups could find that didn't conflict with their existing schedules. If you're a meetup organiser and can hit the Feb 16 th , awesome, but your participation is more important than being able to organise your group for an exact date.","title":"What'll happen if Go 1.8 comes out before the 16th?"},{"location":"Go-1.8-Release-Party/#whatll-happen-if-go-18-isnt-out-by-the-16th","text":"Well \u2026 at least we'll have each other. The feature set of Go 1.8 isn't going to change in over the next month. If Go 1.8 ships after the 16 th , it will be a little anticlimactic that we jumped the gun, but it's not a big deal.","title":"What'll happen if Go 1.8 isn't out by the 16th?"},{"location":"Go-1.8-Release-Party/#whos-organising-this","text":"Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.","title":"Who's organising this?"},{"location":"Go-1.8-Release-Party/#no-seriously-whos-organising-this","text":"Here are the organisers so far: - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82 Want to help? Edit this page and add yourself If you have questions, please reach out to one of the organisers.","title":"No, seriously, who's organising this?"},{"location":"Go-Community-Slides/","text":"Did you speak at a conference or meetup lately? Please share links to your slide decks here for better distribution to our global community. Peer To Peer Groups Kitchener-Waterloo, Canada Concurrent Optimization Methods Using Go Brodie Roberts, June 12, 2018 [ repo ] Concurrency is a powerful tool for doing huge amounts of computation on today's multi-core computers. But that power is limited by the design of paralleling the problem and its implementation using threads and locks. We'll start with a sub-optimal concurrent Go program and walk through improving it - iterating on finding the program's bottleneck, improving it, and seeing the program get faster. We'll also cover general tips and tricks of concurrent optimization to apply to your own computationally intensive programs. Conferences GopherCon 2018 , Denver, Colorado The Importance of Beginners Natalie Pistunovich, August 29 Session details Slides Rethinking Classical Concurrency Patterns Bryan C. Mills, August 28 Slides with speaker notes","title":"Go Community Slides"},{"location":"Go-Community-Slides/#peer-to-peer-groups","text":"","title":"Peer To Peer Groups"},{"location":"Go-Community-Slides/#kitchener-waterloo-canada","text":"","title":"Kitchener-Waterloo, Canada"},{"location":"Go-Community-Slides/#concurrent-optimization-methods-using-go","text":"Brodie Roberts, June 12, 2018 [ repo ] Concurrency is a powerful tool for doing huge amounts of computation on today's multi-core computers. But that power is limited by the design of paralleling the problem and its implementation using threads and locks. We'll start with a sub-optimal concurrent Go program and walk through improving it - iterating on finding the program's bottleneck, improving it, and seeing the program get faster. We'll also cover general tips and tricks of concurrent optimization to apply to your own computationally intensive programs.","title":"Concurrent Optimization Methods Using Go"},{"location":"Go-Community-Slides/#conferences","text":"","title":"Conferences"},{"location":"Go-Community-Slides/#gophercon-2018-denver-colorado","text":"","title":"GopherCon 2018, Denver, Colorado"},{"location":"Go-Community-Slides/#the-importance-of-beginners","text":"Natalie Pistunovich, August 29 Session details Slides","title":"The Importance of Beginners"},{"location":"Go-Community-Slides/#rethinking-classical-concurrency-patterns","text":"Bryan C. Mills, August 28 Slides with speaker notes","title":"Rethinking Classical Concurrency Patterns"},{"location":"Go-Release-Cycle/","text":"This wiki page is maintained by the Go team. Please send comments to golang-dev or file issues instead of making changes directly. Short link: https://golang.org/s/release . Overview After fourteen months elapsed between Go 1.0 and Go 1.1, the Go team adopted a release schedule to streamline the process of working on, finishing, and issuing releases. The overall goal is to make a major release every six months, which breaks down into three months of general development followed by three months of testing and polishing known as the release freeze. A release is maintained by issuing minor releases to correct critical problems such as crashes or security issues. Note that this page documents what we intend to do for upcoming releases. If you are familiar with what we have done in the past, pay particular attention to the differences described in the history section . Timeline The current release cycle is aligned to start on February 1 and August 1 of each year. The target milestones for a release cycle are as described below. We try to hit the targets as closely as possible, while still delivering a quality release. Betas, release candidates, and releases have traditionally been cut and issued mid-week, often on Wednesdays. We avoid Mondays to give the Go team a work day before to prepare for the cut, and we avoid Fridays to give the Go team a work day after in case the cut runs into unexpected problems. January 15 / July 15: Planning for release begins. Planning of major work for upcoming release cycle is announced on golang-dev . Examples: Go 1.4 , Go 1.5 , Go 1.6 . February 1 / August 1: Release work begins. This milestone is delayed if the previous release has not yet been issued, but note that later milestones are not delayed. That is, failure to get one release out on time takes time away from the development cycle of the subsequent release. Note that incoming bug reports should be handled and bugs fixed during ordinary release work. It is not appropriate to leave all bug fixes for the release freeze. See the history section for more discussion. May 1 / November 1: Release freeze begins. This milestone begins the second half of the release cycle, the release freeze. The release freeze applies to the entire main repository as well as to the code in subrepositories that is needed to build the binaries included in the release, particularly godoc and all its dependencies in the tools subrepository. Changes that were mailed before the freeze can be submitted if they are reviewed promptly after the freeze begins. During the freeze, only bug fixes and doc updates are accepted. On occasion new work may be done during the freeze, but only in exceptional circumstances and typically only if the work was proposed and approved before the cutoff. Such changes must be low risk. This part of the release cycle is focused on improving the quality of the release, by testing it and fixing bugs that are found. However, every fix must be evaluated to balance the benefit of a possible fix against the cost of now having not as well tested code (the fix) in the release. Early in the release cycle, the balance tends toward accepting a fix. Late in the release cycle, the balance tends toward rejecting a fix, unless a case can be made that the fix is both low risk and high reward. Examples of low risk changes appropriate late in the cycle include changes to documentation and fixes to new features being introduced in the current release (since there is no chance of introducing a regression compared to an earlier release). By the end of the first month of the freeze, nearly all known bugs should have been fixed or explictly postponed (either to the next release or indefinitely). There should be few known bugs left, perhaps only the ones that have proven too elusive to chase down. June 1 / December 1: Beta 1 issued. A beta release is meant to encourage testing to discover new bugs. Issuing a beta is an indication that the Go team has fixed nearly all the known bugs that are planned to be fixed for the release, and now it is time to look for as yet unknown bugs. The first beta includes a complete draft of the eventual release notes, but marked clearly as a draft to avoid confusion when people link to them on the internet. If a release is ahead of schedule, it is acceptable and even encouraged to issue a beta a few weeks ahead of this target. As bugs are reported and fixed, additional betas may be released, provided there are significant code changes to test anew. Typically betas should not be issued more frequently than two weeks. It is important not to issue too many betas, nor too many release candidates: we are asking our users for their time to help us test the release and must not waste their good will by making too many requests. A beta is not expected to be bug-free and should not be used in production settings where failures or misbehavior cannot be tolerated. Organizations can run integration or other tests against a beta or even use it in a canary setting, but they should be discouraged from deploying the beta for unrestricted production usage. July 1 / January 1: Release candidate 1 issued. A release candidate is meant to be as close as possible to the actual release bits. Issuing a release candidate is an indication that the Go team has high confidence that the tree is free of critical bugs. Once a release candidate is issued, only documentation changes and changes to address critical bugs should be made. In general the bar for bug fixes at this point is even slightly higher than the bar for bug fixes in a minor release. We may prefer to issue a release with a known but very rare crash than to issue a release with a new but not production-tested fix. If a release is ahead of schedule, it is acceptable and even encouraged to issue a release candidate a few weeks ahead of this target. Extended release testing is a great way to deliver a robust release. If critical bugs are reported and fixed, additional release candidates may be issued, but typically not more than one every two weeks. Again, a release candidate is meant to be bug-free, as much as possible. Organizations are encouraged to deploy it in production settings after appropriate organization-specific testing. One of the criteria for issuing a release candidate is that Google be using that version of the code for new production builds by default: if we at Google are not willing to run it for production use, we shouldn't be asking others to. We may issue the release candidate a few days in advance of Google changing over, depending on how the calendar falls. For example, the change inside Google makes more sense to do on Mondays, so we may issue the release candidate the Wednesday before or the Wednesday after Google converts to the new release by default. The calm period between a release candidate and the final release is a good time for additional testing or for discussing the next release (see the January 15 milestone above). August 1 / February 1: Release issued. Finally, the release itself! A release should not contain significant changes since the last release candidate: it is important that all code in the release has been well tested. Issuing a release is an indication that release testing has confirmed the release candidate's high confidence that the tree is free of critical bugs. One of the criteria for issuing a release is that the release candidate has been available for four weeks and any problems that need to be addressed have been. If a release process has run ahead of schedule, with an early beta and early release candidate, release candidate testing should absorb any extra time, leaving the actual release on time, not early. This improves the stability of the release, and it also gives developers working on the Go release more time to think about and plan the next release before code changes start pouring in again. If a release is behind schedule, it is acceptable (but certainly not ideal) to issue a release sooner than four weeks after the release candidate, but no sooner than two weeks after. Abbreviated release testing is a great way to deliver a buggy release. Because Google runs the release candidate as the default version of Go, four weeks of release testing means that at the least Google has been using this version of Go for four weeks before it becomes an official release. While Google's successful use does not guarantee the absence of problems, our experience has been that it certainly helps improve the quality of the release. We strongly encourage other organizations to test release candidates as aggressively as they are able and to report problems that they find. Once a release is issued, work on the next release, including code reviews and submission of new code, can begin, and the cycle repeats. Note that if a release is delayed, so is work on the next release. Release Maintenance A minor release is issued to address one or more critical problems for which there is no workaround (typically related to stability or security). The only code changes included in the release are the fixes for the specific critical problems. Important documentation-only changes and safe test updates (such as disabling tests), may also be included as well, but nothing more. Minor releases to address non-security problems for Go 1.x stop once Go 1.x+2 is released. Minor releases to address security problems for Go 1.x stop once Go 1.x+2 is released. For more about security updates, see the security policy . See also the MinorReleases wiki page. History The Go release cycle was discussed and adopted after the fourteen month effort to release Go 1.1. Go 1.2, Go 1.3, and Go 1.4 followed a six-month cycle beginning and ending (alternately) on December 1 and June 1. After experience with calendar problems in that cycle, we extended Go 1.5's development phase by two months to shift the cycle to begin and end on February 1 and August 1, as described above. The original proposal did not contain enough detail about the milestones during the freeze, and over the course of a few releases development work took over much of the freeze. Compared to the goal set above of issuing a beta one month into the release freeze, the first betas for Go 1.3, Go 1.4, Go 1.5, and Go 1.6 were three, four, five, and six weeks late, respectively. (Go 1.6 beta 1 was only two weeks late, but it was full of known bugs that we still intended to fix, primarily to get something out for testing before the winter holidays. Go 1.6's first real beta by the above definition was beta 2.) When the beta is late, everything that follows the beta\u2014shaking out the final bugs, thorough testing of the release candidates, and the shipping of the release\u2014gets rushed, leading to more bugs in the final release and usually a delay in starting the next cycle. The beta was ready later and later in those four cycles primarily because we both postponed too many bugs to the freeze and then allowed too many non-essential bug fixes during the freeze. For Go 1.7 and later we will need to make sure that bugs are fixed before the freeze. That is, we need to follow the schedule above, not what we've done in the past.","title":"Go Release Cycle"},{"location":"Go-Release-Cycle/#overview","text":"After fourteen months elapsed between Go 1.0 and Go 1.1, the Go team adopted a release schedule to streamline the process of working on, finishing, and issuing releases. The overall goal is to make a major release every six months, which breaks down into three months of general development followed by three months of testing and polishing known as the release freeze. A release is maintained by issuing minor releases to correct critical problems such as crashes or security issues. Note that this page documents what we intend to do for upcoming releases. If you are familiar with what we have done in the past, pay particular attention to the differences described in the history section .","title":"Overview"},{"location":"Go-Release-Cycle/#timeline","text":"The current release cycle is aligned to start on February 1 and August 1 of each year. The target milestones for a release cycle are as described below. We try to hit the targets as closely as possible, while still delivering a quality release. Betas, release candidates, and releases have traditionally been cut and issued mid-week, often on Wednesdays. We avoid Mondays to give the Go team a work day before to prepare for the cut, and we avoid Fridays to give the Go team a work day after in case the cut runs into unexpected problems.","title":"Timeline"},{"location":"Go-Release-Cycle/#january-15--july-15-planning-for-release-begins","text":"Planning of major work for upcoming release cycle is announced on golang-dev . Examples: Go 1.4 , Go 1.5 , Go 1.6 .","title":"January 15 / July 15: Planning for release begins."},{"location":"Go-Release-Cycle/#february-1--august-1-release-work-begins","text":"This milestone is delayed if the previous release has not yet been issued, but note that later milestones are not delayed. That is, failure to get one release out on time takes time away from the development cycle of the subsequent release. Note that incoming bug reports should be handled and bugs fixed during ordinary release work. It is not appropriate to leave all bug fixes for the release freeze. See the history section for more discussion.","title":"February 1 / August 1: Release work begins."},{"location":"Go-Release-Cycle/#may-1--november-1-release-freeze-begins","text":"This milestone begins the second half of the release cycle, the release freeze. The release freeze applies to the entire main repository as well as to the code in subrepositories that is needed to build the binaries included in the release, particularly godoc and all its dependencies in the tools subrepository. Changes that were mailed before the freeze can be submitted if they are reviewed promptly after the freeze begins. During the freeze, only bug fixes and doc updates are accepted. On occasion new work may be done during the freeze, but only in exceptional circumstances and typically only if the work was proposed and approved before the cutoff. Such changes must be low risk. This part of the release cycle is focused on improving the quality of the release, by testing it and fixing bugs that are found. However, every fix must be evaluated to balance the benefit of a possible fix against the cost of now having not as well tested code (the fix) in the release. Early in the release cycle, the balance tends toward accepting a fix. Late in the release cycle, the balance tends toward rejecting a fix, unless a case can be made that the fix is both low risk and high reward. Examples of low risk changes appropriate late in the cycle include changes to documentation and fixes to new features being introduced in the current release (since there is no chance of introducing a regression compared to an earlier release). By the end of the first month of the freeze, nearly all known bugs should have been fixed or explictly postponed (either to the next release or indefinitely). There should be few known bugs left, perhaps only the ones that have proven too elusive to chase down.","title":"May 1 / November 1: Release freeze begins."},{"location":"Go-Release-Cycle/#june-1--december-1-beta-1-issued","text":"A beta release is meant to encourage testing to discover new bugs. Issuing a beta is an indication that the Go team has fixed nearly all the known bugs that are planned to be fixed for the release, and now it is time to look for as yet unknown bugs. The first beta includes a complete draft of the eventual release notes, but marked clearly as a draft to avoid confusion when people link to them on the internet. If a release is ahead of schedule, it is acceptable and even encouraged to issue a beta a few weeks ahead of this target. As bugs are reported and fixed, additional betas may be released, provided there are significant code changes to test anew. Typically betas should not be issued more frequently than two weeks. It is important not to issue too many betas, nor too many release candidates: we are asking our users for their time to help us test the release and must not waste their good will by making too many requests. A beta is not expected to be bug-free and should not be used in production settings where failures or misbehavior cannot be tolerated. Organizations can run integration or other tests against a beta or even use it in a canary setting, but they should be discouraged from deploying the beta for unrestricted production usage.","title":"June 1 / December 1: Beta 1 issued."},{"location":"Go-Release-Cycle/#july-1--january-1-release-candidate-1-issued","text":"A release candidate is meant to be as close as possible to the actual release bits. Issuing a release candidate is an indication that the Go team has high confidence that the tree is free of critical bugs. Once a release candidate is issued, only documentation changes and changes to address critical bugs should be made. In general the bar for bug fixes at this point is even slightly higher than the bar for bug fixes in a minor release. We may prefer to issue a release with a known but very rare crash than to issue a release with a new but not production-tested fix. If a release is ahead of schedule, it is acceptable and even encouraged to issue a release candidate a few weeks ahead of this target. Extended release testing is a great way to deliver a robust release. If critical bugs are reported and fixed, additional release candidates may be issued, but typically not more than one every two weeks. Again, a release candidate is meant to be bug-free, as much as possible. Organizations are encouraged to deploy it in production settings after appropriate organization-specific testing. One of the criteria for issuing a release candidate is that Google be using that version of the code for new production builds by default: if we at Google are not willing to run it for production use, we shouldn't be asking others to. We may issue the release candidate a few days in advance of Google changing over, depending on how the calendar falls. For example, the change inside Google makes more sense to do on Mondays, so we may issue the release candidate the Wednesday before or the Wednesday after Google converts to the new release by default. The calm period between a release candidate and the final release is a good time for additional testing or for discussing the next release (see the January 15 milestone above).","title":"July 1 / January 1: Release candidate 1 issued."},{"location":"Go-Release-Cycle/#august-1--february-1-release-issued","text":"Finally, the release itself! A release should not contain significant changes since the last release candidate: it is important that all code in the release has been well tested. Issuing a release is an indication that release testing has confirmed the release candidate's high confidence that the tree is free of critical bugs. One of the criteria for issuing a release is that the release candidate has been available for four weeks and any problems that need to be addressed have been. If a release process has run ahead of schedule, with an early beta and early release candidate, release candidate testing should absorb any extra time, leaving the actual release on time, not early. This improves the stability of the release, and it also gives developers working on the Go release more time to think about and plan the next release before code changes start pouring in again. If a release is behind schedule, it is acceptable (but certainly not ideal) to issue a release sooner than four weeks after the release candidate, but no sooner than two weeks after. Abbreviated release testing is a great way to deliver a buggy release. Because Google runs the release candidate as the default version of Go, four weeks of release testing means that at the least Google has been using this version of Go for four weeks before it becomes an official release. While Google's successful use does not guarantee the absence of problems, our experience has been that it certainly helps improve the quality of the release. We strongly encourage other organizations to test release candidates as aggressively as they are able and to report problems that they find. Once a release is issued, work on the next release, including code reviews and submission of new code, can begin, and the cycle repeats. Note that if a release is delayed, so is work on the next release.","title":"August 1 / February 1: Release issued."},{"location":"Go-Release-Cycle/#release-maintenance","text":"A minor release is issued to address one or more critical problems for which there is no workaround (typically related to stability or security). The only code changes included in the release are the fixes for the specific critical problems. Important documentation-only changes and safe test updates (such as disabling tests), may also be included as well, but nothing more. Minor releases to address non-security problems for Go 1.x stop once Go 1.x+2 is released. Minor releases to address security problems for Go 1.x stop once Go 1.x+2 is released. For more about security updates, see the security policy . See also the MinorReleases wiki page.","title":"Release Maintenance"},{"location":"Go-Release-Cycle/#history","text":"The Go release cycle was discussed and adopted after the fourteen month effort to release Go 1.1. Go 1.2, Go 1.3, and Go 1.4 followed a six-month cycle beginning and ending (alternately) on December 1 and June 1. After experience with calendar problems in that cycle, we extended Go 1.5's development phase by two months to shift the cycle to begin and end on February 1 and August 1, as described above. The original proposal did not contain enough detail about the milestones during the freeze, and over the course of a few releases development work took over much of the freeze. Compared to the goal set above of issuing a beta one month into the release freeze, the first betas for Go 1.3, Go 1.4, Go 1.5, and Go 1.6 were three, four, five, and six weeks late, respectively. (Go 1.6 beta 1 was only two weeks late, but it was full of known bugs that we still intended to fix, primarily to get something out for testing before the winter holidays. Go 1.6's first real beta by the above definition was beta 2.) When the beta is late, everything that follows the beta\u2014shaking out the final bugs, thorough testing of the release candidates, and the shipping of the release\u2014gets rushed, leading to more bugs in the final release and usually a delay in starting the next cycle. The beta was ready later and later in those four cycles primarily because we both postponed too many bugs to the freeze and then allowed too many non-essential bug fixes during the freeze. For Go 1.7 and later we will need to make sure that bugs are fixed before the freeze. That is, we need to follow the schedule above, not what we've done in the past.","title":"History"},{"location":"Go1point1Gotchas/","text":"Go 1.1 \"gotchas\" While Go 1.1 is compatible with Go 1.0, the compatibility promise permits the Go authors to break existing programs if they were incorrect in the first place. Here are a few ways in which the bug fixes in Go 1.1 may have broken your Go programs. Unknown foo.Bar field in struct literal Struct field names must not include package qualifiers. For example, take this struct with an embedded *bytes.Buffer field: type S struct { *bytes.Buffer } In Go 1.0 the compiler would (incorrectly) accept this struct literal: s := S{ bytes.Buffer: new(bytes.Buffer), } Under Go 1.1 the compiler rejects this. Instead you should use the field name without the package qualifier: s := S{ Buffer: new(bytes.Buffer), } Initialization loop The Go 1.1 compiler now better detects initialization loops. For instance, the following code compiled under Go 1.0. var funcVar = fn func fn() { funcVar() } Such code must now use an init function for the variable assignment to avoid the initialization loop. var funcVar func() func fn() { funcVar() } func init() { funcVar = fn } In particular, this affects users of App Engine's delay package . Cannot fallthrough final case in switch Go 1.0 permitted fallthrough in the final case of a switch statement: switch { case false: fallthrough // fall through to 'true' case case true: fallthrough // fall through to... nowhere? } A language change affecting return requirements led us to make the superfluous fallthrough illegal. The fix is to remove such statements from your code. Duplicate argument name in parameters and return values A compiler bug permitted function type declarations with parameters and return values of the same name. This would compile under Go 1.0: type T func(a int) (a int) Under Go 1.1, the compiler gives an error: duplicate argument a The fix is to rename the arguments so that they use different names. Package \"go\" forbidden The import path \"go\" is now reserved. If you have a package in your workspace whose import path is \"go\", you will need to rename it and move it somewhere else. While it was permitted, it is a bad idea to use this import path. The standard library includes \"go/parser\", \"go/ast\", and so on. It's posssible that a \"go\" package might be introduced in a future Go release, making your \"go\" package unusable. Please read How to write Go code for more details about import paths.","title":"Go1point1Gotchas"},{"location":"Go1point1Gotchas/#go-11-gotchas","text":"While Go 1.1 is compatible with Go 1.0, the compatibility promise permits the Go authors to break existing programs if they were incorrect in the first place. Here are a few ways in which the bug fixes in Go 1.1 may have broken your Go programs.","title":"Go 1.1 \"gotchas\""},{"location":"Go1point1Gotchas/#unknown-foobar-field-in-struct-literal","text":"Struct field names must not include package qualifiers. For example, take this struct with an embedded *bytes.Buffer field: type S struct { *bytes.Buffer } In Go 1.0 the compiler would (incorrectly) accept this struct literal: s := S{ bytes.Buffer: new(bytes.Buffer), } Under Go 1.1 the compiler rejects this. Instead you should use the field name without the package qualifier: s := S{ Buffer: new(bytes.Buffer), }","title":"Unknown foo.Bar field in struct literal"},{"location":"Go1point1Gotchas/#initialization-loop","text":"The Go 1.1 compiler now better detects initialization loops. For instance, the following code compiled under Go 1.0. var funcVar = fn func fn() { funcVar() } Such code must now use an init function for the variable assignment to avoid the initialization loop. var funcVar func() func fn() { funcVar() } func init() { funcVar = fn } In particular, this affects users of App Engine's delay package .","title":"Initialization loop"},{"location":"Go1point1Gotchas/#cannot-fallthrough-final-case-in-switch","text":"Go 1.0 permitted fallthrough in the final case of a switch statement: switch { case false: fallthrough // fall through to 'true' case case true: fallthrough // fall through to... nowhere? } A language change affecting return requirements led us to make the superfluous fallthrough illegal. The fix is to remove such statements from your code.","title":"Cannot fallthrough final case in switch"},{"location":"Go1point1Gotchas/#duplicate-argument-name-in-parameters-and-return-values","text":"A compiler bug permitted function type declarations with parameters and return values of the same name. This would compile under Go 1.0: type T func(a int) (a int) Under Go 1.1, the compiler gives an error: duplicate argument a The fix is to rename the arguments so that they use different names.","title":"Duplicate argument name in parameters and return values"},{"location":"Go1point1Gotchas/#package-go-forbidden","text":"The import path \"go\" is now reserved. If you have a package in your workspace whose import path is \"go\", you will need to rename it and move it somewhere else. While it was permitted, it is a bad idea to use this import path. The standard library includes \"go/parser\", \"go/ast\", and so on. It's posssible that a \"go\" package might be introduced in a future Go release, making your \"go\" package unusable. Please read How to write Go code for more details about import paths.","title":"Package \"go\" forbidden"},{"location":"Go2/","text":"Go2 status This page tracks the status of \"Go 2\". We are currently seeking feedback on potential designs for improved error handling, error values, and generics: Announcement of Go2 Draft Designs Go2 Error Handling, Generics, and Error Values Bugs Open Go2 bugs Talks GopherCon 2017: Russ Cox - The Future of Go GopherCon Russia 2018: Brad Fitzpatrick - Go: Looking back and looking forward (Go2 stuff is at about 20 minutes in) Sydney Golang Meetup - Rob Pike - Go 2 Draft Specifications Scope From talk above: \"maybe three major changes\" plus minor housekeep tasks TBD Examples of major changes: versioning generics ? simplified, improved error handling ? \u2026 Examples of housekeeping: Open Go2Cleanup bugs (please don't add this label to things without discussion) Compatibility We do not want to break the ecosystem. Go 1 and Go 2 code must be able to interoperate in programs with ease. Standard library The standard library would probably be versioned and permit out-of-cycle updates, but be included with Go releases. Maybe \"encoding/foo\" become shorthand for \"golang.org/x/std/encoding/foo\". TBD. Some package would probably get v2 major versions, but the v1 versions would be minimally maintained, at least for security. Roadmap TBD","title":"Go2"},{"location":"Go2/#go2-status","text":"This page tracks the status of \"Go 2\". We are currently seeking feedback on potential designs for improved error handling, error values, and generics: Announcement of Go2 Draft Designs Go2 Error Handling, Generics, and Error Values","title":"Go2 status"},{"location":"Go2/#bugs","text":"Open Go2 bugs","title":"Bugs"},{"location":"Go2/#talks","text":"GopherCon 2017: Russ Cox - The Future of Go GopherCon Russia 2018: Brad Fitzpatrick - Go: Looking back and looking forward (Go2 stuff is at about 20 minutes in) Sydney Golang Meetup - Rob Pike - Go 2 Draft Specifications","title":"Talks"},{"location":"Go2/#scope","text":"From talk above: \"maybe three major changes\" plus minor housekeep tasks TBD Examples of major changes: versioning generics ? simplified, improved error handling ? \u2026 Examples of housekeeping: Open Go2Cleanup bugs (please don't add this label to things without discussion)","title":"Scope"},{"location":"Go2/#compatibility","text":"We do not want to break the ecosystem. Go 1 and Go 2 code must be able to interoperate in programs with ease.","title":"Compatibility"},{"location":"Go2/#standard-library","text":"The standard library would probably be versioned and permit out-of-cycle updates, but be included with Go releases. Maybe \"encoding/foo\" become shorthand for \"golang.org/x/std/encoding/foo\". TBD. Some package would probably get v2 major versions, but the v1 versions would be minimally maintained, at least for security.","title":"Standard library"},{"location":"Go2/#roadmap","text":"TBD","title":"Roadmap"},{"location":"Go2ErrorHandlingFeedback/","text":"Feedback re Go 2 Error Handling Draft Design This page is meant to collect and organize feedback and discussion started with the Go 2 error handling draft design . Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. Please help categorize the rest of the uncategorized proposals at the bottom. Update, June 19, 2019 \u2013 Based on this feedback we have posted a proposal for a try builtin , which produced significant feedback on #32437 ( threaded view here ). We've disabled comments on that issue until July 1 to give people time to experiment in their own code. We would very much like to see experience reports about using the general try approach in your own code, including trial conversions with tryhard . Thanks! Experience with the \u201ctry proposal\u201d Add to this list: TEMPLATE: Your Name, \u201c Title \u201d, Month YYYY Requirements Discussions of the requirements for a new error handling method. Warren Stephens, \" Go 2 handle should provide line number, source filename, version \", December 2018 Liam Breck, \u201c Requirements to Consider for Go 2 Error Handling \u201d, September 2018 jimmyfrasche, \" Don't special case error or nil \", September 2018 Matt Dee \" Error Handling Should Support Custom Error Types \", August 2018 Ian Lance Taylor, \u201c Incomplete list of criteria \u201d from GitHub proposal discussion, May 2018 Rob Pike (posted by @matjam ) \u201c Simplicity is Complicated \u201d, December 2015 In support This includes supporting the existing chaining/stacking of handlers without changes. Tokyo Gophers, \" In support comments from Go 2 feedback event \", October 2018 Adam Bouhenguel \" In support of more declarative error handling \", August 2018 Daniel Theophanes, \" Go 2 Design: Error Handling Net Win \", August 2018 Example code Code changed to use the existing proposal. Daniel Milde, \" Use check-handle draft syntax in gdu \", May 2021 Mateusz Czapli\u0144ski, \" Converting a fragment of real code with error handling to Go 2 'design draft' \", August 2018 Blake Mizerany, \u201c How best to account for partial writes when using check/handle? \u201d, August 2018 Against Critiques without counter-proposals Pasha Osipyants, \u201c Error handling mechanism using current go possibilities \u201d, February 2019 Anonymous, \u201c Go 2 Error Handling Non-Proposal \u201d, October 2018 Stripe developers, \u201c Feedback on Go 2 draft designs \u201d, October 2018 Tokyo Gophers, \" Against comments from Go 2 feedback event \", Oct 2018 Liam Breck, \u201c Golang, How dare you handle my checks! \u201d, September 2018 Nate Finch, \" Handle and Check, Let's Not \", September 2018 Jozef Slezak, \" Use semicolons instead of new keywords: check+handle \", September 2018 Shannon Wynter \" Error Handling as it can already be done \", August 2018 Recurring themes Concepts that appear repeatedly among the suggestions below. Invoke handler via assignment, e.g. v, ? := f() references: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 Invoke one of several handlers by name, e.g. v := check f() ? name references: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 Modest revisions Leidong Liu, \" a, b, !checkError := Sub(\u2026) \", Nov 2019 Jin Feng, \"[A simplified Go 2 error handling solution with no handler], ( https://gist.github.com/jfeng45/416d4ecb42a4df50bebf86ce1c41c668 )\", July 2019 Dave Arnold, \" Move special check keyword to left-hand side of assignment \", April 2019 Rockmen, \" Add handle and ? as syntax sugar maybe \", December 2018 Steve Manuel, \" Go 2 handle statement to optionally use a type switch \", October 2018 Zlatko Bratkovic, \" In support with tiny change \", October 2018 DeedleFake, \" Possible Solution to check Awkwardness with Chained Method Calls \", September 2018 Yesuu Zhang, \" Pass the check and handle parameters, custom handle \", September 2018 Viktor Kojouharov, \" Reducing the special casing around the new error design draft \", September 2018 Aleksei Pavliukov, \u201c Use a function as a handle parameter \u201d, September 2018 Savino Pio Liguori, \" Feedback for Go2 error handling design \", August 2018 Jeffrey Koehler, \" In support of Handle Chaining; On Check \", August 2018 Garrus, \" Another style of syntactic sugar on error handling \", August 2018 Paul Borman, \" Arguments against the Go 2 error handling proposal \", August 2018 krhubert, \" Error default handler for tests \", May 2019 Franz, Implement error handling like an invariant check of a variable. when the value changes, a function is called. this can then be used in other situations too. Brandon Heenan, \" Concise, with more obvious control flow \", May 2021 Remove handler chaining Markus Heukelom, \" proposal: Improve error handing using guard and must keywords \", April 2019 Alessandro Arzilli, \u201c Against check as an operator and handler chains \u201d, August 2018 Simon Howard, \u201c Go 2 errors response: One Handler Per Function \u201d, August 2018 Eli Bendersky, \" Thoughts on the Go 2 Error Handling proposal \", September 2018 Yoshiki Shibukawa, \" Every handles should have return statement \", September 2018 Counter-proposals Error handling with normal functions Azamat Kalberdiev, \u201c Handling every error with intuitive code \u201d, March 2021 Andrew Phillips, \u201c Use closures rather than handlers \u201d, October 2018 Taihei Morikuni, \" Use functions as an error handler, Add syntactic sugar to remove duplicated if statement \", September 2018 Scott Pakin, \" Go 2 error handling based on non-local returns \", September 2018 Greg Weber \" Error handling with functions and an error return? \", September 2018. Originally linked gist . Gigi Sayfan, \u201c Go 2 error handling feedback + alternative solution \", September 2018 Ruan Kunliang, \" Simple Error Handling for Go 2 \", August 2018 Martin Rode, \" The return of the return, Error Handling for Go 2 \", November 2018 Labeled error handlers Danijel Premus, \" Use existing go labels \", December 2018 Burak Serdar, \" Handler for err declares both err and errHandler, less intrusive labeled error handling \", October 2018 John Forstmeier, \" Labeled error handling \", September 2018 Mika\u00ebl Cluseau, \" Multiple handlers, unambiguous on which return value is used \", September 2018 Kiura Magomadov, \u201c Addition to Go2 draft error handling \", September 2018 Liam Breck, \u201c The #id/catch Error Model \u201d, September 2018 Marlon Che, \" How about separating check and handle? \", August 2018 Inlining Patrick Kelly, \" handling more than just errors in go \", August 2018 Vlad Didenko, \u201c Error Handling with grab | name() \u201d, November 2017 Gooid, \u201c Inline style error handle(simple unambiguous) \u201d, August 2018 Use defer Victoria Raymond, \u201c Force 'check' to return error instead of allowing customized logic \u201d, August 2018 Night-walker and daokoder, \" Extend and repurpose defer instead of introducing new syntax \", June 2014 try/catch/finally syntax Mathieu Devos, \" Go2 Error Handling Proposal: Scoped Check/Handle \", August 2018 Rust RFC, \u201c Trait-Based Exception Handling (wherein catch is akin to try ) \u201d, February 2016 ZhiFeng Hu, \" [Go2ErrorHandling] Go should support Exception handler \", August 2018 Jan Semmelink, \u201c if-else-undo-done \u201d, August 2018 Vladimir Utoplov, \" Handling throws/throw idiom \", September 2018 Gokan EKINCI, \" try-with-resources \", December 2018 Other possibilities Alex Hornbake, \" refuse. conditional return keyword \", June 2019 yaxinlx, \" Use ? as suffix to remove the last error value from multi-value tuples \", March 2019 Plamen Stoev, \" Go 2 block-level checks \", November 2018 Peter Goetz, \" Formalize and Enforce Error Handling \", September 2017 Fedir RYKHTIK, \" Go 2 error handling with exclamation mark \", September 2018 Einthusan Vigneswaran, \u201c Error Aware Keywords - return, defer, if, != and forcing the error object to be the last argument \u201d, September 2018 Andrew Phillips, \u201c Improving Go Error Handling \u201d, October 2017 Uncategorized Please help categorize the rest of the proposals here. Andrew Gwozdziewycz, \" Check for Go Errors \", June 2019 DeedleFake, \" Feedback for Go 2 Design Drafts \", August 2018 Loki Verloren, \u201c Go 2 error handling feedback and my thoughts on how to improve programmer's efficiency and experience \u201d, September 2018 Gima, \" Procedural code, separate error handling \", June 2018 Konstantin, \" error handling for error-tree \", Discyssion May 2019 Adding your feedback Please format all entries as below. Your Name , \u201c Title \u201d, month year To make it easier to see new feedback, please add your new proposal to the top of the section it is placed in.","title":"Go2ErrorHandlingFeedback"},{"location":"Go2ErrorHandlingFeedback/#feedback-re-go-2-error-handling-draft-design","text":"This page is meant to collect and organize feedback and discussion started with the Go 2 error handling draft design . Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. Please help categorize the rest of the uncategorized proposals at the bottom. Update, June 19, 2019 \u2013 Based on this feedback we have posted a proposal for a try builtin , which produced significant feedback on #32437 ( threaded view here ). We've disabled comments on that issue until July 1 to give people time to experiment in their own code. We would very much like to see experience reports about using the general try approach in your own code, including trial conversions with tryhard . Thanks!","title":"Feedback re Go 2 Error Handling Draft Design"},{"location":"Go2ErrorHandlingFeedback/#experience-with-the-try-proposal","text":"Add to this list: TEMPLATE: Your Name, \u201c Title \u201d, Month YYYY","title":"Experience with the \u201ctry proposal\u201d"},{"location":"Go2ErrorHandlingFeedback/#requirements","text":"Discussions of the requirements for a new error handling method. Warren Stephens, \" Go 2 handle should provide line number, source filename, version \", December 2018 Liam Breck, \u201c Requirements to Consider for Go 2 Error Handling \u201d, September 2018 jimmyfrasche, \" Don't special case error or nil \", September 2018 Matt Dee \" Error Handling Should Support Custom Error Types \", August 2018 Ian Lance Taylor, \u201c Incomplete list of criteria \u201d from GitHub proposal discussion, May 2018 Rob Pike (posted by @matjam ) \u201c Simplicity is Complicated \u201d, December 2015","title":"Requirements"},{"location":"Go2ErrorHandlingFeedback/#in-support","text":"This includes supporting the existing chaining/stacking of handlers without changes. Tokyo Gophers, \" In support comments from Go 2 feedback event \", October 2018 Adam Bouhenguel \" In support of more declarative error handling \", August 2018 Daniel Theophanes, \" Go 2 Design: Error Handling Net Win \", August 2018","title":"In support"},{"location":"Go2ErrorHandlingFeedback/#example-code","text":"Code changed to use the existing proposal. Daniel Milde, \" Use check-handle draft syntax in gdu \", May 2021 Mateusz Czapli\u0144ski, \" Converting a fragment of real code with error handling to Go 2 'design draft' \", August 2018 Blake Mizerany, \u201c How best to account for partial writes when using check/handle? \u201d, August 2018","title":"Example code"},{"location":"Go2ErrorHandlingFeedback/#against","text":"Critiques without counter-proposals Pasha Osipyants, \u201c Error handling mechanism using current go possibilities \u201d, February 2019 Anonymous, \u201c Go 2 Error Handling Non-Proposal \u201d, October 2018 Stripe developers, \u201c Feedback on Go 2 draft designs \u201d, October 2018 Tokyo Gophers, \" Against comments from Go 2 feedback event \", Oct 2018 Liam Breck, \u201c Golang, How dare you handle my checks! \u201d, September 2018 Nate Finch, \" Handle and Check, Let's Not \", September 2018 Jozef Slezak, \" Use semicolons instead of new keywords: check+handle \", September 2018 Shannon Wynter \" Error Handling as it can already be done \", August 2018","title":"Against"},{"location":"Go2ErrorHandlingFeedback/#recurring-themes","text":"Concepts that appear repeatedly among the suggestions below. Invoke handler via assignment, e.g. v, ? := f() references: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 Invoke one of several handlers by name, e.g. v := check f() ? name references: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17","title":"Recurring themes"},{"location":"Go2ErrorHandlingFeedback/#modest-revisions","text":"Leidong Liu, \" a, b, !checkError := Sub(\u2026) \", Nov 2019 Jin Feng, \"[A simplified Go 2 error handling solution with no handler], ( https://gist.github.com/jfeng45/416d4ecb42a4df50bebf86ce1c41c668 )\", July 2019 Dave Arnold, \" Move special check keyword to left-hand side of assignment \", April 2019 Rockmen, \" Add handle and ? as syntax sugar maybe \", December 2018 Steve Manuel, \" Go 2 handle statement to optionally use a type switch \", October 2018 Zlatko Bratkovic, \" In support with tiny change \", October 2018 DeedleFake, \" Possible Solution to check Awkwardness with Chained Method Calls \", September 2018 Yesuu Zhang, \" Pass the check and handle parameters, custom handle \", September 2018 Viktor Kojouharov, \" Reducing the special casing around the new error design draft \", September 2018 Aleksei Pavliukov, \u201c Use a function as a handle parameter \u201d, September 2018 Savino Pio Liguori, \" Feedback for Go2 error handling design \", August 2018 Jeffrey Koehler, \" In support of Handle Chaining; On Check \", August 2018 Garrus, \" Another style of syntactic sugar on error handling \", August 2018 Paul Borman, \" Arguments against the Go 2 error handling proposal \", August 2018 krhubert, \" Error default handler for tests \", May 2019 Franz, Implement error handling like an invariant check of a variable. when the value changes, a function is called. this can then be used in other situations too. Brandon Heenan, \" Concise, with more obvious control flow \", May 2021","title":"Modest revisions"},{"location":"Go2ErrorHandlingFeedback/#remove-handler-chaining","text":"Markus Heukelom, \" proposal: Improve error handing using guard and must keywords \", April 2019 Alessandro Arzilli, \u201c Against check as an operator and handler chains \u201d, August 2018 Simon Howard, \u201c Go 2 errors response: One Handler Per Function \u201d, August 2018 Eli Bendersky, \" Thoughts on the Go 2 Error Handling proposal \", September 2018 Yoshiki Shibukawa, \" Every handles should have return statement \", September 2018","title":"Remove handler chaining"},{"location":"Go2ErrorHandlingFeedback/#counter-proposals","text":"","title":"Counter-proposals"},{"location":"Go2ErrorHandlingFeedback/#error-handling-with-normal-functions","text":"Azamat Kalberdiev, \u201c Handling every error with intuitive code \u201d, March 2021 Andrew Phillips, \u201c Use closures rather than handlers \u201d, October 2018 Taihei Morikuni, \" Use functions as an error handler, Add syntactic sugar to remove duplicated if statement \", September 2018 Scott Pakin, \" Go 2 error handling based on non-local returns \", September 2018 Greg Weber \" Error handling with functions and an error return? \", September 2018. Originally linked gist . Gigi Sayfan, \u201c Go 2 error handling feedback + alternative solution \", September 2018 Ruan Kunliang, \" Simple Error Handling for Go 2 \", August 2018 Martin Rode, \" The return of the return, Error Handling for Go 2 \", November 2018","title":"Error handling with normal functions"},{"location":"Go2ErrorHandlingFeedback/#labeled-error-handlers","text":"Danijel Premus, \" Use existing go labels \", December 2018 Burak Serdar, \" Handler for err declares both err and errHandler, less intrusive labeled error handling \", October 2018 John Forstmeier, \" Labeled error handling \", September 2018 Mika\u00ebl Cluseau, \" Multiple handlers, unambiguous on which return value is used \", September 2018 Kiura Magomadov, \u201c Addition to Go2 draft error handling \", September 2018 Liam Breck, \u201c The #id/catch Error Model \u201d, September 2018 Marlon Che, \" How about separating check and handle? \", August 2018","title":"Labeled error handlers"},{"location":"Go2ErrorHandlingFeedback/#inlining","text":"Patrick Kelly, \" handling more than just errors in go \", August 2018 Vlad Didenko, \u201c Error Handling with grab | name() \u201d, November 2017 Gooid, \u201c Inline style error handle(simple unambiguous) \u201d, August 2018","title":"Inlining"},{"location":"Go2ErrorHandlingFeedback/#use-defer","text":"Victoria Raymond, \u201c Force 'check' to return error instead of allowing customized logic \u201d, August 2018 Night-walker and daokoder, \" Extend and repurpose defer instead of introducing new syntax \", June 2014","title":"Use defer"},{"location":"Go2ErrorHandlingFeedback/#trycatchfinally-syntax","text":"Mathieu Devos, \" Go2 Error Handling Proposal: Scoped Check/Handle \", August 2018 Rust RFC, \u201c Trait-Based Exception Handling (wherein catch is akin to try ) \u201d, February 2016 ZhiFeng Hu, \" [Go2ErrorHandling] Go should support Exception handler \", August 2018 Jan Semmelink, \u201c if-else-undo-done \u201d, August 2018 Vladimir Utoplov, \" Handling throws/throw idiom \", September 2018 Gokan EKINCI, \" try-with-resources \", December 2018","title":"try/catch/finally syntax"},{"location":"Go2ErrorHandlingFeedback/#other-possibilities","text":"Alex Hornbake, \" refuse. conditional return keyword \", June 2019 yaxinlx, \" Use ? as suffix to remove the last error value from multi-value tuples \", March 2019 Plamen Stoev, \" Go 2 block-level checks \", November 2018 Peter Goetz, \" Formalize and Enforce Error Handling \", September 2017 Fedir RYKHTIK, \" Go 2 error handling with exclamation mark \", September 2018 Einthusan Vigneswaran, \u201c Error Aware Keywords - return, defer, if, != and forcing the error object to be the last argument \u201d, September 2018 Andrew Phillips, \u201c Improving Go Error Handling \u201d, October 2017","title":"Other possibilities"},{"location":"Go2ErrorHandlingFeedback/#uncategorized","text":"Please help categorize the rest of the proposals here. Andrew Gwozdziewycz, \" Check for Go Errors \", June 2019 DeedleFake, \" Feedback for Go 2 Design Drafts \", August 2018 Loki Verloren, \u201c Go 2 error handling feedback and my thoughts on how to improve programmer's efficiency and experience \u201d, September 2018 Gima, \" Procedural code, separate error handling \", June 2018 Konstantin, \" error handling for error-tree \", Discyssion May 2019","title":"Uncategorized"},{"location":"Go2ErrorHandlingFeedback/#adding-your-feedback","text":"Please format all entries as below. Your Name , \u201c Title \u201d, month year To make it easier to see new feedback, please add your new proposal to the top of the section it is placed in.","title":"Adding your feedback"},{"location":"Go2ErrorValuesFeedback/","text":"Go 2 Error Values Feedback This page is meant to collect and organize feedback about the Go 2 error values draft designs . Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. As the amount of feedback grows, please feel free to organize this page by specific kind of feedback. Further Background Ben Johnson, \" Failure is Your Domain \", June 2018 Draft Implementation Go Team, \u201c x/exp/errors \u201d, November 2018 Torben Schinke, \u201c Implementation of the draft design \u201d, December 2018 Error Inspection Ilya Sinelnikov, \" Is and As differ in behavior which is unexpected \", December 2018 Roger Peppe, \" Some thoughts about the draft Go error inspection design \", November 2018 Greg Weber, \u201c Horizontal composition: Error inspection for groups \u201d, September 2018 Eyal Posener, \" Reply \", September 2018 K. Alex mills, \" Rename Wrapper to Unwrapper \", September 2018 jimmy frasche, \" Why limit this inspection to errors? \", August 2018 Dan Kortschak, Carrying contract expectations and values causing errors in ev3go , August 2018 Daniel Theophanes, \" Go 2 Design: Error Inspection with Error Lists , August 2018 Cosmos Nicolaou \" Inspection of errors in a different address space \", September 2018 Chris Siebenmann, \" Error inspection improves current annoyances but may not go far enough \", September 2018 Paul Meyer, \u201c[errors.New?]( - Your Name , \u201c Title \u201d, August 2018 Vojtech Vitek \" adopt Cause and Wrap from github.com/pkg/errors \", May 2018 Andrew Wilkins \" Programmatic Frame inspection \", January 2019 Carl Johnson , \" As() and Is() are useful for optional interfaces beyond error , Feb. 2019 ques0942, \" xerrors has less feature about trace's detail \", Mar. 2019 Your Name , \u201c Title \u201d, month year etc. Error Printing Calle Pettersson, Multi-line errors and log collection tools \u201d, August 2018 jimmy frasche, \" Why limit these interfaces to errors? \" , August 2018 Chris Hines, \u201c Types cannot implement both the errors.Formatter and fmt.Formatter interfaces \u201d, August 2018 Dean Bassett, \u201c Make errors.Detailer, not errors.Formatter \u201d, September 2018 Bryan C. Mills, \u201c Error Wrapping and Redundancy in Go \u201d, September 2019 Your Name , \u201c Title \u201d, month year etc. Misc TJ Holowaychuk, Structured access for structured logging , April, 2019 Andrew Chambers, My current error approach , August, 2018 mikioh, A walkthrough on Error Values for issue 18183 , October, 2018 Against Any Change At All Rob Pike - Simplicity is Complicated , December 2015","title":"Go2ErrorValuesFeedback"},{"location":"Go2ErrorValuesFeedback/#go-2-error-values-feedback","text":"This page is meant to collect and organize feedback about the Go 2 error values draft designs . Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. As the amount of feedback grows, please feel free to organize this page by specific kind of feedback.","title":"Go 2 Error Values Feedback"},{"location":"Go2ErrorValuesFeedback/#further-background","text":"Ben Johnson, \" Failure is Your Domain \", June 2018","title":"Further Background"},{"location":"Go2ErrorValuesFeedback/#draft-implementation","text":"Go Team, \u201c x/exp/errors \u201d, November 2018 Torben Schinke, \u201c Implementation of the draft design \u201d, December 2018","title":"Draft Implementation"},{"location":"Go2ErrorValuesFeedback/#error-inspection","text":"Ilya Sinelnikov, \" Is and As differ in behavior which is unexpected \", December 2018 Roger Peppe, \" Some thoughts about the draft Go error inspection design \", November 2018 Greg Weber, \u201c Horizontal composition: Error inspection for groups \u201d, September 2018 Eyal Posener, \" Reply \", September 2018 K. Alex mills, \" Rename Wrapper to Unwrapper \", September 2018 jimmy frasche, \" Why limit this inspection to errors? \", August 2018 Dan Kortschak, Carrying contract expectations and values causing errors in ev3go , August 2018 Daniel Theophanes, \" Go 2 Design: Error Inspection with Error Lists , August 2018 Cosmos Nicolaou \" Inspection of errors in a different address space \", September 2018 Chris Siebenmann, \" Error inspection improves current annoyances but may not go far enough \", September 2018 Paul Meyer, \u201c[errors.New?]( - Your Name , \u201c Title \u201d, August 2018 Vojtech Vitek \" adopt Cause and Wrap from github.com/pkg/errors \", May 2018 Andrew Wilkins \" Programmatic Frame inspection \", January 2019 Carl Johnson , \" As() and Is() are useful for optional interfaces beyond error , Feb. 2019 ques0942, \" xerrors has less feature about trace's detail \", Mar. 2019 Your Name , \u201c Title \u201d, month year etc.","title":"Error Inspection"},{"location":"Go2ErrorValuesFeedback/#error-printing","text":"Calle Pettersson, Multi-line errors and log collection tools \u201d, August 2018 jimmy frasche, \" Why limit these interfaces to errors? \" , August 2018 Chris Hines, \u201c Types cannot implement both the errors.Formatter and fmt.Formatter interfaces \u201d, August 2018 Dean Bassett, \u201c Make errors.Detailer, not errors.Formatter \u201d, September 2018 Bryan C. Mills, \u201c Error Wrapping and Redundancy in Go \u201d, September 2019 Your Name , \u201c Title \u201d, month year etc.","title":"Error Printing"},{"location":"Go2ErrorValuesFeedback/#misc","text":"TJ Holowaychuk, Structured access for structured logging , April, 2019 Andrew Chambers, My current error approach , August, 2018 mikioh, A walkthrough on Error Values for issue 18183 , October, 2018","title":"Misc"},{"location":"Go2ErrorValuesFeedback/#against-any-change-at-all","text":"Rob Pike - Simplicity is Complicated , December 2015","title":"Against Any Change At All"},{"location":"Go2GenericsFeedback/","text":"Go 2 Generics Feedback This page is meant to collect and organize feedback about the Go 2 contracts (generics) draft design . A prototype implementation of the syntax can be found in https://golang.org/cl/149638 which may be patched on tip of the Go repo. Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. As the amount of feedback grows, please feel free to organize or reorganize this page by specific kind of feedback. Supporting Roger Peppe, \" Go contracts use case: generic mgo \", September 2018 Richard Fliam, \" Go2 Generics Let You Construct the Natural Numbers \", August 2018 Roger Peppe, \"Go generics at runtime\", Part 1 , Part 2 , September 2018 Supplemental (supporting with modifications) Matt McCullough, \" Towards Clarity: Syntax Changes for Contracts in Go \" and \" Angle Brace Delimiters for Go Contracts \", May 2020 Gert Cuykens, \" Complete separation of generic syntax form regular Go code \", Januari 2020 Court Fowler, \" Thoughts from a lazy programmer on the updated design \", September 2019 Andrew Phillips, \" Example Types as Contracts \", August 2019 Alexey Nezhdanov, \" A syntax simplification proposal \", August 2019 Bryan Ford, \" Are Only Type Parameters Generic Enough for Go 2 Generics? \", July 2019 Tom Levy, \" Go 2 Generics Feedback \", June 2019 Ole Bulbuk, \" Why Go Contracts Are A Bad Idea In The Light Of A Changing Go Community \", April 2019 Tony Mottaz, \" Go generic types and import injection \", March 2019 Gustavo Bittencourt, \" Contracts only for Generic Types \", March 2019 David Heuschmann, \" Problems With Using Parantheses for Type Argument Lists \", February 2019 Gustavo Bittencourt, \" Contract with methods \", February 2019 Chris Siebenmann, \" Go 2 Generics: Contracts are too clever \", November 2018 Chris Siebenmann, \" Go 2 Generics: A way to make contracts more readable for people \", November 2018 Chris Siebenmann, \" Go 2 Generics: Interfaces are not the right model for type constraints \", November 2018 alanfo, \" Proposed changes to the Go draft generics design in the light of feedback received \", October 2018 Andy Balholm \" Enumerated and structural contracts \", October 2018 Burak Serdar \" Types are contracts \", October 2018 Patrick Smith, \" Go generics for built-in and user-defined type parameters \", September 2018 Jacob Carlborg, \" Go 2 draft D corrections \", September 2018 alanfo, \" A simplified generics constraint system \", September 2018 Paul Borman, \" Simplifying syntax \", September 2018 mrwhythat, \" Go 2 generics draft notes \", September 2018 Roger Peppe, \" Operator overloading \", September 2018 Peter McKenzie, \" Alternative generics syntax \", September 2018 Ted Singer, \" The design goal for syntax is to help humans read \", September 2018 alanfo, \" Suggested amendment to Go 2 generics draft design \", September 2018 Dean Bassett, \" If we're going to use contracts, allow unary + on string , September 2018\" Kevin Gillette, \" Regarding the Go 2 Generics Draft \", September 2018 jimmy frasche, \" Embedding of type parameters should not be allowed \", August 2018 Javier Zunzunegui, \" Compiling Generics \", August 2018 Liam Breck, \u201c Please Don't Mangle the Function Signature \u201d, August 2018 DeedleFake, \" Feedback for Go 2 Design Drafts \", August 2018 Roberto (empijei) Clapis, \" Hard to read syntax \", August 2018 Dominik Honnef, \" My thoughts on the Go Generics Draft \", August 2018 Counterproposals dotaheor, \" Declare generics as mini-packages with generic parameters \", August 2020 Beoran, \" Hygienic Macros \", June 2019 Randy O'Reilly, \" Generic Native Types \", June 2019 Michal \u0160trba, \" Giving up restricting types \", May 2019 Eric Miller, \" Simple generics using const struct fields \", March 2019 dotaheor, \" A solution to unify Go builtin and custom generics \", February 2019 Quentin Quaadgras, No syntax changes, 1 new type, 1 new builtin , December 2018 Andy Balholm, \" Contracts and Adaptors \", November 2018 Dean Bassett, \" Contract embedding \", October 2018 Patrick Smith, \" Go Generics with Adaptors \", October 2018 Ian Denhardt, \" Go Generics: A Concrete Proposal Re: Using Interfaces Instead Of Contracts. \", October 2018 Arendtio \" Generics in Go inspired by Interfaces \", September 2018 Scott Cotton, \" Draft Proposal Modification for Unifying Contracts and Interfaces \" ( diff ), September 2018 ohir, \" CGG, Craftsman Go Generics \", September 2018 Dean Bassett, \" Using interfaces instead of contracts \", September 2018 I have made a second proposal (\"contract embedding\") listed further down that solves the issues with this one dotaheor, \" Combine contract and code together and view generic as compile-time calls with multiple outputs \", September 2018. (Updated from time to time) Aleksei Pavliukov, \" Extend type and func keywords \", September 2018 Han Tuo, \" Generic as a kind of types \u2013 type T generic {int, float64} \", September 2018 Nate Finch, \" Go2 Contracts Go Too Far \", September 2018 Roger Peppe, \" Go Contracts as type structs \", September 2018 Axel Wagner, \" Scrapping contracts \", September 2018 Matt Sherman \" Generics as built-in typeclasses \", September 2018 Roger Peppe, \" Revised generics proposal \", September 2018 Steven Blenkinsop, \u201c Response to the Go2 Contracts Draft Design \u2013 Auxiliary Types \u201d, September 2018 Dave Cheney, \" Maybe adding generics to Go IS about syntax after all \", September 2018 Christian Surlykke, \" Constraints for Go Generics , September 2018\" Some Gophers on go-nuts, \u201c Unifying Interfaces and Contracts \u201d, August 2018 Roger Peppe, \" Go generics feedback , August 2018 Ruan Kunliang, \" Package level generics \", August 2018 Emily Maier, \" Getting specific about generics \", August 2018 Against Tokyo Gophers, \" Comments from Go 2 draft design feedback event \", October 2018 Jason Moiron, \" Notes on the Go2 Generics Draft \", September 2018 Yoshiki Shibukawa, \" Feedback for generics/contract proposals , September 2018\" Adding Your Feedback Please format all entries as below. Your Name , \u201c Title \u201d, month year To make it easier to see new feedback. Please make a Gist . And also help to keep the list sorted in reverse-chronological order by including your new entry at the top of the category list. Quick comments Chester Gould : The only problem with this proposal is that explicit contracts seem to only make the code more verbose which is against the goal of simple readable code. Instead of writing explicit contracts, using the actual code we write as a kind of \"implicit contract\" would be much more simple and elegant. An example of this is shown here . I acknowledge that this is addressed here , but I disagree that explicit contracts are the solution to problem. It seems to me that contracts are very close to what interfaces provide and so the behaviour of interfaces should be extended to allow behaviour closer to contracts rather than adding an entire new type of statement to the language. Izaak Weiss : A lot of the discussion has focused specifically on how to implement contracts, or something like that. However, most of the \"useful examples\" don't require contracts; they only require parametric polymorphism. Writing a typesafe Merge or SortSlice is possible without contracts. And for the simpler contracts, we can implement them via higher order functions. A generic hashmap can be parametric over a type with a Hash method, or it can take a func(K) int64 when it is constructed, and use that to hash its keys. If more functions are required, structs holding these functions can be declared as pseudo-contracts, and then those can be passed to the generic function. This makes Go's polymorphism simple, explicit, and leaves room for further innovation regarding contracts or other mechanisms in the future, while allowing most of the benefits of generic types to be realized right now. Christoph Hack : I just watched Alexandrescu's last talk The next big Thing . He states \"Concepts are a waste of time\" and proposes a completely different, far more powerful, direction (even in comparison to everything possible in C++ today). Go already has most required features, like reflection and testing if a type implements an optional interface. The only thing missing is code generation. For example, json.Marshal works fine by using reflection, but if it could also (optionally) generate code by implementing a Go function that gets called by the compiler automatically and runs regular Go code, we would have everything. It might sound crazy at first and toy examples might look verbose, but I think Alexandrescu has a point there. Just think about gqlgen vs. the other reflection based graphql-libs for example. Please watch his talk! Bodie Solomon : I find the generics design a bit confusing and opaque. Please consider integrating some concepts from Zig's beautiful comptime functions ! The design of Go 2 generics is clever, but I feel it goes against Go's traditional tight coupling between simple runtime semantics and simple syntax. Additionally, one of the biggest problems of Go, which prevents it from being a viable competitor everywhere I might like to use it, is that I cannot be rid of the GC and runtime. It was my strong hope that Go 2 would introduce compile-time-only generics such that I could reliably avoid the use of dynamic interfaces where I don't want them, without relying on codegen. Unfortunately it looks like that will be decided by the compiler without my input. Please, at least, consider giving users the ability to constrain generics to compile-time-only resolution, perhaps as a property of a Contract, rejecting compilation of dynamic types to satisfy the contract. Dag Sverre Seljebotn: C++ has a huge problem with people abusing metaprogramming (\"generics\") to do compile-time metaprogramming. I really wished Go had gone down the path of Julia, which offers hygienic macros. Even if it is kept strictly at a compile-time barrier and no run-time code generation, this would at least avoid all the bad tendencies we see in the C++ world that comes from their templating system. Things you can do with generics you can usually pull off with macros too (e.g., SortSliceOfInts = MakeSliceSorterFunctionMacro!(int) could generate a new function to sort a slice of integers). Link: https://docs.julialang.org/en/v0.6.1/manual/metaprogramming/ Maxwell Corbin: The issues raised in the Discussion and Open Questions section all could be avoided by defining generics at the package rather than the function or type level. The reason for this is simple: types can reference themselves, but packages can't import themselves, and while there are many ways to algorithmically generate more type signatures, you cannot do the same with import statements. A quick example of such syntax might be: \\\\ list package list [ T ] type T interface {} type List struct { Val T Next * List } // main package main import ( il \"list\" [ int ] sl \"list\" [ string ] ) var iList = il . List { 3 } var sList = sl . List { \"hello\" } // etc... The syntax in the example is probably needlessly verbose, but the point is that none of the unfortunate code examples from the blog post are even legal constructions. Package level generics avoids the most abusive problems of meta-programming while retaining the bulk of its usefulness. Andrew Gwozdziewycz: The use of the word contract gives me pause due to it overloading \"contract\" as in Design by Contract . While the generics use case has some similarities with the \"contracts\" in DbC if you squint a bit, the concepts are quite different. Since \"contracts\" are an established concept in Computer Science, I think it would be far less confusing to use a different name like behavior or trait . The design document also suggests reasons why using interface is not ideal, though, Go's contract mechanism seems too obvious an extension of interfaces to disregard so quickly\u2026 If it can be done interface setter(x T) { x.Set(string) error } and interface addable(x T, y U) { x + y } seem quite natural to read and understand. Russell Johnston: Agreed that it would be great to merge contracts and interfaces. Another way around the operator-naming problem might be to provide some standard interfaces for the operators, with bodies inexpressible in normal Go code. For example, a standard Multipliable interface would allow the * and *= operators, while a standard Comparable interface would allow == , != , < , <= , >= , and > . To express operators with multiple types, these interfaces would presumably need type parameters themselves, for example: type Multipliable(s Self /* this exists implicitly on all interfaces */, t Other) interface { /* provided by the language */ } . Then user-written interfaces/contracts could use these standard identifier-based names, neatly sidestepping the issues mentioned in the design document around syntax and types. Roberto (empijei) Clapis: I agree on this and on the fact that it should be clearer where to use interfaces and where to use contracts. Unifying the two would be great, as they try to address overlapping issues. Kurnia D Win: I think constraint is better keyword than contract . Personally i like type addable constraint(x T, y U) { x + y } instead of merging with interface. Hajime Hoshi: I feel like the supposed proposal is too huge to the problems we want to solve listed at https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md . I'm worried this feature would be abused and degrade readability of code. Sorry if I am missing, but the proposal doesn't say anything about go generate . Wouldn't go generate be enough to the problems? Stephen Rowles: I find the method syntax hard to parse, as a human reading it, it might be clearer to use a different type of enclosing brackets for the type section, e.g. : Me too \ud83d\udc4d +1. Yet another \ud83d\udc4d +1(Pasha Osipyants). func Sum<type T Addable>(x []T) T { var total T for _, v := range x { total += v } return total } yesuu: In this example, think of T as the parameter name and type as the parameter type. Obviously it is more reasonable to put the type behind, and contract is followed by type , like chan int . func Sum ( T type Addable )( x [] T ) T Roberto Clapis: Please read this section Seems like a bit of a cop-out tbh. It says \"in general\" which means there must already be exceptions. Go has a nice clear syntax making code simple to read and easy for teams to collaborate. I think it would be worth making the parser more complicated for the sake of making the code readability better. For large scale and long running project readability of the code, and hence maintainability, is king What about this Seebs: Feedback a bit long to inline , August 2018. Summary basically \"I would like a way to specify one contract for each of two types rather than one contract for both types\", and \"I would prefer map[T1]T2 to t1var == t1var as a canonical form of \"T1 must be an allowable map key\". Seebs: What if contracts were just the type-parametric functions? . (Sep 1, 2018) Sean Quinlan: I find the contract syntax quite confusing. For something that is supposed to defined exactly what is needed and will be part of the documentation of an api, it can contain all sorts of cruft that does not impact the contract. Moreover, to quote from the design: \"We don\u2019t need to explain the meaning of every statement that can appear in a contract body\". That seems like the opposite of what I would want from a contract. The fact one can copy the body of a function into a contract and have it work seems like a bug to me, not a feature. Personally, I would much prefer a model that unifies interfaces and contracts. Interfaces feel much closer to what I would like a contract to look like and there is a lot of overlap. It seems probable that many contracts will also be interfaces? Nodir Turakulov: Please elaborate Packages like container/list and container/ring, and types like sync.Map, will be updated to be compile-time type-safe. and The math package will be extended to provide a set of simple standard algorithms for all numeric types, such as the ever popular Min and Max functions. or ideally add a section about transition/migration of existing types/funcs to use type polymorphism. FWIU adding type parameter(s) to an existing type/func most likely breaks an existing program that uses the type/func. How exactly will math.Max be changed? Is the intention to make backward-incompatible changes and write tools to automatically convert code to Go2? What is the general recommendation for authors of other libraries that provide funcs and types that currently operate with interface{} ? Were default values for type parameters considered? e.g. type parameter for math.Max would default to float64 and type parameter for \"container/list\".List would default to interface{} Ward Harold: If only for the sake of completeness the Modula-3 generics design should be incorporated into the Designs in Other Languages section. Modula-3 was a beautiful language that sadly got introduced at the wrong time. Matt Holiday: Ditto mentioning the Alphard language, which was developed about the same time as CLU and also influenced the Ada design. See Alphard: Form and Content, Mary Shaw, ed., Springer 1991 for the various papers collected with some glue material. Alphard & Ada were my introductions to generic programming. Could Go beat C++ for finally delivering contracts after 40 years of waiting? Ole Begemann: You write on the Generics Overview page : \"Swift added generics in Swift 4, released in 2017.\" This is not true. Swift has had generics since its first public release in 2014. Evidence (just one example of many): a transcript of an Apple developer talk on Swift from WWDC 2014 that talks at length about Swift's generics features. This is also incorrect: \" Equatable appears to be a built-in in Swift, not possible to define otherwise.\" The Equatable protocol is defined in the Swift standard library, but there's nothing special about it. It's totally possible to define the same thing in \"normal\" code. Kevin Gillette: correction for \"Contracts\" Draft, as of 30 August 2018 The one instance of check.Convert(int, interface{})(0, 0) should instead be check.Convert(int, interface{})(0) or provide an explanation as to why it the function should take two zeros instead of one. Adam Ierymenko : I have an idea for doing limited operator overloading in Go that might make this proposal more useful for numeric code. It's big so I stuck it in a Gist here . DeedleFake: I completely agree with the arguments against operator overloading, and I'm quite glad overall that Go doesn't have it, but I also think that the inability to resolve the difference between a == b and a.Equals(b) via a contract is the biggest problem with the draft design as it currently stands. It means that you'd still wind up writing multiple functions for a fair number of things. Try writing a binary tree, for example. Should you use a contract with t < t or t.Less(t) ? For a sum function, should you use t + t or t.Plus(t) ? I definitely want a solution that doesn't involve operator overloading, though. Maybe there could be a way to specify an adapter that basically says if a type T, which satisfies contract A but not B, is used for a parameter constrained by contract B, apply this to it in order to get it to satisfy contract B . Contract B could require a Plus() method, for example, while contract A requires the use of + , so the adapter automatically attaches a user-specified Plus() method to T for the duration of its use under that contract. Something that might work with this proposal is an equal(a, b) builtin that uses a.Equals(b) if it exists and a == b otherwise, failing to compile if the type is incomparable (and likewise for other operators). It's too weird to seriously consider but it would work with contracts and allow dodging the asymmetry between types that have operators and those that cannot without introducing operator overloading \u2014jimmyfrasche Another idea would be explicitly overloadable operators: a + b is not overloadable, but a [+] b can be overloaded. It will use normal + for primitive types, but will use Operator+() etc. for objects if those are present. I really do think that generics without some sane form of operator overloading or something like it are a lot less useful to the point that you might as well not even do it. -Adam Ierymenko (original poster) Ian Denhardt: DeedleFake outlines the problems with not having operator overloading well I. I think proposals involving making the overloading \"loud\" are the wrong idea; instead, we should limit which operators can be overloaded to operators which satisfy these critera: The operator's semantics can be understood as a method call. Most of the operators on numbers pass this test; big.Add is still addition in the sense that we know it from int32, uint64 etc. Examples of operators that fail this test are && and || ; these are short circuting, which no function or method can replicate. They are fundamentally not methods, no matter how you look at them, and should not be overridable by methods. I think operator overloading gets a bad rap in part because C++ allows you to override everything , including crazy stuff like the comma operator . There should be clear use cases for overriding them. Again, arithmetic operators pass this test, along with < and friends. Pointer dereferencing passes the first test, but I'm having a hard time coming up with uses for \"other types of pointers\" that actually seem like a good idea. They are a bit more justifiable in C++, but garbage-collected pointers have basically got you covered. The normal meaning of the operator should be something that is easy to reason about. For example, pointers are a gnarly source of bugs, and having the possibility that *foo is doing something other than reading from a memory address makes an already difficult debugging session that much harder. On the other hand, the possibility that + may be a call to big.Add is relatively self-contained, and unlikely to cause great confusion. Finally, the standard library has to set a good example; methods overriding + should be conceptually addition, for example. C++ gets off on an utterly wrong foot here by defining what is morally os.Stdout.ShiftLeft(\"Hello, World!\") . Eltjon Metko: How about specifying the contract after the type identifier inside the function Parameters? This way it can be inferred what T is and we can eliminate the first group of parenthesis. func Sum(x []T:Addable) T { var total T for _, v := range x { total += v } return total } Tristan Colgate-McFarlane: After going back and forward for a while, I've come down in favour of the proposal largely as is. A limited syntax for contracts might be preferable, but I believe it should allow referencing specific fields (not just methods as some have proposed). If anything can be done to make compatible interface and contracts inter-use easier, that would also be nice (though I think maybe no additional specifications are needed. Lastly, I think it is worth considering deprecating interface types. Whilst drastic, contracts essentially also allow specifying behaviour. Any contract restrictions that limit that (such as refering to other types within the package), should probably be lifted. contracts appear to be a strict superset of interfaces, and I am generally against having two overlapping features. A tool to aide in writing interaces should also be considered. Patrick Smith: We might consider requiring the type keyword when defining methods on generic types. This makes the code a little more verbose, but clearer and more consistent (now type parameters are always preceded by the type keyword). func (x Foo(type T)) Bar() Patrick Smith: In this example, is Foo(T) embedded in Bar(T) , or does Bar(T) have a method named Foo ? type Foo(type T) interface {} type Bar(type T) interface { Foo(T) } Xingtao Zhao: There are too many round brackets in the proposal. In the proposal, it is said that \"[]\" is ambiguous in some cases. While if we use [type T, S contract], there are no ambiguities any more. Dave Cheney: The earlier Type Functions proposal showed that a type declaration can support a parameter. If this is correct, then the proposed contract declaration could be rewritten from contract stringer(x T) { var s string = x.String() } to type stringer(x T) contract { var s string = x.String() } This supports Roger\u2019s observation that a contract is a superset of an interface. type stringer(x T) contract { ... } introduces a new contract type in the same way type stringer interface { ... } introduces a new interface type. jimmyfrasche: A contract is not a type, though. You can't have a value that is a stringer . You can have a value of a type that is a stringer . It's a metatype. A type is a kind of predicate on values. You ask the compiler \"is this value a string \" and it answers yes (allowing compilation to continue) or no (stopping to tell you what went wrong). A contract is a predicate on a vector of types. You ask the compiler two questions. Do these types satisfy this contract? Then: do these values satisfy these types? Interfaces kind of blur these lines by storing a (type, value) pair, provided that the type has the appropriate methods. It's simultaneously a type and a metatype. Any generics system that does not use interfaces as the metatypes will unavoidably contain a superset of interfaces. While it is entirely possible to define a generics system that exclusively uses interfaces as the metatypes, that does mean losing the ability to write generic functions that use things that interfaces can't talk about, like operators. You have to limit the questions you can ask about the types to their method sets. (I'm fine with this). btj: Two very important entries are missing in the draft design document's Designs in Other Languages section: Haskell, with its typeclasses, and Scala, with its implicit arguments. iamgoroot: Wouldn't it be natural to make better type aliasing support and let user have generics as option? And you dont need much syntax for that type Key _ type Value _ type IntStringHolder Holder<Key:int, Value:string> type Holder struct { K Key V Value } func (h *Holder) Set(k Key, v Value) { h.K = k h.V = v } func main() { v:= IntStringHolder{} v.Set(7,\"Lucky\") } antoniomo: While the draft clearly explains why F<T> , F[T] and non-ASCII (unable to type it here) F<<T>> where discarded, feels like F{T} would be more human readable than the sometimes three in a row set of () , while not complicating the parser with unbounded lookahead as you can't open a block in those circumstances. aprice2704: I really dislike the idea of using regular parentheses ( , would a two-character sequence cause compiler overhead from unbounded lookahead? How about <| and |> ? would they work? They have the advantages of being quite distinct from ( , making some visual sense in ascii, and in the 'Fira Code' font (highly recommended) which I use in VSCode there are ligatures to render these as little right or left pointing triangles. leaxoy: First I'm sorry for editing the page footer, however I can't remove footer content. This is my opinion: lots of ( & ) made go looks so messy, < & > like other language is better, and is more kindly for those come from other languages. Hajime Hoshi: I completely agree on aprice2704's syntax concern. Wouldn't [[ / ]] work, for example?","title":"Go2GenericsFeedback"},{"location":"Go2GenericsFeedback/#go-2-generics-feedback","text":"This page is meant to collect and organize feedback about the Go 2 contracts (generics) draft design . A prototype implementation of the syntax can be found in https://golang.org/cl/149638 which may be patched on tip of the Go repo. Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here. As the amount of feedback grows, please feel free to organize or reorganize this page by specific kind of feedback.","title":"Go 2 Generics Feedback"},{"location":"Go2GenericsFeedback/#supporting","text":"Roger Peppe, \" Go contracts use case: generic mgo \", September 2018 Richard Fliam, \" Go2 Generics Let You Construct the Natural Numbers \", August 2018 Roger Peppe, \"Go generics at runtime\", Part 1 , Part 2 , September 2018","title":"Supporting"},{"location":"Go2GenericsFeedback/#supplemental-supporting-with-modifications","text":"Matt McCullough, \" Towards Clarity: Syntax Changes for Contracts in Go \" and \" Angle Brace Delimiters for Go Contracts \", May 2020 Gert Cuykens, \" Complete separation of generic syntax form regular Go code \", Januari 2020 Court Fowler, \" Thoughts from a lazy programmer on the updated design \", September 2019 Andrew Phillips, \" Example Types as Contracts \", August 2019 Alexey Nezhdanov, \" A syntax simplification proposal \", August 2019 Bryan Ford, \" Are Only Type Parameters Generic Enough for Go 2 Generics? \", July 2019 Tom Levy, \" Go 2 Generics Feedback \", June 2019 Ole Bulbuk, \" Why Go Contracts Are A Bad Idea In The Light Of A Changing Go Community \", April 2019 Tony Mottaz, \" Go generic types and import injection \", March 2019 Gustavo Bittencourt, \" Contracts only for Generic Types \", March 2019 David Heuschmann, \" Problems With Using Parantheses for Type Argument Lists \", February 2019 Gustavo Bittencourt, \" Contract with methods \", February 2019 Chris Siebenmann, \" Go 2 Generics: Contracts are too clever \", November 2018 Chris Siebenmann, \" Go 2 Generics: A way to make contracts more readable for people \", November 2018 Chris Siebenmann, \" Go 2 Generics: Interfaces are not the right model for type constraints \", November 2018 alanfo, \" Proposed changes to the Go draft generics design in the light of feedback received \", October 2018 Andy Balholm \" Enumerated and structural contracts \", October 2018 Burak Serdar \" Types are contracts \", October 2018 Patrick Smith, \" Go generics for built-in and user-defined type parameters \", September 2018 Jacob Carlborg, \" Go 2 draft D corrections \", September 2018 alanfo, \" A simplified generics constraint system \", September 2018 Paul Borman, \" Simplifying syntax \", September 2018 mrwhythat, \" Go 2 generics draft notes \", September 2018 Roger Peppe, \" Operator overloading \", September 2018 Peter McKenzie, \" Alternative generics syntax \", September 2018 Ted Singer, \" The design goal for syntax is to help humans read \", September 2018 alanfo, \" Suggested amendment to Go 2 generics draft design \", September 2018 Dean Bassett, \" If we're going to use contracts, allow unary + on string , September 2018\" Kevin Gillette, \" Regarding the Go 2 Generics Draft \", September 2018 jimmy frasche, \" Embedding of type parameters should not be allowed \", August 2018 Javier Zunzunegui, \" Compiling Generics \", August 2018 Liam Breck, \u201c Please Don't Mangle the Function Signature \u201d, August 2018 DeedleFake, \" Feedback for Go 2 Design Drafts \", August 2018 Roberto (empijei) Clapis, \" Hard to read syntax \", August 2018 Dominik Honnef, \" My thoughts on the Go Generics Draft \", August 2018","title":"Supplemental (supporting with modifications)"},{"location":"Go2GenericsFeedback/#counterproposals","text":"dotaheor, \" Declare generics as mini-packages with generic parameters \", August 2020 Beoran, \" Hygienic Macros \", June 2019 Randy O'Reilly, \" Generic Native Types \", June 2019 Michal \u0160trba, \" Giving up restricting types \", May 2019 Eric Miller, \" Simple generics using const struct fields \", March 2019 dotaheor, \" A solution to unify Go builtin and custom generics \", February 2019 Quentin Quaadgras, No syntax changes, 1 new type, 1 new builtin , December 2018 Andy Balholm, \" Contracts and Adaptors \", November 2018 Dean Bassett, \" Contract embedding \", October 2018 Patrick Smith, \" Go Generics with Adaptors \", October 2018 Ian Denhardt, \" Go Generics: A Concrete Proposal Re: Using Interfaces Instead Of Contracts. \", October 2018 Arendtio \" Generics in Go inspired by Interfaces \", September 2018 Scott Cotton, \" Draft Proposal Modification for Unifying Contracts and Interfaces \" ( diff ), September 2018 ohir, \" CGG, Craftsman Go Generics \", September 2018 Dean Bassett, \" Using interfaces instead of contracts \", September 2018 I have made a second proposal (\"contract embedding\") listed further down that solves the issues with this one dotaheor, \" Combine contract and code together and view generic as compile-time calls with multiple outputs \", September 2018. (Updated from time to time) Aleksei Pavliukov, \" Extend type and func keywords \", September 2018 Han Tuo, \" Generic as a kind of types \u2013 type T generic {int, float64} \", September 2018 Nate Finch, \" Go2 Contracts Go Too Far \", September 2018 Roger Peppe, \" Go Contracts as type structs \", September 2018 Axel Wagner, \" Scrapping contracts \", September 2018 Matt Sherman \" Generics as built-in typeclasses \", September 2018 Roger Peppe, \" Revised generics proposal \", September 2018 Steven Blenkinsop, \u201c Response to the Go2 Contracts Draft Design \u2013 Auxiliary Types \u201d, September 2018 Dave Cheney, \" Maybe adding generics to Go IS about syntax after all \", September 2018 Christian Surlykke, \" Constraints for Go Generics , September 2018\" Some Gophers on go-nuts, \u201c Unifying Interfaces and Contracts \u201d, August 2018 Roger Peppe, \" Go generics feedback , August 2018 Ruan Kunliang, \" Package level generics \", August 2018 Emily Maier, \" Getting specific about generics \", August 2018","title":"Counterproposals"},{"location":"Go2GenericsFeedback/#against","text":"Tokyo Gophers, \" Comments from Go 2 draft design feedback event \", October 2018 Jason Moiron, \" Notes on the Go2 Generics Draft \", September 2018 Yoshiki Shibukawa, \" Feedback for generics/contract proposals , September 2018\"","title":"Against"},{"location":"Go2GenericsFeedback/#adding-your-feedback","text":"Please format all entries as below. Your Name , \u201c Title \u201d, month year To make it easier to see new feedback. Please make a Gist . And also help to keep the list sorted in reverse-chronological order by including your new entry at the top of the category list.","title":"Adding Your Feedback"},{"location":"Go2GenericsFeedback/#quick-comments","text":"Chester Gould : The only problem with this proposal is that explicit contracts seem to only make the code more verbose which is against the goal of simple readable code. Instead of writing explicit contracts, using the actual code we write as a kind of \"implicit contract\" would be much more simple and elegant. An example of this is shown here . I acknowledge that this is addressed here , but I disagree that explicit contracts are the solution to problem. It seems to me that contracts are very close to what interfaces provide and so the behaviour of interfaces should be extended to allow behaviour closer to contracts rather than adding an entire new type of statement to the language. Izaak Weiss : A lot of the discussion has focused specifically on how to implement contracts, or something like that. However, most of the \"useful examples\" don't require contracts; they only require parametric polymorphism. Writing a typesafe Merge or SortSlice is possible without contracts. And for the simpler contracts, we can implement them via higher order functions. A generic hashmap can be parametric over a type with a Hash method, or it can take a func(K) int64 when it is constructed, and use that to hash its keys. If more functions are required, structs holding these functions can be declared as pseudo-contracts, and then those can be passed to the generic function. This makes Go's polymorphism simple, explicit, and leaves room for further innovation regarding contracts or other mechanisms in the future, while allowing most of the benefits of generic types to be realized right now. Christoph Hack : I just watched Alexandrescu's last talk The next big Thing . He states \"Concepts are a waste of time\" and proposes a completely different, far more powerful, direction (even in comparison to everything possible in C++ today). Go already has most required features, like reflection and testing if a type implements an optional interface. The only thing missing is code generation. For example, json.Marshal works fine by using reflection, but if it could also (optionally) generate code by implementing a Go function that gets called by the compiler automatically and runs regular Go code, we would have everything. It might sound crazy at first and toy examples might look verbose, but I think Alexandrescu has a point there. Just think about gqlgen vs. the other reflection based graphql-libs for example. Please watch his talk! Bodie Solomon : I find the generics design a bit confusing and opaque. Please consider integrating some concepts from Zig's beautiful comptime functions ! The design of Go 2 generics is clever, but I feel it goes against Go's traditional tight coupling between simple runtime semantics and simple syntax. Additionally, one of the biggest problems of Go, which prevents it from being a viable competitor everywhere I might like to use it, is that I cannot be rid of the GC and runtime. It was my strong hope that Go 2 would introduce compile-time-only generics such that I could reliably avoid the use of dynamic interfaces where I don't want them, without relying on codegen. Unfortunately it looks like that will be decided by the compiler without my input. Please, at least, consider giving users the ability to constrain generics to compile-time-only resolution, perhaps as a property of a Contract, rejecting compilation of dynamic types to satisfy the contract. Dag Sverre Seljebotn: C++ has a huge problem with people abusing metaprogramming (\"generics\") to do compile-time metaprogramming. I really wished Go had gone down the path of Julia, which offers hygienic macros. Even if it is kept strictly at a compile-time barrier and no run-time code generation, this would at least avoid all the bad tendencies we see in the C++ world that comes from their templating system. Things you can do with generics you can usually pull off with macros too (e.g., SortSliceOfInts = MakeSliceSorterFunctionMacro!(int) could generate a new function to sort a slice of integers). Link: https://docs.julialang.org/en/v0.6.1/manual/metaprogramming/ Maxwell Corbin: The issues raised in the Discussion and Open Questions section all could be avoided by defining generics at the package rather than the function or type level. The reason for this is simple: types can reference themselves, but packages can't import themselves, and while there are many ways to algorithmically generate more type signatures, you cannot do the same with import statements. A quick example of such syntax might be: \\\\ list package list [ T ] type T interface {} type List struct { Val T Next * List } // main package main import ( il \"list\" [ int ] sl \"list\" [ string ] ) var iList = il . List { 3 } var sList = sl . List { \"hello\" } // etc... The syntax in the example is probably needlessly verbose, but the point is that none of the unfortunate code examples from the blog post are even legal constructions. Package level generics avoids the most abusive problems of meta-programming while retaining the bulk of its usefulness. Andrew Gwozdziewycz: The use of the word contract gives me pause due to it overloading \"contract\" as in Design by Contract . While the generics use case has some similarities with the \"contracts\" in DbC if you squint a bit, the concepts are quite different. Since \"contracts\" are an established concept in Computer Science, I think it would be far less confusing to use a different name like behavior or trait . The design document also suggests reasons why using interface is not ideal, though, Go's contract mechanism seems too obvious an extension of interfaces to disregard so quickly\u2026 If it can be done interface setter(x T) { x.Set(string) error } and interface addable(x T, y U) { x + y } seem quite natural to read and understand. Russell Johnston: Agreed that it would be great to merge contracts and interfaces. Another way around the operator-naming problem might be to provide some standard interfaces for the operators, with bodies inexpressible in normal Go code. For example, a standard Multipliable interface would allow the * and *= operators, while a standard Comparable interface would allow == , != , < , <= , >= , and > . To express operators with multiple types, these interfaces would presumably need type parameters themselves, for example: type Multipliable(s Self /* this exists implicitly on all interfaces */, t Other) interface { /* provided by the language */ } . Then user-written interfaces/contracts could use these standard identifier-based names, neatly sidestepping the issues mentioned in the design document around syntax and types. Roberto (empijei) Clapis: I agree on this and on the fact that it should be clearer where to use interfaces and where to use contracts. Unifying the two would be great, as they try to address overlapping issues. Kurnia D Win: I think constraint is better keyword than contract . Personally i like type addable constraint(x T, y U) { x + y } instead of merging with interface. Hajime Hoshi: I feel like the supposed proposal is too huge to the problems we want to solve listed at https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md . I'm worried this feature would be abused and degrade readability of code. Sorry if I am missing, but the proposal doesn't say anything about go generate . Wouldn't go generate be enough to the problems? Stephen Rowles: I find the method syntax hard to parse, as a human reading it, it might be clearer to use a different type of enclosing brackets for the type section, e.g. : Me too \ud83d\udc4d +1. Yet another \ud83d\udc4d +1(Pasha Osipyants). func Sum<type T Addable>(x []T) T { var total T for _, v := range x { total += v } return total } yesuu: In this example, think of T as the parameter name and type as the parameter type. Obviously it is more reasonable to put the type behind, and contract is followed by type , like chan int . func Sum ( T type Addable )( x [] T ) T Roberto Clapis: Please read this section Seems like a bit of a cop-out tbh. It says \"in general\" which means there must already be exceptions. Go has a nice clear syntax making code simple to read and easy for teams to collaborate. I think it would be worth making the parser more complicated for the sake of making the code readability better. For large scale and long running project readability of the code, and hence maintainability, is king What about this Seebs: Feedback a bit long to inline , August 2018. Summary basically \"I would like a way to specify one contract for each of two types rather than one contract for both types\", and \"I would prefer map[T1]T2 to t1var == t1var as a canonical form of \"T1 must be an allowable map key\". Seebs: What if contracts were just the type-parametric functions? . (Sep 1, 2018) Sean Quinlan: I find the contract syntax quite confusing. For something that is supposed to defined exactly what is needed and will be part of the documentation of an api, it can contain all sorts of cruft that does not impact the contract. Moreover, to quote from the design: \"We don\u2019t need to explain the meaning of every statement that can appear in a contract body\". That seems like the opposite of what I would want from a contract. The fact one can copy the body of a function into a contract and have it work seems like a bug to me, not a feature. Personally, I would much prefer a model that unifies interfaces and contracts. Interfaces feel much closer to what I would like a contract to look like and there is a lot of overlap. It seems probable that many contracts will also be interfaces? Nodir Turakulov: Please elaborate Packages like container/list and container/ring, and types like sync.Map, will be updated to be compile-time type-safe. and The math package will be extended to provide a set of simple standard algorithms for all numeric types, such as the ever popular Min and Max functions. or ideally add a section about transition/migration of existing types/funcs to use type polymorphism. FWIU adding type parameter(s) to an existing type/func most likely breaks an existing program that uses the type/func. How exactly will math.Max be changed? Is the intention to make backward-incompatible changes and write tools to automatically convert code to Go2? What is the general recommendation for authors of other libraries that provide funcs and types that currently operate with interface{} ? Were default values for type parameters considered? e.g. type parameter for math.Max would default to float64 and type parameter for \"container/list\".List would default to interface{} Ward Harold: If only for the sake of completeness the Modula-3 generics design should be incorporated into the Designs in Other Languages section. Modula-3 was a beautiful language that sadly got introduced at the wrong time. Matt Holiday: Ditto mentioning the Alphard language, which was developed about the same time as CLU and also influenced the Ada design. See Alphard: Form and Content, Mary Shaw, ed., Springer 1991 for the various papers collected with some glue material. Alphard & Ada were my introductions to generic programming. Could Go beat C++ for finally delivering contracts after 40 years of waiting? Ole Begemann: You write on the Generics Overview page : \"Swift added generics in Swift 4, released in 2017.\" This is not true. Swift has had generics since its first public release in 2014. Evidence (just one example of many): a transcript of an Apple developer talk on Swift from WWDC 2014 that talks at length about Swift's generics features. This is also incorrect: \" Equatable appears to be a built-in in Swift, not possible to define otherwise.\" The Equatable protocol is defined in the Swift standard library, but there's nothing special about it. It's totally possible to define the same thing in \"normal\" code. Kevin Gillette: correction for \"Contracts\" Draft, as of 30 August 2018 The one instance of check.Convert(int, interface{})(0, 0) should instead be check.Convert(int, interface{})(0) or provide an explanation as to why it the function should take two zeros instead of one. Adam Ierymenko : I have an idea for doing limited operator overloading in Go that might make this proposal more useful for numeric code. It's big so I stuck it in a Gist here . DeedleFake: I completely agree with the arguments against operator overloading, and I'm quite glad overall that Go doesn't have it, but I also think that the inability to resolve the difference between a == b and a.Equals(b) via a contract is the biggest problem with the draft design as it currently stands. It means that you'd still wind up writing multiple functions for a fair number of things. Try writing a binary tree, for example. Should you use a contract with t < t or t.Less(t) ? For a sum function, should you use t + t or t.Plus(t) ? I definitely want a solution that doesn't involve operator overloading, though. Maybe there could be a way to specify an adapter that basically says if a type T, which satisfies contract A but not B, is used for a parameter constrained by contract B, apply this to it in order to get it to satisfy contract B . Contract B could require a Plus() method, for example, while contract A requires the use of + , so the adapter automatically attaches a user-specified Plus() method to T for the duration of its use under that contract. Something that might work with this proposal is an equal(a, b) builtin that uses a.Equals(b) if it exists and a == b otherwise, failing to compile if the type is incomparable (and likewise for other operators). It's too weird to seriously consider but it would work with contracts and allow dodging the asymmetry between types that have operators and those that cannot without introducing operator overloading \u2014jimmyfrasche Another idea would be explicitly overloadable operators: a + b is not overloadable, but a [+] b can be overloaded. It will use normal + for primitive types, but will use Operator+() etc. for objects if those are present. I really do think that generics without some sane form of operator overloading or something like it are a lot less useful to the point that you might as well not even do it. -Adam Ierymenko (original poster) Ian Denhardt: DeedleFake outlines the problems with not having operator overloading well I. I think proposals involving making the overloading \"loud\" are the wrong idea; instead, we should limit which operators can be overloaded to operators which satisfy these critera: The operator's semantics can be understood as a method call. Most of the operators on numbers pass this test; big.Add is still addition in the sense that we know it from int32, uint64 etc. Examples of operators that fail this test are && and || ; these are short circuting, which no function or method can replicate. They are fundamentally not methods, no matter how you look at them, and should not be overridable by methods. I think operator overloading gets a bad rap in part because C++ allows you to override everything , including crazy stuff like the comma operator . There should be clear use cases for overriding them. Again, arithmetic operators pass this test, along with < and friends. Pointer dereferencing passes the first test, but I'm having a hard time coming up with uses for \"other types of pointers\" that actually seem like a good idea. They are a bit more justifiable in C++, but garbage-collected pointers have basically got you covered. The normal meaning of the operator should be something that is easy to reason about. For example, pointers are a gnarly source of bugs, and having the possibility that *foo is doing something other than reading from a memory address makes an already difficult debugging session that much harder. On the other hand, the possibility that + may be a call to big.Add is relatively self-contained, and unlikely to cause great confusion. Finally, the standard library has to set a good example; methods overriding + should be conceptually addition, for example. C++ gets off on an utterly wrong foot here by defining what is morally os.Stdout.ShiftLeft(\"Hello, World!\") . Eltjon Metko: How about specifying the contract after the type identifier inside the function Parameters? This way it can be inferred what T is and we can eliminate the first group of parenthesis. func Sum(x []T:Addable) T { var total T for _, v := range x { total += v } return total } Tristan Colgate-McFarlane: After going back and forward for a while, I've come down in favour of the proposal largely as is. A limited syntax for contracts might be preferable, but I believe it should allow referencing specific fields (not just methods as some have proposed). If anything can be done to make compatible interface and contracts inter-use easier, that would also be nice (though I think maybe no additional specifications are needed. Lastly, I think it is worth considering deprecating interface types. Whilst drastic, contracts essentially also allow specifying behaviour. Any contract restrictions that limit that (such as refering to other types within the package), should probably be lifted. contracts appear to be a strict superset of interfaces, and I am generally against having two overlapping features. A tool to aide in writing interaces should also be considered. Patrick Smith: We might consider requiring the type keyword when defining methods on generic types. This makes the code a little more verbose, but clearer and more consistent (now type parameters are always preceded by the type keyword). func (x Foo(type T)) Bar() Patrick Smith: In this example, is Foo(T) embedded in Bar(T) , or does Bar(T) have a method named Foo ? type Foo(type T) interface {} type Bar(type T) interface { Foo(T) } Xingtao Zhao: There are too many round brackets in the proposal. In the proposal, it is said that \"[]\" is ambiguous in some cases. While if we use [type T, S contract], there are no ambiguities any more. Dave Cheney: The earlier Type Functions proposal showed that a type declaration can support a parameter. If this is correct, then the proposed contract declaration could be rewritten from contract stringer(x T) { var s string = x.String() } to type stringer(x T) contract { var s string = x.String() } This supports Roger\u2019s observation that a contract is a superset of an interface. type stringer(x T) contract { ... } introduces a new contract type in the same way type stringer interface { ... } introduces a new interface type. jimmyfrasche: A contract is not a type, though. You can't have a value that is a stringer . You can have a value of a type that is a stringer . It's a metatype. A type is a kind of predicate on values. You ask the compiler \"is this value a string \" and it answers yes (allowing compilation to continue) or no (stopping to tell you what went wrong). A contract is a predicate on a vector of types. You ask the compiler two questions. Do these types satisfy this contract? Then: do these values satisfy these types? Interfaces kind of blur these lines by storing a (type, value) pair, provided that the type has the appropriate methods. It's simultaneously a type and a metatype. Any generics system that does not use interfaces as the metatypes will unavoidably contain a superset of interfaces. While it is entirely possible to define a generics system that exclusively uses interfaces as the metatypes, that does mean losing the ability to write generic functions that use things that interfaces can't talk about, like operators. You have to limit the questions you can ask about the types to their method sets. (I'm fine with this). btj: Two very important entries are missing in the draft design document's Designs in Other Languages section: Haskell, with its typeclasses, and Scala, with its implicit arguments. iamgoroot: Wouldn't it be natural to make better type aliasing support and let user have generics as option? And you dont need much syntax for that type Key _ type Value _ type IntStringHolder Holder<Key:int, Value:string> type Holder struct { K Key V Value } func (h *Holder) Set(k Key, v Value) { h.K = k h.V = v } func main() { v:= IntStringHolder{} v.Set(7,\"Lucky\") } antoniomo: While the draft clearly explains why F<T> , F[T] and non-ASCII (unable to type it here) F<<T>> where discarded, feels like F{T} would be more human readable than the sometimes three in a row set of () , while not complicating the parser with unbounded lookahead as you can't open a block in those circumstances. aprice2704: I really dislike the idea of using regular parentheses ( , would a two-character sequence cause compiler overhead from unbounded lookahead? How about <| and |> ? would they work? They have the advantages of being quite distinct from ( , making some visual sense in ascii, and in the 'Fira Code' font (highly recommended) which I use in VSCode there are ligatures to render these as little right or left pointing triangles. leaxoy: First I'm sorry for editing the page footer, however I can't remove footer content. This is my opinion: lots of ( & ) made go looks so messy, < & > like other language is better, and is more kindly for those come from other languages. Hajime Hoshi: I completely agree on aprice2704's syntax concern. Wouldn't [[ / ]] work, for example?","title":"Quick comments"},{"location":"GoArm/","text":"Introduction Go is fully supported on Linux and Darwin. Any Go program that you can compile for x86/x86_64 should work on Arm. Besides Linux and Darwin, Go is also experimentally supported on FreeBSD, OpenBSD and NetBSD. Supported architectures Go supports the following ARM architectural families. Architecture Status GOARM value GOARCH value ARMv4 and below not supported n/a n/a ARMv5 supported GOARM=5 GOARCH=arm ARMv6 supported GOARM=6 GOARCH=arm ARMv7 supported GOARM=7 GOARCH=arm ARMv8 supported n/a GOARCH=arm64 Starting from Go 1.1, the appropriate GOARM value will be chosen if you compile the program from source on the target machine. In cross compilation situations, it is recommended that you always set an appropriate GOARM value along with GOARCH. Supported operating systems ARM on Linux. You must run an EABI kernel. These are generally known as armel for softfloat (compatible with ARMv5) or armhf for hardware floating point (ARMv6 and above). ARM on Darwin: ARMv7 is required. ARM on FreeBSD, OpenBSD, and NetBSD: ARMv6K or above is required. Recommended Go version Go has a mature support for ARM systems; so, just like for other architectures, use the latest stable version (eg: Go 1.15 at the time of writing). Tips and tricks /tmp and tmpfs The go build tool uses /tmp when compiling and testing, this can cause heavy wear and tear if /tmp lives on your SD card. To minimise this effect, either export TMPDIR to somewhere that lives on another filesystem. Alternatively if you have lots of physical memory you can mount a swap backed tmpfs filesystem on /tmp by adding this line to /etc/fstab tmpfs /tmp tmpfs nodev,nosuid,mode=1777 0 0 Swap Building Go from source requires at least 256mb of RAM. Running the tests requires at least 256mb of memory and at least 512mb of swap space. Test failures due to resource starvation The runtime tests create many native operating system threads which at the default of 8mb per thread can exhaust an ARM system with 32bit user mode address space (especially on multicore ARM systems such as the Raspberry PI 2). To prevent the runtime test from failing you may need lower the thread stack limit: % ulimit -s 1024 # set the thread stack limit to 1mb % ulimit -s # check that it worked 1024 See Dave Cheney's blog post about building Go on Raspberry Pi for details. Build failures due to lack of memory The Go tool will try to keep all your cpu cores busy when installing packages (during make.bash), this is normally preferable on PCs where memory is abundant. However, some powerful multicore ARM machines don't have enough memory to support parallel builds utilizing all available cores, and you can work around that by using the taskset(1) utility to limit Go to only use one core without resorting to swaps. taskset 1 ./make.bash # use 3 if you want to use two cores Note: the 1 here is a bitmask for cpu affinity and it's not the number of cpu cores you're willing to use, please refer to taskset(1) manual for details. Known issues Lack of floating point hardware on ARMv5 The major issue with ARMv5 is the lack of floating point support in common ARMv5 hardware \u2020 . When compiled with the GOARM=5 environment variable, the 5l linker will insert a call to _sfloat before any block of floating point instructions to branch into the floating point emulator. This means that binaries produced with a Go installation that was compiled with soft float support will work on all supported architectures, but builds compiled without soft floating point support will not work on ARMv5. \u2020 This isn't strictly true, there exist ARMv5 implementations which have VFP1 floating point. However the compiler doesn't support VFP1 yet. html/template and test/nilptr.go test fail on HTC Android html/template test and test/nilptr.go is known to fail on HTC's Android kernels ( ref ), because the kernel will kill the application after 10 segfaults. Potential kernel bug in 2.6.32-5-kirkwood on QNAP 219P See Issue 5466 for details. Updating to 3.2.0-4-kirkwood solved the issue. Success stories ARM hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here. Netgear Stora Architecture: ARMv5 Operating System: Debian Sid The Netgear Stora is an ARMv5 (Marvell Kirkwood) platform. I flashed mine with a Debian Sid distribution and it was, until Go1, a solid platform for Go development. The main drawback is the Stora only has 128mb of ram, which is not quite enough to run ./all.bash as 5l can use more than 100mb of ram when linking some commands. Instructions for installing Debian on your Stora can be found on the OpenStora website, http://www.openstora.com/wiki/index.php?title=How_to_install_Debian_Linux_on_NETGEAR_Stora . \u2013 dave cheney Qnap TS-119P II Architecture: ARMv5 Operating System: Debian Squeeze The Qnap TS series of NASs are excellent hackable little linux hosts. The TS-11P9 II is a 2Ghz Marvell Kirkwood ARMv5 processor with 512mb of ram and a single SATA drive bay. The kirkwood platform is supported by the native debian installer. http://www.cyrius.com/debian/kirkwood/qnap/ts-119/install.html \u2013 dave cheney Pandaboard Architecture: ARMv7 Operating System: Ubuntu 12.04LTS (armhf) The Pandaboard is a dual core ARMv7 development board based on the Texas Instruments OMAP4 SoC platform. I run ubuntu 12.04 LTS server on mine, which is an excellent distribution for Arm development. The Pandaboard has a gig of ram which makes it excellent for development and benchmarking. Instructions and SD card image can be found on on the Ubuntu wiki, https://wiki.ubuntu.com/ARM/Server/Install#Installing_pre-installed_OMAP4_Precise_.2812.04.29_Server_Images . \u2013 dave cheney BeagleBone Architecture: ARMv7 single core, Cortex-A8, 256MB RAM, 720 MHz Operating System: Angstrom Linux BeagleBone is similar to Beagleboard, but without the video components. Angstrom is a very small Linux distribution for ARM based systems. It is built on top of Yocto and OpenEmbedded with additional tools and recipes to make it even easier to build a distribution. You can think of Angstrom as Ubuntu and OpenEmbedded/Yocto as Debian. Angstrom is very light weight and fast compared to Ubuntu. It uses systemd instead of the sys5 scripts which help give you a very fast boot time of a few seconds. BeagleBone is probably faster than a RasberryPI because of it's newer Cortex-A8 dual-issue superscalar architecture, but the PI has the GPU which theoretically could be used with something like OpenCL to really run circles around the BeagleBone. However, for embedded applications the BeagleBone is easier to work with because it is ready out of the box with GPIO connections. I've cross compiled for ARM with 5g from a Mac and so far I haven't run into any problems. You can build on the BeagleBone, but cross compiling with Go is so easy that it is better to save wear and tear on the flash drive and just compile somewhere else. \u2013 hans stimer Zyxel NSA 310 Architecture: ARM5 Platform: Debian Wheeze Successfuly built default branch, going to write fan control daemon for this device in golang. Raspberry Pi Building Go 1.5 on the Raspberry Pi - Dave Cheney Architecture: ARM1176JZFS, with floating point, running at 700Mhz Operating System: Debian Wheezy beta distribution ( http://www.raspberrypi.org/archives/1435 ) reported as: Linux raspberrypi 3.1.9+ #125 PREEMPT Sun Jun 17 16:09:36 BST 2012 armv6l GNU/Linux Memory Split : the Pi shares its 256mb of memory between the CPU and the GPU. You should allocate as much memory as possible to the CPU for a successful compilation. The configuration for the memory split is stored on your SD card. This link has a script to adjust the configuration, http://sirlagz.net/?p=445 . Go version weekly.2012-03-27 +645947213cac, with timeout and GOARM 7 patches http://codereview.appspot.com/5987063/ ) builds with 2 test failures: encoding/gob fails with out of memory, and fmt fails the NaN test. Successfully installed and run SVGo via go get github.com/ajstarks/svgo, tested with goplay: Division benchmark via http://codereview.appspot.com/6258067 : $ cd $GOROOT/src/pkg/runtime $ go test -test.bench=BenchmarkUint BenchmarkUint32Div7 5000000 547 ns/op BenchmarkUint32Div37 5000000 547 ns/op BenchmarkUint32Div123 5000000 547 ns/op BenchmarkUint32Div763 5000000 547 ns/op BenchmarkUint32Div1247 5000000 547 ns/op BenchmarkUint32Div9305 5000000 547 ns/op BenchmarkUint32Div13307 5000000 547 ns/op BenchmarkUint32Div52513 5000000 547 ns/op BenchmarkUint32Div60978747 5000000 547 ns/op BenchmarkUint32Div106956295 5000000 547 ns/op BenchmarkUint32Mod7 5000000 547 ns/op BenchmarkUint32Mod37 5000000 547 ns/op BenchmarkUint32Mod123 5000000 547 ns/op BenchmarkUint32Mod763 5000000 547 ns/op BenchmarkUint32Mod1247 5000000 547 ns/op BenchmarkUint32Mod9305 5000000 547 ns/op BenchmarkUint32Mod13307 5000000 547 ns/op BenchmarkUint32Mod52513 5000000 547 ns/op BenchmarkUint32Mod60978747 5000000 547 ns/op BenchmarkUint32Mod106956295 5000000 547 ns/op Running the hardware floating point distribution, Raspbian \"pisces\" ( http://www.raspbian.org/PiscesImages ) and applying the patches in https://gist.github.com/3116118 , here are the results of the Eleanor McHugh gospeed benchmark: raspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ uname -a Linux pisces 3.1.9+ #171 PREEMPT Tue Jul 17 01:08:22 BST 2012 armv6l GNU/Linux raspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ go test -test.bench=\".*\" PASS BenchmarkBaselineCastInt32ToInt 100000000 13.5 ns/op BenchmarkBaselineCastIntToInt32 100000000 13.5 ns/op BenchmarkBaselineCastInt64ToUint64 100000000 17.8 ns/op BenchmarkBaselineCastUint64ToInt64 100000000 17.2 ns/op BenchmarkBaselineVariableGet 100000000 13.4 ns/op BenchmarkBaselineVariableSet 100000000 22.4 ns/op BenchmarkBaselineVariableGetInterface 100000000 13.5 ns/op BenchmarkBaselineVariableSetInterface 50000000 31.3 ns/op BenchmarkBaselineVariableIncrement 100000000 23.9 ns/op BenchmarkBaselineVariableDecrement 100000000 23.9 ns/op BenchmarkBaselineFieldGet 100000000 13.5 ns/op BenchmarkBaselineFieldSet 100000000 20.9 ns/op BenchmarkBaselineSliceGet 50000000 32.9 ns/op BenchmarkBaselineSliceSet 50000000 34.5 ns/op BenchmarkBaselineMapIntGet 1000000 1448 ns/op BenchmarkBaselineMapIntSet 1000000 1968 ns/op BenchmarkBaselineMapStringGet 1000000 1119 ns/op BenchmarkBaselineMapStringSet 1000000 1675 ns/op BenchmarkBaselineIf 100000000 15.0 ns/op BenchmarkBaselineIfElse 100000000 15.0 ns/op BenchmarkBaselineSwitchDefault 100000000 13.5 ns/op BenchmarkBaselineSwitchOneCase 100000000 15.0 ns/op BenchmarkBaselineSwitchTwoCases 100000000 18.0 ns/op BenchmarkBaselineSwitchTwoCasesFallthrough 100000000 18.0 ns/op BenchmarkBaselineForLoopIteration 50000000 42.0 ns/op BenchmarkBaselineForReverseLoopIteration 50000000 36.0 ns/op BenchmarkBaselineForRange 20000000 80.9 ns/op BenchmarkBaselineForSliceLength 50000000 39.0 ns/op BenchmarkBaselineForReverseSliceLength 50000000 36.0 ns/op BenchmarkBaselineForLoopIteration10 20000000 119 ns/op BenchmarkBaselineForReverseLoopIteration10 20000000 92.9 ns/op BenchmarkBaselineForRange10 10000000 215 ns/op BenchmarkBaselineForSliceLength10 20000000 109 ns/op BenchmarkBaselineForReverseSliceLength10 20000000 92.9 ns/op BenchmarkBaselineForLoopIteration100 2000000 929 ns/op BenchmarkBaselineForReverseLoopIteration100 5000000 700 ns/op BenchmarkBaselineForRange100 1000000 1567 ns/op BenchmarkBaselineForSliceLength100 2000000 853 ns/op BenchmarkBaselineForReverseSliceLength100 5000000 700 ns/op BenchmarkBaselineForLoopIteration10000 10000 106006 ns/op BenchmarkBaselineForReverseLoopIteration10000 50000 67480 ns/op BenchmarkBaselineForRange10000 10000 153841 ns/op BenchmarkBaselineForSliceLength10000 20000 85735 ns/op BenchmarkBaselineForReverseSliceLength10000 50000 69461 ns/op BenchmarkBaselineMakeChannelBoolUnbuffered 200000 10162 ns/op BenchmarkBaselineMakeChannelBool1 200000 12517 ns/op BenchmarkBaselineMakeChannelBool10 200000 12521 ns/op BenchmarkBaselineMakeChannelStringUnbuffered 500000 10369 ns/op BenchmarkBaselineMakeChannelString1 200000 12576 ns/op BenchmarkBaselineMakeChannelString10 100000 22358 ns/op BenchmarkBaselineGo 50000 367593 ns/op BenchmarkBaselineFunctionCall 50000000 57.0 ns/op BenchmarkBaselineFunctionCallArg 20000000 81.0 ns/op BenchmarkBaselineFunctionCall5VarArgs 500000 6852 ns/op BenchmarkBaselineFunctionCallInt 50000000 60.3 ns/op BenchmarkBaselineFunctionCall5VarInts 1000000 3185 ns/op BenchmarkBaselineFunctionCallWithDefer 1000000 2330 ns/op BenchmarkBaselineFunctionCallPanicRecover 500000 6222 ns/op BenchmarkBaselineMethodCallDirect 20000000 83.8 ns/op BenchmarkBaselineMethodCallDirect1Arg 20000000 106 ns/op BenchmarkBaselineMethodCallDirect1Int 20000000 85.2 ns/op BenchmarkBaselineMethodCallDirect5Args 5000000 368 ns/op BenchmarkBaselineMethodCallDirect5Ints 10000000 233 ns/op BenchmarkBaselineMethodCallIndirect 100000000 18.0 ns/op BenchmarkBaselineMethodCallIndirect1Arg 50000000 42.0 ns/op BenchmarkBaselineMethodCallIndirect1Int 100000000 19.5 ns/op BenchmarkBaselineMethodCallIndirect5Args 5000000 309 ns/op BenchmarkBaselineMethodCallIndirect5Ints 10000000 168 ns/op BenchmarkBaselineTypeAssertion 10000000 218 ns/op BenchmarkBaselineTypeAssertionEmptyInterface 20000000 106 ns/op BenchmarkBaselineTypeAssertionInterface1 5000000 576 ns/op BenchmarkBaselineTypeAssertionInterface2 5000000 579 ns/op BenchmarkBaselineTypeReflectPrimitiveToValue 5000000 425 ns/op BenchmarkBaselineTypeReflectSliceToValue 1000000 3218 ns/op BenchmarkBaselineTypeReflectStructToValue 500000 4760 ns/op BenchmarkBaselineTypeCheck 10000000 189 ns/op BenchmarkBaselineTypeCheckEmptyInterface 20000000 93.1 ns/op BenchmarkBaselineTypeCheckInterface1 5000000 511 ns/op BenchmarkBaselineTypeCheckInterface2 5000000 516 ns/op BenchmarkBaselineTypeSwitchOneCase 10000000 262 ns/op BenchmarkBaselineTypeSwitchBasicTypesCase 10000000 295 ns/op BenchmarkBaselineTypeSwitchEmptyInterface 10000000 163 ns/op BenchmarkBaselineTypeSwitchInterface1 5000000 588 ns/op BenchmarkBaselineTypeSwitchInterface2 5000000 602 ns/op BenchmarkBaselineNewStructureLiteral 20000000 84.0 ns/op BenchmarkBaselineNewStructure 20000000 127 ns/op BenchmarkBaselineNewSliceLiteral 50000000 54.2 ns/op BenchmarkBaselineNewSlice 1000000 3124 ns/op BenchmarkBaselineNewMapLiteralIntToInt 500000 9083 ns/op BenchmarkBaselineNewMapLiteralIntToInterface 500000 9807 ns/op BenchmarkBaselineNewMapLiteralStringToInt 500000 9792 ns/op BenchmarkBaselineNewMapLiteralStringToInterface 500000 10595 ns/op BenchmarkBaselineNewMapLiteralIntToInt2Item 200000 14265 ns/op BenchmarkBaselineNewMapLiteralIntToInterface2Item 200000 14669 ns/op BenchmarkBaselineNewMapLiteralStringToInt2Item 200000 14025 ns/op BenchmarkBaselineNewMapLiteralStringToInterface2Item 200000 15086 ns/op BenchmarkBaselineNewMapIntToInt 500000 9025 ns/op BenchmarkBaselineNewMapIntToInterface 500000 9753 ns/op BenchmarkBaselineNewMapStringToInt 500000 9740 ns/op BenchmarkBaselineNewMapStringToInterface 500000 10486 ns/op BenchmarkBaselineSliceCopy 5000000 300 ns/op BenchmarkBaselineNewSliceAppendElement1 1000000 3318 ns/op BenchmarkBaselineNewSliceAppendElement10 1000000 5174 ns/op ok github.com/feyeleanor/gospeed 417.296s \u2013 anthony starks Raspberry Pi 2 Building Go 1.5 on the Raspberry Pi - Dave Cheney go version go version devel +07f9c25 Wed Dec 9 21:25:05 2015 +0000 linux/arm $ go test -timeout 20m -v -bench=Benchmark -run=X PASS BenchmarkAppend-4 3000000 402 ns/op BenchmarkAppendGrowByte-4 50 27296836 ns/op BenchmarkAppendGrowString-4 1 1277592542 ns/op BenchmarkAppend1Byte-4 20000000 75.6 ns/op BenchmarkAppend4Bytes-4 20000000 88.2 ns/op BenchmarkAppend7Bytes-4 20000000 103 ns/op BenchmarkAppend8Bytes-4 20000000 89.1 ns/op BenchmarkAppend15Bytes-4 20000000 109 ns/op BenchmarkAppend16Bytes-4 20000000 94.5 ns/op BenchmarkAppend32Bytes-4 20000000 91.4 ns/op BenchmarkAppendStr1Byte-4 20000000 73.9 ns/op BenchmarkAppendStr4Bytes-4 20000000 84.7 ns/op BenchmarkAppendStr8Bytes-4 20000000 88.7 ns/op BenchmarkAppendStr16Bytes-4 20000000 94.5 ns/op BenchmarkAppendStr32Bytes-4 20000000 91.3 ns/op BenchmarkAppendSpecialCase-4 2000000 675 ns/op BenchmarkCopy1Byte-4 20000000 109 ns/op 9.13 MB/s BenchmarkCopy2Byte-4 20000000 112 ns/op 17.77 MB/s BenchmarkCopy4Byte-4 10000000 120 ns/op 33.26 MB/s BenchmarkCopy8Byte-4 10000000 122 ns/op 65.32 MB/s BenchmarkCopy12Byte-4 10000000 126 ns/op 94.82 MB/s BenchmarkCopy16Byte-4 10000000 129 ns/op 123.60 MB/s BenchmarkCopy32Byte-4 10000000 126 ns/op 252.60 MB/s BenchmarkCopy128Byte-4 10000000 162 ns/op 786.76 MB/s BenchmarkCopy1024Byte-4 3000000 479 ns/op 2134.17 MB/s BenchmarkCopy1String-4 20000000 100 ns/op 9.98 MB/s BenchmarkCopy2String-4 20000000 104 ns/op 19.19 MB/s BenchmarkCopy4String-4 20000000 111 ns/op 35.86 MB/s BenchmarkCopy8String-4 20000000 114 ns/op 70.02 MB/s BenchmarkCopy12String-4 20000000 116 ns/op 103.17 MB/s BenchmarkCopy16String-4 10000000 120 ns/op 132.69 MB/s BenchmarkCopy32String-4 20000000 116 ns/op 273.77 MB/s BenchmarkCopy128String-4 10000000 150 ns/op 851.31 MB/s BenchmarkCopy1024String-4 3000000 472 ns/op 2167.03 MB/s BenchmarkChanNonblocking-4 20000000 77.7 ns/op BenchmarkSelectUncontended-4 2000000 780 ns/op BenchmarkSelectSyncContended-4 100000 15094 ns/op BenchmarkSelectAsyncContended-4 500000 2569 ns/op BenchmarkSelectNonblock-4 10000000 226 ns/op BenchmarkChanUncontended-4 50000 26993 ns/op BenchmarkChanContended-4 10000 111382 ns/op BenchmarkChanSync-4 300000 3994 ns/op BenchmarkChanProdCons0-4 500000 3100 ns/op BenchmarkChanProdCons10-4 1000000 2099 ns/op BenchmarkChanProdCons100-4 1000000 1342 ns/op BenchmarkChanProdConsWork0-4 500000 3071 ns/op BenchmarkChanProdConsWork10-4 500000 2332 ns/op BenchmarkChanProdConsWork100-4 1000000 1382 ns/op BenchmarkSelectProdCons-4 300000 5015 ns/op BenchmarkChanCreation-4 2000000 629 ns/op BenchmarkChanSem-4 1000000 1116 ns/op BenchmarkChanPopular-4 200 7597153 ns/op BenchmarkCallClosure-4 30000000 43.5 ns/op BenchmarkCallClosure1-4 30000000 49.0 ns/op BenchmarkCallClosure2-4 5000000 323 ns/op BenchmarkCallClosure3-4 5000000 318 ns/op BenchmarkCallClosure4-4 5000000 324 ns/op BenchmarkComplex128DivNormal-4 3000000 488 ns/op BenchmarkComplex128DivNisNaN-4 5000000 375 ns/op BenchmarkComplex128DivDisNaN-4 5000000 362 ns/op BenchmarkComplex128DivNisInf-4 5000000 289 ns/op BenchmarkComplex128DivDisInf-4 5000000 273 ns/op BenchmarkSetTypePtr-4 20000000 85.1 ns/op 46.98 MB/s BenchmarkSetTypePtr8-4 10000000 169 ns/op 189.14 MB/s BenchmarkSetTypePtr16-4 10000000 213 ns/op 299.83 MB/s BenchmarkSetTypePtr32-4 5000000 297 ns/op 429.62 MB/s BenchmarkSetTypePtr64-4 3000000 462 ns/op 553.72 MB/s BenchmarkSetTypePtr126-4 2000000 791 ns/op 636.59 MB/s BenchmarkSetTypePtr128-4 2000000 777 ns/op 658.60 MB/s BenchmarkSetTypePtrSlice-4 200000 6208 ns/op 659.75 MB/s BenchmarkSetTypeNode1-4 10000000 160 ns/op 74.86 MB/s BenchmarkSetTypeNode1Slice-4 1000000 1076 ns/op 356.60 MB/s BenchmarkSetTypeNode8-4 10000000 221 ns/op 180.94 MB/s BenchmarkSetTypeNode8Slice-4 1000000 2359 ns/op 542.53 MB/s BenchmarkSetTypeNode64-4 3000000 506 ns/op 521.63 MB/s BenchmarkSetTypeNode64Slice-4 100000 12992 ns/op 650.22 MB/s BenchmarkSetTypeNode64Dead-4 5000000 308 ns/op 856.90 MB/s BenchmarkSetTypeNode64DeadSlice-4 200000 11506 ns/op 734.21 MB/s BenchmarkSetTypeNode124-4 2000000 799 ns/op 630.27 MB/s BenchmarkSetTypeNode124Slice-4 100000 23306 ns/op 692.00 MB/s BenchmarkSetTypeNode126-4 2000000 776 ns/op 659.33 MB/s BenchmarkSetTypeNode126Slice-4 100000 21520 ns/op 761.31 MB/s BenchmarkSetTypeNode128-4 2000000 850 ns/op 611.35 MB/s BenchmarkSetTypeNode128Slice-4 50000 24122 ns/op 689.81 MB/s BenchmarkSetTypeNode130-4 2000000 827 ns/op 638.06 MB/s BenchmarkSetTypeNode130Slice-4 50000 24322 ns/op 694.67 MB/s BenchmarkSetTypeNode1024-4 300000 5655 ns/op 725.66 MB/s BenchmarkSetTypeNode1024Slice-4 10000 183602 ns/op 715.28 MB/s BenchmarkAllocation-4 10000 166825 ns/op BenchmarkHash5-4 10000000 217 ns/op 23.02 MB/s BenchmarkHash16-4 5000000 289 ns/op 55.18 MB/s BenchmarkHash64-4 2000000 770 ns/op 83.10 MB/s BenchmarkHash1024-4 200000 9442 ns/op 108.44 MB/s BenchmarkHash65536-4 2000 600452 ns/op 109.14 MB/s BenchmarkEqEfaceConcrete-4 20000000 79.1 ns/op BenchmarkEqIfaceConcrete-4 20000000 77.0 ns/op BenchmarkNeEfaceConcrete-4 20000000 80.0 ns/op BenchmarkNeIfaceConcrete-4 20000000 77.7 ns/op BenchmarkConvT2ESmall-4 5000000 362 ns/op BenchmarkConvT2EUintptr-4 5000000 394 ns/op BenchmarkConvT2ELarge-4 3000000 457 ns/op BenchmarkConvT2ISmall-4 3000000 482 ns/op BenchmarkConvT2IUintptr-4 3000000 524 ns/op BenchmarkConvT2ILarge-4 3000000 600 ns/op BenchmarkConvI2E-4 20000000 60.5 ns/op BenchmarkConvI2I-4 5000000 302 ns/op BenchmarkAssertE2T-4 10000000 121 ns/op BenchmarkAssertE2TLarge-4 10000000 131 ns/op BenchmarkAssertE2I-4 5000000 329 ns/op BenchmarkAssertI2T-4 10000000 125 ns/op BenchmarkAssertI2I-4 5000000 328 ns/op BenchmarkAssertI2E-4 20000000 84.6 ns/op BenchmarkAssertE2E-4 50000000 32.5 ns/op BenchmarkAssertE2T2-4 10000000 129 ns/op BenchmarkAssertE2T2Blank-4 100000000 18.0 ns/op BenchmarkAssertI2E2-4 20000000 91.2 ns/op BenchmarkAssertI2E2Blank-4 100000000 16.7 ns/op BenchmarkAssertE2E2-4 10000000 159 ns/op BenchmarkAssertE2E2Blank-4 100000000 16.8 ns/op BenchmarkMalloc8-4 5000000 317 ns/op BenchmarkMalloc16-4 3000000 485 ns/op BenchmarkMallocTypeInfo8-4 3000000 587 ns/op BenchmarkMallocTypeInfo16-4 2000000 661 ns/op BenchmarkMallocLargeStruct-4 500000 3205 ns/op BenchmarkGoroutineSelect-4 100 18605318 ns/op BenchmarkGoroutineBlocking-4 100 17222169 ns/op BenchmarkGoroutineForRange-4 100 19092854 ns/op BenchmarkGoroutineIdle-4 100 12554944 ns/op BenchmarkMapPop100-4 5000 270721 ns/op BenchmarkMapPop1000-4 300 4674884 ns/op BenchmarkMapPop10000-4 10 110070793 ns/op BenchmarkHashStringSpeed-4 3000000 400 ns/op BenchmarkHashBytesSpeed-4 2000000 709 ns/op BenchmarkHashInt32Speed-4 5000000 305 ns/op BenchmarkHashInt64Speed-4 5000000 349 ns/op BenchmarkHashStringArraySpeed-4 2000000 911 ns/op BenchmarkMegMap-4 5000000 367 ns/op BenchmarkMegOneMap-4 5000000 311 ns/op BenchmarkMegEqMap-4 100 10147332 ns/op BenchmarkMegEmptyMap-4 10000000 138 ns/op BenchmarkSmallStrMap-4 5000000 367 ns/op BenchmarkMapStringKeysEight_16-4 5000000 395 ns/op BenchmarkMapStringKeysEight_32-4 5000000 378 ns/op BenchmarkMapStringKeysEight_64-4 5000000 378 ns/op BenchmarkMapStringKeysEight_1M-4 5000000 376 ns/op BenchmarkIntMap-4 10000000 198 ns/op BenchmarkRepeatedLookupStrMapKey32-4 2000000 799 ns/op BenchmarkRepeatedLookupStrMapKey1M-4 100 10023558 ns/op BenchmarkNewEmptyMap-4 2000000 841 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap-4 1000000 2357 ns/op 0 B/op 0 allocs/op BenchmarkMapIter-4 1000000 2132 ns/op BenchmarkMapIterEmpty-4 20000000 107 ns/op BenchmarkSameLengthMap-4 20000000 111 ns/op BenchmarkBigKeyMap-4 2000000 727 ns/op BenchmarkBigValMap-4 2000000 754 ns/op BenchmarkSmallKeyMap-4 5000000 296 ns/op BenchmarkComplexAlgMap-4 1000000 1786 ns/op BenchmarkMemmove0-4 30000000 47.7 ns/op BenchmarkMemmove1-4 30000000 50.2 ns/op 19.93 MB/s BenchmarkMemmove2-4 30000000 53.7 ns/op 37.28 MB/s BenchmarkMemmove3-4 30000000 56.9 ns/op 52.76 MB/s BenchmarkMemmove4-4 20000000 61.1 ns/op 65.42 MB/s BenchmarkMemmove5-4 20000000 75.8 ns/op 65.95 MB/s BenchmarkMemmove6-4 20000000 79.2 ns/op 75.80 MB/s BenchmarkMemmove7-4 20000000 82.5 ns/op 84.84 MB/s BenchmarkMemmove8-4 20000000 64.8 ns/op 123.37 MB/s BenchmarkMemmove9-4 20000000 67.1 ns/op 134.16 MB/s BenchmarkMemmove10-4 20000000 76.4 ns/op 130.87 MB/s BenchmarkMemmove11-4 20000000 81.3 ns/op 135.30 MB/s BenchmarkMemmove12-4 20000000 66.8 ns/op 179.68 MB/s BenchmarkMemmove13-4 20000000 70.6 ns/op 184.23 MB/s BenchmarkMemmove14-4 20000000 75.2 ns/op 186.19 MB/s BenchmarkMemmove15-4 20000000 79.5 ns/op 188.74 MB/s BenchmarkMemmove16-4 20000000 71.8 ns/op 222.73 MB/s BenchmarkMemmove32-4 20000000 68.3 ns/op 468.52 MB/s BenchmarkMemmove64-4 20000000 79.2 ns/op 808.35 MB/s BenchmarkMemmove128-4 20000000 101 ns/op 1256.13 MB/s BenchmarkMemmove256-4 10000000 145 ns/op 1755.64 MB/s BenchmarkMemmove512-4 5000000 244 ns/op 2095.34 MB/s BenchmarkMemmove1024-4 3000000 475 ns/op 2153.54 MB/s BenchmarkMemmove2048-4 2000000 883 ns/op 2317.95 MB/s BenchmarkMemmove4096-4 1000000 1809 ns/op 2262.99 MB/s BenchmarkMemmoveUnaligned0-4 30000000 58.1 ns/op BenchmarkMemmoveUnaligned1-4 20000000 63.3 ns/op 15.81 MB/s BenchmarkMemmoveUnaligned2-4 20000000 66.6 ns/op 30.04 MB/s BenchmarkMemmoveUnaligned3-4 20000000 69.9 ns/op 42.89 MB/s BenchmarkMemmoveUnaligned4-4 20000000 95.6 ns/op 41.85 MB/s BenchmarkMemmoveUnaligned5-4 20000000 98.6 ns/op 50.73 MB/s BenchmarkMemmoveUnaligned6-4 20000000 99.9 ns/op 60.08 MB/s BenchmarkMemmoveUnaligned7-4 20000000 101 ns/op 68.77 MB/s BenchmarkMemmoveUnaligned8-4 20000000 108 ns/op 73.58 MB/s BenchmarkMemmoveUnaligned9-4 20000000 112 ns/op 79.90 MB/s BenchmarkMemmoveUnaligned10-4 10000000 126 ns/op 79.18 MB/s BenchmarkMemmoveUnaligned11-4 10000000 128 ns/op 85.32 MB/s BenchmarkMemmoveUnaligned12-4 10000000 132 ns/op 90.67 MB/s BenchmarkMemmoveUnaligned13-4 10000000 125 ns/op 103.51 MB/s BenchmarkMemmoveUnaligned14-4 10000000 132 ns/op 105.50 MB/s BenchmarkMemmoveUnaligned15-4 10000000 138 ns/op 108.38 MB/s BenchmarkMemmoveUnaligned16-4 10000000 141 ns/op 112.89 MB/s BenchmarkMemmoveUnaligned32-4 10000000 154 ns/op 207.69 MB/s BenchmarkMemmoveUnaligned64-4 10000000 211 ns/op 303.20 MB/s BenchmarkMemmoveUnaligned128-4 5000000 318 ns/op 401.47 MB/s BenchmarkMemmoveUnaligned256-4 3000000 436 ns/op 586.76 MB/s BenchmarkMemmoveUnaligned512-4 2000000 722 ns/op 708.50 MB/s BenchmarkMemmoveUnaligned1024-4 1000000 1296 ns/op 789.56 MB/s BenchmarkMemmoveUnaligned2048-4 500000 2576 ns/op 794.83 MB/s BenchmarkMemmoveUnaligned4096-4 300000 4999 ns/op 819.32 MB/s BenchmarkMemclr5-4 20000000 77.1 ns/op 64.82 MB/s BenchmarkMemclr16-4 20000000 96.3 ns/op 166.15 MB/s BenchmarkMemclr64-4 20000000 85.0 ns/op 753.23 MB/s BenchmarkMemclr256-4 10000000 125 ns/op 2040.75 MB/s BenchmarkMemclr4096-4 1000000 1662 ns/op 2464.13 MB/s BenchmarkMemclr65536-4 30000 50428 ns/op 1299.58 MB/s BenchmarkMemclr1M-4 2000 875472 ns/op 1197.73 MB/s BenchmarkMemclr4M-4 500 3529939 ns/op 1188.21 MB/s BenchmarkMemclr8M-4 200 7088731 ns/op 1183.37 MB/s BenchmarkMemclr16M-4 100 14275180 ns/op 1175.27 MB/s BenchmarkMemclr64M-4 20 59343321 ns/op 1130.86 MB/s BenchmarkGoMemclr5-4 20000000 61.4 ns/op 81.44 MB/s BenchmarkGoMemclr16-4 20000000 81.7 ns/op 195.78 MB/s BenchmarkGoMemclr64-4 20000000 69.8 ns/op 917.14 MB/s BenchmarkGoMemclr256-4 20000000 109 ns/op 2339.84 MB/s BenchmarkClearFat8-4 200000000 7.84 ns/op BenchmarkClearFat12-4 200000000 8.93 ns/op BenchmarkClearFat16-4 100000000 10.1 ns/op BenchmarkClearFat24-4 100000000 12.3 ns/op BenchmarkClearFat32-4 100000000 14.5 ns/op BenchmarkClearFat40-4 30000000 52.4 ns/op BenchmarkClearFat48-4 20000000 60.3 ns/op BenchmarkClearFat56-4 20000000 65.9 ns/op BenchmarkClearFat64-4 20000000 73.8 ns/op BenchmarkClearFat128-4 10000000 126 ns/op BenchmarkClearFat256-4 10000000 234 ns/op BenchmarkClearFat512-4 3000000 448 ns/op BenchmarkClearFat1024-4 2000000 872 ns/op BenchmarkCopyFat8-4 200000000 6.72 ns/op BenchmarkCopyFat12-4 200000000 7.80 ns/op BenchmarkCopyFat16-4 200000000 8.93 ns/op BenchmarkCopyFat24-4 100000000 11.2 ns/op BenchmarkCopyFat32-4 100000000 17.9 ns/op BenchmarkCopyFat64-4 20000000 75.0 ns/op BenchmarkCopyFat128-4 10000000 128 ns/op BenchmarkCopyFat256-4 10000000 236 ns/op BenchmarkCopyFat512-4 3000000 449 ns/op BenchmarkCopyFat1024-4 2000000 879 ns/op BenchmarkFinalizer-4 500 3830391 ns/op BenchmarkFinalizerRun-4 200000 6697 ns/op BenchmarkSyscall-4 5000000 296 ns/op BenchmarkSyscallWork-4 3000000 551 ns/op BenchmarkSyscallExcess-4 5000000 296 ns/op BenchmarkSyscallExcessWork-4 3000000 552 ns/op BenchmarkPingPongHog-4 100000 13315 ns/op BenchmarkStackGrowth-4 500000 2461 ns/op BenchmarkStackGrowthDeep-4 2000 1028254 ns/op BenchmarkCreateGoroutines-4 500000 2722 ns/op BenchmarkCreateGoroutinesParallel-4 2000000 649 ns/op BenchmarkCreateGoroutinesCapture-4 100000 21739 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall-4 30000000 48.0 ns/op BenchmarkMatmult-4 50000000 40.3 ns/op BenchmarkIfaceCmp100-4 500000 2369 ns/op BenchmarkIfaceCmpNil100-4 500000 2475 ns/op BenchmarkDefer-4 1000000 1203 ns/op BenchmarkDefer10-4 1000000 1089 ns/op BenchmarkDeferMany-4 1000000 2045 ns/op BenchmarkStackCopy-4 1 2767373639 ns/op BenchmarkCompareStringEqual-4 10000000 140 ns/op BenchmarkCompareStringIdentical-4 30000000 41.4 ns/op BenchmarkCompareStringSameLength-4 20000000 92.0 ns/op BenchmarkCompareStringDifferentLength-4 100000000 13.4 ns/op BenchmarkCompareStringBigUnaligned-4 100 11917034 ns/op 87.99 MB/s BenchmarkCompareStringBig-4 200 10163432 ns/op 103.17 MB/s BenchmarkRuneIterate-4 500000 3969 ns/op BenchmarkRuneIterate2-4 500000 3947 ns/op BenchmarkUint32Div7-4 20000000 102 ns/op BenchmarkUint32Div37-4 20000000 102 ns/op BenchmarkUint32Div123-4 20000000 102 ns/op BenchmarkUint32Div763-4 20000000 102 ns/op BenchmarkUint32Div1247-4 20000000 102 ns/op BenchmarkUint32Div9305-4 20000000 102 ns/op BenchmarkUint32Div13307-4 20000000 102 ns/op BenchmarkUint32Div52513-4 20000000 103 ns/op BenchmarkUint32Div60978747-4 20000000 98.7 ns/op BenchmarkUint32Div106956295-4 20000000 100.0 ns/op BenchmarkUint32Mod7-4 20000000 102 ns/op BenchmarkUint32Mod37-4 20000000 102 ns/op BenchmarkUint32Mod123-4 20000000 102 ns/op BenchmarkUint32Mod763-4 20000000 103 ns/op BenchmarkUint32Mod1247-4 20000000 103 ns/op BenchmarkUint32Mod9305-4 20000000 102 ns/op BenchmarkUint32Mod13307-4 20000000 102 ns/op BenchmarkUint32Mod52513-4 20000000 103 ns/op BenchmarkUint32Mod60978747-4 20000000 100 ns/op BenchmarkUint32Mod106956295-4 20000000 100 ns/op ok runtime 562.289s Raspberry Pi Zero Architecture: 1 GHz ARM1176JZF-S, running at 700Mhz; 512MB RAM Operating System: Raspbian Jessie $ go version go version devel +5c24832 Sat Dec 5 00:10:40 2015 +0000 linux/arm $ go test -timeout 20m -v -bench=Benchmark -run=X PASS BenchmarkAppend 3000000 518 ns/op BenchmarkAppendGrowByte 20 95720661 ns/op BenchmarkAppendGrowString 1 2232033275 ns/op BenchmarkAppend1Byte 20000000 99.0 ns/op BenchmarkAppend4Bytes 10000000 120 ns/op BenchmarkAppend7Bytes 10000000 155 ns/op BenchmarkAppend8Bytes 10000000 132 ns/op BenchmarkAppend15Bytes 10000000 162 ns/op BenchmarkAppend16Bytes 10000000 134 ns/op BenchmarkAppend32Bytes 10000000 121 ns/op BenchmarkAppendStr1Byte 20000000 97.0 ns/op BenchmarkAppendStr4Bytes 10000000 118 ns/op BenchmarkAppendStr8Bytes 10000000 129 ns/op BenchmarkAppendStr16Bytes 10000000 132 ns/op BenchmarkAppendStr32Bytes 10000000 121 ns/op BenchmarkAppendSpecialCase 2000000 791 ns/op BenchmarkCopy1Byte 10000000 132 ns/op 7.54 MB/s BenchmarkCopy2Byte 10000000 144 ns/op 13.81 MB/s BenchmarkCopy4Byte 10000000 153 ns/op 26.12 MB/s BenchmarkCopy8Byte 10000000 164 ns/op 48.51 MB/s BenchmarkCopy12Byte 10000000 162 ns/op 74.03 MB/s BenchmarkCopy16Byte 10000000 167 ns/op 95.63 MB/s BenchmarkCopy32Byte 10000000 155 ns/op 205.20 MB/s BenchmarkCopy128Byte 10000000 192 ns/op 664.06 MB/s BenchmarkCopy1024Byte 2000000 689 ns/op 1484.28 MB/s BenchmarkCopy1String 10000000 120 ns/op 8.27 MB/s BenchmarkCopy2String 10000000 134 ns/op 14.85 MB/s BenchmarkCopy4String 10000000 142 ns/op 28.01 MB/s BenchmarkCopy8String 10000000 154 ns/op 51.81 MB/s BenchmarkCopy12String 10000000 151 ns/op 79.01 MB/s BenchmarkCopy16String 10000000 157 ns/op 101.82 MB/s BenchmarkCopy32String 10000000 145 ns/op 219.52 MB/s BenchmarkCopy128String 10000000 182 ns/op 700.88 MB/s BenchmarkCopy1024String 2000000 976 ns/op 1048.87 MB/s BenchmarkChanNonblocking 5000000 246 ns/op BenchmarkSelectUncontended 500000 3610 ns/op BenchmarkSelectSyncContended 100000 18957 ns/op BenchmarkSelectAsyncContended 500000 3614 ns/op BenchmarkSelectNonblock 2000000 814 ns/op BenchmarkChanUncontended 10000 135820 ns/op BenchmarkChanContended 10000 133122 ns/op BenchmarkChanSync 200000 5870 ns/op BenchmarkChanProdCons0 200000 5899 ns/op BenchmarkChanProdCons10 500000 2138 ns/op BenchmarkChanProdCons100 1000000 1557 ns/op BenchmarkChanProdConsWork0 200000 8948 ns/op BenchmarkChanProdConsWork10 300000 5043 ns/op BenchmarkChanProdConsWork100 300000 4498 ns/op BenchmarkSelectProdCons 200000 10818 ns/op BenchmarkChanCreation 500000 3187 ns/op BenchmarkChanSem 1000000 1266 ns/op BenchmarkChanPopular 100 14315946 ns/op BenchmarkCallClosure 30000000 50.0 ns/op BenchmarkCallClosure1 30000000 56.3 ns/op BenchmarkCallClosure2 3000000 512 ns/op BenchmarkCallClosure3 3000000 503 ns/op BenchmarkCallClosure4 3000000 512 ns/op BenchmarkComplex128DivNormal 2000000 735 ns/op BenchmarkComplex128DivNisNaN 200000 6001 ns/op BenchmarkComplex128DivDisNaN 200000 5992 ns/op BenchmarkComplex128DivNisInf 5000000 390 ns/op BenchmarkComplex128DivDisInf 5000000 375 ns/op BenchmarkSetTypePtr 10000000 119 ns/op 33.43 MB/s BenchmarkSetTypePtr8 10000000 227 ns/op 140.89 MB/s BenchmarkSetTypePtr16 5000000 285 ns/op 224.30 MB/s BenchmarkSetTypePtr32 5000000 388 ns/op 329.65 MB/s BenchmarkSetTypePtr64 3000000 591 ns/op 432.77 MB/s BenchmarkSetTypePtr126 1000000 1021 ns/op 493.46 MB/s BenchmarkSetTypePtr128 1000000 1003 ns/op 510.46 MB/s BenchmarkSetTypePtrSlice 200000 7427 ns/op 551.43 MB/s BenchmarkSetTypeNode1 10000000 217 ns/op 55.20 MB/s BenchmarkSetTypeNode1Slice 1000000 1284 ns/op 299.03 MB/s BenchmarkSetTypeNode8 5000000 277 ns/op 144.17 MB/s BenchmarkSetTypeNode8Slice 500000 2825 ns/op 453.02 MB/s BenchmarkSetTypeNode64 2000000 661 ns/op 398.89 MB/s BenchmarkSetTypeNode64Slice 100000 15531 ns/op 543.92 MB/s BenchmarkSetTypeNode64Dead 5000000 382 ns/op 689.66 MB/s BenchmarkSetTypeNode64DeadSlice 100000 13252 ns/op 637.46 MB/s BenchmarkSetTypeNode124 1000000 1017 ns/op 495.27 MB/s BenchmarkSetTypeNode124Slice 50000 28139 ns/op 573.14 MB/s BenchmarkSetTypeNode126 2000000 1001 ns/op 511.10 MB/s BenchmarkSetTypeNode126Slice 50000 26535 ns/op 617.43 MB/s BenchmarkSetTypeNode128 1000000 1087 ns/op 478.22 MB/s BenchmarkSetTypeNode128Slice 50000 29166 ns/op 570.52 MB/s BenchmarkSetTypeNode130 1000000 1067 ns/op 494.83 MB/s BenchmarkSetTypeNode130Slice 50000 29691 ns/op 569.04 MB/s BenchmarkSetTypeNode1024 200000 7155 ns/op 573.51 MB/s BenchmarkSetTypeNode1024Slice 5000 224292 ns/op 585.52 MB/s BenchmarkAllocation 2000 957094 ns/op BenchmarkHash5 5000000 349 ns/op 14.29 MB/s BenchmarkHash16 3000000 436 ns/op 36.66 MB/s BenchmarkHash64 1000000 1007 ns/op 63.49 MB/s BenchmarkHash1024 200000 11267 ns/op 90.88 MB/s BenchmarkHash65536 2000 797741 ns/op 82.15 MB/s BenchmarkEqEfaceConcrete 20000000 111 ns/op BenchmarkEqIfaceConcrete 20000000 106 ns/op BenchmarkNeEfaceConcrete 20000000 111 ns/op BenchmarkNeIfaceConcrete 20000000 106 ns/op BenchmarkConvT2ESmall 3000000 561 ns/op BenchmarkConvT2EUintptr 2000000 599 ns/op BenchmarkConvT2ELarge 2000000 767 ns/op BenchmarkConvT2ISmall 2000000 724 ns/op BenchmarkConvT2IUintptr 2000000 750 ns/op BenchmarkConvT2ILarge 2000000 907 ns/op BenchmarkConvI2E 20000000 76.7 ns/op BenchmarkConvI2I 3000000 425 ns/op BenchmarkAssertE2T 10000000 176 ns/op BenchmarkAssertE2TLarge 10000000 189 ns/op BenchmarkAssertE2I 3000000 455 ns/op BenchmarkAssertI2T 10000000 176 ns/op BenchmarkAssertI2I 3000000 451 ns/op BenchmarkAssertI2E 20000000 109 ns/op BenchmarkAssertE2E 30000000 40.7 ns/op BenchmarkAssertE2T2 10000000 180 ns/op BenchmarkAssertE2T2Blank 50000000 22.8 ns/op BenchmarkAssertI2E2 20000000 117 ns/op BenchmarkAssertI2E2Blank 100000000 21.7 ns/op BenchmarkAssertE2E2 10000000 231 ns/op BenchmarkAssertE2E2Blank 100000000 21.8 ns/op BenchmarkMalloc8 3000000 507 ns/op BenchmarkMalloc16 2000000 848 ns/op BenchmarkMallocTypeInfo8 2000000 1012 ns/op BenchmarkMallocTypeInfo16 1000000 1168 ns/op BenchmarkMallocLargeStruct 500000 4823 ns/op BenchmarkGoroutineSelect 20 76172338 ns/op BenchmarkGoroutineBlocking 20 63469806 ns/op BenchmarkGoroutineForRange 20 64107650 ns/op BenchmarkGoroutineIdle 20 60844381 ns/op BenchmarkMapPop100 3000 409498 ns/op BenchmarkMapPop1000 200 7783817 ns/op BenchmarkMapPop10000 10 170736704 ns/op BenchmarkHashStringSpeed 3000000 541 ns/op BenchmarkHashBytesSpeed 1000000 1157 ns/op BenchmarkHashInt32Speed 5000000 371 ns/op BenchmarkHashInt64Speed 3000000 427 ns/op BenchmarkHashStringArraySpeed 1000000 1417 ns/op BenchmarkMegMap 3000000 404 ns/op BenchmarkMegOneMap 5000000 346 ns/op BenchmarkMegEqMap 100 16663414 ns/op BenchmarkMegEmptyMap 10000000 160 ns/op BenchmarkSmallStrMap 3000000 415 ns/op BenchmarkMapStringKeysEight_16 3000000 417 ns/op BenchmarkMapStringKeysEight_32 3000000 420 ns/op BenchmarkMapStringKeysEight_64 3000000 420 ns/op BenchmarkMapStringKeysEight_1M 3000000 419 ns/op BenchmarkIntMap 10000000 220 ns/op BenchmarkRepeatedLookupStrMapKey32 1000000 1015 ns/op BenchmarkRepeatedLookupStrMapKey1M 100 15652033 ns/op BenchmarkNewEmptyMap 1000000 1395 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap 300000 3368 ns/op 0 B/op 0 allocs/op BenchmarkMapIter 500000 2947 ns/op BenchmarkMapIterEmpty 20000000 163 ns/op BenchmarkSameLengthMap 10000000 133 ns/op BenchmarkBigKeyMap 2000000 899 ns/op BenchmarkBigValMap 2000000 922 ns/op BenchmarkSmallKeyMap 3000000 402 ns/op BenchmarkComplexAlgMap 1000000 2003 ns/op BenchmarkMemmove0 20000000 61.4 ns/op BenchmarkMemmove1 20000000 76.6 ns/op 13.05 MB/s BenchmarkMemmove2 20000000 86.3 ns/op 23.18 MB/s BenchmarkMemmove3 20000000 83.7 ns/op 35.83 MB/s BenchmarkMemmove4 20000000 88.0 ns/op 45.48 MB/s BenchmarkMemmove5 20000000 110 ns/op 45.37 MB/s BenchmarkMemmove6 20000000 115 ns/op 51.99 MB/s BenchmarkMemmove7 10000000 123 ns/op 56.89 MB/s BenchmarkMemmove8 20000000 99.5 ns/op 80.44 MB/s BenchmarkMemmove9 20000000 112 ns/op 79.76 MB/s BenchmarkMemmove10 10000000 125 ns/op 79.48 MB/s BenchmarkMemmove11 10000000 125 ns/op 87.84 MB/s BenchmarkMemmove12 20000000 96.9 ns/op 123.87 MB/s BenchmarkMemmove13 20000000 110 ns/op 117.83 MB/s BenchmarkMemmove14 10000000 123 ns/op 113.65 MB/s BenchmarkMemmove15 10000000 122 ns/op 122.30 MB/s BenchmarkMemmove16 20000000 101 ns/op 156.89 MB/s BenchmarkMemmove32 20000000 90.8 ns/op 352.44 MB/s BenchmarkMemmove64 20000000 108 ns/op 588.34 MB/s BenchmarkMemmove128 10000000 127 ns/op 1001.83 MB/s BenchmarkMemmove256 10000000 178 ns/op 1436.19 MB/s BenchmarkMemmove512 5000000 326 ns/op 1569.07 MB/s BenchmarkMemmove1024 2000000 631 ns/op 1620.84 MB/s BenchmarkMemmove2048 1000000 1251 ns/op 1636.60 MB/s BenchmarkMemmove4096 500000 2499 ns/op 1638.97 MB/s BenchmarkMemmoveUnaligned0 20000000 72.5 ns/op BenchmarkMemmoveUnaligned1 20000000 87.8 ns/op 11.39 MB/s BenchmarkMemmoveUnaligned2 20000000 99.4 ns/op 20.12 MB/s BenchmarkMemmoveUnaligned3 20000000 96.9 ns/op 30.96 MB/s BenchmarkMemmoveUnaligned4 10000000 135 ns/op 29.44 MB/s BenchmarkMemmoveUnaligned5 10000000 147 ns/op 33.90 MB/s BenchmarkMemmoveUnaligned6 10000000 146 ns/op 41.09 MB/s BenchmarkMemmoveUnaligned7 10000000 151 ns/op 46.27 MB/s BenchmarkMemmoveUnaligned8 10000000 156 ns/op 51.22 MB/s BenchmarkMemmoveUnaligned9 10000000 161 ns/op 55.82 MB/s BenchmarkMemmoveUnaligned10 10000000 166 ns/op 60.09 MB/s BenchmarkMemmoveUnaligned11 10000000 171 ns/op 64.17 MB/s BenchmarkMemmoveUnaligned12 10000000 177 ns/op 67.79 MB/s BenchmarkMemmoveUnaligned13 10000000 181 ns/op 71.60 MB/s BenchmarkMemmoveUnaligned14 10000000 189 ns/op 74.03 MB/s BenchmarkMemmoveUnaligned15 10000000 196 ns/op 76.30 MB/s BenchmarkMemmoveUnaligned16 10000000 200 ns/op 79.91 MB/s BenchmarkMemmoveUnaligned32 10000000 221 ns/op 144.64 MB/s BenchmarkMemmoveUnaligned64 5000000 290 ns/op 220.16 MB/s BenchmarkMemmoveUnaligned128 3000000 413 ns/op 309.84 MB/s BenchmarkMemmoveUnaligned256 2000000 766 ns/op 334.16 MB/s BenchmarkMemmoveUnaligned512 2000000 925 ns/op 553.13 MB/s BenchmarkMemmoveUnaligned1024 500000 2747 ns/op 372.66 MB/s BenchmarkMemmoveUnaligned2048 500000 3180 ns/op 643.85 MB/s BenchmarkMemmoveUnaligned4096 200000 6206 ns/op 659.99 MB/s BenchmarkMemclr5 20000000 105 ns/op 47.53 MB/s BenchmarkMemclr16 20000000 110 ns/op 144.77 MB/s BenchmarkMemclr64 10000000 125 ns/op 511.58 MB/s BenchmarkMemclr256 10000000 182 ns/op 1402.34 MB/s BenchmarkMemclr4096 500000 2489 ns/op 1645.22 MB/s BenchmarkMemclr65536 50000 39883 ns/op 1643.18 MB/s BenchmarkMemclr1M 2000 636812 ns/op 1646.60 MB/s BenchmarkMemclr4M 500 2549362 ns/op 1645.24 MB/s BenchmarkMemclr8M 300 5162451 ns/op 1624.93 MB/s BenchmarkMemclr16M 200 10300878 ns/op 1628.72 MB/s BenchmarkMemclr64M 30 42801198 ns/op 1567.92 MB/s BenchmarkGoMemclr5 20000000 73.5 ns/op 67.99 MB/s BenchmarkGoMemclr16 20000000 85.9 ns/op 186.24 MB/s BenchmarkGoMemclr64 20000000 87.8 ns/op 729.24 MB/s BenchmarkGoMemclr256 10000000 160 ns/op 1591.97 MB/s BenchmarkClearFat8 100000000 15.6 ns/op BenchmarkClearFat12 100000000 27.5 ns/op BenchmarkClearFat16 100000000 32.4 ns/op BenchmarkClearFat24 50000000 57.0 ns/op BenchmarkClearFat32 50000000 80.5 ns/op BenchmarkClearFat40 30000000 77.5 ns/op BenchmarkClearFat48 30000000 105 ns/op BenchmarkClearFat56 20000000 87.1 ns/op BenchmarkClearFat64 20000000 137 ns/op BenchmarkClearFat128 20000000 278 ns/op BenchmarkClearFat256 5000000 537 ns/op BenchmarkClearFat512 2000000 1293 ns/op BenchmarkClearFat1024 1000000 2545 ns/op BenchmarkCopyFat8 100000000 12.2 ns/op BenchmarkCopyFat12 100000000 20.3 ns/op BenchmarkCopyFat16 100000000 34.3 ns/op BenchmarkCopyFat24 50000000 27.7 ns/op BenchmarkCopyFat32 50000000 25.4 ns/op BenchmarkCopyFat64 20000000 135 ns/op BenchmarkCopyFat128 10000000 299 ns/op BenchmarkCopyFat256 2000000 571 ns/op BenchmarkCopyFat512 1000000 1218 ns/op BenchmarkCopyFat1024 500000 2665 ns/op BenchmarkFinalizer 50 20313669 ns/op BenchmarkFinalizerRun 30000 49987 ns/op BenchmarkSyscall 1000000 1625 ns/op BenchmarkSyscallWork 500000 2668 ns/op BenchmarkSyscallExcess 1000000 1613 ns/op BenchmarkSyscallExcessWork 500000 2658 ns/op BenchmarkPingPongHog 100000 20539 ns/op BenchmarkStackGrowth 50000 28473 ns/op BenchmarkStackGrowthDeep 500 2845263 ns/op BenchmarkCreateGoroutines 300000 4297 ns/op BenchmarkCreateGoroutinesParallel 300000 4300 ns/op BenchmarkCreateGoroutinesCapture 50000 33218 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall 30000000 55.1 ns/op BenchmarkMatmult 10000000 196 ns/op BenchmarkIfaceCmp100 500000 2672 ns/op BenchmarkIfaceCmpNil100 500000 2982 ns/op BenchmarkDefer 1000000 1819 ns/op BenchmarkDefer10 1000000 1478 ns/op BenchmarkDeferMany 500000 3464 ns/op BenchmarkStackCopy 1 3714828065 ns/op BenchmarkCompareStringEqual 10000000 160 ns/op BenchmarkCompareStringIdentical 30000000 54.1 ns/op BenchmarkCompareStringSameLength 20000000 111 ns/op BenchmarkCompareStringDifferentLength 100000000 16.3 ns/op BenchmarkCompareStringBigUnaligned 100 16695582 ns/op 62.81 MB/s BenchmarkCompareStringBig 100 17208318 ns/op 60.93 MB/s BenchmarkRuneIterate 300000 5159 ns/op BenchmarkRuneIterate2 300000 5158 ns/op BenchmarkUint32Div7 10000000 144 ns/op BenchmarkUint32Div37 10000000 144 ns/op BenchmarkUint32Div123 10000000 144 ns/op BenchmarkUint32Div763 10000000 148 ns/op BenchmarkUint32Div1247 10000000 144 ns/op BenchmarkUint32Div9305 10000000 144 ns/op BenchmarkUint32Div13307 10000000 144 ns/op BenchmarkUint32Div52513 10000000 144 ns/op BenchmarkUint32Div60978747 10000000 131 ns/op BenchmarkUint32Div106956295 10000000 131 ns/op BenchmarkUint32Mod7 10000000 144 ns/op BenchmarkUint32Mod37 10000000 144 ns/op BenchmarkUint32Mod123 10000000 144 ns/op BenchmarkUint32Mod763 10000000 144 ns/op BenchmarkUint32Mod1247 10000000 144 ns/op BenchmarkUint32Mod9305 10000000 144 ns/op BenchmarkUint32Mod13307 10000000 144 ns/op BenchmarkUint32Mod52513 10000000 144 ns/op BenchmarkUint32Mod60978747 10000000 131 ns/op BenchmarkUint32Mod106956295 10000000 131 ns/op ok runtime 566.969s ODROID-X Architecture: ARMv7 quad-core Cortex-A9 (Samsung Exynos 4412 1.4GHz), 1GB RAM, Mali graphics (untested). Operating System: Archlinux ARM Go pre-1.1 compiles out of the box. The four cores make it particularly suited to Go multi-threaded programs. An ODROID-X2 is coming (Nov 2012) with more RAM. \u2013 R\u00e9my Oudompheng BananaPi BananaPi has a few enhanced hardware components compare with Raspberry Pi. Architecture Comments Allwinner A20(ARM Cortex-A7 Dual-core, 1GHz, Mali400MP2 GPU) tbc eSATA No worry to wear out your root SD Card Onboard Microphone tbc 1G Etherenet tbc 1G RAM tbc Reset Switch To reset the board ? Power Switch To power cycle the board ? root@bpi01:/data/go13/src# cat ./buildgo.bash #!/bin/bash # use 1 CPU to avoid out of memory compilation issue. time taskset 2 ./make.bash root@bpi01:/data/go13/src# ./buildgo.bash <snipped> Installed Go for linux/arm in /data/go1.3 Installed commands in /data/go1.3/bin real 9m9.222s user 8m18.960s sys 0m40.920s root@bpi01:/data/go1.3/src# \u2013T.J. Yang AppliedMicro X-Gene (ARMv8) Architecture: ARMv8 (64-bit) 8-core, 2.4GHz, 16GB RAM Operating Systems: Linux, Fedora 21 You will need to cross-compile a toolchain using bootstrap.bash. After you copy it to the arm64 system and set GOROOT_BOOTSTRAP , you can build go natively. 96Boards HiKey (ARMv8) Architecture: ARMv8 (64-bit) 8-core, 1.2GHz, 1GB RAM Operating System: Linux (Linaro) Go Version: 1.5Beta1 Special Notes: Enable a swap partition (<=1GB is fine). Build process is CPU-intensive and may cause the internal 90C temperature threshold to be exceeded - keep the HiKey cool during the build. As mentioned above, use bootstrap.sh (e.g. on Ubuntu AMD64) for ARM64, then transfer over the bootstrap tbx file, untar it, and use it as GOROOT_BOOTSTRAP. Check out the Go sources into a separate GOROOT, and build. \u2013Andrew Cencini ( andrew@vapor.io ) Scaleway C1 Server Architecture: armv7l Operating System: Debian 8.2 (armhf) Go Version: 1.5 The Scaleway C1 Server is a dedicated ARM server with 2GiB RAM using a SAN for storage. I used the following guide: Building Go 1.5 on the Raspberry Pi _\u2013Laurent Debacker Jetson Nano Jetson Nano\u2122 from NVIDIA\u00ae is a high performance low-power single board computer built for edge Artificial Intelligence computing. It has Quad-core ARM57 based CPU clocked at 1.43 Ghz, 128-core Maxwell based GPU and 4GB of LPDDR4 memory with 25.6 GB/s bandwidth. Architecture: ARMv8-A Operating System: Jetson Nano Developer Kit (Ubuntu 18.04 LTS) with JetPack 4.2 Kernel: I'm using a custom compiled official kernel with patch for enabling Zswap and having the root file system in a USB SSD. The procedure for doing this is detailed in Syonyk's blog . abishek@Titan:~$ uname -a Linux Titan 4.9.140 #1 SMP PREEMPT Thu May 23 01:33:05 IST 2019 aarch64 aarch64 aarch64 GNU/Linux Go Version: abishek@Titan:~$ go version go version go1.12.5 linux/arm64 I used the ARMv8 version from Other Ports section of official downloads. I set the following system wide environment variables in /etc/environment. GOROOT=\"/usr/local/go\" GOPATH=\"/home/abishek/Developer/go/packages\" PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/go/bin:/home/abishek/Developer/go/packages/bin\" LANG=\"en_IN\" Benchmarks: HW configuration : 5V 4A power via DC barrel jack. Noctua 40mm PWM fan. Samsung 840 EVO 120 GB SSD. SW configuration : Headless. Zswap. 12 GB swap partition. Simple benchmark. abishek@Titan:~$ cd $GOROOT/src/runtime $ go test -test.bench=BenchmarkUint PASS ok runtime 329.992s Extensive benchmarks. $ go test -test.bench=\".*\" -test.timeout=\"60m\" goos: linux goarch: arm64 pkg: runtime BenchmarkMakeChan/Byte-4 10000000 219 ns/op BenchmarkMakeChan/Int-4 5000000 298 ns/op BenchmarkMakeChan/Ptr-4 3000000 452 ns/op BenchmarkMakeChan/Struct/0-4 10000000 196 ns/op BenchmarkMakeChan/Struct/32-4 3000000 519 ns/op BenchmarkMakeChan/Struct/40-4 3000000 592 ns/op BenchmarkChanNonblocking-4 200000000 7.93 ns/op BenchmarkSelectUncontended-4 10000000 124 ns/op BenchmarkSelectSyncContended-4 200000 7358 ns/op BenchmarkSelectAsyncContended-4 2000000 671 ns/op BenchmarkSelectNonblock-4 100000000 22.7 ns/op BenchmarkChanUncontended-4 200000 6956 ns/op BenchmarkChanContended-4 30000 51996 ns/op BenchmarkChanSync-4 1000000 1118 ns/op BenchmarkChanSyncWork-4 200000 11784 ns/op BenchmarkChanProdCons0-4 2000000 817 ns/op BenchmarkChanProdCons10-4 2000000 656 ns/op BenchmarkChanProdCons100-4 3000000 561 ns/op BenchmarkChanProdConsWork0-4 2000000 803 ns/op BenchmarkChanProdConsWork10-4 2000000 706 ns/op BenchmarkChanProdConsWork100-4 2000000 633 ns/op BenchmarkSelectProdCons-4 1000000 1411 ns/op BenchmarkChanCreation-4 10000000 206 ns/op BenchmarkChanSem-4 3000000 502 ns/op BenchmarkChanPopular-4 1000 1503920 ns/op BenchmarkCallClosure-4 200000000 6.54 ns/op BenchmarkCallClosure1-4 300000000 5.94 ns/op BenchmarkCallClosure2-4 20000000 72.0 ns/op BenchmarkCallClosure3-4 20000000 77.9 ns/op BenchmarkCallClosure4-4 20000000 74.6 ns/op BenchmarkComplex128DivNormal-4 20000000 72.3 ns/op BenchmarkComplex128DivNisNaN-4 30000000 47.0 ns/op BenchmarkComplex128DivDisNaN-4 20000000 67.6 ns/op BenchmarkComplex128DivNisInf-4 50000000 38.7 ns/op BenchmarkComplex128DivDisInf-4 20000000 79.3 ns/op BenchmarkSetTypePtr-4 200000000 8.54 ns/op 936.87 MB/s BenchmarkSetTypePtr8-4 50000000 37.2 ns/op 1720.14 MB/s BenchmarkSetTypePtr16-4 30000000 45.6 ns/op 2806.20 MB/s BenchmarkSetTypePtr32-4 20000000 60.4 ns/op 4236.17 MB/s BenchmarkSetTypePtr64-4 20000000 110 ns/op 4615.47 MB/s BenchmarkSetTypePtr126-4 10000000 171 ns/op 5892.51 MB/s BenchmarkSetTypePtr128-4 10000000 169 ns/op 6030.73 MB/s BenchmarkSetTypePtrSlice-4 1000000 1589 ns/op 5154.84 MB/s BenchmarkSetTypeNode1-4 50000000 33.7 ns/op 712.62 MB/s BenchmarkSetTypeNode1Slice-4 10000000 197 ns/op 3881.85 MB/s BenchmarkSetTypeNode8-4 30000000 42.1 ns/op 1899.69 MB/s BenchmarkSetTypeNode8Slice-4 3000000 558 ns/op 4584.96 MB/s BenchmarkSetTypeNode64-4 10000000 128 ns/op 4123.56 MB/s BenchmarkSetTypeNode64Slice-4 500000 2707 ns/op 6240.73 MB/s BenchmarkSetTypeNode64Dead-4 20000000 72.4 ns/op 7291.77 MB/s BenchmarkSetTypeNode64DeadSlice-4 500000 3203 ns/op 5274.16 MB/s BenchmarkSetTypeNode124-4 10000000 169 ns/op 5961.36 MB/s BenchmarkSetTypeNode124Slice-4 300000 4505 ns/op 7159.55 MB/s BenchmarkSetTypeNode126-4 10000000 171 ns/op 5971.04 MB/s BenchmarkSetTypeNode126Slice-4 300000 4430 ns/op 7395.67 MB/s BenchmarkSetTypeNode128-4 10000000 181 ns/op 5737.43 MB/s BenchmarkSetTypeNode128Slice-4 300000 4958 ns/op 6711.13 MB/s BenchmarkSetTypeNode130-4 10000000 183 ns/op 5764.99 MB/s BenchmarkSetTypeNode130Slice-4 300000 5092 ns/op 6635.64 MB/s BenchmarkSetTypeNode1024-4 1000000 1104 ns/op 7430.05 MB/s BenchmarkSetTypeNode1024Slice-4 50000 32624 ns/op 8050.89 MB/s BenchmarkAllocation-4 30000 42818 ns/op BenchmarkReadMemStats-4 50000 26260 ns/op BenchmarkWriteBarrier-4 20000000 59.5 ns/op BenchmarkBulkWriteBarrier-4 50000000 30.4 ns/op BenchmarkScanStackNoLocals-4 10 161375576 ns/op BenchmarkHash5-4 50000000 24.4 ns/op 205.24 MB/s BenchmarkHash16-4 100000000 22.9 ns/op 698.97 MB/s BenchmarkHash64-4 50000000 36.2 ns/op 1766.78 MB/s BenchmarkHash1024-4 10000000 144 ns/op 7062.29 MB/s BenchmarkHash65536-4 200000 7637 ns/op 8580.67 MB/s BenchmarkAlignedLoad-4 200000000 7.74 ns/op BenchmarkUnalignedLoad-4 200000000 7.72 ns/op BenchmarkEqEfaceConcrete-4 500000000 3.51 ns/op BenchmarkEqIfaceConcrete-4 500000000 3.86 ns/op BenchmarkNeEfaceConcrete-4 500000000 3.51 ns/op BenchmarkNeIfaceConcrete-4 500000000 3.86 ns/op BenchmarkConvT2ESmall-4 100000000 10.9 ns/op BenchmarkConvT2EUintptr-4 100000000 10.7 ns/op BenchmarkConvT2ELarge-4 20000000 119 ns/op BenchmarkConvT2ISmall-4 100000000 11.0 ns/op BenchmarkConvT2IUintptr-4 100000000 10.5 ns/op BenchmarkConvT2ILarge-4 20000000 118 ns/op BenchmarkConvI2E-4 300000000 5.43 ns/op BenchmarkConvI2I-4 30000000 52.5 ns/op BenchmarkAssertE2T-4 500000000 3.79 ns/op BenchmarkAssertE2TLarge-4 200000000 7.13 ns/op BenchmarkAssertE2I-4 30000000 53.3 ns/op BenchmarkAssertI2T-4 500000000 3.75 ns/op BenchmarkAssertI2I-4 30000000 54.0 ns/op BenchmarkAssertI2E-4 300000000 5.38 ns/op BenchmarkAssertE2E-4 300000000 4.91 ns/op BenchmarkAssertE2T2-4 300000000 4.91 ns/op BenchmarkAssertE2T2Blank-4 500000000 3.04 ns/op BenchmarkAssertI2E2-4 200000000 6.67 ns/op BenchmarkAssertI2E2Blank-4 500000000 3.04 ns/op BenchmarkAssertE2E2-4 200000000 6.32 ns/op BenchmarkAssertE2E2Blank-4 500000000 3.04 ns/op BenchmarkConvT2Ezero/zero/16-4 100000000 10.9 ns/op BenchmarkConvT2Ezero/zero/32-4 100000000 10.5 ns/op BenchmarkConvT2Ezero/zero/64-4 100000000 10.5 ns/op BenchmarkConvT2Ezero/zero/str-4 100000000 11.9 ns/op BenchmarkConvT2Ezero/zero/slice-4 100000000 12.8 ns/op BenchmarkConvT2Ezero/zero/big-4 2000000 715 ns/op BenchmarkConvT2Ezero/nonzero/16-4 30000000 52.6 ns/op BenchmarkConvT2Ezero/nonzero/32-4 20000000 61.4 ns/op BenchmarkConvT2Ezero/nonzero/64-4 20000000 73.1 ns/op BenchmarkConvT2Ezero/nonzero/str-4 10000000 128 ns/op BenchmarkConvT2Ezero/nonzero/slice-4 10000000 160 ns/op BenchmarkConvT2Ezero/nonzero/big-4 2000000 722 ns/op BenchmarkMalloc8-4 20000000 67.4 ns/op BenchmarkMalloc16-4 20000000 102 ns/op BenchmarkMallocTypeInfo8-4 20000000 99.4 ns/op BenchmarkMallocTypeInfo16-4 20000000 119 ns/op BenchmarkMallocLargeStruct-4 1000000 1034 ns/op BenchmarkGoroutineSelect-4 200 5243015 ns/op BenchmarkGoroutineBlocking-4 200 6219647 ns/op BenchmarkGoroutineForRange-4 200 6146714 ns/op BenchmarkGoroutineIdle-4 500 2738542 ns/op BenchmarkHashStringSpeed-4 20000000 75.0 ns/op BenchmarkHashBytesSpeed-4 20000000 123 ns/op BenchmarkHashInt32Speed-4 30000000 64.2 ns/op BenchmarkHashInt64Speed-4 20000000 56.2 ns/op BenchmarkHashStringArraySpeed-4 10000000 175 ns/op BenchmarkMegMap-4 30000000 51.4 ns/op BenchmarkMegOneMap-4 100000000 21.8 ns/op BenchmarkMegEqMap-4 5000 378562 ns/op BenchmarkMegEmptyMap-4 200000000 9.83 ns/op BenchmarkSmallStrMap-4 30000000 53.3 ns/op BenchmarkMapStringKeysEight_16-4 30000000 48.8 ns/op BenchmarkMapStringKeysEight_32-4 30000000 47.0 ns/op BenchmarkMapStringKeysEight_64-4 30000000 47.0 ns/op BenchmarkMapStringKeysEight_1M-4 30000000 47.3 ns/op BenchmarkIntMap-4 30000000 47.9 ns/op BenchmarkMapFirst/1-4 100000000 15.4 ns/op BenchmarkMapFirst/2-4 100000000 15.6 ns/op BenchmarkMapFirst/3-4 100000000 15.6 ns/op BenchmarkMapFirst/4-4 100000000 15.6 ns/op BenchmarkMapFirst/5-4 100000000 15.6 ns/op BenchmarkMapFirst/6-4 100000000 15.4 ns/op BenchmarkMapFirst/7-4 100000000 15.6 ns/op BenchmarkMapFirst/8-4 100000000 15.4 ns/op BenchmarkMapFirst/9-4 50000000 35.2 ns/op BenchmarkMapFirst/10-4 50000000 35.4 ns/op BenchmarkMapFirst/11-4 50000000 35.1 ns/op BenchmarkMapFirst/12-4 50000000 35.1 ns/op BenchmarkMapFirst/13-4 50000000 35.1 ns/op BenchmarkMapFirst/14-4 50000000 35.1 ns/op BenchmarkMapFirst/15-4 50000000 35.1 ns/op BenchmarkMapFirst/16-4 50000000 35.1 ns/op BenchmarkMapMid/1-4 100000000 16.1 ns/op BenchmarkMapMid/2-4 100000000 19.0 ns/op BenchmarkMapMid/3-4 100000000 19.1 ns/op BenchmarkMapMid/4-4 100000000 21.3 ns/op BenchmarkMapMid/5-4 100000000 21.1 ns/op BenchmarkMapMid/6-4 100000000 23.2 ns/op BenchmarkMapMid/7-4 100000000 23.2 ns/op BenchmarkMapMid/8-4 50000000 25.6 ns/op BenchmarkMapMid/9-4 30000000 40.0 ns/op BenchmarkMapMid/10-4 30000000 55.1 ns/op BenchmarkMapMid/11-4 30000000 46.0 ns/op BenchmarkMapMid/12-4 30000000 46.0 ns/op BenchmarkMapMid/13-4 30000000 46.0 ns/op BenchmarkMapMid/14-4 50000000 46.0 ns/op BenchmarkMapMid/15-4 30000000 40.0 ns/op BenchmarkMapMid/16-4 50000000 46.4 ns/op BenchmarkMapLast/1-4 100000000 16.1 ns/op BenchmarkMapLast/2-4 100000000 19.0 ns/op BenchmarkMapLast/3-4 100000000 21.1 ns/op BenchmarkMapLast/4-4 50000000 23.2 ns/op BenchmarkMapLast/5-4 50000000 25.3 ns/op BenchmarkMapLast/6-4 50000000 27.4 ns/op BenchmarkMapLast/7-4 50000000 29.6 ns/op BenchmarkMapLast/8-4 30000000 47.4 ns/op BenchmarkMapLast/9-4 30000000 52.1 ns/op BenchmarkMapLast/10-4 30000000 56.8 ns/op BenchmarkMapLast/11-4 30000000 56.9 ns/op BenchmarkMapLast/12-4 30000000 55.6 ns/op BenchmarkMapLast/13-4 20000000 55.1 ns/op BenchmarkMapLast/14-4 20000000 51.9 ns/op BenchmarkMapLast/15-4 30000000 48.4 ns/op BenchmarkMapLast/16-4 30000000 48.4 ns/op BenchmarkMapCycle-4 20000000 80.9 ns/op BenchmarkRepeatedLookupStrMapKey32-4 20000000 76.9 ns/op BenchmarkRepeatedLookupStrMapKey1M-4 5000 241809 ns/op BenchmarkMakeMap/[Byte]Byte-4 5000000 378 ns/op BenchmarkMakeMap/[Int]Int-4 3000000 586 ns/op BenchmarkNewEmptyMap-4 50000000 25.3 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap-4 10000000 152 ns/op 0 B/op 0 allocs/op BenchmarkMapIter-4 5000000 323 ns/op BenchmarkMapIterEmpty-4 100000000 22.5 ns/op BenchmarkSameLengthMap-4 100000000 18.3 ns/op BenchmarkBigKeyMap-4 20000000 95.4 ns/op BenchmarkBigValMap-4 20000000 95.5 ns/op BenchmarkSmallKeyMap-4 20000000 66.7 ns/op BenchmarkMapPopulate/1-4 20000000 83.6 ns/op 0 B/op 0 allocs/op BenchmarkMapPopulate/10-4 1000000 1953 ns/op 179 B/op 1 allocs/op BenchmarkMapPopulate/100-4 50000 25432 ns/op 3252 B/op 15 allocs/op BenchmarkMapPopulate/1000-4 5000 279914 ns/op 49383 B/op 19 allocs/op BenchmarkMapPopulate/10000-4 500 2723038 ns/op 412217 B/op 163 allocs/op BenchmarkMapPopulate/100000-4 50 28713410 ns/op 3588881 B/op 3733 allocs/op BenchmarkComplexAlgMap-4 10000000 214 ns/op BenchmarkGoMapClear/Reflexive/1-4 20000000 112 ns/op BenchmarkGoMapClear/Reflexive/10-4 10000000 123 ns/op BenchmarkGoMapClear/Reflexive/100-4 5000000 304 ns/op BenchmarkGoMapClear/Reflexive/1000-4 300000 3735 ns/op BenchmarkGoMapClear/Reflexive/10000-4 50000 34074 ns/op BenchmarkGoMapClear/NonReflexive/1-4 5000000 379 ns/op BenchmarkGoMapClear/NonReflexive/10-4 3000000 480 ns/op BenchmarkGoMapClear/NonReflexive/100-4 1000000 1183 ns/op BenchmarkGoMapClear/NonReflexive/1000-4 100000 13549 ns/op BenchmarkGoMapClear/NonReflexive/10000-4 10000 117289 ns/op BenchmarkMapStringConversion/32/simple-4 30000000 41.9 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/32/struct-4 30000000 41.9 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/32/array-4 30000000 41.8 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/simple-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/struct-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/array-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapPop100-4 50000 36575 ns/op BenchmarkMapPop1000-4 3000 511995 ns/op BenchmarkMapPop10000-4 100 12112237 ns/op BenchmarkMapAssign/Int32/256-4 20000000 66.0 ns/op BenchmarkMapAssign/Int32/65536-4 20000000 90.2 ns/op BenchmarkMapAssign/Int64/256-4 20000000 66.0 ns/op BenchmarkMapAssign/Int64/65536-4 10000000 115 ns/op BenchmarkMapAssign/Str/256-4 20000000 79.9 ns/op BenchmarkMapAssign/Str/65536-4 10000000 186 ns/op BenchmarkMapOperatorAssign/Int32/256-4 20000000 66.2 ns/op BenchmarkMapOperatorAssign/Int32/65536-4 20000000 95.3 ns/op BenchmarkMapOperatorAssign/Int64/256-4 20000000 66.7 ns/op BenchmarkMapOperatorAssign/Int64/65536-4 10000000 138 ns/op BenchmarkMapOperatorAssign/Str/256-4 1000000 5035 ns/op BenchmarkMapOperatorAssign/Str/65536-4 3000000 682 ns/op BenchmarkMapAppendAssign/Int32/256-4 20000000 96.4 ns/op 47 B/op 0 allocs/op BenchmarkMapAppendAssign/Int32/65536-4 5000000 275 ns/op 28 B/op 0 allocs/op BenchmarkMapAppendAssign/Int64/256-4 20000000 95.7 ns/op 47 B/op 0 allocs/op BenchmarkMapAppendAssign/Int64/65536-4 5000000 293 ns/op 28 B/op 0 allocs/op BenchmarkMapAppendAssign/Str/256-4 10000000 318 ns/op 93 B/op 0 allocs/op BenchmarkMapAppendAssign/Str/65536-4 3000000 465 ns/op 48 B/op 0 allocs/op BenchmarkMapDelete/Int32/100-4 20000000 104 ns/op BenchmarkMapDelete/Int32/1000-4 20000000 77.8 ns/op BenchmarkMapDelete/Int32/10000-4 20000000 103 ns/op BenchmarkMapDelete/Int64/100-4 20000000 103 ns/op BenchmarkMapDelete/Int64/1000-4 20000000 80.3 ns/op BenchmarkMapDelete/Int64/10000-4 20000000 104 ns/op BenchmarkMapDelete/Str/100-4 10000000 124 ns/op BenchmarkMapDelete/Str/1000-4 20000000 117 ns/op BenchmarkMapDelete/Str/10000-4 10000000 126 ns/op BenchmarkMemmove/0-4 300000000 5.58 ns/op BenchmarkMemmove/1-4 100000000 13.5 ns/op 74.30 MB/s BenchmarkMemmove/2-4 100000000 13.5 ns/op 148.40 MB/s BenchmarkMemmove/3-4 100000000 13.3 ns/op 225.03 MB/s BenchmarkMemmove/4-4 100000000 13.3 ns/op 299.99 MB/s BenchmarkMemmove/5-4 100000000 13.3 ns/op 374.96 MB/s BenchmarkMemmove/6-4 100000000 13.5 ns/op 444.23 MB/s BenchmarkMemmove/7-4 100000000 13.4 ns/op 522.62 MB/s BenchmarkMemmove/8-4 100000000 13.3 ns/op 600.00 MB/s BenchmarkMemmove/9-4 100000000 13.4 ns/op 673.43 MB/s BenchmarkMemmove/10-4 100000000 13.3 ns/op 750.14 MB/s BenchmarkMemmove/11-4 100000000 13.3 ns/op 824.91 MB/s BenchmarkMemmove/12-4 100000000 13.3 ns/op 899.90 MB/s BenchmarkMemmove/13-4 100000000 13.5 ns/op 962.98 MB/s BenchmarkMemmove/14-4 100000000 13.4 ns/op 1046.19 MB/s BenchmarkMemmove/15-4 100000000 13.3 ns/op 1124.88 MB/s BenchmarkMemmove/16-4 100000000 13.5 ns/op 1188.13 MB/s BenchmarkMemmove/32-4 100000000 13.6 ns/op 2356.67 MB/s BenchmarkMemmove/64-4 100000000 16.3 ns/op 3924.55 MB/s BenchmarkMemmove/128-4 50000000 23.9 ns/op 5354.07 MB/s BenchmarkMemmove/256-4 50000000 35.2 ns/op 7280.74 MB/s BenchmarkMemmove/512-4 20000000 68.1 ns/op 7522.83 MB/s BenchmarkMemmove/1024-4 20000000 113 ns/op 9060.92 MB/s BenchmarkMemmove/2048-4 10000000 203 ns/op 10086.84 MB/s BenchmarkMemmove/4096-4 5000000 383 ns/op 10668.94 MB/s BenchmarkMemmoveUnalignedDst/0-4 100000000 10.7 ns/op BenchmarkMemmoveUnalignedDst/1-4 100000000 15.4 ns/op 64.75 MB/s BenchmarkMemmoveUnalignedDst/2-4 100000000 14.0 ns/op 142.50 MB/s BenchmarkMemmoveUnalignedDst/3-4 100000000 14.0 ns/op 213.78 MB/s BenchmarkMemmoveUnalignedDst/4-4 100000000 14.5 ns/op 275.50 MB/s BenchmarkMemmoveUnalignedDst/5-4 100000000 14.9 ns/op 335.56 MB/s BenchmarkMemmoveUnalignedDst/6-4 100000000 14.7 ns/op 407.71 MB/s BenchmarkMemmoveUnalignedDst/7-4 100000000 14.9 ns/op 468.79 MB/s BenchmarkMemmoveUnalignedDst/8-4 100000000 14.5 ns/op 550.56 MB/s BenchmarkMemmoveUnalignedDst/9-4 100000000 14.7 ns/op 611.60 MB/s BenchmarkMemmoveUnalignedDst/10-4 100000000 15.0 ns/op 668.48 MB/s BenchmarkMemmoveUnalignedDst/11-4 100000000 14.8 ns/op 744.55 MB/s BenchmarkMemmoveUnalignedDst/12-4 100000000 15.1 ns/op 792.42 MB/s BenchmarkMemmoveUnalignedDst/13-4 100000000 15.0 ns/op 866.28 MB/s BenchmarkMemmoveUnalignedDst/14-4 100000000 14.9 ns/op 942.03 MB/s BenchmarkMemmoveUnalignedDst/15-4 100000000 15.0 ns/op 1000.58 MB/s BenchmarkMemmoveUnalignedDst/16-4 100000000 14.5 ns/op 1103.84 MB/s BenchmarkMemmoveUnalignedDst/32-4 100000000 16.7 ns/op 1921.87 MB/s BenchmarkMemmoveUnalignedDst/64-4 50000000 32.7 ns/op 1954.46 MB/s BenchmarkMemmoveUnalignedDst/128-4 50000000 28.1 ns/op 4560.37 MB/s BenchmarkMemmoveUnalignedDst/256-4 30000000 47.7 ns/op 5364.41 MB/s BenchmarkMemmoveUnalignedDst/512-4 20000000 84.9 ns/op 6029.49 MB/s BenchmarkMemmoveUnalignedDst/1024-4 10000000 156 ns/op 6552.17 MB/s BenchmarkMemmoveUnalignedDst/2048-4 5000000 290 ns/op 7059.63 MB/s BenchmarkMemmoveUnalignedDst/4096-4 3000000 561 ns/op 7296.37 MB/s BenchmarkMemmoveUnalignedSrc/0-4 100000000 10.5 ns/op BenchmarkMemmoveUnalignedSrc/1-4 100000000 15.6 ns/op 64.12 MB/s BenchmarkMemmoveUnalignedSrc/2-4 100000000 14.0 ns/op 142.49 MB/s BenchmarkMemmoveUnalignedSrc/3-4 100000000 14.2 ns/op 211.08 MB/s BenchmarkMemmoveUnalignedSrc/4-4 100000000 13.9 ns/op 287.49 MB/s BenchmarkMemmoveUnalignedSrc/5-4 100000000 13.6 ns/op 367.36 MB/s BenchmarkMemmoveUnalignedSrc/6-4 100000000 13.9 ns/op 432.38 MB/s BenchmarkMemmoveUnalignedSrc/7-4 100000000 13.6 ns/op 514.32 MB/s BenchmarkMemmoveUnalignedSrc/8-4 100000000 13.8 ns/op 579.18 MB/s BenchmarkMemmoveUnalignedSrc/9-4 100000000 14.0 ns/op 643.05 MB/s BenchmarkMemmoveUnalignedSrc/10-4 100000000 14.0 ns/op 715.96 MB/s BenchmarkMemmoveUnalignedSrc/11-4 100000000 13.8 ns/op 795.76 MB/s BenchmarkMemmoveUnalignedSrc/12-4 100000000 14.0 ns/op 855.35 MB/s BenchmarkMemmoveUnalignedSrc/13-4 100000000 14.0 ns/op 930.87 MB/s BenchmarkMemmoveUnalignedSrc/14-4 100000000 14.0 ns/op 998.89 MB/s BenchmarkMemmoveUnalignedSrc/15-4 100000000 14.0 ns/op 1072.50 MB/s BenchmarkMemmoveUnalignedSrc/16-4 100000000 14.0 ns/op 1141.96 MB/s BenchmarkMemmoveUnalignedSrc/32-4 100000000 15.4 ns/op 2072.73 MB/s BenchmarkMemmoveUnalignedSrc/64-4 100000000 18.5 ns/op 3450.95 MB/s BenchmarkMemmoveUnalignedSrc/128-4 50000000 25.6 ns/op 4996.57 MB/s BenchmarkMemmoveUnalignedSrc/256-4 50000000 37.9 ns/op 6754.79 MB/s BenchmarkMemmoveUnalignedSrc/512-4 20000000 74.0 ns/op 6919.73 MB/s BenchmarkMemmoveUnalignedSrc/1024-4 20000000 119 ns/op 8554.12 MB/s BenchmarkMemmoveUnalignedSrc/2048-4 10000000 206 ns/op 9940.15 MB/s BenchmarkMemmoveUnalignedSrc/4096-4 5000000 385 ns/op 10629.02 MB/s BenchmarkMemclr/5-4 100000000 14.7 ns/op 339.27 MB/s BenchmarkMemclr/16-4 100000000 14.9 ns/op 1075.74 MB/s BenchmarkMemclr/64-4 100000000 20.0 ns/op 3192.24 MB/s BenchmarkMemclr/256-4 50000000 34.7 ns/op 7373.17 MB/s BenchmarkMemclr/4096-4 5000000 288 ns/op 14199.71 MB/s BenchmarkMemclr/65536-4 200000 5920 ns/op 11069.74 MB/s BenchmarkMemclr/1M-4 10000 119686 ns/op 8761.04 MB/s BenchmarkMemclr/4M-4 3000 492651 ns/op 8513.73 MB/s BenchmarkMemclr/8M-4 2000 978378 ns/op 8573.99 MB/s BenchmarkMemclr/16M-4 1000 1960626 ns/op 8557.07 MB/s BenchmarkMemclr/64M-4 200 7860433 ns/op 8537.55 MB/s BenchmarkGoMemclr/5-4 200000000 8.66 ns/op 577.65 MB/s BenchmarkGoMemclr/16-4 200000000 7.03 ns/op 2277.18 MB/s BenchmarkGoMemclr/64-4 100000000 13.3 ns/op 4810.16 MB/s BenchmarkGoMemclr/256-4 50000000 31.5 ns/op 8122.27 MB/s BenchmarkClearFat8-4 2000000000 1.40 ns/op BenchmarkClearFat12-4 2000000000 1.40 ns/op BenchmarkClearFat16-4 2000000000 1.40 ns/op BenchmarkClearFat24-4 2000000000 1.40 ns/op BenchmarkClearFat32-4 2000000000 1.42 ns/op BenchmarkClearFat40-4 2000000000 1.40 ns/op BenchmarkClearFat48-4 2000000000 1.40 ns/op BenchmarkClearFat56-4 2000000000 1.40 ns/op BenchmarkClearFat64-4 2000000000 1.40 ns/op BenchmarkClearFat128-4 2000000000 1.40 ns/op BenchmarkClearFat256-4 2000000000 1.40 ns/op BenchmarkClearFat512-4 2000000000 1.40 ns/op BenchmarkClearFat1024-4 2000000000 1.42 ns/op BenchmarkCopyFat8-4 2000000000 1.40 ns/op BenchmarkCopyFat12-4 2000000000 1.40 ns/op BenchmarkCopyFat16-4 2000000000 1.40 ns/op BenchmarkCopyFat24-4 2000000000 1.40 ns/op BenchmarkCopyFat32-4 2000000000 1.40 ns/op BenchmarkCopyFat64-4 2000000000 1.40 ns/op BenchmarkCopyFat128-4 2000000000 1.42 ns/op BenchmarkCopyFat256-4 2000000000 1.41 ns/op BenchmarkCopyFat512-4 2000000000 1.40 ns/op BenchmarkCopyFat520-4 2000000000 1.40 ns/op BenchmarkCopyFat1024-4 2000000000 1.40 ns/op BenchmarkIssue18740-4 100000 14531 ns/op BenchmarkFinalizer-4 500 2526732 ns/op BenchmarkFinalizerRun-4 1000000 2604 ns/op BenchmarkSyscall-4 20000000 63.4 ns/op BenchmarkSyscallWork-4 20000000 96.9 ns/op BenchmarkSyscallExcess-4 20000000 63.4 ns/op BenchmarkSyscallExcessWork-4 20000000 96.8 ns/op BenchmarkPingPongHog-4 500000 2889 ns/op BenchmarkStackGrowth-4 100000000 21.2 ns/op BenchmarkStackGrowthDeep-4 500000 2548 ns/op BenchmarkCreateGoroutines-4 1000000 1046 ns/op BenchmarkCreateGoroutinesParallel-4 10000000 198 ns/op BenchmarkCreateGoroutinesCapture-4 200000 8941 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall-4 300000000 5.80 ns/op BenchmarkWakeupParallelSpinning/0s-4 100000 20843 ns/op BenchmarkWakeupParallelSpinning/1\u00b5s-4 50000 23993 ns/op BenchmarkWakeupParallelSpinning/2\u00b5s-4 50000 27880 ns/op BenchmarkWakeupParallelSpinning/5\u00b5s-4 50000 37540 ns/op BenchmarkWakeupParallelSpinning/10\u00b5s-4 30000 56729 ns/op BenchmarkWakeupParallelSpinning/20\u00b5s-4 20000 96465 ns/op BenchmarkWakeupParallelSpinning/50\u00b5s-4 10000 221160 ns/op BenchmarkWakeupParallelSpinning/100\u00b5s-4 5000 359871 ns/op BenchmarkWakeupParallelSyscall/0s-4 10000 321507 ns/op BenchmarkWakeupParallelSyscall/1\u00b5s-4 5000 335555 ns/op BenchmarkWakeupParallelSyscall/2\u00b5s-4 5000 346055 ns/op BenchmarkWakeupParallelSyscall/5\u00b5s-4 5000 343007 ns/op BenchmarkWakeupParallelSyscall/10\u00b5s-4 5000 386787 ns/op BenchmarkWakeupParallelSyscall/20\u00b5s-4 5000 387292 ns/op BenchmarkWakeupParallelSyscall/50\u00b5s-4 5000 556090 ns/op BenchmarkWakeupParallelSyscall/100\u00b5s-4 3000 626904 ns/op BenchmarkMatmult-4 200000000 9.45 ns/op BenchmarkFastrand-4 2000000000 1.65 ns/op BenchmarkFastrandHashiter-4 50000000 32.3 ns/op BenchmarkFastrandn/2-4 200000000 8.42 ns/op BenchmarkFastrandn/3-4 200000000 8.43 ns/op BenchmarkFastrandn/4-4 200000000 8.50 ns/op BenchmarkFastrandn/5-4 200000000 8.42 ns/op BenchmarkIfaceCmp100-4 5000000 370 ns/op BenchmarkIfaceCmpNil100-4 10000000 203 ns/op BenchmarkEfaceCmpDiff-4 1000000 2052 ns/op BenchmarkDefer-4 5000000 256 ns/op BenchmarkDefer10-4 10000000 230 ns/op BenchmarkDeferMany-4 3000000 489 ns/op BenchmarkRWMutexUncontended-4 20000000 112 ns/op BenchmarkRWMutexWrite100-4 10000000 197 ns/op BenchmarkRWMutexWrite10-4 1000000 1629 ns/op BenchmarkRWMutexWorkWrite100-4 10000000 221 ns/op BenchmarkRWMutexWorkWrite10-4 1000000 1314 ns/op BenchmarkMakeSlice/Byte-4 20000000 60.2 ns/op BenchmarkMakeSlice/Int16-4 20000000 73.2 ns/op BenchmarkMakeSlice/Int-4 10000000 133 ns/op BenchmarkMakeSlice/Ptr-4 10000000 188 ns/op BenchmarkMakeSlice/Struct/24-4 10000000 200 ns/op BenchmarkMakeSlice/Struct/32-4 10000000 230 ns/op BenchmarkMakeSlice/Struct/40-4 5000000 262 ns/op BenchmarkGrowSlice/Byte-4 10000000 144 ns/op BenchmarkGrowSlice/Int16-4 10000000 204 ns/op BenchmarkGrowSlice/Int-4 5000000 245 ns/op BenchmarkGrowSlice/Ptr-4 5000000 365 ns/op BenchmarkGrowSlice/Struct/24-4 3000000 428 ns/op BenchmarkGrowSlice/Struct/32-4 3000000 486 ns/op BenchmarkGrowSlice/Struct/40-4 2000000 607 ns/op BenchmarkExtendSlice/IntSlice-4 10000000 165 ns/op BenchmarkExtendSlice/PointerSlice-4 10000000 213 ns/op BenchmarkExtendSlice/NoGrow-4 100000000 15.4 ns/op BenchmarkAppend-4 30000000 56.2 ns/op BenchmarkAppendGrowByte-4 300 5560036 ns/op BenchmarkAppendGrowString-4 5 226765389 ns/op BenchmarkAppendSlice/1Bytes-4 100000000 12.6 ns/op BenchmarkAppendSlice/4Bytes-4 100000000 12.0 ns/op BenchmarkAppendSlice/7Bytes-4 100000000 11.9 ns/op BenchmarkAppendSlice/8Bytes-4 100000000 12.0 ns/op BenchmarkAppendSlice/15Bytes-4 100000000 11.9 ns/op BenchmarkAppendSlice/16Bytes-4 100000000 12.3 ns/op BenchmarkAppendSlice/32Bytes-4 100000000 12.6 ns/op BenchmarkAppendSliceLarge/1024Bytes-4 1000000 1420 ns/op BenchmarkAppendSliceLarge/4096Bytes-4 300000 4643 ns/op BenchmarkAppendSliceLarge/16384Bytes-4 100000 13584 ns/op BenchmarkAppendSliceLarge/65536Bytes-4 50000 32999 ns/op BenchmarkAppendSliceLarge/262144Bytes-4 10000 120741 ns/op BenchmarkAppendSliceLarge/1048576Bytes-4 2000 679068 ns/op BenchmarkAppendStr/1Bytes-4 100000000 13.5 ns/op BenchmarkAppendStr/4Bytes-4 100000000 11.9 ns/op BenchmarkAppendStr/8Bytes-4 100000000 11.9 ns/op BenchmarkAppendStr/16Bytes-4 100000000 12.6 ns/op BenchmarkAppendStr/32Bytes-4 100000000 14.4 ns/op BenchmarkAppendSpecialCase-4 20000000 85.0 ns/op BenchmarkCopy/1Byte-4 100000000 14.0 ns/op 71.25 MB/s BenchmarkCopy/1String-4 100000000 13.8 ns/op 72.29 MB/s BenchmarkCopy/2Byte-4 100000000 21.4 ns/op 93.67 MB/s BenchmarkCopy/2String-4 100000000 17.1 ns/op 117.24 MB/s BenchmarkCopy/4Byte-4 100000000 16.9 ns/op 237.34 MB/s BenchmarkCopy/4String-4 100000000 16.8 ns/op 237.50 MB/s BenchmarkCopy/8Byte-4 100000000 22.9 ns/op 348.61 MB/s BenchmarkCopy/8String-4 100000000 16.8 ns/op 475.00 MB/s BenchmarkCopy/12Byte-4 100000000 16.8 ns/op 712.43 MB/s BenchmarkCopy/12String-4 100000000 16.9 ns/op 712.04 MB/s BenchmarkCopy/16Byte-4 50000000 24.8 ns/op 646.37 MB/s BenchmarkCopy/16String-4 100000000 16.8 ns/op 949.90 MB/s BenchmarkCopy/32Byte-4 100000000 16.3 ns/op 1964.35 MB/s BenchmarkCopy/32String-4 100000000 16.4 ns/op 1956.17 MB/s BenchmarkCopy/128Byte-4 50000000 27.4 ns/op 4676.48 MB/s BenchmarkCopy/128String-4 50000000 27.4 ns/op 4676.64 MB/s BenchmarkCopy/1024Byte-4 20000000 113 ns/op 9005.87 MB/s BenchmarkCopy/1024String-4 20000000 113 ns/op 9004.83 MB/s BenchmarkAppendInPlace/NoGrow/Byte-4 1000000 1352 ns/op BenchmarkAppendInPlace/NoGrow/1Ptr-4 300000 4058 ns/op BenchmarkAppendInPlace/NoGrow/2Ptr-4 200000 7520 ns/op BenchmarkAppendInPlace/NoGrow/3Ptr-4 200000 8608 ns/op BenchmarkAppendInPlace/NoGrow/4Ptr-4 100000 14133 ns/op BenchmarkAppendInPlace/Grow/Byte-4 1000000 1076 ns/op BenchmarkAppendInPlace/Grow/1Ptr-4 1000000 1074 ns/op BenchmarkAppendInPlace/Grow/2Ptr-4 1000000 1449 ns/op BenchmarkAppendInPlace/Grow/3Ptr-4 1000000 1841 ns/op BenchmarkAppendInPlace/Grow/4Ptr-4 1000000 1983 ns/op BenchmarkStackCopyPtr-4 5 309390029 ns/op BenchmarkStackCopy-4 5 297313618 ns/op BenchmarkStackCopyNoCache-4 2 518883532 ns/op BenchmarkCompareStringEqual-4 100000000 12.8 ns/op BenchmarkCompareStringIdentical-4 100000000 11.9 ns/op BenchmarkCompareStringSameLength-4 100000000 10.5 ns/op BenchmarkCompareStringDifferentLength-4 2000000000 1.40 ns/op BenchmarkCompareStringBigUnaligned-4 3000 430422 ns/op 2436.18 MB/s BenchmarkCompareStringBig-4 3000 428766 ns/op 2445.59 MB/s BenchmarkConcatStringAndBytes-4 20000000 78.6 ns/op BenchmarkSliceByteToString/1-4 100000000 16.9 ns/op BenchmarkSliceByteToString/2-4 20000000 65.6 ns/op BenchmarkSliceByteToString/4-4 20000000 73.4 ns/op BenchmarkSliceByteToString/8-4 20000000 88.1 ns/op BenchmarkSliceByteToString/16-4 10000000 122 ns/op BenchmarkSliceByteToString/32-4 10000000 139 ns/op BenchmarkSliceByteToString/64-4 10000000 186 ns/op BenchmarkSliceByteToString/128-4 5000000 281 ns/op BenchmarkRuneCount/lenruneslice/ASCII-4 50000000 37.9 ns/op BenchmarkRuneCount/lenruneslice/Japanese-4 5000000 263 ns/op BenchmarkRuneCount/lenruneslice/MixedLength-4 10000000 232 ns/op BenchmarkRuneCount/rangeloop/ASCII-4 50000000 33.0 ns/op BenchmarkRuneCount/rangeloop/Japanese-4 5000000 260 ns/op BenchmarkRuneCount/rangeloop/MixedLength-4 10000000 208 ns/op BenchmarkRuneCount/utf8.RuneCountInString/ASCII-4 30000000 41.4 ns/op BenchmarkRuneCount/utf8.RuneCountInString/Japanese-4 10000000 184 ns/op BenchmarkRuneCount/utf8.RuneCountInString/MixedLength-4 10000000 218 ns/op BenchmarkRuneIterate/range/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range/MixedLength-4 10000000 206 ns/op BenchmarkRuneIterate/range1/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range1/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range1/MixedLength-4 10000000 221 ns/op BenchmarkRuneIterate/range2/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range2/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range2/MixedLength-4 10000000 204 ns/op BenchmarkArrayEqual-4 200000000 6.33 ns/op BenchmarkClockVDSOAndFallbackPaths/vDSO-4 10000000 195 ns/op BenchmarkClockVDSOAndFallbackPaths/Fallback-4 1000000 1936 ns/op BenchmarkTimeNow-4 10000000 197 ns/op PASS ok runtime 1331.420s \u2013Abishek Muthian ( @heavyinfo ) Apple silicon Cross-compiling Go applications Host/Build: macOS/x86_64 Target: macOS/arm64 On host machine: Xcode: Install latest Xcode which supports Apple silicon Go: Install go*.darwin-amd64.pkg (or build go from source) on macOS/x86_64 Set go executable in PATH Export the following environment variables before cross compiling go apps for macOS/arm64 export SDK_NAME = macosx export SDK_PATH =$ ( xcrun -- show - sdk - path -- sdk $ SDK_NAME ) export CGO_ENABLED = 1 export GOOS = darwin export GOARCH = arm64 export CC = \"$(xcrun -sdk $SDK_PATH --find clang) -arch $GOARCH -isysroot $SDK_PATH\" export CFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH -I$SDK_PATH/usr/include\" export LD_LIBRARY_PATH = \"$SDK_PATH/usr/lib\" export CGO_CFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH\" export CGO_LDFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH\" Compile the app as below : $ GOOS = darwin GOARCH = arm64 go build < app > Copy the generated arm64 executable to target machine (macOS/arm64) and run","title":"GoArm"},{"location":"GoArm/#introduction","text":"Go is fully supported on Linux and Darwin. Any Go program that you can compile for x86/x86_64 should work on Arm. Besides Linux and Darwin, Go is also experimentally supported on FreeBSD, OpenBSD and NetBSD.","title":"Introduction"},{"location":"GoArm/#supported-architectures","text":"Go supports the following ARM architectural families. Architecture Status GOARM value GOARCH value ARMv4 and below not supported n/a n/a ARMv5 supported GOARM=5 GOARCH=arm ARMv6 supported GOARM=6 GOARCH=arm ARMv7 supported GOARM=7 GOARCH=arm ARMv8 supported n/a GOARCH=arm64 Starting from Go 1.1, the appropriate GOARM value will be chosen if you compile the program from source on the target machine. In cross compilation situations, it is recommended that you always set an appropriate GOARM value along with GOARCH.","title":"Supported architectures"},{"location":"GoArm/#supported-operating-systems","text":"ARM on Linux. You must run an EABI kernel. These are generally known as armel for softfloat (compatible with ARMv5) or armhf for hardware floating point (ARMv6 and above). ARM on Darwin: ARMv7 is required. ARM on FreeBSD, OpenBSD, and NetBSD: ARMv6K or above is required.","title":"Supported operating systems"},{"location":"GoArm/#recommended-go-version","text":"Go has a mature support for ARM systems; so, just like for other architectures, use the latest stable version (eg: Go 1.15 at the time of writing).","title":"Recommended Go version"},{"location":"GoArm/#tips-and-tricks","text":"","title":"Tips and tricks"},{"location":"GoArm/#tmp-and-tmpfs","text":"The go build tool uses /tmp when compiling and testing, this can cause heavy wear and tear if /tmp lives on your SD card. To minimise this effect, either export TMPDIR to somewhere that lives on another filesystem. Alternatively if you have lots of physical memory you can mount a swap backed tmpfs filesystem on /tmp by adding this line to /etc/fstab tmpfs /tmp tmpfs nodev,nosuid,mode=1777 0 0","title":"/tmp and tmpfs"},{"location":"GoArm/#swap","text":"Building Go from source requires at least 256mb of RAM. Running the tests requires at least 256mb of memory and at least 512mb of swap space.","title":"Swap"},{"location":"GoArm/#test-failures-due-to-resource-starvation","text":"The runtime tests create many native operating system threads which at the default of 8mb per thread can exhaust an ARM system with 32bit user mode address space (especially on multicore ARM systems such as the Raspberry PI 2). To prevent the runtime test from failing you may need lower the thread stack limit: % ulimit -s 1024 # set the thread stack limit to 1mb % ulimit -s # check that it worked 1024 See Dave Cheney's blog post about building Go on Raspberry Pi for details.","title":"Test failures due to resource starvation"},{"location":"GoArm/#build-failures-due-to-lack-of-memory","text":"The Go tool will try to keep all your cpu cores busy when installing packages (during make.bash), this is normally preferable on PCs where memory is abundant. However, some powerful multicore ARM machines don't have enough memory to support parallel builds utilizing all available cores, and you can work around that by using the taskset(1) utility to limit Go to only use one core without resorting to swaps. taskset 1 ./make.bash # use 3 if you want to use two cores Note: the 1 here is a bitmask for cpu affinity and it's not the number of cpu cores you're willing to use, please refer to taskset(1) manual for details.","title":"Build failures due to lack of memory"},{"location":"GoArm/#known-issues","text":"","title":"Known issues"},{"location":"GoArm/#lack-of-floating-point-hardware-on-armv5","text":"The major issue with ARMv5 is the lack of floating point support in common ARMv5 hardware \u2020 . When compiled with the GOARM=5 environment variable, the 5l linker will insert a call to _sfloat before any block of floating point instructions to branch into the floating point emulator. This means that binaries produced with a Go installation that was compiled with soft float support will work on all supported architectures, but builds compiled without soft floating point support will not work on ARMv5. \u2020 This isn't strictly true, there exist ARMv5 implementations which have VFP1 floating point. However the compiler doesn't support VFP1 yet.","title":"Lack of floating point hardware on ARMv5"},{"location":"GoArm/#htmltemplate-and-testnilptrgo-test-fail-on-htc-android","text":"html/template test and test/nilptr.go is known to fail on HTC's Android kernels ( ref ), because the kernel will kill the application after 10 segfaults.","title":"html/template and test/nilptr.go test fail on HTC Android"},{"location":"GoArm/#potential-kernel-bug-in-2632-5-kirkwood-on-qnap-219p","text":"See Issue 5466 for details. Updating to 3.2.0-4-kirkwood solved the issue.","title":"Potential kernel bug in 2.6.32-5-kirkwood on QNAP 219P"},{"location":"GoArm/#success-stories","text":"ARM hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here.","title":"Success stories"},{"location":"GoArm/#netgear-stora","text":"Architecture: ARMv5 Operating System: Debian Sid The Netgear Stora is an ARMv5 (Marvell Kirkwood) platform. I flashed mine with a Debian Sid distribution and it was, until Go1, a solid platform for Go development. The main drawback is the Stora only has 128mb of ram, which is not quite enough to run ./all.bash as 5l can use more than 100mb of ram when linking some commands. Instructions for installing Debian on your Stora can be found on the OpenStora website, http://www.openstora.com/wiki/index.php?title=How_to_install_Debian_Linux_on_NETGEAR_Stora . \u2013 dave cheney","title":"Netgear Stora"},{"location":"GoArm/#qnap-ts-119p-ii","text":"Architecture: ARMv5 Operating System: Debian Squeeze The Qnap TS series of NASs are excellent hackable little linux hosts. The TS-11P9 II is a 2Ghz Marvell Kirkwood ARMv5 processor with 512mb of ram and a single SATA drive bay. The kirkwood platform is supported by the native debian installer. http://www.cyrius.com/debian/kirkwood/qnap/ts-119/install.html \u2013 dave cheney","title":"Qnap TS-119P II"},{"location":"GoArm/#pandaboard","text":"Architecture: ARMv7 Operating System: Ubuntu 12.04LTS (armhf) The Pandaboard is a dual core ARMv7 development board based on the Texas Instruments OMAP4 SoC platform. I run ubuntu 12.04 LTS server on mine, which is an excellent distribution for Arm development. The Pandaboard has a gig of ram which makes it excellent for development and benchmarking. Instructions and SD card image can be found on on the Ubuntu wiki, https://wiki.ubuntu.com/ARM/Server/Install#Installing_pre-installed_OMAP4_Precise_.2812.04.29_Server_Images . \u2013 dave cheney","title":"Pandaboard"},{"location":"GoArm/#beaglebone","text":"Architecture: ARMv7 single core, Cortex-A8, 256MB RAM, 720 MHz Operating System: Angstrom Linux BeagleBone is similar to Beagleboard, but without the video components. Angstrom is a very small Linux distribution for ARM based systems. It is built on top of Yocto and OpenEmbedded with additional tools and recipes to make it even easier to build a distribution. You can think of Angstrom as Ubuntu and OpenEmbedded/Yocto as Debian. Angstrom is very light weight and fast compared to Ubuntu. It uses systemd instead of the sys5 scripts which help give you a very fast boot time of a few seconds. BeagleBone is probably faster than a RasberryPI because of it's newer Cortex-A8 dual-issue superscalar architecture, but the PI has the GPU which theoretically could be used with something like OpenCL to really run circles around the BeagleBone. However, for embedded applications the BeagleBone is easier to work with because it is ready out of the box with GPIO connections. I've cross compiled for ARM with 5g from a Mac and so far I haven't run into any problems. You can build on the BeagleBone, but cross compiling with Go is so easy that it is better to save wear and tear on the flash drive and just compile somewhere else. \u2013 hans stimer","title":"BeagleBone"},{"location":"GoArm/#zyxel-nsa-310","text":"Architecture: ARM5 Platform: Debian Wheeze Successfuly built default branch, going to write fan control daemon for this device in golang.","title":"Zyxel NSA 310"},{"location":"GoArm/#raspberry-pi","text":"Building Go 1.5 on the Raspberry Pi - Dave Cheney Architecture: ARM1176JZFS, with floating point, running at 700Mhz Operating System: Debian Wheezy beta distribution ( http://www.raspberrypi.org/archives/1435 ) reported as: Linux raspberrypi 3.1.9+ #125 PREEMPT Sun Jun 17 16:09:36 BST 2012 armv6l GNU/Linux Memory Split : the Pi shares its 256mb of memory between the CPU and the GPU. You should allocate as much memory as possible to the CPU for a successful compilation. The configuration for the memory split is stored on your SD card. This link has a script to adjust the configuration, http://sirlagz.net/?p=445 . Go version weekly.2012-03-27 +645947213cac, with timeout and GOARM 7 patches http://codereview.appspot.com/5987063/ ) builds with 2 test failures: encoding/gob fails with out of memory, and fmt fails the NaN test. Successfully installed and run SVGo via go get github.com/ajstarks/svgo, tested with goplay: Division benchmark via http://codereview.appspot.com/6258067 : $ cd $GOROOT/src/pkg/runtime $ go test -test.bench=BenchmarkUint BenchmarkUint32Div7 5000000 547 ns/op BenchmarkUint32Div37 5000000 547 ns/op BenchmarkUint32Div123 5000000 547 ns/op BenchmarkUint32Div763 5000000 547 ns/op BenchmarkUint32Div1247 5000000 547 ns/op BenchmarkUint32Div9305 5000000 547 ns/op BenchmarkUint32Div13307 5000000 547 ns/op BenchmarkUint32Div52513 5000000 547 ns/op BenchmarkUint32Div60978747 5000000 547 ns/op BenchmarkUint32Div106956295 5000000 547 ns/op BenchmarkUint32Mod7 5000000 547 ns/op BenchmarkUint32Mod37 5000000 547 ns/op BenchmarkUint32Mod123 5000000 547 ns/op BenchmarkUint32Mod763 5000000 547 ns/op BenchmarkUint32Mod1247 5000000 547 ns/op BenchmarkUint32Mod9305 5000000 547 ns/op BenchmarkUint32Mod13307 5000000 547 ns/op BenchmarkUint32Mod52513 5000000 547 ns/op BenchmarkUint32Mod60978747 5000000 547 ns/op BenchmarkUint32Mod106956295 5000000 547 ns/op Running the hardware floating point distribution, Raspbian \"pisces\" ( http://www.raspbian.org/PiscesImages ) and applying the patches in https://gist.github.com/3116118 , here are the results of the Eleanor McHugh gospeed benchmark: raspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ uname -a Linux pisces 3.1.9+ #171 PREEMPT Tue Jul 17 01:08:22 BST 2012 armv6l GNU/Linux raspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ go test -test.bench=\".*\" PASS BenchmarkBaselineCastInt32ToInt 100000000 13.5 ns/op BenchmarkBaselineCastIntToInt32 100000000 13.5 ns/op BenchmarkBaselineCastInt64ToUint64 100000000 17.8 ns/op BenchmarkBaselineCastUint64ToInt64 100000000 17.2 ns/op BenchmarkBaselineVariableGet 100000000 13.4 ns/op BenchmarkBaselineVariableSet 100000000 22.4 ns/op BenchmarkBaselineVariableGetInterface 100000000 13.5 ns/op BenchmarkBaselineVariableSetInterface 50000000 31.3 ns/op BenchmarkBaselineVariableIncrement 100000000 23.9 ns/op BenchmarkBaselineVariableDecrement 100000000 23.9 ns/op BenchmarkBaselineFieldGet 100000000 13.5 ns/op BenchmarkBaselineFieldSet 100000000 20.9 ns/op BenchmarkBaselineSliceGet 50000000 32.9 ns/op BenchmarkBaselineSliceSet 50000000 34.5 ns/op BenchmarkBaselineMapIntGet 1000000 1448 ns/op BenchmarkBaselineMapIntSet 1000000 1968 ns/op BenchmarkBaselineMapStringGet 1000000 1119 ns/op BenchmarkBaselineMapStringSet 1000000 1675 ns/op BenchmarkBaselineIf 100000000 15.0 ns/op BenchmarkBaselineIfElse 100000000 15.0 ns/op BenchmarkBaselineSwitchDefault 100000000 13.5 ns/op BenchmarkBaselineSwitchOneCase 100000000 15.0 ns/op BenchmarkBaselineSwitchTwoCases 100000000 18.0 ns/op BenchmarkBaselineSwitchTwoCasesFallthrough 100000000 18.0 ns/op BenchmarkBaselineForLoopIteration 50000000 42.0 ns/op BenchmarkBaselineForReverseLoopIteration 50000000 36.0 ns/op BenchmarkBaselineForRange 20000000 80.9 ns/op BenchmarkBaselineForSliceLength 50000000 39.0 ns/op BenchmarkBaselineForReverseSliceLength 50000000 36.0 ns/op BenchmarkBaselineForLoopIteration10 20000000 119 ns/op BenchmarkBaselineForReverseLoopIteration10 20000000 92.9 ns/op BenchmarkBaselineForRange10 10000000 215 ns/op BenchmarkBaselineForSliceLength10 20000000 109 ns/op BenchmarkBaselineForReverseSliceLength10 20000000 92.9 ns/op BenchmarkBaselineForLoopIteration100 2000000 929 ns/op BenchmarkBaselineForReverseLoopIteration100 5000000 700 ns/op BenchmarkBaselineForRange100 1000000 1567 ns/op BenchmarkBaselineForSliceLength100 2000000 853 ns/op BenchmarkBaselineForReverseSliceLength100 5000000 700 ns/op BenchmarkBaselineForLoopIteration10000 10000 106006 ns/op BenchmarkBaselineForReverseLoopIteration10000 50000 67480 ns/op BenchmarkBaselineForRange10000 10000 153841 ns/op BenchmarkBaselineForSliceLength10000 20000 85735 ns/op BenchmarkBaselineForReverseSliceLength10000 50000 69461 ns/op BenchmarkBaselineMakeChannelBoolUnbuffered 200000 10162 ns/op BenchmarkBaselineMakeChannelBool1 200000 12517 ns/op BenchmarkBaselineMakeChannelBool10 200000 12521 ns/op BenchmarkBaselineMakeChannelStringUnbuffered 500000 10369 ns/op BenchmarkBaselineMakeChannelString1 200000 12576 ns/op BenchmarkBaselineMakeChannelString10 100000 22358 ns/op BenchmarkBaselineGo 50000 367593 ns/op BenchmarkBaselineFunctionCall 50000000 57.0 ns/op BenchmarkBaselineFunctionCallArg 20000000 81.0 ns/op BenchmarkBaselineFunctionCall5VarArgs 500000 6852 ns/op BenchmarkBaselineFunctionCallInt 50000000 60.3 ns/op BenchmarkBaselineFunctionCall5VarInts 1000000 3185 ns/op BenchmarkBaselineFunctionCallWithDefer 1000000 2330 ns/op BenchmarkBaselineFunctionCallPanicRecover 500000 6222 ns/op BenchmarkBaselineMethodCallDirect 20000000 83.8 ns/op BenchmarkBaselineMethodCallDirect1Arg 20000000 106 ns/op BenchmarkBaselineMethodCallDirect1Int 20000000 85.2 ns/op BenchmarkBaselineMethodCallDirect5Args 5000000 368 ns/op BenchmarkBaselineMethodCallDirect5Ints 10000000 233 ns/op BenchmarkBaselineMethodCallIndirect 100000000 18.0 ns/op BenchmarkBaselineMethodCallIndirect1Arg 50000000 42.0 ns/op BenchmarkBaselineMethodCallIndirect1Int 100000000 19.5 ns/op BenchmarkBaselineMethodCallIndirect5Args 5000000 309 ns/op BenchmarkBaselineMethodCallIndirect5Ints 10000000 168 ns/op BenchmarkBaselineTypeAssertion 10000000 218 ns/op BenchmarkBaselineTypeAssertionEmptyInterface 20000000 106 ns/op BenchmarkBaselineTypeAssertionInterface1 5000000 576 ns/op BenchmarkBaselineTypeAssertionInterface2 5000000 579 ns/op BenchmarkBaselineTypeReflectPrimitiveToValue 5000000 425 ns/op BenchmarkBaselineTypeReflectSliceToValue 1000000 3218 ns/op BenchmarkBaselineTypeReflectStructToValue 500000 4760 ns/op BenchmarkBaselineTypeCheck 10000000 189 ns/op BenchmarkBaselineTypeCheckEmptyInterface 20000000 93.1 ns/op BenchmarkBaselineTypeCheckInterface1 5000000 511 ns/op BenchmarkBaselineTypeCheckInterface2 5000000 516 ns/op BenchmarkBaselineTypeSwitchOneCase 10000000 262 ns/op BenchmarkBaselineTypeSwitchBasicTypesCase 10000000 295 ns/op BenchmarkBaselineTypeSwitchEmptyInterface 10000000 163 ns/op BenchmarkBaselineTypeSwitchInterface1 5000000 588 ns/op BenchmarkBaselineTypeSwitchInterface2 5000000 602 ns/op BenchmarkBaselineNewStructureLiteral 20000000 84.0 ns/op BenchmarkBaselineNewStructure 20000000 127 ns/op BenchmarkBaselineNewSliceLiteral 50000000 54.2 ns/op BenchmarkBaselineNewSlice 1000000 3124 ns/op BenchmarkBaselineNewMapLiteralIntToInt 500000 9083 ns/op BenchmarkBaselineNewMapLiteralIntToInterface 500000 9807 ns/op BenchmarkBaselineNewMapLiteralStringToInt 500000 9792 ns/op BenchmarkBaselineNewMapLiteralStringToInterface 500000 10595 ns/op BenchmarkBaselineNewMapLiteralIntToInt2Item 200000 14265 ns/op BenchmarkBaselineNewMapLiteralIntToInterface2Item 200000 14669 ns/op BenchmarkBaselineNewMapLiteralStringToInt2Item 200000 14025 ns/op BenchmarkBaselineNewMapLiteralStringToInterface2Item 200000 15086 ns/op BenchmarkBaselineNewMapIntToInt 500000 9025 ns/op BenchmarkBaselineNewMapIntToInterface 500000 9753 ns/op BenchmarkBaselineNewMapStringToInt 500000 9740 ns/op BenchmarkBaselineNewMapStringToInterface 500000 10486 ns/op BenchmarkBaselineSliceCopy 5000000 300 ns/op BenchmarkBaselineNewSliceAppendElement1 1000000 3318 ns/op BenchmarkBaselineNewSliceAppendElement10 1000000 5174 ns/op ok github.com/feyeleanor/gospeed 417.296s \u2013 anthony starks","title":"Raspberry Pi"},{"location":"GoArm/#raspberry-pi-2","text":"Building Go 1.5 on the Raspberry Pi - Dave Cheney go version go version devel +07f9c25 Wed Dec 9 21:25:05 2015 +0000 linux/arm $ go test -timeout 20m -v -bench=Benchmark -run=X PASS BenchmarkAppend-4 3000000 402 ns/op BenchmarkAppendGrowByte-4 50 27296836 ns/op BenchmarkAppendGrowString-4 1 1277592542 ns/op BenchmarkAppend1Byte-4 20000000 75.6 ns/op BenchmarkAppend4Bytes-4 20000000 88.2 ns/op BenchmarkAppend7Bytes-4 20000000 103 ns/op BenchmarkAppend8Bytes-4 20000000 89.1 ns/op BenchmarkAppend15Bytes-4 20000000 109 ns/op BenchmarkAppend16Bytes-4 20000000 94.5 ns/op BenchmarkAppend32Bytes-4 20000000 91.4 ns/op BenchmarkAppendStr1Byte-4 20000000 73.9 ns/op BenchmarkAppendStr4Bytes-4 20000000 84.7 ns/op BenchmarkAppendStr8Bytes-4 20000000 88.7 ns/op BenchmarkAppendStr16Bytes-4 20000000 94.5 ns/op BenchmarkAppendStr32Bytes-4 20000000 91.3 ns/op BenchmarkAppendSpecialCase-4 2000000 675 ns/op BenchmarkCopy1Byte-4 20000000 109 ns/op 9.13 MB/s BenchmarkCopy2Byte-4 20000000 112 ns/op 17.77 MB/s BenchmarkCopy4Byte-4 10000000 120 ns/op 33.26 MB/s BenchmarkCopy8Byte-4 10000000 122 ns/op 65.32 MB/s BenchmarkCopy12Byte-4 10000000 126 ns/op 94.82 MB/s BenchmarkCopy16Byte-4 10000000 129 ns/op 123.60 MB/s BenchmarkCopy32Byte-4 10000000 126 ns/op 252.60 MB/s BenchmarkCopy128Byte-4 10000000 162 ns/op 786.76 MB/s BenchmarkCopy1024Byte-4 3000000 479 ns/op 2134.17 MB/s BenchmarkCopy1String-4 20000000 100 ns/op 9.98 MB/s BenchmarkCopy2String-4 20000000 104 ns/op 19.19 MB/s BenchmarkCopy4String-4 20000000 111 ns/op 35.86 MB/s BenchmarkCopy8String-4 20000000 114 ns/op 70.02 MB/s BenchmarkCopy12String-4 20000000 116 ns/op 103.17 MB/s BenchmarkCopy16String-4 10000000 120 ns/op 132.69 MB/s BenchmarkCopy32String-4 20000000 116 ns/op 273.77 MB/s BenchmarkCopy128String-4 10000000 150 ns/op 851.31 MB/s BenchmarkCopy1024String-4 3000000 472 ns/op 2167.03 MB/s BenchmarkChanNonblocking-4 20000000 77.7 ns/op BenchmarkSelectUncontended-4 2000000 780 ns/op BenchmarkSelectSyncContended-4 100000 15094 ns/op BenchmarkSelectAsyncContended-4 500000 2569 ns/op BenchmarkSelectNonblock-4 10000000 226 ns/op BenchmarkChanUncontended-4 50000 26993 ns/op BenchmarkChanContended-4 10000 111382 ns/op BenchmarkChanSync-4 300000 3994 ns/op BenchmarkChanProdCons0-4 500000 3100 ns/op BenchmarkChanProdCons10-4 1000000 2099 ns/op BenchmarkChanProdCons100-4 1000000 1342 ns/op BenchmarkChanProdConsWork0-4 500000 3071 ns/op BenchmarkChanProdConsWork10-4 500000 2332 ns/op BenchmarkChanProdConsWork100-4 1000000 1382 ns/op BenchmarkSelectProdCons-4 300000 5015 ns/op BenchmarkChanCreation-4 2000000 629 ns/op BenchmarkChanSem-4 1000000 1116 ns/op BenchmarkChanPopular-4 200 7597153 ns/op BenchmarkCallClosure-4 30000000 43.5 ns/op BenchmarkCallClosure1-4 30000000 49.0 ns/op BenchmarkCallClosure2-4 5000000 323 ns/op BenchmarkCallClosure3-4 5000000 318 ns/op BenchmarkCallClosure4-4 5000000 324 ns/op BenchmarkComplex128DivNormal-4 3000000 488 ns/op BenchmarkComplex128DivNisNaN-4 5000000 375 ns/op BenchmarkComplex128DivDisNaN-4 5000000 362 ns/op BenchmarkComplex128DivNisInf-4 5000000 289 ns/op BenchmarkComplex128DivDisInf-4 5000000 273 ns/op BenchmarkSetTypePtr-4 20000000 85.1 ns/op 46.98 MB/s BenchmarkSetTypePtr8-4 10000000 169 ns/op 189.14 MB/s BenchmarkSetTypePtr16-4 10000000 213 ns/op 299.83 MB/s BenchmarkSetTypePtr32-4 5000000 297 ns/op 429.62 MB/s BenchmarkSetTypePtr64-4 3000000 462 ns/op 553.72 MB/s BenchmarkSetTypePtr126-4 2000000 791 ns/op 636.59 MB/s BenchmarkSetTypePtr128-4 2000000 777 ns/op 658.60 MB/s BenchmarkSetTypePtrSlice-4 200000 6208 ns/op 659.75 MB/s BenchmarkSetTypeNode1-4 10000000 160 ns/op 74.86 MB/s BenchmarkSetTypeNode1Slice-4 1000000 1076 ns/op 356.60 MB/s BenchmarkSetTypeNode8-4 10000000 221 ns/op 180.94 MB/s BenchmarkSetTypeNode8Slice-4 1000000 2359 ns/op 542.53 MB/s BenchmarkSetTypeNode64-4 3000000 506 ns/op 521.63 MB/s BenchmarkSetTypeNode64Slice-4 100000 12992 ns/op 650.22 MB/s BenchmarkSetTypeNode64Dead-4 5000000 308 ns/op 856.90 MB/s BenchmarkSetTypeNode64DeadSlice-4 200000 11506 ns/op 734.21 MB/s BenchmarkSetTypeNode124-4 2000000 799 ns/op 630.27 MB/s BenchmarkSetTypeNode124Slice-4 100000 23306 ns/op 692.00 MB/s BenchmarkSetTypeNode126-4 2000000 776 ns/op 659.33 MB/s BenchmarkSetTypeNode126Slice-4 100000 21520 ns/op 761.31 MB/s BenchmarkSetTypeNode128-4 2000000 850 ns/op 611.35 MB/s BenchmarkSetTypeNode128Slice-4 50000 24122 ns/op 689.81 MB/s BenchmarkSetTypeNode130-4 2000000 827 ns/op 638.06 MB/s BenchmarkSetTypeNode130Slice-4 50000 24322 ns/op 694.67 MB/s BenchmarkSetTypeNode1024-4 300000 5655 ns/op 725.66 MB/s BenchmarkSetTypeNode1024Slice-4 10000 183602 ns/op 715.28 MB/s BenchmarkAllocation-4 10000 166825 ns/op BenchmarkHash5-4 10000000 217 ns/op 23.02 MB/s BenchmarkHash16-4 5000000 289 ns/op 55.18 MB/s BenchmarkHash64-4 2000000 770 ns/op 83.10 MB/s BenchmarkHash1024-4 200000 9442 ns/op 108.44 MB/s BenchmarkHash65536-4 2000 600452 ns/op 109.14 MB/s BenchmarkEqEfaceConcrete-4 20000000 79.1 ns/op BenchmarkEqIfaceConcrete-4 20000000 77.0 ns/op BenchmarkNeEfaceConcrete-4 20000000 80.0 ns/op BenchmarkNeIfaceConcrete-4 20000000 77.7 ns/op BenchmarkConvT2ESmall-4 5000000 362 ns/op BenchmarkConvT2EUintptr-4 5000000 394 ns/op BenchmarkConvT2ELarge-4 3000000 457 ns/op BenchmarkConvT2ISmall-4 3000000 482 ns/op BenchmarkConvT2IUintptr-4 3000000 524 ns/op BenchmarkConvT2ILarge-4 3000000 600 ns/op BenchmarkConvI2E-4 20000000 60.5 ns/op BenchmarkConvI2I-4 5000000 302 ns/op BenchmarkAssertE2T-4 10000000 121 ns/op BenchmarkAssertE2TLarge-4 10000000 131 ns/op BenchmarkAssertE2I-4 5000000 329 ns/op BenchmarkAssertI2T-4 10000000 125 ns/op BenchmarkAssertI2I-4 5000000 328 ns/op BenchmarkAssertI2E-4 20000000 84.6 ns/op BenchmarkAssertE2E-4 50000000 32.5 ns/op BenchmarkAssertE2T2-4 10000000 129 ns/op BenchmarkAssertE2T2Blank-4 100000000 18.0 ns/op BenchmarkAssertI2E2-4 20000000 91.2 ns/op BenchmarkAssertI2E2Blank-4 100000000 16.7 ns/op BenchmarkAssertE2E2-4 10000000 159 ns/op BenchmarkAssertE2E2Blank-4 100000000 16.8 ns/op BenchmarkMalloc8-4 5000000 317 ns/op BenchmarkMalloc16-4 3000000 485 ns/op BenchmarkMallocTypeInfo8-4 3000000 587 ns/op BenchmarkMallocTypeInfo16-4 2000000 661 ns/op BenchmarkMallocLargeStruct-4 500000 3205 ns/op BenchmarkGoroutineSelect-4 100 18605318 ns/op BenchmarkGoroutineBlocking-4 100 17222169 ns/op BenchmarkGoroutineForRange-4 100 19092854 ns/op BenchmarkGoroutineIdle-4 100 12554944 ns/op BenchmarkMapPop100-4 5000 270721 ns/op BenchmarkMapPop1000-4 300 4674884 ns/op BenchmarkMapPop10000-4 10 110070793 ns/op BenchmarkHashStringSpeed-4 3000000 400 ns/op BenchmarkHashBytesSpeed-4 2000000 709 ns/op BenchmarkHashInt32Speed-4 5000000 305 ns/op BenchmarkHashInt64Speed-4 5000000 349 ns/op BenchmarkHashStringArraySpeed-4 2000000 911 ns/op BenchmarkMegMap-4 5000000 367 ns/op BenchmarkMegOneMap-4 5000000 311 ns/op BenchmarkMegEqMap-4 100 10147332 ns/op BenchmarkMegEmptyMap-4 10000000 138 ns/op BenchmarkSmallStrMap-4 5000000 367 ns/op BenchmarkMapStringKeysEight_16-4 5000000 395 ns/op BenchmarkMapStringKeysEight_32-4 5000000 378 ns/op BenchmarkMapStringKeysEight_64-4 5000000 378 ns/op BenchmarkMapStringKeysEight_1M-4 5000000 376 ns/op BenchmarkIntMap-4 10000000 198 ns/op BenchmarkRepeatedLookupStrMapKey32-4 2000000 799 ns/op BenchmarkRepeatedLookupStrMapKey1M-4 100 10023558 ns/op BenchmarkNewEmptyMap-4 2000000 841 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap-4 1000000 2357 ns/op 0 B/op 0 allocs/op BenchmarkMapIter-4 1000000 2132 ns/op BenchmarkMapIterEmpty-4 20000000 107 ns/op BenchmarkSameLengthMap-4 20000000 111 ns/op BenchmarkBigKeyMap-4 2000000 727 ns/op BenchmarkBigValMap-4 2000000 754 ns/op BenchmarkSmallKeyMap-4 5000000 296 ns/op BenchmarkComplexAlgMap-4 1000000 1786 ns/op BenchmarkMemmove0-4 30000000 47.7 ns/op BenchmarkMemmove1-4 30000000 50.2 ns/op 19.93 MB/s BenchmarkMemmove2-4 30000000 53.7 ns/op 37.28 MB/s BenchmarkMemmove3-4 30000000 56.9 ns/op 52.76 MB/s BenchmarkMemmove4-4 20000000 61.1 ns/op 65.42 MB/s BenchmarkMemmove5-4 20000000 75.8 ns/op 65.95 MB/s BenchmarkMemmove6-4 20000000 79.2 ns/op 75.80 MB/s BenchmarkMemmove7-4 20000000 82.5 ns/op 84.84 MB/s BenchmarkMemmove8-4 20000000 64.8 ns/op 123.37 MB/s BenchmarkMemmove9-4 20000000 67.1 ns/op 134.16 MB/s BenchmarkMemmove10-4 20000000 76.4 ns/op 130.87 MB/s BenchmarkMemmove11-4 20000000 81.3 ns/op 135.30 MB/s BenchmarkMemmove12-4 20000000 66.8 ns/op 179.68 MB/s BenchmarkMemmove13-4 20000000 70.6 ns/op 184.23 MB/s BenchmarkMemmove14-4 20000000 75.2 ns/op 186.19 MB/s BenchmarkMemmove15-4 20000000 79.5 ns/op 188.74 MB/s BenchmarkMemmove16-4 20000000 71.8 ns/op 222.73 MB/s BenchmarkMemmove32-4 20000000 68.3 ns/op 468.52 MB/s BenchmarkMemmove64-4 20000000 79.2 ns/op 808.35 MB/s BenchmarkMemmove128-4 20000000 101 ns/op 1256.13 MB/s BenchmarkMemmove256-4 10000000 145 ns/op 1755.64 MB/s BenchmarkMemmove512-4 5000000 244 ns/op 2095.34 MB/s BenchmarkMemmove1024-4 3000000 475 ns/op 2153.54 MB/s BenchmarkMemmove2048-4 2000000 883 ns/op 2317.95 MB/s BenchmarkMemmove4096-4 1000000 1809 ns/op 2262.99 MB/s BenchmarkMemmoveUnaligned0-4 30000000 58.1 ns/op BenchmarkMemmoveUnaligned1-4 20000000 63.3 ns/op 15.81 MB/s BenchmarkMemmoveUnaligned2-4 20000000 66.6 ns/op 30.04 MB/s BenchmarkMemmoveUnaligned3-4 20000000 69.9 ns/op 42.89 MB/s BenchmarkMemmoveUnaligned4-4 20000000 95.6 ns/op 41.85 MB/s BenchmarkMemmoveUnaligned5-4 20000000 98.6 ns/op 50.73 MB/s BenchmarkMemmoveUnaligned6-4 20000000 99.9 ns/op 60.08 MB/s BenchmarkMemmoveUnaligned7-4 20000000 101 ns/op 68.77 MB/s BenchmarkMemmoveUnaligned8-4 20000000 108 ns/op 73.58 MB/s BenchmarkMemmoveUnaligned9-4 20000000 112 ns/op 79.90 MB/s BenchmarkMemmoveUnaligned10-4 10000000 126 ns/op 79.18 MB/s BenchmarkMemmoveUnaligned11-4 10000000 128 ns/op 85.32 MB/s BenchmarkMemmoveUnaligned12-4 10000000 132 ns/op 90.67 MB/s BenchmarkMemmoveUnaligned13-4 10000000 125 ns/op 103.51 MB/s BenchmarkMemmoveUnaligned14-4 10000000 132 ns/op 105.50 MB/s BenchmarkMemmoveUnaligned15-4 10000000 138 ns/op 108.38 MB/s BenchmarkMemmoveUnaligned16-4 10000000 141 ns/op 112.89 MB/s BenchmarkMemmoveUnaligned32-4 10000000 154 ns/op 207.69 MB/s BenchmarkMemmoveUnaligned64-4 10000000 211 ns/op 303.20 MB/s BenchmarkMemmoveUnaligned128-4 5000000 318 ns/op 401.47 MB/s BenchmarkMemmoveUnaligned256-4 3000000 436 ns/op 586.76 MB/s BenchmarkMemmoveUnaligned512-4 2000000 722 ns/op 708.50 MB/s BenchmarkMemmoveUnaligned1024-4 1000000 1296 ns/op 789.56 MB/s BenchmarkMemmoveUnaligned2048-4 500000 2576 ns/op 794.83 MB/s BenchmarkMemmoveUnaligned4096-4 300000 4999 ns/op 819.32 MB/s BenchmarkMemclr5-4 20000000 77.1 ns/op 64.82 MB/s BenchmarkMemclr16-4 20000000 96.3 ns/op 166.15 MB/s BenchmarkMemclr64-4 20000000 85.0 ns/op 753.23 MB/s BenchmarkMemclr256-4 10000000 125 ns/op 2040.75 MB/s BenchmarkMemclr4096-4 1000000 1662 ns/op 2464.13 MB/s BenchmarkMemclr65536-4 30000 50428 ns/op 1299.58 MB/s BenchmarkMemclr1M-4 2000 875472 ns/op 1197.73 MB/s BenchmarkMemclr4M-4 500 3529939 ns/op 1188.21 MB/s BenchmarkMemclr8M-4 200 7088731 ns/op 1183.37 MB/s BenchmarkMemclr16M-4 100 14275180 ns/op 1175.27 MB/s BenchmarkMemclr64M-4 20 59343321 ns/op 1130.86 MB/s BenchmarkGoMemclr5-4 20000000 61.4 ns/op 81.44 MB/s BenchmarkGoMemclr16-4 20000000 81.7 ns/op 195.78 MB/s BenchmarkGoMemclr64-4 20000000 69.8 ns/op 917.14 MB/s BenchmarkGoMemclr256-4 20000000 109 ns/op 2339.84 MB/s BenchmarkClearFat8-4 200000000 7.84 ns/op BenchmarkClearFat12-4 200000000 8.93 ns/op BenchmarkClearFat16-4 100000000 10.1 ns/op BenchmarkClearFat24-4 100000000 12.3 ns/op BenchmarkClearFat32-4 100000000 14.5 ns/op BenchmarkClearFat40-4 30000000 52.4 ns/op BenchmarkClearFat48-4 20000000 60.3 ns/op BenchmarkClearFat56-4 20000000 65.9 ns/op BenchmarkClearFat64-4 20000000 73.8 ns/op BenchmarkClearFat128-4 10000000 126 ns/op BenchmarkClearFat256-4 10000000 234 ns/op BenchmarkClearFat512-4 3000000 448 ns/op BenchmarkClearFat1024-4 2000000 872 ns/op BenchmarkCopyFat8-4 200000000 6.72 ns/op BenchmarkCopyFat12-4 200000000 7.80 ns/op BenchmarkCopyFat16-4 200000000 8.93 ns/op BenchmarkCopyFat24-4 100000000 11.2 ns/op BenchmarkCopyFat32-4 100000000 17.9 ns/op BenchmarkCopyFat64-4 20000000 75.0 ns/op BenchmarkCopyFat128-4 10000000 128 ns/op BenchmarkCopyFat256-4 10000000 236 ns/op BenchmarkCopyFat512-4 3000000 449 ns/op BenchmarkCopyFat1024-4 2000000 879 ns/op BenchmarkFinalizer-4 500 3830391 ns/op BenchmarkFinalizerRun-4 200000 6697 ns/op BenchmarkSyscall-4 5000000 296 ns/op BenchmarkSyscallWork-4 3000000 551 ns/op BenchmarkSyscallExcess-4 5000000 296 ns/op BenchmarkSyscallExcessWork-4 3000000 552 ns/op BenchmarkPingPongHog-4 100000 13315 ns/op BenchmarkStackGrowth-4 500000 2461 ns/op BenchmarkStackGrowthDeep-4 2000 1028254 ns/op BenchmarkCreateGoroutines-4 500000 2722 ns/op BenchmarkCreateGoroutinesParallel-4 2000000 649 ns/op BenchmarkCreateGoroutinesCapture-4 100000 21739 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall-4 30000000 48.0 ns/op BenchmarkMatmult-4 50000000 40.3 ns/op BenchmarkIfaceCmp100-4 500000 2369 ns/op BenchmarkIfaceCmpNil100-4 500000 2475 ns/op BenchmarkDefer-4 1000000 1203 ns/op BenchmarkDefer10-4 1000000 1089 ns/op BenchmarkDeferMany-4 1000000 2045 ns/op BenchmarkStackCopy-4 1 2767373639 ns/op BenchmarkCompareStringEqual-4 10000000 140 ns/op BenchmarkCompareStringIdentical-4 30000000 41.4 ns/op BenchmarkCompareStringSameLength-4 20000000 92.0 ns/op BenchmarkCompareStringDifferentLength-4 100000000 13.4 ns/op BenchmarkCompareStringBigUnaligned-4 100 11917034 ns/op 87.99 MB/s BenchmarkCompareStringBig-4 200 10163432 ns/op 103.17 MB/s BenchmarkRuneIterate-4 500000 3969 ns/op BenchmarkRuneIterate2-4 500000 3947 ns/op BenchmarkUint32Div7-4 20000000 102 ns/op BenchmarkUint32Div37-4 20000000 102 ns/op BenchmarkUint32Div123-4 20000000 102 ns/op BenchmarkUint32Div763-4 20000000 102 ns/op BenchmarkUint32Div1247-4 20000000 102 ns/op BenchmarkUint32Div9305-4 20000000 102 ns/op BenchmarkUint32Div13307-4 20000000 102 ns/op BenchmarkUint32Div52513-4 20000000 103 ns/op BenchmarkUint32Div60978747-4 20000000 98.7 ns/op BenchmarkUint32Div106956295-4 20000000 100.0 ns/op BenchmarkUint32Mod7-4 20000000 102 ns/op BenchmarkUint32Mod37-4 20000000 102 ns/op BenchmarkUint32Mod123-4 20000000 102 ns/op BenchmarkUint32Mod763-4 20000000 103 ns/op BenchmarkUint32Mod1247-4 20000000 103 ns/op BenchmarkUint32Mod9305-4 20000000 102 ns/op BenchmarkUint32Mod13307-4 20000000 102 ns/op BenchmarkUint32Mod52513-4 20000000 103 ns/op BenchmarkUint32Mod60978747-4 20000000 100 ns/op BenchmarkUint32Mod106956295-4 20000000 100 ns/op ok runtime 562.289s","title":"Raspberry Pi 2"},{"location":"GoArm/#raspberry-pi-zero","text":"Architecture: 1 GHz ARM1176JZF-S, running at 700Mhz; 512MB RAM Operating System: Raspbian Jessie $ go version go version devel +5c24832 Sat Dec 5 00:10:40 2015 +0000 linux/arm $ go test -timeout 20m -v -bench=Benchmark -run=X PASS BenchmarkAppend 3000000 518 ns/op BenchmarkAppendGrowByte 20 95720661 ns/op BenchmarkAppendGrowString 1 2232033275 ns/op BenchmarkAppend1Byte 20000000 99.0 ns/op BenchmarkAppend4Bytes 10000000 120 ns/op BenchmarkAppend7Bytes 10000000 155 ns/op BenchmarkAppend8Bytes 10000000 132 ns/op BenchmarkAppend15Bytes 10000000 162 ns/op BenchmarkAppend16Bytes 10000000 134 ns/op BenchmarkAppend32Bytes 10000000 121 ns/op BenchmarkAppendStr1Byte 20000000 97.0 ns/op BenchmarkAppendStr4Bytes 10000000 118 ns/op BenchmarkAppendStr8Bytes 10000000 129 ns/op BenchmarkAppendStr16Bytes 10000000 132 ns/op BenchmarkAppendStr32Bytes 10000000 121 ns/op BenchmarkAppendSpecialCase 2000000 791 ns/op BenchmarkCopy1Byte 10000000 132 ns/op 7.54 MB/s BenchmarkCopy2Byte 10000000 144 ns/op 13.81 MB/s BenchmarkCopy4Byte 10000000 153 ns/op 26.12 MB/s BenchmarkCopy8Byte 10000000 164 ns/op 48.51 MB/s BenchmarkCopy12Byte 10000000 162 ns/op 74.03 MB/s BenchmarkCopy16Byte 10000000 167 ns/op 95.63 MB/s BenchmarkCopy32Byte 10000000 155 ns/op 205.20 MB/s BenchmarkCopy128Byte 10000000 192 ns/op 664.06 MB/s BenchmarkCopy1024Byte 2000000 689 ns/op 1484.28 MB/s BenchmarkCopy1String 10000000 120 ns/op 8.27 MB/s BenchmarkCopy2String 10000000 134 ns/op 14.85 MB/s BenchmarkCopy4String 10000000 142 ns/op 28.01 MB/s BenchmarkCopy8String 10000000 154 ns/op 51.81 MB/s BenchmarkCopy12String 10000000 151 ns/op 79.01 MB/s BenchmarkCopy16String 10000000 157 ns/op 101.82 MB/s BenchmarkCopy32String 10000000 145 ns/op 219.52 MB/s BenchmarkCopy128String 10000000 182 ns/op 700.88 MB/s BenchmarkCopy1024String 2000000 976 ns/op 1048.87 MB/s BenchmarkChanNonblocking 5000000 246 ns/op BenchmarkSelectUncontended 500000 3610 ns/op BenchmarkSelectSyncContended 100000 18957 ns/op BenchmarkSelectAsyncContended 500000 3614 ns/op BenchmarkSelectNonblock 2000000 814 ns/op BenchmarkChanUncontended 10000 135820 ns/op BenchmarkChanContended 10000 133122 ns/op BenchmarkChanSync 200000 5870 ns/op BenchmarkChanProdCons0 200000 5899 ns/op BenchmarkChanProdCons10 500000 2138 ns/op BenchmarkChanProdCons100 1000000 1557 ns/op BenchmarkChanProdConsWork0 200000 8948 ns/op BenchmarkChanProdConsWork10 300000 5043 ns/op BenchmarkChanProdConsWork100 300000 4498 ns/op BenchmarkSelectProdCons 200000 10818 ns/op BenchmarkChanCreation 500000 3187 ns/op BenchmarkChanSem 1000000 1266 ns/op BenchmarkChanPopular 100 14315946 ns/op BenchmarkCallClosure 30000000 50.0 ns/op BenchmarkCallClosure1 30000000 56.3 ns/op BenchmarkCallClosure2 3000000 512 ns/op BenchmarkCallClosure3 3000000 503 ns/op BenchmarkCallClosure4 3000000 512 ns/op BenchmarkComplex128DivNormal 2000000 735 ns/op BenchmarkComplex128DivNisNaN 200000 6001 ns/op BenchmarkComplex128DivDisNaN 200000 5992 ns/op BenchmarkComplex128DivNisInf 5000000 390 ns/op BenchmarkComplex128DivDisInf 5000000 375 ns/op BenchmarkSetTypePtr 10000000 119 ns/op 33.43 MB/s BenchmarkSetTypePtr8 10000000 227 ns/op 140.89 MB/s BenchmarkSetTypePtr16 5000000 285 ns/op 224.30 MB/s BenchmarkSetTypePtr32 5000000 388 ns/op 329.65 MB/s BenchmarkSetTypePtr64 3000000 591 ns/op 432.77 MB/s BenchmarkSetTypePtr126 1000000 1021 ns/op 493.46 MB/s BenchmarkSetTypePtr128 1000000 1003 ns/op 510.46 MB/s BenchmarkSetTypePtrSlice 200000 7427 ns/op 551.43 MB/s BenchmarkSetTypeNode1 10000000 217 ns/op 55.20 MB/s BenchmarkSetTypeNode1Slice 1000000 1284 ns/op 299.03 MB/s BenchmarkSetTypeNode8 5000000 277 ns/op 144.17 MB/s BenchmarkSetTypeNode8Slice 500000 2825 ns/op 453.02 MB/s BenchmarkSetTypeNode64 2000000 661 ns/op 398.89 MB/s BenchmarkSetTypeNode64Slice 100000 15531 ns/op 543.92 MB/s BenchmarkSetTypeNode64Dead 5000000 382 ns/op 689.66 MB/s BenchmarkSetTypeNode64DeadSlice 100000 13252 ns/op 637.46 MB/s BenchmarkSetTypeNode124 1000000 1017 ns/op 495.27 MB/s BenchmarkSetTypeNode124Slice 50000 28139 ns/op 573.14 MB/s BenchmarkSetTypeNode126 2000000 1001 ns/op 511.10 MB/s BenchmarkSetTypeNode126Slice 50000 26535 ns/op 617.43 MB/s BenchmarkSetTypeNode128 1000000 1087 ns/op 478.22 MB/s BenchmarkSetTypeNode128Slice 50000 29166 ns/op 570.52 MB/s BenchmarkSetTypeNode130 1000000 1067 ns/op 494.83 MB/s BenchmarkSetTypeNode130Slice 50000 29691 ns/op 569.04 MB/s BenchmarkSetTypeNode1024 200000 7155 ns/op 573.51 MB/s BenchmarkSetTypeNode1024Slice 5000 224292 ns/op 585.52 MB/s BenchmarkAllocation 2000 957094 ns/op BenchmarkHash5 5000000 349 ns/op 14.29 MB/s BenchmarkHash16 3000000 436 ns/op 36.66 MB/s BenchmarkHash64 1000000 1007 ns/op 63.49 MB/s BenchmarkHash1024 200000 11267 ns/op 90.88 MB/s BenchmarkHash65536 2000 797741 ns/op 82.15 MB/s BenchmarkEqEfaceConcrete 20000000 111 ns/op BenchmarkEqIfaceConcrete 20000000 106 ns/op BenchmarkNeEfaceConcrete 20000000 111 ns/op BenchmarkNeIfaceConcrete 20000000 106 ns/op BenchmarkConvT2ESmall 3000000 561 ns/op BenchmarkConvT2EUintptr 2000000 599 ns/op BenchmarkConvT2ELarge 2000000 767 ns/op BenchmarkConvT2ISmall 2000000 724 ns/op BenchmarkConvT2IUintptr 2000000 750 ns/op BenchmarkConvT2ILarge 2000000 907 ns/op BenchmarkConvI2E 20000000 76.7 ns/op BenchmarkConvI2I 3000000 425 ns/op BenchmarkAssertE2T 10000000 176 ns/op BenchmarkAssertE2TLarge 10000000 189 ns/op BenchmarkAssertE2I 3000000 455 ns/op BenchmarkAssertI2T 10000000 176 ns/op BenchmarkAssertI2I 3000000 451 ns/op BenchmarkAssertI2E 20000000 109 ns/op BenchmarkAssertE2E 30000000 40.7 ns/op BenchmarkAssertE2T2 10000000 180 ns/op BenchmarkAssertE2T2Blank 50000000 22.8 ns/op BenchmarkAssertI2E2 20000000 117 ns/op BenchmarkAssertI2E2Blank 100000000 21.7 ns/op BenchmarkAssertE2E2 10000000 231 ns/op BenchmarkAssertE2E2Blank 100000000 21.8 ns/op BenchmarkMalloc8 3000000 507 ns/op BenchmarkMalloc16 2000000 848 ns/op BenchmarkMallocTypeInfo8 2000000 1012 ns/op BenchmarkMallocTypeInfo16 1000000 1168 ns/op BenchmarkMallocLargeStruct 500000 4823 ns/op BenchmarkGoroutineSelect 20 76172338 ns/op BenchmarkGoroutineBlocking 20 63469806 ns/op BenchmarkGoroutineForRange 20 64107650 ns/op BenchmarkGoroutineIdle 20 60844381 ns/op BenchmarkMapPop100 3000 409498 ns/op BenchmarkMapPop1000 200 7783817 ns/op BenchmarkMapPop10000 10 170736704 ns/op BenchmarkHashStringSpeed 3000000 541 ns/op BenchmarkHashBytesSpeed 1000000 1157 ns/op BenchmarkHashInt32Speed 5000000 371 ns/op BenchmarkHashInt64Speed 3000000 427 ns/op BenchmarkHashStringArraySpeed 1000000 1417 ns/op BenchmarkMegMap 3000000 404 ns/op BenchmarkMegOneMap 5000000 346 ns/op BenchmarkMegEqMap 100 16663414 ns/op BenchmarkMegEmptyMap 10000000 160 ns/op BenchmarkSmallStrMap 3000000 415 ns/op BenchmarkMapStringKeysEight_16 3000000 417 ns/op BenchmarkMapStringKeysEight_32 3000000 420 ns/op BenchmarkMapStringKeysEight_64 3000000 420 ns/op BenchmarkMapStringKeysEight_1M 3000000 419 ns/op BenchmarkIntMap 10000000 220 ns/op BenchmarkRepeatedLookupStrMapKey32 1000000 1015 ns/op BenchmarkRepeatedLookupStrMapKey1M 100 15652033 ns/op BenchmarkNewEmptyMap 1000000 1395 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap 300000 3368 ns/op 0 B/op 0 allocs/op BenchmarkMapIter 500000 2947 ns/op BenchmarkMapIterEmpty 20000000 163 ns/op BenchmarkSameLengthMap 10000000 133 ns/op BenchmarkBigKeyMap 2000000 899 ns/op BenchmarkBigValMap 2000000 922 ns/op BenchmarkSmallKeyMap 3000000 402 ns/op BenchmarkComplexAlgMap 1000000 2003 ns/op BenchmarkMemmove0 20000000 61.4 ns/op BenchmarkMemmove1 20000000 76.6 ns/op 13.05 MB/s BenchmarkMemmove2 20000000 86.3 ns/op 23.18 MB/s BenchmarkMemmove3 20000000 83.7 ns/op 35.83 MB/s BenchmarkMemmove4 20000000 88.0 ns/op 45.48 MB/s BenchmarkMemmove5 20000000 110 ns/op 45.37 MB/s BenchmarkMemmove6 20000000 115 ns/op 51.99 MB/s BenchmarkMemmove7 10000000 123 ns/op 56.89 MB/s BenchmarkMemmove8 20000000 99.5 ns/op 80.44 MB/s BenchmarkMemmove9 20000000 112 ns/op 79.76 MB/s BenchmarkMemmove10 10000000 125 ns/op 79.48 MB/s BenchmarkMemmove11 10000000 125 ns/op 87.84 MB/s BenchmarkMemmove12 20000000 96.9 ns/op 123.87 MB/s BenchmarkMemmove13 20000000 110 ns/op 117.83 MB/s BenchmarkMemmove14 10000000 123 ns/op 113.65 MB/s BenchmarkMemmove15 10000000 122 ns/op 122.30 MB/s BenchmarkMemmove16 20000000 101 ns/op 156.89 MB/s BenchmarkMemmove32 20000000 90.8 ns/op 352.44 MB/s BenchmarkMemmove64 20000000 108 ns/op 588.34 MB/s BenchmarkMemmove128 10000000 127 ns/op 1001.83 MB/s BenchmarkMemmove256 10000000 178 ns/op 1436.19 MB/s BenchmarkMemmove512 5000000 326 ns/op 1569.07 MB/s BenchmarkMemmove1024 2000000 631 ns/op 1620.84 MB/s BenchmarkMemmove2048 1000000 1251 ns/op 1636.60 MB/s BenchmarkMemmove4096 500000 2499 ns/op 1638.97 MB/s BenchmarkMemmoveUnaligned0 20000000 72.5 ns/op BenchmarkMemmoveUnaligned1 20000000 87.8 ns/op 11.39 MB/s BenchmarkMemmoveUnaligned2 20000000 99.4 ns/op 20.12 MB/s BenchmarkMemmoveUnaligned3 20000000 96.9 ns/op 30.96 MB/s BenchmarkMemmoveUnaligned4 10000000 135 ns/op 29.44 MB/s BenchmarkMemmoveUnaligned5 10000000 147 ns/op 33.90 MB/s BenchmarkMemmoveUnaligned6 10000000 146 ns/op 41.09 MB/s BenchmarkMemmoveUnaligned7 10000000 151 ns/op 46.27 MB/s BenchmarkMemmoveUnaligned8 10000000 156 ns/op 51.22 MB/s BenchmarkMemmoveUnaligned9 10000000 161 ns/op 55.82 MB/s BenchmarkMemmoveUnaligned10 10000000 166 ns/op 60.09 MB/s BenchmarkMemmoveUnaligned11 10000000 171 ns/op 64.17 MB/s BenchmarkMemmoveUnaligned12 10000000 177 ns/op 67.79 MB/s BenchmarkMemmoveUnaligned13 10000000 181 ns/op 71.60 MB/s BenchmarkMemmoveUnaligned14 10000000 189 ns/op 74.03 MB/s BenchmarkMemmoveUnaligned15 10000000 196 ns/op 76.30 MB/s BenchmarkMemmoveUnaligned16 10000000 200 ns/op 79.91 MB/s BenchmarkMemmoveUnaligned32 10000000 221 ns/op 144.64 MB/s BenchmarkMemmoveUnaligned64 5000000 290 ns/op 220.16 MB/s BenchmarkMemmoveUnaligned128 3000000 413 ns/op 309.84 MB/s BenchmarkMemmoveUnaligned256 2000000 766 ns/op 334.16 MB/s BenchmarkMemmoveUnaligned512 2000000 925 ns/op 553.13 MB/s BenchmarkMemmoveUnaligned1024 500000 2747 ns/op 372.66 MB/s BenchmarkMemmoveUnaligned2048 500000 3180 ns/op 643.85 MB/s BenchmarkMemmoveUnaligned4096 200000 6206 ns/op 659.99 MB/s BenchmarkMemclr5 20000000 105 ns/op 47.53 MB/s BenchmarkMemclr16 20000000 110 ns/op 144.77 MB/s BenchmarkMemclr64 10000000 125 ns/op 511.58 MB/s BenchmarkMemclr256 10000000 182 ns/op 1402.34 MB/s BenchmarkMemclr4096 500000 2489 ns/op 1645.22 MB/s BenchmarkMemclr65536 50000 39883 ns/op 1643.18 MB/s BenchmarkMemclr1M 2000 636812 ns/op 1646.60 MB/s BenchmarkMemclr4M 500 2549362 ns/op 1645.24 MB/s BenchmarkMemclr8M 300 5162451 ns/op 1624.93 MB/s BenchmarkMemclr16M 200 10300878 ns/op 1628.72 MB/s BenchmarkMemclr64M 30 42801198 ns/op 1567.92 MB/s BenchmarkGoMemclr5 20000000 73.5 ns/op 67.99 MB/s BenchmarkGoMemclr16 20000000 85.9 ns/op 186.24 MB/s BenchmarkGoMemclr64 20000000 87.8 ns/op 729.24 MB/s BenchmarkGoMemclr256 10000000 160 ns/op 1591.97 MB/s BenchmarkClearFat8 100000000 15.6 ns/op BenchmarkClearFat12 100000000 27.5 ns/op BenchmarkClearFat16 100000000 32.4 ns/op BenchmarkClearFat24 50000000 57.0 ns/op BenchmarkClearFat32 50000000 80.5 ns/op BenchmarkClearFat40 30000000 77.5 ns/op BenchmarkClearFat48 30000000 105 ns/op BenchmarkClearFat56 20000000 87.1 ns/op BenchmarkClearFat64 20000000 137 ns/op BenchmarkClearFat128 20000000 278 ns/op BenchmarkClearFat256 5000000 537 ns/op BenchmarkClearFat512 2000000 1293 ns/op BenchmarkClearFat1024 1000000 2545 ns/op BenchmarkCopyFat8 100000000 12.2 ns/op BenchmarkCopyFat12 100000000 20.3 ns/op BenchmarkCopyFat16 100000000 34.3 ns/op BenchmarkCopyFat24 50000000 27.7 ns/op BenchmarkCopyFat32 50000000 25.4 ns/op BenchmarkCopyFat64 20000000 135 ns/op BenchmarkCopyFat128 10000000 299 ns/op BenchmarkCopyFat256 2000000 571 ns/op BenchmarkCopyFat512 1000000 1218 ns/op BenchmarkCopyFat1024 500000 2665 ns/op BenchmarkFinalizer 50 20313669 ns/op BenchmarkFinalizerRun 30000 49987 ns/op BenchmarkSyscall 1000000 1625 ns/op BenchmarkSyscallWork 500000 2668 ns/op BenchmarkSyscallExcess 1000000 1613 ns/op BenchmarkSyscallExcessWork 500000 2658 ns/op BenchmarkPingPongHog 100000 20539 ns/op BenchmarkStackGrowth 50000 28473 ns/op BenchmarkStackGrowthDeep 500 2845263 ns/op BenchmarkCreateGoroutines 300000 4297 ns/op BenchmarkCreateGoroutinesParallel 300000 4300 ns/op BenchmarkCreateGoroutinesCapture 50000 33218 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall 30000000 55.1 ns/op BenchmarkMatmult 10000000 196 ns/op BenchmarkIfaceCmp100 500000 2672 ns/op BenchmarkIfaceCmpNil100 500000 2982 ns/op BenchmarkDefer 1000000 1819 ns/op BenchmarkDefer10 1000000 1478 ns/op BenchmarkDeferMany 500000 3464 ns/op BenchmarkStackCopy 1 3714828065 ns/op BenchmarkCompareStringEqual 10000000 160 ns/op BenchmarkCompareStringIdentical 30000000 54.1 ns/op BenchmarkCompareStringSameLength 20000000 111 ns/op BenchmarkCompareStringDifferentLength 100000000 16.3 ns/op BenchmarkCompareStringBigUnaligned 100 16695582 ns/op 62.81 MB/s BenchmarkCompareStringBig 100 17208318 ns/op 60.93 MB/s BenchmarkRuneIterate 300000 5159 ns/op BenchmarkRuneIterate2 300000 5158 ns/op BenchmarkUint32Div7 10000000 144 ns/op BenchmarkUint32Div37 10000000 144 ns/op BenchmarkUint32Div123 10000000 144 ns/op BenchmarkUint32Div763 10000000 148 ns/op BenchmarkUint32Div1247 10000000 144 ns/op BenchmarkUint32Div9305 10000000 144 ns/op BenchmarkUint32Div13307 10000000 144 ns/op BenchmarkUint32Div52513 10000000 144 ns/op BenchmarkUint32Div60978747 10000000 131 ns/op BenchmarkUint32Div106956295 10000000 131 ns/op BenchmarkUint32Mod7 10000000 144 ns/op BenchmarkUint32Mod37 10000000 144 ns/op BenchmarkUint32Mod123 10000000 144 ns/op BenchmarkUint32Mod763 10000000 144 ns/op BenchmarkUint32Mod1247 10000000 144 ns/op BenchmarkUint32Mod9305 10000000 144 ns/op BenchmarkUint32Mod13307 10000000 144 ns/op BenchmarkUint32Mod52513 10000000 144 ns/op BenchmarkUint32Mod60978747 10000000 131 ns/op BenchmarkUint32Mod106956295 10000000 131 ns/op ok runtime 566.969s","title":"Raspberry Pi Zero"},{"location":"GoArm/#odroid-x","text":"Architecture: ARMv7 quad-core Cortex-A9 (Samsung Exynos 4412 1.4GHz), 1GB RAM, Mali graphics (untested). Operating System: Archlinux ARM Go pre-1.1 compiles out of the box. The four cores make it particularly suited to Go multi-threaded programs. An ODROID-X2 is coming (Nov 2012) with more RAM. \u2013 R\u00e9my Oudompheng","title":"ODROID-X"},{"location":"GoArm/#bananapi","text":"BananaPi has a few enhanced hardware components compare with Raspberry Pi. Architecture Comments Allwinner A20(ARM Cortex-A7 Dual-core, 1GHz, Mali400MP2 GPU) tbc eSATA No worry to wear out your root SD Card Onboard Microphone tbc 1G Etherenet tbc 1G RAM tbc Reset Switch To reset the board ? Power Switch To power cycle the board ? root@bpi01:/data/go13/src# cat ./buildgo.bash #!/bin/bash # use 1 CPU to avoid out of memory compilation issue. time taskset 2 ./make.bash root@bpi01:/data/go13/src# ./buildgo.bash <snipped> Installed Go for linux/arm in /data/go1.3 Installed commands in /data/go1.3/bin real 9m9.222s user 8m18.960s sys 0m40.920s root@bpi01:/data/go1.3/src# \u2013T.J. Yang","title":"BananaPi"},{"location":"GoArm/#appliedmicro-x-gene-armv8","text":"Architecture: ARMv8 (64-bit) 8-core, 2.4GHz, 16GB RAM Operating Systems: Linux, Fedora 21 You will need to cross-compile a toolchain using bootstrap.bash. After you copy it to the arm64 system and set GOROOT_BOOTSTRAP , you can build go natively.","title":"AppliedMicro X-Gene (ARMv8)"},{"location":"GoArm/#96boards-hikey-armv8","text":"Architecture: ARMv8 (64-bit) 8-core, 1.2GHz, 1GB RAM Operating System: Linux (Linaro) Go Version: 1.5Beta1 Special Notes: Enable a swap partition (<=1GB is fine). Build process is CPU-intensive and may cause the internal 90C temperature threshold to be exceeded - keep the HiKey cool during the build. As mentioned above, use bootstrap.sh (e.g. on Ubuntu AMD64) for ARM64, then transfer over the bootstrap tbx file, untar it, and use it as GOROOT_BOOTSTRAP. Check out the Go sources into a separate GOROOT, and build. \u2013Andrew Cencini ( andrew@vapor.io )","title":"96Boards HiKey (ARMv8)"},{"location":"GoArm/#scaleway-c1-server","text":"Architecture: armv7l Operating System: Debian 8.2 (armhf) Go Version: 1.5 The Scaleway C1 Server is a dedicated ARM server with 2GiB RAM using a SAN for storage. I used the following guide: Building Go 1.5 on the Raspberry Pi _\u2013Laurent Debacker","title":"Scaleway C1 Server"},{"location":"GoArm/#jetson-nano","text":"Jetson Nano\u2122 from NVIDIA\u00ae is a high performance low-power single board computer built for edge Artificial Intelligence computing. It has Quad-core ARM57 based CPU clocked at 1.43 Ghz, 128-core Maxwell based GPU and 4GB of LPDDR4 memory with 25.6 GB/s bandwidth. Architecture: ARMv8-A Operating System: Jetson Nano Developer Kit (Ubuntu 18.04 LTS) with JetPack 4.2 Kernel: I'm using a custom compiled official kernel with patch for enabling Zswap and having the root file system in a USB SSD. The procedure for doing this is detailed in Syonyk's blog . abishek@Titan:~$ uname -a Linux Titan 4.9.140 #1 SMP PREEMPT Thu May 23 01:33:05 IST 2019 aarch64 aarch64 aarch64 GNU/Linux Go Version: abishek@Titan:~$ go version go version go1.12.5 linux/arm64 I used the ARMv8 version from Other Ports section of official downloads. I set the following system wide environment variables in /etc/environment. GOROOT=\"/usr/local/go\" GOPATH=\"/home/abishek/Developer/go/packages\" PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/go/bin:/home/abishek/Developer/go/packages/bin\" LANG=\"en_IN\" Benchmarks: HW configuration : 5V 4A power via DC barrel jack. Noctua 40mm PWM fan. Samsung 840 EVO 120 GB SSD. SW configuration : Headless. Zswap. 12 GB swap partition. Simple benchmark. abishek@Titan:~$ cd $GOROOT/src/runtime $ go test -test.bench=BenchmarkUint PASS ok runtime 329.992s Extensive benchmarks. $ go test -test.bench=\".*\" -test.timeout=\"60m\" goos: linux goarch: arm64 pkg: runtime BenchmarkMakeChan/Byte-4 10000000 219 ns/op BenchmarkMakeChan/Int-4 5000000 298 ns/op BenchmarkMakeChan/Ptr-4 3000000 452 ns/op BenchmarkMakeChan/Struct/0-4 10000000 196 ns/op BenchmarkMakeChan/Struct/32-4 3000000 519 ns/op BenchmarkMakeChan/Struct/40-4 3000000 592 ns/op BenchmarkChanNonblocking-4 200000000 7.93 ns/op BenchmarkSelectUncontended-4 10000000 124 ns/op BenchmarkSelectSyncContended-4 200000 7358 ns/op BenchmarkSelectAsyncContended-4 2000000 671 ns/op BenchmarkSelectNonblock-4 100000000 22.7 ns/op BenchmarkChanUncontended-4 200000 6956 ns/op BenchmarkChanContended-4 30000 51996 ns/op BenchmarkChanSync-4 1000000 1118 ns/op BenchmarkChanSyncWork-4 200000 11784 ns/op BenchmarkChanProdCons0-4 2000000 817 ns/op BenchmarkChanProdCons10-4 2000000 656 ns/op BenchmarkChanProdCons100-4 3000000 561 ns/op BenchmarkChanProdConsWork0-4 2000000 803 ns/op BenchmarkChanProdConsWork10-4 2000000 706 ns/op BenchmarkChanProdConsWork100-4 2000000 633 ns/op BenchmarkSelectProdCons-4 1000000 1411 ns/op BenchmarkChanCreation-4 10000000 206 ns/op BenchmarkChanSem-4 3000000 502 ns/op BenchmarkChanPopular-4 1000 1503920 ns/op BenchmarkCallClosure-4 200000000 6.54 ns/op BenchmarkCallClosure1-4 300000000 5.94 ns/op BenchmarkCallClosure2-4 20000000 72.0 ns/op BenchmarkCallClosure3-4 20000000 77.9 ns/op BenchmarkCallClosure4-4 20000000 74.6 ns/op BenchmarkComplex128DivNormal-4 20000000 72.3 ns/op BenchmarkComplex128DivNisNaN-4 30000000 47.0 ns/op BenchmarkComplex128DivDisNaN-4 20000000 67.6 ns/op BenchmarkComplex128DivNisInf-4 50000000 38.7 ns/op BenchmarkComplex128DivDisInf-4 20000000 79.3 ns/op BenchmarkSetTypePtr-4 200000000 8.54 ns/op 936.87 MB/s BenchmarkSetTypePtr8-4 50000000 37.2 ns/op 1720.14 MB/s BenchmarkSetTypePtr16-4 30000000 45.6 ns/op 2806.20 MB/s BenchmarkSetTypePtr32-4 20000000 60.4 ns/op 4236.17 MB/s BenchmarkSetTypePtr64-4 20000000 110 ns/op 4615.47 MB/s BenchmarkSetTypePtr126-4 10000000 171 ns/op 5892.51 MB/s BenchmarkSetTypePtr128-4 10000000 169 ns/op 6030.73 MB/s BenchmarkSetTypePtrSlice-4 1000000 1589 ns/op 5154.84 MB/s BenchmarkSetTypeNode1-4 50000000 33.7 ns/op 712.62 MB/s BenchmarkSetTypeNode1Slice-4 10000000 197 ns/op 3881.85 MB/s BenchmarkSetTypeNode8-4 30000000 42.1 ns/op 1899.69 MB/s BenchmarkSetTypeNode8Slice-4 3000000 558 ns/op 4584.96 MB/s BenchmarkSetTypeNode64-4 10000000 128 ns/op 4123.56 MB/s BenchmarkSetTypeNode64Slice-4 500000 2707 ns/op 6240.73 MB/s BenchmarkSetTypeNode64Dead-4 20000000 72.4 ns/op 7291.77 MB/s BenchmarkSetTypeNode64DeadSlice-4 500000 3203 ns/op 5274.16 MB/s BenchmarkSetTypeNode124-4 10000000 169 ns/op 5961.36 MB/s BenchmarkSetTypeNode124Slice-4 300000 4505 ns/op 7159.55 MB/s BenchmarkSetTypeNode126-4 10000000 171 ns/op 5971.04 MB/s BenchmarkSetTypeNode126Slice-4 300000 4430 ns/op 7395.67 MB/s BenchmarkSetTypeNode128-4 10000000 181 ns/op 5737.43 MB/s BenchmarkSetTypeNode128Slice-4 300000 4958 ns/op 6711.13 MB/s BenchmarkSetTypeNode130-4 10000000 183 ns/op 5764.99 MB/s BenchmarkSetTypeNode130Slice-4 300000 5092 ns/op 6635.64 MB/s BenchmarkSetTypeNode1024-4 1000000 1104 ns/op 7430.05 MB/s BenchmarkSetTypeNode1024Slice-4 50000 32624 ns/op 8050.89 MB/s BenchmarkAllocation-4 30000 42818 ns/op BenchmarkReadMemStats-4 50000 26260 ns/op BenchmarkWriteBarrier-4 20000000 59.5 ns/op BenchmarkBulkWriteBarrier-4 50000000 30.4 ns/op BenchmarkScanStackNoLocals-4 10 161375576 ns/op BenchmarkHash5-4 50000000 24.4 ns/op 205.24 MB/s BenchmarkHash16-4 100000000 22.9 ns/op 698.97 MB/s BenchmarkHash64-4 50000000 36.2 ns/op 1766.78 MB/s BenchmarkHash1024-4 10000000 144 ns/op 7062.29 MB/s BenchmarkHash65536-4 200000 7637 ns/op 8580.67 MB/s BenchmarkAlignedLoad-4 200000000 7.74 ns/op BenchmarkUnalignedLoad-4 200000000 7.72 ns/op BenchmarkEqEfaceConcrete-4 500000000 3.51 ns/op BenchmarkEqIfaceConcrete-4 500000000 3.86 ns/op BenchmarkNeEfaceConcrete-4 500000000 3.51 ns/op BenchmarkNeIfaceConcrete-4 500000000 3.86 ns/op BenchmarkConvT2ESmall-4 100000000 10.9 ns/op BenchmarkConvT2EUintptr-4 100000000 10.7 ns/op BenchmarkConvT2ELarge-4 20000000 119 ns/op BenchmarkConvT2ISmall-4 100000000 11.0 ns/op BenchmarkConvT2IUintptr-4 100000000 10.5 ns/op BenchmarkConvT2ILarge-4 20000000 118 ns/op BenchmarkConvI2E-4 300000000 5.43 ns/op BenchmarkConvI2I-4 30000000 52.5 ns/op BenchmarkAssertE2T-4 500000000 3.79 ns/op BenchmarkAssertE2TLarge-4 200000000 7.13 ns/op BenchmarkAssertE2I-4 30000000 53.3 ns/op BenchmarkAssertI2T-4 500000000 3.75 ns/op BenchmarkAssertI2I-4 30000000 54.0 ns/op BenchmarkAssertI2E-4 300000000 5.38 ns/op BenchmarkAssertE2E-4 300000000 4.91 ns/op BenchmarkAssertE2T2-4 300000000 4.91 ns/op BenchmarkAssertE2T2Blank-4 500000000 3.04 ns/op BenchmarkAssertI2E2-4 200000000 6.67 ns/op BenchmarkAssertI2E2Blank-4 500000000 3.04 ns/op BenchmarkAssertE2E2-4 200000000 6.32 ns/op BenchmarkAssertE2E2Blank-4 500000000 3.04 ns/op BenchmarkConvT2Ezero/zero/16-4 100000000 10.9 ns/op BenchmarkConvT2Ezero/zero/32-4 100000000 10.5 ns/op BenchmarkConvT2Ezero/zero/64-4 100000000 10.5 ns/op BenchmarkConvT2Ezero/zero/str-4 100000000 11.9 ns/op BenchmarkConvT2Ezero/zero/slice-4 100000000 12.8 ns/op BenchmarkConvT2Ezero/zero/big-4 2000000 715 ns/op BenchmarkConvT2Ezero/nonzero/16-4 30000000 52.6 ns/op BenchmarkConvT2Ezero/nonzero/32-4 20000000 61.4 ns/op BenchmarkConvT2Ezero/nonzero/64-4 20000000 73.1 ns/op BenchmarkConvT2Ezero/nonzero/str-4 10000000 128 ns/op BenchmarkConvT2Ezero/nonzero/slice-4 10000000 160 ns/op BenchmarkConvT2Ezero/nonzero/big-4 2000000 722 ns/op BenchmarkMalloc8-4 20000000 67.4 ns/op BenchmarkMalloc16-4 20000000 102 ns/op BenchmarkMallocTypeInfo8-4 20000000 99.4 ns/op BenchmarkMallocTypeInfo16-4 20000000 119 ns/op BenchmarkMallocLargeStruct-4 1000000 1034 ns/op BenchmarkGoroutineSelect-4 200 5243015 ns/op BenchmarkGoroutineBlocking-4 200 6219647 ns/op BenchmarkGoroutineForRange-4 200 6146714 ns/op BenchmarkGoroutineIdle-4 500 2738542 ns/op BenchmarkHashStringSpeed-4 20000000 75.0 ns/op BenchmarkHashBytesSpeed-4 20000000 123 ns/op BenchmarkHashInt32Speed-4 30000000 64.2 ns/op BenchmarkHashInt64Speed-4 20000000 56.2 ns/op BenchmarkHashStringArraySpeed-4 10000000 175 ns/op BenchmarkMegMap-4 30000000 51.4 ns/op BenchmarkMegOneMap-4 100000000 21.8 ns/op BenchmarkMegEqMap-4 5000 378562 ns/op BenchmarkMegEmptyMap-4 200000000 9.83 ns/op BenchmarkSmallStrMap-4 30000000 53.3 ns/op BenchmarkMapStringKeysEight_16-4 30000000 48.8 ns/op BenchmarkMapStringKeysEight_32-4 30000000 47.0 ns/op BenchmarkMapStringKeysEight_64-4 30000000 47.0 ns/op BenchmarkMapStringKeysEight_1M-4 30000000 47.3 ns/op BenchmarkIntMap-4 30000000 47.9 ns/op BenchmarkMapFirst/1-4 100000000 15.4 ns/op BenchmarkMapFirst/2-4 100000000 15.6 ns/op BenchmarkMapFirst/3-4 100000000 15.6 ns/op BenchmarkMapFirst/4-4 100000000 15.6 ns/op BenchmarkMapFirst/5-4 100000000 15.6 ns/op BenchmarkMapFirst/6-4 100000000 15.4 ns/op BenchmarkMapFirst/7-4 100000000 15.6 ns/op BenchmarkMapFirst/8-4 100000000 15.4 ns/op BenchmarkMapFirst/9-4 50000000 35.2 ns/op BenchmarkMapFirst/10-4 50000000 35.4 ns/op BenchmarkMapFirst/11-4 50000000 35.1 ns/op BenchmarkMapFirst/12-4 50000000 35.1 ns/op BenchmarkMapFirst/13-4 50000000 35.1 ns/op BenchmarkMapFirst/14-4 50000000 35.1 ns/op BenchmarkMapFirst/15-4 50000000 35.1 ns/op BenchmarkMapFirst/16-4 50000000 35.1 ns/op BenchmarkMapMid/1-4 100000000 16.1 ns/op BenchmarkMapMid/2-4 100000000 19.0 ns/op BenchmarkMapMid/3-4 100000000 19.1 ns/op BenchmarkMapMid/4-4 100000000 21.3 ns/op BenchmarkMapMid/5-4 100000000 21.1 ns/op BenchmarkMapMid/6-4 100000000 23.2 ns/op BenchmarkMapMid/7-4 100000000 23.2 ns/op BenchmarkMapMid/8-4 50000000 25.6 ns/op BenchmarkMapMid/9-4 30000000 40.0 ns/op BenchmarkMapMid/10-4 30000000 55.1 ns/op BenchmarkMapMid/11-4 30000000 46.0 ns/op BenchmarkMapMid/12-4 30000000 46.0 ns/op BenchmarkMapMid/13-4 30000000 46.0 ns/op BenchmarkMapMid/14-4 50000000 46.0 ns/op BenchmarkMapMid/15-4 30000000 40.0 ns/op BenchmarkMapMid/16-4 50000000 46.4 ns/op BenchmarkMapLast/1-4 100000000 16.1 ns/op BenchmarkMapLast/2-4 100000000 19.0 ns/op BenchmarkMapLast/3-4 100000000 21.1 ns/op BenchmarkMapLast/4-4 50000000 23.2 ns/op BenchmarkMapLast/5-4 50000000 25.3 ns/op BenchmarkMapLast/6-4 50000000 27.4 ns/op BenchmarkMapLast/7-4 50000000 29.6 ns/op BenchmarkMapLast/8-4 30000000 47.4 ns/op BenchmarkMapLast/9-4 30000000 52.1 ns/op BenchmarkMapLast/10-4 30000000 56.8 ns/op BenchmarkMapLast/11-4 30000000 56.9 ns/op BenchmarkMapLast/12-4 30000000 55.6 ns/op BenchmarkMapLast/13-4 20000000 55.1 ns/op BenchmarkMapLast/14-4 20000000 51.9 ns/op BenchmarkMapLast/15-4 30000000 48.4 ns/op BenchmarkMapLast/16-4 30000000 48.4 ns/op BenchmarkMapCycle-4 20000000 80.9 ns/op BenchmarkRepeatedLookupStrMapKey32-4 20000000 76.9 ns/op BenchmarkRepeatedLookupStrMapKey1M-4 5000 241809 ns/op BenchmarkMakeMap/[Byte]Byte-4 5000000 378 ns/op BenchmarkMakeMap/[Int]Int-4 3000000 586 ns/op BenchmarkNewEmptyMap-4 50000000 25.3 ns/op 0 B/op 0 allocs/op BenchmarkNewSmallMap-4 10000000 152 ns/op 0 B/op 0 allocs/op BenchmarkMapIter-4 5000000 323 ns/op BenchmarkMapIterEmpty-4 100000000 22.5 ns/op BenchmarkSameLengthMap-4 100000000 18.3 ns/op BenchmarkBigKeyMap-4 20000000 95.4 ns/op BenchmarkBigValMap-4 20000000 95.5 ns/op BenchmarkSmallKeyMap-4 20000000 66.7 ns/op BenchmarkMapPopulate/1-4 20000000 83.6 ns/op 0 B/op 0 allocs/op BenchmarkMapPopulate/10-4 1000000 1953 ns/op 179 B/op 1 allocs/op BenchmarkMapPopulate/100-4 50000 25432 ns/op 3252 B/op 15 allocs/op BenchmarkMapPopulate/1000-4 5000 279914 ns/op 49383 B/op 19 allocs/op BenchmarkMapPopulate/10000-4 500 2723038 ns/op 412217 B/op 163 allocs/op BenchmarkMapPopulate/100000-4 50 28713410 ns/op 3588881 B/op 3733 allocs/op BenchmarkComplexAlgMap-4 10000000 214 ns/op BenchmarkGoMapClear/Reflexive/1-4 20000000 112 ns/op BenchmarkGoMapClear/Reflexive/10-4 10000000 123 ns/op BenchmarkGoMapClear/Reflexive/100-4 5000000 304 ns/op BenchmarkGoMapClear/Reflexive/1000-4 300000 3735 ns/op BenchmarkGoMapClear/Reflexive/10000-4 50000 34074 ns/op BenchmarkGoMapClear/NonReflexive/1-4 5000000 379 ns/op BenchmarkGoMapClear/NonReflexive/10-4 3000000 480 ns/op BenchmarkGoMapClear/NonReflexive/100-4 1000000 1183 ns/op BenchmarkGoMapClear/NonReflexive/1000-4 100000 13549 ns/op BenchmarkGoMapClear/NonReflexive/10000-4 10000 117289 ns/op BenchmarkMapStringConversion/32/simple-4 30000000 41.9 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/32/struct-4 30000000 41.9 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/32/array-4 30000000 41.8 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/simple-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/struct-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapStringConversion/64/array-4 30000000 46.3 ns/op 0 B/op 0 allocs/op BenchmarkMapPop100-4 50000 36575 ns/op BenchmarkMapPop1000-4 3000 511995 ns/op BenchmarkMapPop10000-4 100 12112237 ns/op BenchmarkMapAssign/Int32/256-4 20000000 66.0 ns/op BenchmarkMapAssign/Int32/65536-4 20000000 90.2 ns/op BenchmarkMapAssign/Int64/256-4 20000000 66.0 ns/op BenchmarkMapAssign/Int64/65536-4 10000000 115 ns/op BenchmarkMapAssign/Str/256-4 20000000 79.9 ns/op BenchmarkMapAssign/Str/65536-4 10000000 186 ns/op BenchmarkMapOperatorAssign/Int32/256-4 20000000 66.2 ns/op BenchmarkMapOperatorAssign/Int32/65536-4 20000000 95.3 ns/op BenchmarkMapOperatorAssign/Int64/256-4 20000000 66.7 ns/op BenchmarkMapOperatorAssign/Int64/65536-4 10000000 138 ns/op BenchmarkMapOperatorAssign/Str/256-4 1000000 5035 ns/op BenchmarkMapOperatorAssign/Str/65536-4 3000000 682 ns/op BenchmarkMapAppendAssign/Int32/256-4 20000000 96.4 ns/op 47 B/op 0 allocs/op BenchmarkMapAppendAssign/Int32/65536-4 5000000 275 ns/op 28 B/op 0 allocs/op BenchmarkMapAppendAssign/Int64/256-4 20000000 95.7 ns/op 47 B/op 0 allocs/op BenchmarkMapAppendAssign/Int64/65536-4 5000000 293 ns/op 28 B/op 0 allocs/op BenchmarkMapAppendAssign/Str/256-4 10000000 318 ns/op 93 B/op 0 allocs/op BenchmarkMapAppendAssign/Str/65536-4 3000000 465 ns/op 48 B/op 0 allocs/op BenchmarkMapDelete/Int32/100-4 20000000 104 ns/op BenchmarkMapDelete/Int32/1000-4 20000000 77.8 ns/op BenchmarkMapDelete/Int32/10000-4 20000000 103 ns/op BenchmarkMapDelete/Int64/100-4 20000000 103 ns/op BenchmarkMapDelete/Int64/1000-4 20000000 80.3 ns/op BenchmarkMapDelete/Int64/10000-4 20000000 104 ns/op BenchmarkMapDelete/Str/100-4 10000000 124 ns/op BenchmarkMapDelete/Str/1000-4 20000000 117 ns/op BenchmarkMapDelete/Str/10000-4 10000000 126 ns/op BenchmarkMemmove/0-4 300000000 5.58 ns/op BenchmarkMemmove/1-4 100000000 13.5 ns/op 74.30 MB/s BenchmarkMemmove/2-4 100000000 13.5 ns/op 148.40 MB/s BenchmarkMemmove/3-4 100000000 13.3 ns/op 225.03 MB/s BenchmarkMemmove/4-4 100000000 13.3 ns/op 299.99 MB/s BenchmarkMemmove/5-4 100000000 13.3 ns/op 374.96 MB/s BenchmarkMemmove/6-4 100000000 13.5 ns/op 444.23 MB/s BenchmarkMemmove/7-4 100000000 13.4 ns/op 522.62 MB/s BenchmarkMemmove/8-4 100000000 13.3 ns/op 600.00 MB/s BenchmarkMemmove/9-4 100000000 13.4 ns/op 673.43 MB/s BenchmarkMemmove/10-4 100000000 13.3 ns/op 750.14 MB/s BenchmarkMemmove/11-4 100000000 13.3 ns/op 824.91 MB/s BenchmarkMemmove/12-4 100000000 13.3 ns/op 899.90 MB/s BenchmarkMemmove/13-4 100000000 13.5 ns/op 962.98 MB/s BenchmarkMemmove/14-4 100000000 13.4 ns/op 1046.19 MB/s BenchmarkMemmove/15-4 100000000 13.3 ns/op 1124.88 MB/s BenchmarkMemmove/16-4 100000000 13.5 ns/op 1188.13 MB/s BenchmarkMemmove/32-4 100000000 13.6 ns/op 2356.67 MB/s BenchmarkMemmove/64-4 100000000 16.3 ns/op 3924.55 MB/s BenchmarkMemmove/128-4 50000000 23.9 ns/op 5354.07 MB/s BenchmarkMemmove/256-4 50000000 35.2 ns/op 7280.74 MB/s BenchmarkMemmove/512-4 20000000 68.1 ns/op 7522.83 MB/s BenchmarkMemmove/1024-4 20000000 113 ns/op 9060.92 MB/s BenchmarkMemmove/2048-4 10000000 203 ns/op 10086.84 MB/s BenchmarkMemmove/4096-4 5000000 383 ns/op 10668.94 MB/s BenchmarkMemmoveUnalignedDst/0-4 100000000 10.7 ns/op BenchmarkMemmoveUnalignedDst/1-4 100000000 15.4 ns/op 64.75 MB/s BenchmarkMemmoveUnalignedDst/2-4 100000000 14.0 ns/op 142.50 MB/s BenchmarkMemmoveUnalignedDst/3-4 100000000 14.0 ns/op 213.78 MB/s BenchmarkMemmoveUnalignedDst/4-4 100000000 14.5 ns/op 275.50 MB/s BenchmarkMemmoveUnalignedDst/5-4 100000000 14.9 ns/op 335.56 MB/s BenchmarkMemmoveUnalignedDst/6-4 100000000 14.7 ns/op 407.71 MB/s BenchmarkMemmoveUnalignedDst/7-4 100000000 14.9 ns/op 468.79 MB/s BenchmarkMemmoveUnalignedDst/8-4 100000000 14.5 ns/op 550.56 MB/s BenchmarkMemmoveUnalignedDst/9-4 100000000 14.7 ns/op 611.60 MB/s BenchmarkMemmoveUnalignedDst/10-4 100000000 15.0 ns/op 668.48 MB/s BenchmarkMemmoveUnalignedDst/11-4 100000000 14.8 ns/op 744.55 MB/s BenchmarkMemmoveUnalignedDst/12-4 100000000 15.1 ns/op 792.42 MB/s BenchmarkMemmoveUnalignedDst/13-4 100000000 15.0 ns/op 866.28 MB/s BenchmarkMemmoveUnalignedDst/14-4 100000000 14.9 ns/op 942.03 MB/s BenchmarkMemmoveUnalignedDst/15-4 100000000 15.0 ns/op 1000.58 MB/s BenchmarkMemmoveUnalignedDst/16-4 100000000 14.5 ns/op 1103.84 MB/s BenchmarkMemmoveUnalignedDst/32-4 100000000 16.7 ns/op 1921.87 MB/s BenchmarkMemmoveUnalignedDst/64-4 50000000 32.7 ns/op 1954.46 MB/s BenchmarkMemmoveUnalignedDst/128-4 50000000 28.1 ns/op 4560.37 MB/s BenchmarkMemmoveUnalignedDst/256-4 30000000 47.7 ns/op 5364.41 MB/s BenchmarkMemmoveUnalignedDst/512-4 20000000 84.9 ns/op 6029.49 MB/s BenchmarkMemmoveUnalignedDst/1024-4 10000000 156 ns/op 6552.17 MB/s BenchmarkMemmoveUnalignedDst/2048-4 5000000 290 ns/op 7059.63 MB/s BenchmarkMemmoveUnalignedDst/4096-4 3000000 561 ns/op 7296.37 MB/s BenchmarkMemmoveUnalignedSrc/0-4 100000000 10.5 ns/op BenchmarkMemmoveUnalignedSrc/1-4 100000000 15.6 ns/op 64.12 MB/s BenchmarkMemmoveUnalignedSrc/2-4 100000000 14.0 ns/op 142.49 MB/s BenchmarkMemmoveUnalignedSrc/3-4 100000000 14.2 ns/op 211.08 MB/s BenchmarkMemmoveUnalignedSrc/4-4 100000000 13.9 ns/op 287.49 MB/s BenchmarkMemmoveUnalignedSrc/5-4 100000000 13.6 ns/op 367.36 MB/s BenchmarkMemmoveUnalignedSrc/6-4 100000000 13.9 ns/op 432.38 MB/s BenchmarkMemmoveUnalignedSrc/7-4 100000000 13.6 ns/op 514.32 MB/s BenchmarkMemmoveUnalignedSrc/8-4 100000000 13.8 ns/op 579.18 MB/s BenchmarkMemmoveUnalignedSrc/9-4 100000000 14.0 ns/op 643.05 MB/s BenchmarkMemmoveUnalignedSrc/10-4 100000000 14.0 ns/op 715.96 MB/s BenchmarkMemmoveUnalignedSrc/11-4 100000000 13.8 ns/op 795.76 MB/s BenchmarkMemmoveUnalignedSrc/12-4 100000000 14.0 ns/op 855.35 MB/s BenchmarkMemmoveUnalignedSrc/13-4 100000000 14.0 ns/op 930.87 MB/s BenchmarkMemmoveUnalignedSrc/14-4 100000000 14.0 ns/op 998.89 MB/s BenchmarkMemmoveUnalignedSrc/15-4 100000000 14.0 ns/op 1072.50 MB/s BenchmarkMemmoveUnalignedSrc/16-4 100000000 14.0 ns/op 1141.96 MB/s BenchmarkMemmoveUnalignedSrc/32-4 100000000 15.4 ns/op 2072.73 MB/s BenchmarkMemmoveUnalignedSrc/64-4 100000000 18.5 ns/op 3450.95 MB/s BenchmarkMemmoveUnalignedSrc/128-4 50000000 25.6 ns/op 4996.57 MB/s BenchmarkMemmoveUnalignedSrc/256-4 50000000 37.9 ns/op 6754.79 MB/s BenchmarkMemmoveUnalignedSrc/512-4 20000000 74.0 ns/op 6919.73 MB/s BenchmarkMemmoveUnalignedSrc/1024-4 20000000 119 ns/op 8554.12 MB/s BenchmarkMemmoveUnalignedSrc/2048-4 10000000 206 ns/op 9940.15 MB/s BenchmarkMemmoveUnalignedSrc/4096-4 5000000 385 ns/op 10629.02 MB/s BenchmarkMemclr/5-4 100000000 14.7 ns/op 339.27 MB/s BenchmarkMemclr/16-4 100000000 14.9 ns/op 1075.74 MB/s BenchmarkMemclr/64-4 100000000 20.0 ns/op 3192.24 MB/s BenchmarkMemclr/256-4 50000000 34.7 ns/op 7373.17 MB/s BenchmarkMemclr/4096-4 5000000 288 ns/op 14199.71 MB/s BenchmarkMemclr/65536-4 200000 5920 ns/op 11069.74 MB/s BenchmarkMemclr/1M-4 10000 119686 ns/op 8761.04 MB/s BenchmarkMemclr/4M-4 3000 492651 ns/op 8513.73 MB/s BenchmarkMemclr/8M-4 2000 978378 ns/op 8573.99 MB/s BenchmarkMemclr/16M-4 1000 1960626 ns/op 8557.07 MB/s BenchmarkMemclr/64M-4 200 7860433 ns/op 8537.55 MB/s BenchmarkGoMemclr/5-4 200000000 8.66 ns/op 577.65 MB/s BenchmarkGoMemclr/16-4 200000000 7.03 ns/op 2277.18 MB/s BenchmarkGoMemclr/64-4 100000000 13.3 ns/op 4810.16 MB/s BenchmarkGoMemclr/256-4 50000000 31.5 ns/op 8122.27 MB/s BenchmarkClearFat8-4 2000000000 1.40 ns/op BenchmarkClearFat12-4 2000000000 1.40 ns/op BenchmarkClearFat16-4 2000000000 1.40 ns/op BenchmarkClearFat24-4 2000000000 1.40 ns/op BenchmarkClearFat32-4 2000000000 1.42 ns/op BenchmarkClearFat40-4 2000000000 1.40 ns/op BenchmarkClearFat48-4 2000000000 1.40 ns/op BenchmarkClearFat56-4 2000000000 1.40 ns/op BenchmarkClearFat64-4 2000000000 1.40 ns/op BenchmarkClearFat128-4 2000000000 1.40 ns/op BenchmarkClearFat256-4 2000000000 1.40 ns/op BenchmarkClearFat512-4 2000000000 1.40 ns/op BenchmarkClearFat1024-4 2000000000 1.42 ns/op BenchmarkCopyFat8-4 2000000000 1.40 ns/op BenchmarkCopyFat12-4 2000000000 1.40 ns/op BenchmarkCopyFat16-4 2000000000 1.40 ns/op BenchmarkCopyFat24-4 2000000000 1.40 ns/op BenchmarkCopyFat32-4 2000000000 1.40 ns/op BenchmarkCopyFat64-4 2000000000 1.40 ns/op BenchmarkCopyFat128-4 2000000000 1.42 ns/op BenchmarkCopyFat256-4 2000000000 1.41 ns/op BenchmarkCopyFat512-4 2000000000 1.40 ns/op BenchmarkCopyFat520-4 2000000000 1.40 ns/op BenchmarkCopyFat1024-4 2000000000 1.40 ns/op BenchmarkIssue18740-4 100000 14531 ns/op BenchmarkFinalizer-4 500 2526732 ns/op BenchmarkFinalizerRun-4 1000000 2604 ns/op BenchmarkSyscall-4 20000000 63.4 ns/op BenchmarkSyscallWork-4 20000000 96.9 ns/op BenchmarkSyscallExcess-4 20000000 63.4 ns/op BenchmarkSyscallExcessWork-4 20000000 96.8 ns/op BenchmarkPingPongHog-4 500000 2889 ns/op BenchmarkStackGrowth-4 100000000 21.2 ns/op BenchmarkStackGrowthDeep-4 500000 2548 ns/op BenchmarkCreateGoroutines-4 1000000 1046 ns/op BenchmarkCreateGoroutinesParallel-4 10000000 198 ns/op BenchmarkCreateGoroutinesCapture-4 200000 8941 ns/op 16 B/op 1 allocs/op BenchmarkClosureCall-4 300000000 5.80 ns/op BenchmarkWakeupParallelSpinning/0s-4 100000 20843 ns/op BenchmarkWakeupParallelSpinning/1\u00b5s-4 50000 23993 ns/op BenchmarkWakeupParallelSpinning/2\u00b5s-4 50000 27880 ns/op BenchmarkWakeupParallelSpinning/5\u00b5s-4 50000 37540 ns/op BenchmarkWakeupParallelSpinning/10\u00b5s-4 30000 56729 ns/op BenchmarkWakeupParallelSpinning/20\u00b5s-4 20000 96465 ns/op BenchmarkWakeupParallelSpinning/50\u00b5s-4 10000 221160 ns/op BenchmarkWakeupParallelSpinning/100\u00b5s-4 5000 359871 ns/op BenchmarkWakeupParallelSyscall/0s-4 10000 321507 ns/op BenchmarkWakeupParallelSyscall/1\u00b5s-4 5000 335555 ns/op BenchmarkWakeupParallelSyscall/2\u00b5s-4 5000 346055 ns/op BenchmarkWakeupParallelSyscall/5\u00b5s-4 5000 343007 ns/op BenchmarkWakeupParallelSyscall/10\u00b5s-4 5000 386787 ns/op BenchmarkWakeupParallelSyscall/20\u00b5s-4 5000 387292 ns/op BenchmarkWakeupParallelSyscall/50\u00b5s-4 5000 556090 ns/op BenchmarkWakeupParallelSyscall/100\u00b5s-4 3000 626904 ns/op BenchmarkMatmult-4 200000000 9.45 ns/op BenchmarkFastrand-4 2000000000 1.65 ns/op BenchmarkFastrandHashiter-4 50000000 32.3 ns/op BenchmarkFastrandn/2-4 200000000 8.42 ns/op BenchmarkFastrandn/3-4 200000000 8.43 ns/op BenchmarkFastrandn/4-4 200000000 8.50 ns/op BenchmarkFastrandn/5-4 200000000 8.42 ns/op BenchmarkIfaceCmp100-4 5000000 370 ns/op BenchmarkIfaceCmpNil100-4 10000000 203 ns/op BenchmarkEfaceCmpDiff-4 1000000 2052 ns/op BenchmarkDefer-4 5000000 256 ns/op BenchmarkDefer10-4 10000000 230 ns/op BenchmarkDeferMany-4 3000000 489 ns/op BenchmarkRWMutexUncontended-4 20000000 112 ns/op BenchmarkRWMutexWrite100-4 10000000 197 ns/op BenchmarkRWMutexWrite10-4 1000000 1629 ns/op BenchmarkRWMutexWorkWrite100-4 10000000 221 ns/op BenchmarkRWMutexWorkWrite10-4 1000000 1314 ns/op BenchmarkMakeSlice/Byte-4 20000000 60.2 ns/op BenchmarkMakeSlice/Int16-4 20000000 73.2 ns/op BenchmarkMakeSlice/Int-4 10000000 133 ns/op BenchmarkMakeSlice/Ptr-4 10000000 188 ns/op BenchmarkMakeSlice/Struct/24-4 10000000 200 ns/op BenchmarkMakeSlice/Struct/32-4 10000000 230 ns/op BenchmarkMakeSlice/Struct/40-4 5000000 262 ns/op BenchmarkGrowSlice/Byte-4 10000000 144 ns/op BenchmarkGrowSlice/Int16-4 10000000 204 ns/op BenchmarkGrowSlice/Int-4 5000000 245 ns/op BenchmarkGrowSlice/Ptr-4 5000000 365 ns/op BenchmarkGrowSlice/Struct/24-4 3000000 428 ns/op BenchmarkGrowSlice/Struct/32-4 3000000 486 ns/op BenchmarkGrowSlice/Struct/40-4 2000000 607 ns/op BenchmarkExtendSlice/IntSlice-4 10000000 165 ns/op BenchmarkExtendSlice/PointerSlice-4 10000000 213 ns/op BenchmarkExtendSlice/NoGrow-4 100000000 15.4 ns/op BenchmarkAppend-4 30000000 56.2 ns/op BenchmarkAppendGrowByte-4 300 5560036 ns/op BenchmarkAppendGrowString-4 5 226765389 ns/op BenchmarkAppendSlice/1Bytes-4 100000000 12.6 ns/op BenchmarkAppendSlice/4Bytes-4 100000000 12.0 ns/op BenchmarkAppendSlice/7Bytes-4 100000000 11.9 ns/op BenchmarkAppendSlice/8Bytes-4 100000000 12.0 ns/op BenchmarkAppendSlice/15Bytes-4 100000000 11.9 ns/op BenchmarkAppendSlice/16Bytes-4 100000000 12.3 ns/op BenchmarkAppendSlice/32Bytes-4 100000000 12.6 ns/op BenchmarkAppendSliceLarge/1024Bytes-4 1000000 1420 ns/op BenchmarkAppendSliceLarge/4096Bytes-4 300000 4643 ns/op BenchmarkAppendSliceLarge/16384Bytes-4 100000 13584 ns/op BenchmarkAppendSliceLarge/65536Bytes-4 50000 32999 ns/op BenchmarkAppendSliceLarge/262144Bytes-4 10000 120741 ns/op BenchmarkAppendSliceLarge/1048576Bytes-4 2000 679068 ns/op BenchmarkAppendStr/1Bytes-4 100000000 13.5 ns/op BenchmarkAppendStr/4Bytes-4 100000000 11.9 ns/op BenchmarkAppendStr/8Bytes-4 100000000 11.9 ns/op BenchmarkAppendStr/16Bytes-4 100000000 12.6 ns/op BenchmarkAppendStr/32Bytes-4 100000000 14.4 ns/op BenchmarkAppendSpecialCase-4 20000000 85.0 ns/op BenchmarkCopy/1Byte-4 100000000 14.0 ns/op 71.25 MB/s BenchmarkCopy/1String-4 100000000 13.8 ns/op 72.29 MB/s BenchmarkCopy/2Byte-4 100000000 21.4 ns/op 93.67 MB/s BenchmarkCopy/2String-4 100000000 17.1 ns/op 117.24 MB/s BenchmarkCopy/4Byte-4 100000000 16.9 ns/op 237.34 MB/s BenchmarkCopy/4String-4 100000000 16.8 ns/op 237.50 MB/s BenchmarkCopy/8Byte-4 100000000 22.9 ns/op 348.61 MB/s BenchmarkCopy/8String-4 100000000 16.8 ns/op 475.00 MB/s BenchmarkCopy/12Byte-4 100000000 16.8 ns/op 712.43 MB/s BenchmarkCopy/12String-4 100000000 16.9 ns/op 712.04 MB/s BenchmarkCopy/16Byte-4 50000000 24.8 ns/op 646.37 MB/s BenchmarkCopy/16String-4 100000000 16.8 ns/op 949.90 MB/s BenchmarkCopy/32Byte-4 100000000 16.3 ns/op 1964.35 MB/s BenchmarkCopy/32String-4 100000000 16.4 ns/op 1956.17 MB/s BenchmarkCopy/128Byte-4 50000000 27.4 ns/op 4676.48 MB/s BenchmarkCopy/128String-4 50000000 27.4 ns/op 4676.64 MB/s BenchmarkCopy/1024Byte-4 20000000 113 ns/op 9005.87 MB/s BenchmarkCopy/1024String-4 20000000 113 ns/op 9004.83 MB/s BenchmarkAppendInPlace/NoGrow/Byte-4 1000000 1352 ns/op BenchmarkAppendInPlace/NoGrow/1Ptr-4 300000 4058 ns/op BenchmarkAppendInPlace/NoGrow/2Ptr-4 200000 7520 ns/op BenchmarkAppendInPlace/NoGrow/3Ptr-4 200000 8608 ns/op BenchmarkAppendInPlace/NoGrow/4Ptr-4 100000 14133 ns/op BenchmarkAppendInPlace/Grow/Byte-4 1000000 1076 ns/op BenchmarkAppendInPlace/Grow/1Ptr-4 1000000 1074 ns/op BenchmarkAppendInPlace/Grow/2Ptr-4 1000000 1449 ns/op BenchmarkAppendInPlace/Grow/3Ptr-4 1000000 1841 ns/op BenchmarkAppendInPlace/Grow/4Ptr-4 1000000 1983 ns/op BenchmarkStackCopyPtr-4 5 309390029 ns/op BenchmarkStackCopy-4 5 297313618 ns/op BenchmarkStackCopyNoCache-4 2 518883532 ns/op BenchmarkCompareStringEqual-4 100000000 12.8 ns/op BenchmarkCompareStringIdentical-4 100000000 11.9 ns/op BenchmarkCompareStringSameLength-4 100000000 10.5 ns/op BenchmarkCompareStringDifferentLength-4 2000000000 1.40 ns/op BenchmarkCompareStringBigUnaligned-4 3000 430422 ns/op 2436.18 MB/s BenchmarkCompareStringBig-4 3000 428766 ns/op 2445.59 MB/s BenchmarkConcatStringAndBytes-4 20000000 78.6 ns/op BenchmarkSliceByteToString/1-4 100000000 16.9 ns/op BenchmarkSliceByteToString/2-4 20000000 65.6 ns/op BenchmarkSliceByteToString/4-4 20000000 73.4 ns/op BenchmarkSliceByteToString/8-4 20000000 88.1 ns/op BenchmarkSliceByteToString/16-4 10000000 122 ns/op BenchmarkSliceByteToString/32-4 10000000 139 ns/op BenchmarkSliceByteToString/64-4 10000000 186 ns/op BenchmarkSliceByteToString/128-4 5000000 281 ns/op BenchmarkRuneCount/lenruneslice/ASCII-4 50000000 37.9 ns/op BenchmarkRuneCount/lenruneslice/Japanese-4 5000000 263 ns/op BenchmarkRuneCount/lenruneslice/MixedLength-4 10000000 232 ns/op BenchmarkRuneCount/rangeloop/ASCII-4 50000000 33.0 ns/op BenchmarkRuneCount/rangeloop/Japanese-4 5000000 260 ns/op BenchmarkRuneCount/rangeloop/MixedLength-4 10000000 208 ns/op BenchmarkRuneCount/utf8.RuneCountInString/ASCII-4 30000000 41.4 ns/op BenchmarkRuneCount/utf8.RuneCountInString/Japanese-4 10000000 184 ns/op BenchmarkRuneCount/utf8.RuneCountInString/MixedLength-4 10000000 218 ns/op BenchmarkRuneIterate/range/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range/MixedLength-4 10000000 206 ns/op BenchmarkRuneIterate/range1/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range1/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range1/MixedLength-4 10000000 221 ns/op BenchmarkRuneIterate/range2/ASCII-4 50000000 29.5 ns/op BenchmarkRuneIterate/range2/Japanese-4 5000000 246 ns/op BenchmarkRuneIterate/range2/MixedLength-4 10000000 204 ns/op BenchmarkArrayEqual-4 200000000 6.33 ns/op BenchmarkClockVDSOAndFallbackPaths/vDSO-4 10000000 195 ns/op BenchmarkClockVDSOAndFallbackPaths/Fallback-4 1000000 1936 ns/op BenchmarkTimeNow-4 10000000 197 ns/op PASS ok runtime 1331.420s \u2013Abishek Muthian ( @heavyinfo )","title":"Jetson Nano"},{"location":"GoArm/#apple-silicon","text":"Cross-compiling Go applications Host/Build: macOS/x86_64 Target: macOS/arm64 On host machine: Xcode: Install latest Xcode which supports Apple silicon Go: Install go*.darwin-amd64.pkg (or build go from source) on macOS/x86_64 Set go executable in PATH Export the following environment variables before cross compiling go apps for macOS/arm64 export SDK_NAME = macosx export SDK_PATH =$ ( xcrun -- show - sdk - path -- sdk $ SDK_NAME ) export CGO_ENABLED = 1 export GOOS = darwin export GOARCH = arm64 export CC = \"$(xcrun -sdk $SDK_PATH --find clang) -arch $GOARCH -isysroot $SDK_PATH\" export CFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH -I$SDK_PATH/usr/include\" export LD_LIBRARY_PATH = \"$SDK_PATH/usr/lib\" export CGO_CFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH\" export CGO_LDFLAGS = \"-isysroot $SDK_PATH -arch $GOARCH\" Compile the app as below : $ GOOS = darwin GOARCH = arm64 go build < app > Copy the generated arm64 executable to target machine (macOS/arm64) and run","title":"Apple silicon"},{"location":"GoForCPPProgrammers/","text":"Go is a systems programming language intended to be a general-purpose systems language, like C++. These are some notes on Go for experienced C++ programmers. This document discusses the differences between Go and C++, and says little to nothing about the similarities. An important point to keep in mind is that there are some fundamental differences in the thought processes required to be proficient in the two respective languages. Most formidably, C++'s object model is based on classes and class hierarchies while Go's object model is based on interfaces (and is essentially flat). Consequently, C++ design patterns rarely translate verbatim to Go. To program effectively in Go, one has to consider the problem being solved, not the mechanisms one might use in C++ to solve the problem. For a more general introduction to Go, see the Go Tour , How to Write Go Code and Effective Go . For a detailed description of the Go language, see the Go spec . Conceptual Differences Go does not have classes with constructors or destructors. Instead of class methods, a class inheritance hierarchy, and virtual functions, Go provides interfaces , which are discussed in more detail below. Interfaces are also used where C++ uses templates. Go provides automatic garbage collection of allocated memory. It is not necessary (or possible) to release memory explicitly. There is no need to worry about heap-allocated vs. stack-allocated storage, new vs. malloc , or delete vs. delete[] vs. free . There is no need to separately manage std::unique_ptr , std::shared_ptr , std::weak_ptr , std::auto_ptr , and ordinary, non-smart \"raw\" pointers. Go's run-time system handles all of that error-prone code on the programmer's behalf. Go has pointers but not pointer arithmetic. Go pointers therefore more closely resemble C++ references. One cannot use a Go pointer variable to walk through the bytes of a string. Slices, discussed further below, satisfy most of the need for pointer arithmetic. Go is \"safe\" by default. Pointers cannot point to arbitrary memory, and buffer overruns result in crashes, not security exploits. The unsafe package lets programmers bypass some of Go's protection mechanisms where explicitly requested. Arrays in Go are first class values. When an array is used as a function parameter, the function receives a copy of the array, not a pointer to it. However, in practice functions often use slices for parameters; slices hold pointers to underlying arrays. Slices are discussed further below. Strings are provided by the language. They may not be changed once they have been created. Hash tables are provided by the language. They are called maps. Separate threads of execution, and communication channels between them, are provided by the language. This is discussed further below. Certain types (maps and channels, described further below) are passed by reference, not by value. That is, passing a map to a function does not copy the map, and if the function changes the map the change will be seen by the caller. In C++ terms, one can think of these as being reference types. Go does not use header files. Instead, each source file is part of a defined package . When a package defines an object (type, constant, variable, function) with a name starting with an upper case letter, that object is visible to any other file which imports that package. Go does not support implicit type conversion. Operations that mix different types require casts (called conversions in Go). This is true even of different user-defined aliases of the same underlying type. Go does not support function overloading and does not support user defined operators. Go does not support const or volatile qualifiers. Go uses nil for invalid pointers, where C++ uses NULL or simply 0 (or in C++11, nullptr ). Idiomatic Go uses multiple return values to convey errors\u2014one or more data results plus an error code\u2014instead of sentinel values (e.g., -1 ) or structured exception handling (C++'s try \u2026 catch and throw or Go's panic \u2026 recover ). Syntax The declaration syntax is reversed compared to C++. You write the name followed by the type. Unlike in C++, the syntax for a type does not match the way in which the variable is used. Type declarations may be read easily from left to right. ( var v1 int \u2192 \"Variable v1 is an int .\") //Go C++ var v1 int // int v1; var v2 string // const std::string v2; (approximately) var v3 [ 10 ] int // int v3[10]; var v4 [] int // int* v4; (approximately) var v5 struct { f int } // struct { int f; } v5; var v6 * int // int* v6; (but no pointer arithmetic) var v7 map [ string ] int // unordered_map<string, int>* v7; (approximately) var v8 func ( a int ) int // int (*v8)(int a); Declarations generally take the form of a keyword followed by the name of the object being declared. The keyword is one of var , func , const , or type . Method declarations are a minor exception in that the receiver appears before the name of the object being declared; see the discussion of interfaces . You can also use a keyword followed by a series of declarations in parentheses. var ( i int m float64 ) When declaring a function, you must either provide a name for each parameter or not provide a name for any parameter. (That is, C++ permits void f(int i, int); , but Go does not permit the analogous func f(i int, int) .) However, for convenience, in Go you may group several names with the same type: func f ( i , j , k int , s , t string ) A variable may be initialized when it is declared. When this is done, specifying the type is permitted but not required. When the type is not specified, the type of the variable is the type of the initialization expression. var v = * p See also the discussion of constants, below . If a variable is not initialized explicitly, the type must be specified. In that case it will be implicitly initialized to the type's zero value ( 0 , nil , etc.). There are no uninitialized variables in Go. Within a function, a short declaration syntax is available with := . v1 := v2 // C++11: auto v1 = v2; This is equivalent to var v1 = v2 // C++11: auto v1 = v2; Go permits multiple assignments, which are done in parallel. That is, first all of the values on the right-hand side are computed, and then these values are assigned to the variables on the left-hand side. i , j = j , i // Swap i and j. Functions may have multiple return values, indicated by a list in parentheses. The returned values can be stored by assignment to a list of variables. func f () ( i int , j int ) { ... } v1 , v2 = f () Multiple return values are Go's primary mechanism for error handling: result , ok := g () if ! ok { // Something bad happened. return nil } // Continue as normal. \u2026 or, more tersely, if result , ok := g (); ! ok { // Something bad happened. return nil } // Continue as normal. \u2026 Go code uses very few semicolons in practice. Technically, all Go statements are terminated by a semicolon. However, Go treats the end of a non-blank line as a semicolon unless the line is clearly incomplete (the exact rules are in the language specification ). A consequence of this is that in some cases Go does not permit you to use a line break. For example, you may not write func g () { // INVALID } A semicolon will be inserted after g() , causing it to be a function declaration rather than a function definition. Similarly, you may not write if x { } else { // INVALID } A semicolon will be inserted after the } preceding the else , causing a syntax error. Since semicolons do end statements, you may continue using them as in C++. However, that is not the recommended style. Idiomatic Go code omits unnecessary semicolons, which in practice is all of them other than the initial for loop clause and cases where you want several short statements on a single line. While we're on the topic, we recommend that rather than worry about semicolons and brace placement, you format your code with the gofmt program. That will produce a single standard Go style, and let you worry about your code rather than your formatting. While the style may initially seem odd, it is as good as any other style, and familiarity will lead to comfort. When using a pointer to a struct, you use . instead of -> . Thus, syntactically speaking, a structure and a pointer to a structure are used in the same way. type myStruct struct { i int } var v9 myStruct // v9 has structure type var p9 * myStruct // p9 is a pointer to a structure f ( v9 . i , p9 . i ) Go does not require parentheses around the condition of an if statement, or the expressions of a for statement, or the value of a switch statement. On the other hand, it does require curly braces around the body of an if or for statement. if a < b { f () } // Valid if ( a < b ) { f () } // Valid (condition is a parenthesized expression) if ( a < b ) f () // INVALID for i = 0 ; i < 10 ; i ++ {} // Valid for ( i = 0 ; i < 10 ; i ++ ) {} // INVALID Go does not have a while statement nor does it have a do/while statement. The for statement may be used with a single condition, which makes it equivalent to a while statement. Omitting the condition entirely is an endless loop. Go permits break and continue to specify a label. The label must refer to a for , switch , or select statement. In a switch statement, case labels do not fall through. You can make them fall through using the fallthrough keyword. This applies even to adjacent cases. switch i { case 0 : // empty case body case 1 : f () // f is not called when i == 0! } But a case can have multiple values. switch i { case 0 , 1 : f () // f is called if i == 0 || i == 1. } The values in a case need not be constants\u2013or even integers; any type that supports the equality comparison operator, such as strings or pointers, can be used\u2013and if the switch value is omitted it defaults to true . switch { case i < 0 : f1 () case i == 0 : f2 () case i > 0 : f3 () } The defer statement may be used to call a function after the function containing the defer statement returns. defer often takes the place of a destructor in C++ but is associated with the calling code, not any particular class or object. fd := open ( \"filename\" ) defer close ( fd ) // fd will be closed when this function returns. Operators The ++ and -- operators may only be used in statements, not in expressions. You cannot write c = *p++ . *p++ is parsed as (*p)++ . The operator precedence is different. As an example 4 & 3 << 1 evaluates to 0 in Go and 4 in C++. Go operator precedence: 1. * / % << >> & &^ 2. + - | ^ 3. == != < <= > >= 4. && 5. || C++ operator precedence (only relevant operators): 1. * / % 2. + - 3. << >> 4. < <= > >= 5. == != 6. & 7. ^ 8. | 9. && 10. || Constants In Go constants may be untyped . This applies even to constants named with a const declaration, if no type is given in the declaration and the initializer expression uses only untyped constants. A value derived from an untyped constant becomes typed when it is used within a context that requires a typed value. This permits constants to be used relatively freely without requiring general implicit type conversion. var a uint f ( a + 1 ) // untyped numeric constant \"1\" becomes typed as uint The language does not impose any limits on the size of an untyped numeric constant or constant expression. A limit is only applied when a constant is used where a type is required. const huge = 1 << 100 f ( huge >> 98 ) Go does not support enums. Instead, you can use the special name iota in a single const declaration to get a series of increasing value. When an initialization expression is omitted for a const , it reuses the preceding expression. const ( red = iota // red == 0 blue // blue == 1 green // green == 2 ) Types C++ and Go provide similar, but not identical, built-in types: signed and unsigned integers of various widths, 32-bit and 64-bit floating-point numbers (real and complex), struct s, pointers, etc. In Go, uint8 , int64 , and like-named integer types are part of the language, not built on top of integers whose sizes are implementation-dependent (e.g., long long ). Go additionally provides native string , map , and chan (channel) types as well as first-class arrays and slices (described below). Strings are encoded with Unicode, not ASCII. Go is far more strongly typed than C++. In particular, there is no implicit type coercion in Go, only explicit type conversion. This provides additional safety and freedom from a class of bugs but at the cost of some additional typing. There is also no union type in Go, as this would enable subversion of the type system. However, a Go interface{} (see below) provides a type-safe alternative. Both C++ and Go support type aliases ( typedef in C++, type in Go). However, unlike C++, Go treats these as different types. Hence, the following is valid in C++: // C++ typedef double position ; typedef double velocity ; position pos = 218.0 ; velocity vel = -9.8 ; pos += vel ; but the equivalent is invalid in Go without an explicit type conversion: type position float64 type velocity float64 var pos position = 218.0 var vel velocity = - 9.8 pos += vel // INVALID: mismatched types position and velocity // pos += position(vel) // Valid The same is true even for unaliased types: an int and a uint cannot be combined in an expression without explicitly converting one to the other. Go does not allow pointers to be cast to and from integers, unlike in C++. However, Go's unsafe package enables one to explicitly bypass this safety mechanism if necessary (e.g., for use in low-level systems code). Slices A slice is conceptually a struct with three fields: a pointer to an array, a length, and a capacity. Slices support the [] operator to access elements of the underlying array. The builtin len function returns the length of the slice. The builtin cap function returns the capacity. Given an array, or another slice, a new slice is created via a[i:j] . This creates a new slice that refers to a , starts at index i , and ends before index j . It has length j-i . If i is omitted, the slice starts at 0 . If j is omitted, the slice ends at len(a) . The new slice refers to the same array to which a refers. Two implications of this statement are that \u2460 changes made using the new slice may be seen using a , and \u2461 slice creation is (intended to be) cheap; no copy needs to be made of the underlying array. The capacity of the new slice is simply the capacity of a minus i . The capacity of an array is the length of the array. What this means is that Go uses slices for some cases where C++ uses pointers. If you create a value of type [100]byte (an array of 100 bytes, perhaps a buffer) and you want to pass it to a function without copying it, you should declare the function parameter to have type []byte , and pass a slice of the array ( a[:] will pass the entire array). Unlike in C++, it is not necessary to pass the length of the buffer; it is efficiently accessible via len . The slice syntax may also be used with a string. It returns a new string, whose value is a substring of the original string. Because strings are immutable, string slices can be implemented without allocating new storage for the slices's contents. Making values Go has a builtin function new which takes a type and allocates space on the heap. The allocated space will be zero-initialized for the type. For example, new(int) allocates a new int on the heap, initializes it with the value 0 , and returns its address, which has type *int . Unlike in C++, new is a function, not an operator; new int is a syntax error. Perhaps surprisingly, new is not commonly used in Go programs. In Go taking the address of a variable is always safe and never yields a dangling pointer. If the program takes the address of a variable, it will be allocated on the heap if necessary. So these functions are equivalent: type S struct { I int } func f1 () * S { return new ( S ) } func f2 () * S { var s S return & s } func f3 () * S { // More idiomatic: use composite literal syntax. return & S {} } In contrast, it is not safe in C++ to return a pointer to a local variable: // C++ S * f2 () { S s ; return & s ; // INVALID -- contents can be overwritten at any time } Map and channel values must be allocated using the builtin function make . A variable declared with map or channel type without an initializer will be automatically initialized to nil . Calling make(map[int]int) returns a newly allocated value of type map[int]int . Note that make returns a value, not a pointer. This is consistent with the fact that map and channel values are passed by reference. Calling make with a map type takes an optional argument which is the expected capacity of the map. Calling make with a channel type takes an optional argument which sets the buffering capacity of the channel; the default is 0 (unbuffered). The make function may also be used to allocate a slice. In this case it allocates memory for the underlying array and returns a slice referring to it. There is one required argument, which is the number of elements in the slice. A second, optional, argument is the capacity of the slice. For example, make([]int, 10, 20) . This is identical to new([20]int)[0:10] . Since Go uses garbage collection, the newly allocated array will be discarded sometime after there are no references to the returned slice. Interfaces Where C++ provides classes, subclasses and templates, Go provides interfaces. A Go interface is similar to a C++ pure abstract class: a class with no data members, with methods which are all pure virtual. However, in Go, any type which provides the methods named in the interface may be treated as an implementation of the interface. No explicitly declared inheritance is required. The implementation of the interface is entirely separate from the interface itself. A method looks like an ordinary function definition, except that it has a receiver . The receiver is similar to the this pointer in a C++ class method. type myType struct { i int } func ( p * myType ) Get () int { return p . i } This declares a method Get associated with myType . The receiver is named p in the body of the function. Methods are defined on named types. If you convert the value to a different type, the new value will have the methods of the new type, not the old type. You may define methods on a builtin type by declaring a new named type derived from it. The new type is distinct from the builtin type. type myInteger int func ( p myInteger ) Get () int { return int ( p ) } // Conversion required. func f ( i int ) {} var v myInteger // f(v) is invalid. // f(int(v)) is valid; int(v) has no defined methods. Given this interface: type myInterface interface { Get () int Set ( i int ) } we can make myType satisfy the interface by adding func ( p * myType ) Set ( i int ) { p . i = i } Now any function which takes myInterface as a parameter will accept a variable of type *myType . func GetAndSet ( x myInterface ) {} func f1 () { var p myType GetAndSet ( & p ) } In other words, if we view myInterface as a C++ pure abstract base class, defining Set and Get for *myType made *myType automatically inherit from myInterface . A type may satisfy multiple interfaces. An anonymous field may be used to implement something much like a C++ child class. type myChildType struct { myType j int } func ( p * myChildType ) Get () int { p . j ++ ; return p . myType . Get () } This effectively implements myChildType as a child of myType . func f2 () { var p myChildType GetAndSet ( & p ) } The Set method is effectively inherited from myType , because methods associated with the anonymous field are promoted to become methods of the enclosing type. In this case, because myChildType has an anonymous field of type myType , the methods of myType also become methods of myChildType . In this example, the Get method was overridden, and the Set method was inherited. This is not precisely the same as a child class in C++. When a method of an anonymous field is called, its receiver is the field, not the surrounding struct. In other words, methods on anonymous fields are not virtual functions. When you want the equivalent of a virtual function, use an interface. A variable that has an interface type may be converted to have a different interface type using a special construct called a type assertion. This is implemented dynamically at run time, like C++ dynamic_cast . Unlike dynamic_cast , there does not need to be any declared relationship between the two interfaces. type myPrintInterface interface { Print () } func f3 ( x myInterface ) { x .( myPrintInterface ). Print () // type assertion to myPrintInterface } The conversion to myPrintInterface is entirely dynamic. It will work as long as the dynamic type of x defines a print method. Because the conversion is dynamic, it may be used to implement generic programming similar to templates in C++. This is done by manipulating values of the minimal interface. type Any interface {} Containers may be written in terms of Any , but the caller must unbox using a type assertion to recover values of the contained type. As the typing is dynamic rather than static, there is no equivalent of the way that a C++ template may inline the relevant operations. The operations are fully type-checked at run time, but all operations will involve a function call. type Iterator interface { Get () Any Set ( v Any ) Increment () Equal ( arg Iterator ) bool } Note that Equal has an argument of type Iterator . This does not behave like a C++ template. See the FAQ . Function closures In C++ versions prior to C++11, the most common way to create a function with hidden state is to use a \"functor\"\u2014a class that overloads operator() to make instances look like functions. For example, the following code defines a my_transform function (a simplified version of the STL's std::transform ) that applies a given unary operator ( op ) to each element of an array ( in ), storing the result in another array ( out ). To implement a prefix sum (i.e., { x[0] , x[0]+x[1] , x[0]+x[1]+x[2] , \u2026}) the code creates a functor ( MyFunctor ) that keeps track of the running total ( total ) and passes an instance of this functor to my_transform . // C++ #include <iostream> #include <cstddef> template < class UnaryOperator > void my_transform ( size_t n_elts , int * in , int * out , UnaryOperator op ) { size_t i ; for ( i = 0 ; i < n_elts ; i ++ ) out [ i ] = op ( in [ i ]); } class MyFunctor { public : int total ; int operator ()( int v ) { total += v ; return total ; } MyFunctor () : total ( 0 ) {} }; int main ( void ) { int data [ 7 ] = { 8 , 6 , 7 , 5 , 3 , 0 , 9 }; int result [ 7 ]; MyFunctor accumulate ; my_transform ( 7 , data , result , accumulate ); std :: cout << \"Result is [ \" ; for ( size_t i = 0 ; i < 7 ; i ++ ) std :: cout << result [ i ] << ' ' ; std :: cout << \"] \\n \" ; return 0 ; } C++11 adds anonymous (\"lambda\") functions, which can be stored in variables and passed to functions. They can optionally serve as closures, meaning they can reference state from parent scopes. This feature greatly simplifies my_transform : // C++11 #include <iostream> #include <cstddef> #include <functional> void my_transform ( size_t n_elts , int * in , int * out , std :: function < int ( int ) > op ) { size_t i ; for ( i = 0 ; i < n_elts ; i ++ ) out [ i ] = op ( in [ i ]); } int main ( void ) { int data [ 7 ] = { 8 , 6 , 7 , 5 , 3 , 0 , 9 }; int result [ 7 ]; int total = 0 ; my_transform ( 7 , data , result , [ & total ] ( int v ) { total += v ; return total ; }); std :: cout << \"Result is [ \" ; for ( size_t i = 0 ; i < 7 ; i ++ ) std :: cout << result [ i ] << ' ' ; std :: cout << \"] \\n \" ; return 0 ; } A typical Go version of my_transform looks a lot like the C++11 version: package main import \"fmt\" func my_transform ( in [] int , xform func ( int ) int ) ( out [] int ) { out = make ([] int , len ( in )) for idx , val := range in { out [ idx ] = xform ( val ) } return } func main () { data := [] int { 8 , 6 , 7 , 5 , 3 , 0 , 9 } total := 0 fmt . Printf ( \"Result is %v\\n\" , my_transform ( data , func ( v int ) int { total += v return total })) } (Note that we chose to return out from my_transform rather than pass it an out to write to. This was an aesthetic decision; the code could have been written more like the C++ version in that regard.) In Go, functions are always full closures, the equivalent of [&] in C++11. An important difference is that it is invalid in C++11 for a closure to reference a variable whose scope has gone away (as may be caused by an upward funarg \u2014a function that returns a lambda that references local variables). In Go, this is perfectly valid. Concurrency Like C++11's std::thread , Go permits starting new threads of execution that run concurrently in a shared address space. These are called goroutines and are spawned using the go statement. While typical std::thread implementations launch heavyweight, operating-system threads, goroutines are implemented as lightweight, user-level threads that are multiplexed among multiple operating-system threads. Consequently, goroutines are (intended to be) cheap and can be used liberally throughout a program. func server ( i int ) { for { fmt . Print ( i ) time . Sleep ( 10 * time . Second ) } } go server ( 1 ) go server ( 2 ) (Note that the for statement in the server function is equivalent to a C++ while (true) loop.) Function literals (which Go implements as closures) can be useful with the go statement. var g int go func ( i int ) { s := 0 for j := 0 ; j < i ; j ++ { s += j } g = s }( 1000 ) // Passes argument 1000 to the function literal. Like C++11, but unlike prior versions of C++, Go defines a memory model for unsynchronized accesses to memory. Although Go provides an analogue of std::mutex in its sync package, this is not the normal way to implement inter-thread communication and synchronization in Go programs. Instead, Go threads more typically communicate by message passing, which is a fundamentally different approach from locks and barriers. The Go mantra for this subject is, Do not communicate by sharing memory; instead, share memory by communicating. That is, channels are used to communicate among goroutines. Values of any type (including other channels!) can be sent over a channel. Channels can be unbuffered or buffered (using a buffer length specified at channel-construction time). Channels are first-class values; they can be stored in variables and passed to and from functions like any other value. (When supplied to functions, channels are passed by reference.) Channels are also typed: a chan int is different from a chan string . Because they are so widely used in Go programs, channels are (intended to be) efficient and cheap. To send a value on a channel, use <- as a binary operator. To receive a value on a channel, use <- as a unary operator. Channels can be shared among multiple senders and multiple receivers and guarantee that each value sent is received by at most one receiver. Here is an example of using a manager function to control access to a single value. type Cmd struct { Get bool Val int } func Manager ( ch chan Cmd ) { val := 0 for { c := <- ch if c . Get { c . Val = val ch <- c } else { val = c . Val } } } In that example the same channel is used for input and output. This is incorrect if there are multiple goroutines communicating with the manager at once: a goroutine waiting for a response from the manager might receive a request from another goroutine instead. A solution is to pass in a channel. type Cmd2 struct { Get bool Val int Ch chan <- int } func Manager2 ( ch <- chan Cmd2 ) { val := 0 for { c := <- ch if c . Get { c . Ch <- val } else { val = c . Val } } } To use Manager2 , given a channel to it: func getFromManagedChannel ( ch chan <- Cmd2 ) int { myCh := make ( chan int ) c := Cmd2 { true , 0 , myCh } // Composite literal syntax. ch <- c return <- myCh } func main () { ch := make ( chan Cmd2 ) go Manager2 ( ch ) // ... some code ... currentValue := getFromManagedChannel ( ch ) // ... some more code... }","title":"GoForCPPProgrammers"},{"location":"GoGenerateTools/","text":"go generate is only useful if you have tools to use it with! Here is an incomplete list of useful tools that generate code. goyacc \u2013 Yacc for Go. stringer \u2013 Implements fmt.Stringer interface for enums. gostringer \u2013 Implements fmt.GoStringer interface for enums. jsonenums \u2013 Implements json.Marshaler and json.Unmarshaler interfaces for enums. go-syncmap - Generates Go code using a package as a generic template for sync.Map . go-syncpool - Generates Go code using a package as a generic template for sync.Pool . go-atomicvalue - Generates Go code using a package as a generic template for atomic.Value . go-nulljson - Generates Go code using a package as a generic template that implements database/sql.Scanner and database/sql/driver.Valuer . go-enum - Generates Go code using a package as a generic template which implements interface fmt.Stringer | binary | json | text | sql | yaml for enums. enumer - Generates Go code that convert Go enum to/from strings. go-import \u2014 Performs auto import of non go files. gojson - Generates go struct definitions from example json documents. vfsgen - Generates a vfsdata.go file that statically implements the given virtual filesystem. goreuse - Generates Go code using a package as a generic template by replacing definitions. embedfiles - Embeds files into Go code. ragel - State machine compiler peachpy - x86-64 assembler embedded in Python, generates Go assembly bundle - Bundle creates a single-source-file version of a source package suitable for inclusion in a particular target package. msgp - A Go code generator for MessagePack protobuf - protobuf thriftrw - thrift gogen-avro - avro swagger-gen-types - go types from swagger specifications avo - generate assembly code with Go Wire - Compile-time Dependency Injection for Go sumgen - generate interface method implementations from sum-type declarations interface-extractor - generates an interface of a desired type, with only methods used within the package. deep-copy - creates a deep copy method for the given types. libfsm - fsm toolkit supporting (among others) Go and Go-flavored amd64 assembly for matching regexps re2c - lexer generator for C, C++ and Go re2dfa - Transform regular expressions into finite state machines and output Go source code pigeon - a PEG parser generator for Go","title":"GoGenerateTools"},{"location":"GoGetProxyConfig/","text":"Setting proxies for source code used by go get (listed in GoGetTools) Windows command line $ set http_proxy=http://proxy.example.com:port git $ git config [--global] http.proxy http://proxy.example.com:port mercurial Edit ~/.hgrc and add the following: [http_proxy] host=proxy.example.com:port svn Edit ~/.subversion/servers and add the following: [Global] http-proxy-host=proxy.example.com http-proxy-port=xxxx","title":"GoGetProxyConfig"},{"location":"GoGetProxyConfig/#windows-command-line","text":"$ set http_proxy=http://proxy.example.com:port","title":"Windows command line"},{"location":"GoGetProxyConfig/#git","text":"$ git config [--global] http.proxy http://proxy.example.com:port","title":"git"},{"location":"GoGetProxyConfig/#mercurial","text":"Edit ~/.hgrc and add the following: [http_proxy] host=proxy.example.com:port","title":"mercurial"},{"location":"GoGetProxyConfig/#svn","text":"Edit ~/.subversion/servers and add the following: [Global] http-proxy-host=proxy.example.com http-proxy-port=xxxx","title":"svn"},{"location":"GoGetTools/","text":"Installing Version Control Tools for go get The go get fetching of source code is done by using one of the following tools expected to be found on your system: svn - Subversion, download at: http://subversion.apache.org/packages.html hg - Mercurial, download at https://www.mercurial-scm.org/downloads git - Git, download at http://git-scm.com/downloads bzr - Bazaar, download at http://wiki.bazaar.canonical.com/Download For example, git is used for Github, hg is used for Bitbucket, etc. Refer GoGetProxyConfig for setting proxies for these tools.","title":"GoGetTools"},{"location":"GoGetTools/#installing-version-control-tools-for-go-get","text":"The go get fetching of source code is done by using one of the following tools expected to be found on your system: svn - Subversion, download at: http://subversion.apache.org/packages.html hg - Mercurial, download at https://www.mercurial-scm.org/downloads git - Git, download at http://git-scm.com/downloads bzr - Bazaar, download at http://wiki.bazaar.canonical.com/Download For example, git is used for Github, hg is used for Bitbucket, etc. Refer GoGetProxyConfig for setting proxies for these tools.","title":"Installing Version Control Tools for go get"},{"location":"GoMips/","text":"Introduction Go programs can be cross-compiled e.g., on x86/x86_64 build systems to run on MIPS target machines. Supported architectures Go supports the following MIPS architectural families. (Are there more?) Architecture Status GOMIPS value GOARCH value Big endian (e.g., ar71xx) supported GOMIPS=softfloat GOARCH=mips Little endian supported n/a GOARCH=mipsle Supported operating systems MIPS on Linux. Tested with an ar71xx based OpenWrt device. Recommended Go version The tested version for running Go on MIPS systems is Go 1.13. Tips and tricks Building for ar71xx OpenWrt This builds a Go program, strips unneeded strings and symbols to minimize its size, and compresses it to further minimize its size: env GOOS=linux GOARCH=mips GOMIPS=softfloat go build -trimpath -ldflags=\"-s -w\" 'server.go' upx -9 server Success stories MIPS hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here. D-Link DIR-505 Mobile Companion Architecture: ar71xx Operating System: OpenWrt The D-Link DIR-505 Mobile Companion comes with an Atheros AR1311 processor, 8 MB flash and 64 MB RAM. This space is limited but allows us to load Go applications, e.g., from network into /tmpfs and execute them from there. Further information about the device can be found at https://openwrt.org/toh/d-link/dir-505 . Teltonika RUT955 Architecture: ar9344 Operating System: RutOS (based on OpenWrt) The Teltonika RUT955 has a Atheros Wasp MIPS 74Kc CPU running at 550 MHz with 16 MB flash 128 MB RAM. Inbuilt flash will be insufficient for most applications but a Micro SD or USB stick can be added (running application directly from SD was unreliable but copying to /tmpfs and running from there works OK). The inbuilt IO, GPS etc can be accessed via Modbus TCP and the RS232/RS485 ports worked without issue. Tested with Go 1.14.6 & 1.15.3 (GOARCH=mips, GOMIPS=softfloat). Further information about the device can be found at https://teltonika-networks.com/product/rut955/ . TP-Link Archer A6 WiFi Router Architecture: ath79 (same hardware as ar71xx, but with native kernel support) Operating System: OpenWrt The TP-Link Archer A6 comes with an Atheros QCA9563 MIPS 24K classic processor, 16 MB flash, and 128 MB RAM. Flash storage is limited and no USB ports are available for storage expansion, so programs are loaded from the network into /tmpfs and executed. Further information about the device can be found at https://openwrt.org/toh/hwdata/tp-link/tp-link_archer_a6_us_tw . Belkin F7D7302 WiFi Router Architecture: mipsel_74kc Operating System: DD-WRT The Belkin F7D7302 comes with a Broadcom BCM4716 little-endian MIPS 74K classic processor, 8 MB flash, and 64 MB RAM. Flash storage is severely limited, but there is a USB port available so programs can be loaded onto a flash drive and executed. Further information about the device can be found at https://openwrt.org/toh/belkin/f7d3302 .","title":"GoMips"},{"location":"GoMips/#introduction","text":"Go programs can be cross-compiled e.g., on x86/x86_64 build systems to run on MIPS target machines.","title":"Introduction"},{"location":"GoMips/#supported-architectures","text":"Go supports the following MIPS architectural families. (Are there more?) Architecture Status GOMIPS value GOARCH value Big endian (e.g., ar71xx) supported GOMIPS=softfloat GOARCH=mips Little endian supported n/a GOARCH=mipsle","title":"Supported architectures"},{"location":"GoMips/#supported-operating-systems","text":"MIPS on Linux. Tested with an ar71xx based OpenWrt device.","title":"Supported operating systems"},{"location":"GoMips/#recommended-go-version","text":"The tested version for running Go on MIPS systems is Go 1.13.","title":"Recommended Go version"},{"location":"GoMips/#tips-and-tricks","text":"","title":"Tips and tricks"},{"location":"GoMips/#building-for-ar71xx-openwrt","text":"This builds a Go program, strips unneeded strings and symbols to minimize its size, and compresses it to further minimize its size: env GOOS=linux GOARCH=mips GOMIPS=softfloat go build -trimpath -ldflags=\"-s -w\" 'server.go' upx -9 server","title":"Building for ar71xx OpenWrt"},{"location":"GoMips/#success-stories","text":"MIPS hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here.","title":"Success stories"},{"location":"GoMips/#d-link-dir-505-mobile-companion","text":"Architecture: ar71xx Operating System: OpenWrt The D-Link DIR-505 Mobile Companion comes with an Atheros AR1311 processor, 8 MB flash and 64 MB RAM. This space is limited but allows us to load Go applications, e.g., from network into /tmpfs and execute them from there. Further information about the device can be found at https://openwrt.org/toh/d-link/dir-505 .","title":"D-Link DIR-505 Mobile Companion"},{"location":"GoMips/#teltonika-rut955","text":"Architecture: ar9344 Operating System: RutOS (based on OpenWrt) The Teltonika RUT955 has a Atheros Wasp MIPS 74Kc CPU running at 550 MHz with 16 MB flash 128 MB RAM. Inbuilt flash will be insufficient for most applications but a Micro SD or USB stick can be added (running application directly from SD was unreliable but copying to /tmpfs and running from there works OK). The inbuilt IO, GPS etc can be accessed via Modbus TCP and the RS232/RS485 ports worked without issue. Tested with Go 1.14.6 & 1.15.3 (GOARCH=mips, GOMIPS=softfloat). Further information about the device can be found at https://teltonika-networks.com/product/rut955/ .","title":"Teltonika RUT955"},{"location":"GoMips/#tp-link-archer-a6-wifi-router","text":"Architecture: ath79 (same hardware as ar71xx, but with native kernel support) Operating System: OpenWrt The TP-Link Archer A6 comes with an Atheros QCA9563 MIPS 24K classic processor, 16 MB flash, and 128 MB RAM. Flash storage is limited and no USB ports are available for storage expansion, so programs are loaded from the network into /tmpfs and executed. Further information about the device can be found at https://openwrt.org/toh/hwdata/tp-link/tp-link_archer_a6_us_tw .","title":"TP-Link Archer A6 WiFi Router"},{"location":"GoMips/#belkin-f7d7302-wifi-router","text":"Architecture: mipsel_74kc Operating System: DD-WRT The Belkin F7D7302 comes with a Broadcom BCM4716 little-endian MIPS 74K classic processor, 8 MB flash, and 64 MB RAM. Flash storage is severely limited, but there is a USB port available so programs can be loaded onto a flash drive and executed. Further information about the device can be found at https://openwrt.org/toh/belkin/f7d3302 .","title":"Belkin F7D7302 WiFi Router"},{"location":"GoStrings/","text":"Strings are not required to be UTF-8. Go source code is required to be UTF-8. There is a complex path between the two. In short, there are three kinds of strings. They are: the substring of the source that lexes into a string literal. a string literal. a value of type string. Only the first is required to be UTF-8. The second is required to be written in UTF-8, but its contents are interpreted various ways and may encode arbitrary bytes. The third can contain any bytes at all. Try this on: var s string = \"\\xFF\u8a9e\" Source substring: \"\\xFF\u8a9e\" , UTF-8 encoded. The data: 22 5c 78 46 46 e8 aa 9e 22 String literal: \\xFF\u8a9e (between the quotes). The data: 5c 78 46 46 e8 aa 9e The string value (unprintable; this is a UTF-8 stream). The data: ff e8 aa 9e And for record, the characters (code points): <erroneous byte FF, will appear as U+FFFD if you range over the string value> \u8a9e U+8a9e","title":"GoStrings"},{"location":"GoTalks/","text":"Go talks Check out http://talks.golang.org for presentations for some of the talks. For a comprehensive, curated and searchable index, try GopherVids from Damian Gryski. Official Introductory Talks An introduction to Go. Russ Cox's Tour of Go [ video and discussion ] Three things that make Go fast, fun, and productive:interfaces, reflection, and concurrency. Builds a toy web crawler to demonstrate these. Go: a simple programming environment [ video ] [ another video ] [ slides ] Go is a general-purpose language that bridges the gap between efficient statically typed languages and productive dynamic language. But it\u2019s not just the language that makes Go special \u2013 Go has broad and consistent standard libraries and powerful but simple tools. This talk gives an introduction to Go, followed by a tour of some real programs that demonstrate the power, scope, and simplicity of the Go programming environment. Get Started with Go [ video ] Get a feel for the language and its standard libraries and tools in this session, where we go through installing Go and writing some simple but useful programs. Go Programming [ video ] [ code ] A presentation delivered by Rob Pike and Russ Cox at Google I/O 2010. It illustrates how programming in Go differs from other languages through a set of examples demonstrating features particular to Go. These include concurrency, embedded types, methods on any type, and program construction using interfaces. The Go Tech Talk [ video ] [ slides ] An hour-long talk delivered by Rob Pike at Google in October 2009. The language's first public introduction. The language has changed since it was made, but it's still a good introduction. Development in Go Writing Web Apps in Go [ video ] [ slides ] A talk by Rob Pike and Andrew Gerrand presented at Google I/O 2011. It walks through the construction and deployment of a simple web application and unveils the Go runtime for App Engine . Real World Go [ video ] [ slides ] A talk by Andrew Gerrand presented at Google I/O Bootcamp 2011. It gives a broad overview of Go's type system and concurrency model and provides four examples of Go programs that solve real problems. Building Integrated Apps on Google's Cloud Platform [ video ] A talk by Andrew Gerrand presented at Google Developer Day Japan 2011. It discusses the development of a web application that runs on Google App Engine and renders raytraced that it stores on Google Cloud Storage. High Performance Apps with Go on App Engine Google I/O, May 2013 [ video ] [ slides ] Practical Go Programming [ video ] [ slides ] [ code ] This talk presents the development of a complete web application in Go. It looks at design, storage, concurrency, and scaling issues in detail, using the simple example of an URL shortening service. Lexical Scanning in Go [ video ] This GTUG talk by Rob Pike discusses the detailed design of a lexical scanner that uses Go's features in expressive combinations. (The discussion near the end about avoiding goroutines at initialization is obsolete: Go 1 allows goroutines in init functions so the extra complexity is unnecessary.) Go in Production Google I/O, June 2012 [ video ] Since Go's release in 2009 many companies (besides Google, of course) have used the language to build cool stuff. In this session programmers from several companies will share their first-hand experience using Go in production environments. Go: code that grows with grace [ video ] [ slides ] One of the Go Programming Language\u2019s key design goals is code adaptability; that it should be easy to take a simple design and build upon it in a clean and natural way. In this talk I describe a simple \u201cchat roulette\u201d server that matches pairs of incoming TCP connections, and then use Go\u2019s concurrency mechanisms, interfaces, and standard library to extend it with a web interface and other features. Although the function of the program changes dramatically, the inherent flexibility of Go allows the original design to remain intact as it grows. Implementing a bignum calculator [ video ] [ slides ] Rob Pike describes his interpreter for an APL-like calculator language. Go in Go [ video ] [ slides ] Rob Pike speaks on moving the Go toolchain from C to Go Concurrency in Go Go concurrency patterns Google I/O, June 2012 [ video ] Advanced Concurrency Patterns [ video ] [ slides ] Google I/0, May 2013 Concurrency is the key to designing high performance network services. This talk expands on last year's popular Go Concurrency Patterns talk to dive deeper into Go's concurrency primitives, and see how tricky concurrency problems can be solved gracefully with simple Go code. Design of Go The Expressiveness Of Go [ slides ] A discussion of the qualities that make Go an expressive and comprehensible language. The talk was presented by Rob Pike at JAOO 2010. The recording of the event was lost due to a hardware error. Another Go at Language Design [ video from Sydney University] [ slides ] A tour, with some background, of the major features of Go, intended for an audience new to the language. The talk was presented at OSCON 2010. This talk was also delivered at Sydney University in September 2010. Go Emerging Languages Conference Talk [ video ] [ slides ] Rob Pike's Emerging Languages Conference presentation delivered in July 2010. Talk abstract: Go\u2019s approach to concurrency differs from that of many languages, even those (such as Erlang) that make concurrency central, yet it has deep roots. The path from Hoare\u2019s 1978 paper to Go provides insight into how and why Go works as it does. The State of Go June 2014 [ video ] [ slides ] February 2015 [ video ] [ slides ] May 2015 [ video ] [ slides ] Miscellaneous The Go frontend for GCC [ paper ] A description of the Go language frontend for gcc. Ian Lance Taylor's paper delivered at the GCC Summit 2010. The Go Promo Video [ video ] A short promotional video featuring Russ Cox demonstrating Go's fast compiler. Meet the Go team Google I/O, June 2012 [ video ] A panel discussion with David Symonds, Robert Griesemer, Rob Pike, Ken Thompson, Andrew Gerrand, and Brad Fitzpatrick. Fireside Chat with Go team Google I/0, May 2013 [ video ] A fireside chat with Andrew Gerrand, Brad Fitzpatrick, David Symonds, Ian Lance Taylor, Nigel Tao, Rob Pike, Robert Griesemer, Sameer Ajmani. The State of the Gopher [ video ] [ slides ] Unofficial Talks by members of the community. Let's Go, or introduction to Go [ video (starting at 14:35) ] [ slides ] [ source ] This talk gives an introduction to Go in Russian. What are Go modules and how do I use them? Paul Jolly at LondonGophers [ video ] [ slides ] What else is in Go 1.11 Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] Sneak peak at the Go 1.11 release Get Going with WebAssembly Johan Brandhorst at LondonGophers [ video ] [ slides ] [ code wasm ] [ code grpc ] In this talk, Johan introduces you to the WebAssembly port in Go 1.11 and how it can help when dealing with JavaScript madness :) Go and Mongo - and how it's changing DJ Walker-Morgan at LondonGophers [ video ] [ slides ] Building a simple concurrency teaching language with Go Nicholas Ng at LondonGophers [ video ] [ slides ] In this talk Nicholas presents the design and implementation of a simple language designed for teaching concurrency theory (process calculi), implemented in Go. He covers some of Go's static analysis tools used in the implementation and show how you can use them too! Introducing Remoto Mat Ryer at LondonGophers [ video ] Mat shares the first glimpse of a new project that aims to make building RPC services easy. gRPC isn\u2019t good for clients (especially web), and RESTful designs sometimes lead to confusing APIs. Remoto lets you define your service with a Go interface, and generate everything you need to build and consume the service. Go Swagger Simone Trubian at LondonGophers [ video ] Simone gives an overview of the Go Swagger command line tool and briefly explain how he used it to improve productivity in designing REST API's. ORMs in Go Renato Serra at LondonGophers [ video ] Renato explains where ORMs can help, what the options were and what it's been like to use one. Unused parameters in Go code Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] Daniel talks about how to use SSA and callgraphs to write powerful code analysis tools. In particular, he demonstrates how to detect unused parameters in functions. Lies, Damn Lies, and Benchmarks Amnon at LondonGophers [ video ] [ slides ] Amnon discusses why microbenchmarks can be misleading for optimising real world systems, why data layout is often more significant than code structure, and how Go can help us in the quest for performance. A debugger from scratch Liz Rice at LondonGophers [ video ] [ slides ] [ code ] Liz explains how a debugger works by building one in a few lines of Go. This includes mapping between Go source code and the machine code instructions it compiles to, and using the ptrace system call to set break points and examine and modify the running process. Fast Fractal Fun With SDL Sue Spence at LondonGophers [ video ] [ slides ] [ code ] Go programs which create images such as the Mandelbrot & Julia sets often output an image file. I will show how to use Go bindings for the Simple Directmedia Layer library to output them on a display device instead. Concurrency: a Journey from Ruby to Go Mathilda Thompson at LondonGophers [ video ] Go in a Polyglot Environment Kevin McKelvin at LondonGophers [ video ] In this talk Kevin goes through his experience of adopting Go, moving to a polyglot environment, successes and challenges, and how Go fits into his company's overall architecture and strategy. Delivering Go Services Zak Knill at LondonGophers [ video ] Delivering Go Services: After introducing Go to your company, and deploying your first go service. What are the next steps? This talk focuses on some of the things that come next, touching on the fabled \"New service to prod in X (10, 20, 30) mins\", as well as some gotchas along the way. Go-ing Lambda David Blooman at LondonGophers [ video ] Go-ing Lambda - A year in production: How we(FundApps) used Go in lambda functions to build a service for importing/scraping/parsing data for financial services to build API's on top of. Tips and tricks of lambda functions in Go, limitations, performance and using the Apex framework. The RED method Tom Wilkie at LondonGophers [ video ] We'll also have a section dedicated to those of you who are hiring or looking to get hired (if we'll miss it like last time, please don't be afraid to remind us). Abusing Go\u2019s net package for fun and profit Micha\u0142 Witkowski at LondonGophers [ video ] This talks into the details of how Go\u2019s composition-based philosophy, as applied to the net package, can be creatively leveraged to beautiful and useful hacks that significantly augment the functionality of the stack. We\u2019ll explore the net.Conn, and how one can (ab)use them in creative ways. We\u2019ll take a peek into net/http, and explore how the http.Handler and http.Roundtripper interfaces can be creatively appropriated to build useful middleware. We\u2019ll then dig even deeper into the net/http internals and how they related tls.Conn and x/net/http2, to understand how they work, and armed with that knowledge we\u2019ll demonstrate some of our most beautiful hacks. 2018's stringer Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] 2018's stringer - a demonstration of new features you likely haven't heard of.","title":"GoTalks"},{"location":"GoTalks/#go-talks","text":"Check out http://talks.golang.org for presentations for some of the talks. For a comprehensive, curated and searchable index, try GopherVids from Damian Gryski.","title":"Go talks"},{"location":"GoTalks/#official","text":"","title":"Official"},{"location":"GoTalks/#introductory-talks","text":"An introduction to Go.","title":"Introductory Talks"},{"location":"GoTalks/#russ-coxs-tour-of-go","text":"[ video and discussion ] Three things that make Go fast, fun, and productive:interfaces, reflection, and concurrency. Builds a toy web crawler to demonstrate these.","title":"Russ Cox's Tour of Go"},{"location":"GoTalks/#go-a-simple-programming-environment","text":"[ video ] [ another video ] [ slides ] Go is a general-purpose language that bridges the gap between efficient statically typed languages and productive dynamic language. But it\u2019s not just the language that makes Go special \u2013 Go has broad and consistent standard libraries and powerful but simple tools. This talk gives an introduction to Go, followed by a tour of some real programs that demonstrate the power, scope, and simplicity of the Go programming environment.","title":"Go: a simple programming environment"},{"location":"GoTalks/#get-started-with-go","text":"[ video ] Get a feel for the language and its standard libraries and tools in this session, where we go through installing Go and writing some simple but useful programs.","title":"Get Started with Go"},{"location":"GoTalks/#go-programming","text":"[ video ] [ code ] A presentation delivered by Rob Pike and Russ Cox at Google I/O 2010. It illustrates how programming in Go differs from other languages through a set of examples demonstrating features particular to Go. These include concurrency, embedded types, methods on any type, and program construction using interfaces.","title":"Go Programming"},{"location":"GoTalks/#the-go-tech-talk","text":"[ video ] [ slides ] An hour-long talk delivered by Rob Pike at Google in October 2009. The language's first public introduction. The language has changed since it was made, but it's still a good introduction.","title":"The Go Tech Talk"},{"location":"GoTalks/#development-in-go","text":"","title":"Development in Go"},{"location":"GoTalks/#writing-web-apps-in-go","text":"[ video ] [ slides ] A talk by Rob Pike and Andrew Gerrand presented at Google I/O 2011. It walks through the construction and deployment of a simple web application and unveils the Go runtime for App Engine .","title":"Writing Web Apps in Go"},{"location":"GoTalks/#real-world-go","text":"[ video ] [ slides ] A talk by Andrew Gerrand presented at Google I/O Bootcamp 2011. It gives a broad overview of Go's type system and concurrency model and provides four examples of Go programs that solve real problems.","title":"Real World Go"},{"location":"GoTalks/#building-integrated-apps-on-googles-cloud-platform","text":"[ video ] A talk by Andrew Gerrand presented at Google Developer Day Japan 2011. It discusses the development of a web application that runs on Google App Engine and renders raytraced that it stores on Google Cloud Storage.","title":"Building Integrated Apps on Google's Cloud Platform"},{"location":"GoTalks/#high-performance-apps-with-go-on-app-engine","text":"Google I/O, May 2013 [ video ] [ slides ]","title":"High Performance Apps with Go on App Engine"},{"location":"GoTalks/#practical-go-programming","text":"[ video ] [ slides ] [ code ] This talk presents the development of a complete web application in Go. It looks at design, storage, concurrency, and scaling issues in detail, using the simple example of an URL shortening service.","title":"Practical Go Programming"},{"location":"GoTalks/#lexical-scanning-in-go","text":"[ video ] This GTUG talk by Rob Pike discusses the detailed design of a lexical scanner that uses Go's features in expressive combinations. (The discussion near the end about avoiding goroutines at initialization is obsolete: Go 1 allows goroutines in init functions so the extra complexity is unnecessary.)","title":"Lexical Scanning in Go"},{"location":"GoTalks/#go-in-production","text":"Google I/O, June 2012 [ video ] Since Go's release in 2009 many companies (besides Google, of course) have used the language to build cool stuff. In this session programmers from several companies will share their first-hand experience using Go in production environments.","title":"Go in Production"},{"location":"GoTalks/#go-code-that-grows-with-grace","text":"[ video ] [ slides ] One of the Go Programming Language\u2019s key design goals is code adaptability; that it should be easy to take a simple design and build upon it in a clean and natural way. In this talk I describe a simple \u201cchat roulette\u201d server that matches pairs of incoming TCP connections, and then use Go\u2019s concurrency mechanisms, interfaces, and standard library to extend it with a web interface and other features. Although the function of the program changes dramatically, the inherent flexibility of Go allows the original design to remain intact as it grows.","title":"Go: code that grows with grace"},{"location":"GoTalks/#implementing-a-bignum-calculator","text":"[ video ] [ slides ] Rob Pike describes his interpreter for an APL-like calculator language.","title":"Implementing a bignum calculator"},{"location":"GoTalks/#go-in-go","text":"[ video ] [ slides ] Rob Pike speaks on moving the Go toolchain from C to Go","title":"Go in Go"},{"location":"GoTalks/#concurrency-in-go","text":"","title":"Concurrency in Go"},{"location":"GoTalks/#go-concurrency-patterns","text":"Google I/O, June 2012 [ video ]","title":"Go concurrency patterns"},{"location":"GoTalks/#advanced-concurrency-patterns","text":"[ video ] [ slides ] Google I/0, May 2013 Concurrency is the key to designing high performance network services. This talk expands on last year's popular Go Concurrency Patterns talk to dive deeper into Go's concurrency primitives, and see how tricky concurrency problems can be solved gracefully with simple Go code.","title":"Advanced Concurrency Patterns"},{"location":"GoTalks/#design-of-go","text":"","title":"Design of Go"},{"location":"GoTalks/#the-expressiveness-of-go","text":"[ slides ] A discussion of the qualities that make Go an expressive and comprehensible language. The talk was presented by Rob Pike at JAOO 2010. The recording of the event was lost due to a hardware error.","title":"The Expressiveness Of Go"},{"location":"GoTalks/#another-go-at-language-design","text":"[ video from Sydney University] [ slides ] A tour, with some background, of the major features of Go, intended for an audience new to the language. The talk was presented at OSCON 2010. This talk was also delivered at Sydney University in September 2010.","title":"Another Go at Language Design"},{"location":"GoTalks/#go-emerging-languages-conference-talk","text":"[ video ] [ slides ] Rob Pike's Emerging Languages Conference presentation delivered in July 2010. Talk abstract: Go\u2019s approach to concurrency differs from that of many languages, even those (such as Erlang) that make concurrency central, yet it has deep roots. The path from Hoare\u2019s 1978 paper to Go provides insight into how and why Go works as it does.","title":"Go Emerging Languages Conference Talk"},{"location":"GoTalks/#the-state-of-go","text":"","title":"The State of Go"},{"location":"GoTalks/#june-2014","text":"[ video ] [ slides ]","title":"June 2014"},{"location":"GoTalks/#february-2015","text":"[ video ] [ slides ]","title":"February 2015"},{"location":"GoTalks/#may-2015","text":"[ video ] [ slides ]","title":"May 2015"},{"location":"GoTalks/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"GoTalks/#the-go-frontend-for-gcc","text":"[ paper ] A description of the Go language frontend for gcc. Ian Lance Taylor's paper delivered at the GCC Summit 2010.","title":"The Go frontend for GCC"},{"location":"GoTalks/#the-go-promo-video","text":"[ video ] A short promotional video featuring Russ Cox demonstrating Go's fast compiler.","title":"The Go Promo Video"},{"location":"GoTalks/#meet-the-go-team","text":"Google I/O, June 2012 [ video ] A panel discussion with David Symonds, Robert Griesemer, Rob Pike, Ken Thompson, Andrew Gerrand, and Brad Fitzpatrick.","title":"Meet the Go team"},{"location":"GoTalks/#fireside-chat-with-go-team","text":"Google I/0, May 2013 [ video ] A fireside chat with Andrew Gerrand, Brad Fitzpatrick, David Symonds, Ian Lance Taylor, Nigel Tao, Rob Pike, Robert Griesemer, Sameer Ajmani.","title":"Fireside Chat with Go team"},{"location":"GoTalks/#the-state-of-the-gopher","text":"[ video ] [ slides ]","title":"The State of the Gopher"},{"location":"GoTalks/#unofficial","text":"Talks by members of the community.","title":"Unofficial"},{"location":"GoTalks/#lets-go-or-introduction-to-go","text":"[ video (starting at 14:35) ] [ slides ] [ source ] This talk gives an introduction to Go in Russian.","title":"Let's Go, or introduction to Go"},{"location":"GoTalks/#what-are-go-modules-and-how-do-i-use-them","text":"Paul Jolly at LondonGophers [ video ] [ slides ]","title":"What are Go modules and how do I use them?"},{"location":"GoTalks/#what-else-is-in-go-111","text":"Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] Sneak peak at the Go 1.11 release","title":"What else is in Go 1.11"},{"location":"GoTalks/#get-going-with-webassembly","text":"Johan Brandhorst at LondonGophers [ video ] [ slides ] [ code wasm ] [ code grpc ] In this talk, Johan introduces you to the WebAssembly port in Go 1.11 and how it can help when dealing with JavaScript madness :)","title":"Get Going with WebAssembly"},{"location":"GoTalks/#go-and-mongo---and-how-its-changing","text":"DJ Walker-Morgan at LondonGophers [ video ] [ slides ]","title":"Go and Mongo - and how it's changing"},{"location":"GoTalks/#building-a-simple-concurrency-teaching-language-with-go","text":"Nicholas Ng at LondonGophers [ video ] [ slides ] In this talk Nicholas presents the design and implementation of a simple language designed for teaching concurrency theory (process calculi), implemented in Go. He covers some of Go's static analysis tools used in the implementation and show how you can use them too!","title":"Building a simple concurrency teaching language with Go"},{"location":"GoTalks/#introducing-remoto","text":"Mat Ryer at LondonGophers [ video ] Mat shares the first glimpse of a new project that aims to make building RPC services easy. gRPC isn\u2019t good for clients (especially web), and RESTful designs sometimes lead to confusing APIs. Remoto lets you define your service with a Go interface, and generate everything you need to build and consume the service.","title":"Introducing Remoto"},{"location":"GoTalks/#go-swagger","text":"Simone Trubian at LondonGophers [ video ] Simone gives an overview of the Go Swagger command line tool and briefly explain how he used it to improve productivity in designing REST API's.","title":"Go Swagger"},{"location":"GoTalks/#orms-in-go","text":"Renato Serra at LondonGophers [ video ] Renato explains where ORMs can help, what the options were and what it's been like to use one.","title":"ORMs in Go"},{"location":"GoTalks/#unused-parameters-in-go-code","text":"Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] Daniel talks about how to use SSA and callgraphs to write powerful code analysis tools. In particular, he demonstrates how to detect unused parameters in functions.","title":"Unused parameters in Go code"},{"location":"GoTalks/#lies-damn-lies-and-benchmarks","text":"Amnon at LondonGophers [ video ] [ slides ] Amnon discusses why microbenchmarks can be misleading for optimising real world systems, why data layout is often more significant than code structure, and how Go can help us in the quest for performance.","title":"Lies, Damn Lies, and Benchmarks"},{"location":"GoTalks/#a-debugger-from-scratch","text":"Liz Rice at LondonGophers [ video ] [ slides ] [ code ] Liz explains how a debugger works by building one in a few lines of Go. This includes mapping between Go source code and the machine code instructions it compiles to, and using the ptrace system call to set break points and examine and modify the running process.","title":"A debugger from scratch"},{"location":"GoTalks/#fast-fractal-fun-with-sdl","text":"Sue Spence at LondonGophers [ video ] [ slides ] [ code ] Go programs which create images such as the Mandelbrot & Julia sets often output an image file. I will show how to use Go bindings for the Simple Directmedia Layer library to output them on a display device instead.","title":"Fast Fractal Fun With SDL"},{"location":"GoTalks/#concurrency-a-journey-from-ruby-to-go","text":"Mathilda Thompson at LondonGophers [ video ]","title":"Concurrency: a Journey from Ruby to Go"},{"location":"GoTalks/#go-in-a-polyglot-environment","text":"Kevin McKelvin at LondonGophers [ video ] In this talk Kevin goes through his experience of adopting Go, moving to a polyglot environment, successes and challenges, and how Go fits into his company's overall architecture and strategy.","title":"Go in a Polyglot Environment"},{"location":"GoTalks/#delivering-go-services","text":"Zak Knill at LondonGophers [ video ] Delivering Go Services: After introducing Go to your company, and deploying your first go service. What are the next steps? This talk focuses on some of the things that come next, touching on the fabled \"New service to prod in X (10, 20, 30) mins\", as well as some gotchas along the way.","title":"Delivering Go Services"},{"location":"GoTalks/#go-ing-lambda","text":"David Blooman at LondonGophers [ video ] Go-ing Lambda - A year in production: How we(FundApps) used Go in lambda functions to build a service for importing/scraping/parsing data for financial services to build API's on top of. Tips and tricks of lambda functions in Go, limitations, performance and using the Apex framework.","title":"Go-ing Lambda"},{"location":"GoTalks/#the-red-method","text":"Tom Wilkie at LondonGophers [ video ] We'll also have a section dedicated to those of you who are hiring or looking to get hired (if we'll miss it like last time, please don't be afraid to remind us).","title":"The RED method"},{"location":"GoTalks/#abusing-gos-net-package-for-fun-and-profit","text":"Micha\u0142 Witkowski at LondonGophers [ video ] This talks into the details of how Go\u2019s composition-based philosophy, as applied to the net package, can be creatively leveraged to beautiful and useful hacks that significantly augment the functionality of the stack. We\u2019ll explore the net.Conn, and how one can (ab)use them in creative ways. We\u2019ll take a peek into net/http, and explore how the http.Handler and http.Roundtripper interfaces can be creatively appropriated to build useful middleware. We\u2019ll then dig even deeper into the net/http internals and how they related tls.Conn and x/net/http2, to understand how they work, and armed with that knowledge we\u2019ll demonstrate some of our most beautiful hacks.","title":"Abusing Go\u2019s net package for fun and profit"},{"location":"GoTalks/#2018s-stringer","text":"Daniel Mart\u00ec at LondonGophers [ video ] [ slides ] 2018's stringer - a demonstration of new features you likely haven't heard of.","title":"2018's stringer"},{"location":"GoUserGroups/","text":"Africa Golang Buea - Buea, Cameroon Go Egypt - Cairo, Egypt. Go Cape Town - Cape Town. golang-dakar Dakar (S\u00e9n\u00e9gal) Joburg Golang Group - Johannesburg angolang Luanda, Angola Golang Nigeria - Lagos, Nigeria Golang Abuja - Abuja, Nigeria Gophers Mauritius - Mauritius cyberstorm.mu - Mauritius Tunisian Gophers - Tunisia Asia Golang \u0650Arabic Community Golang Azerbaijan - Baku, Azerbaijan \ud83c\udde6\ud83c\uddff Golang Iraq - Iraq Indonesia - Indonesia GoJakarta - Jakarta, Indonesia. Golang Surabaya - Surabaya, Indonesia. Persia Telegram Iranian Group - Iran devheroes Iran - Iran India Golang New Delhi - New Delhi, India. Golang Bangalore - Bangalore, India. Golang Chennai - Chennai, India Golang Pune - Pune, India. Golang Ahmedabad - Ahmedabad, India. Golang Kolkata - Kolkata, India. Japan Gophers Japan - Japan. golang.tokyo - Tokyo, Japan. Akiba.go - Tokyo, Japan. Women Who Go Tokyo - Tokyo, Japan. kyoto.go - Kyoto, Japan. Umeda.go - Osaka, Japan. Sendai.go - Miyagi, Japan. Fukuoka.go - Fukuoka, Japan. Okayama.go - Okayama, Japan. nagoya.go - Aichi, Japan. Shizuoka.go - Shizuoka, Japan. Golang\u672d\u5e4c - Hokkaido, Japan. Gopher\u9053\u5834 - Japan. Go Language Specification \u8f2a\u8aad\u4f1a - Japan. \u30b4\u30ea\u30e9.Go - Japan. Other Golang China - China. Golang Korea - Korea. Golang Vietnam - github - Vietnam Golang Taiwan - Taiwan. Golang Israel - Israel. Singapore Gophers - Meetup - Singapore Golang UAE - UAE. Golang Malaysia - Homepage - Malaysia. Go Developers Network Bangladesh - Bangladesh. Golang Pakistan - Facebook Group - Pakistan Europe B\u00e4rner Go Meetup - Berne, Switzerland Budapest Go Meetup - Budapest, Hungary Athens Gophers - Athens, Greece. Golang T\u00fcrkiye - Istanbul, Turkey. Gophers Aachen - Aachen, Germany. Amsterdam, NL Belarus - Belarus. Belfast Gophers - Belfast, UK. Barcelona - Barcelona, Catalunya, Spain. Brno Golang - Brno, the Czech Republic Golang Prague - Prague, Czech Republic. Cambridge Gophers - Cambridge, UK Suffolk Gophers - Suffolk, UK Stuttgart Gophers - Stuttgart, Germany. GDG Berlin Golang - Berlin, Germany. Go-User-Group-Hamburg - Hamburg, Germany. Go-User-Group Rhein-Ruhr - Rhine-Ruhr region, Germany. Go Lithuania User Group - Lithuania, Kaunas. Go London User Group - London, UK. ManGo The Manchester Go User Group - Manchester, UK. Golang Dorset - Bournemouth, UK. Golang Bristol++ - Bristol, UK. GoSheffield - Sheffield, UK. GoMAD - Madrid, Spain Go Valhalla - Valencia, Spain. \ud83c\uddfb\ud83c\uddf3 Go Wales User Group - Wales, UK. Golang \u041c\u043e\u0441\u043a\u0432\u0430 - Moscow, Russia. Golang \u041f\u0438\u0442\u0435\u0440 - Saint Petersburg, Russia. Golang \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a - Novosibirsk, Russia. Golang \u041a\u0430\u0437\u0430\u043d\u044c - Kazan, Russia. Go Yola - Yoshkar-Ola, Russia. Chisinau Golang Meetup - Chisinau, Moldova Munich Gophers - Munich, Germany Golang Paris - Paris, France. Golang Rennes - Rennes, France. Golang Lyon - Lyon, France. Golang Lille - Lille, France. Golang Marseille - Marseille, France. golang-pl - Poland. Gophers Katowice - Katowice, Poland. Golang Warsaw - Warsaw, Poland. G.L.U.G. Wroclaw - Wroclaw, Poland Golang User Group Tr\u00f3jmiasto - Gda\u0144sk/Gdynia/Sopot, Poland Go-Stockholm - Stockholm, Sweden. Go-Uppsala - Uppsala, Sweden. Go-Malm\u00f6 - Malm\u00f6, Sweden. golang-greece - Greece GolangIT - Italy. Go-Turkey - Turkey. Go Graz - Graz, Austria Meetup Belgium - Belgium Meetup Lausanne - Lausanne, Switzerland Meetup Zurich - Zurich, Switzerland Meetup Frankfurt - Frankfurt am Main, Germany Go-ningen - Groningen, The Netherlands Golang Ljubljana - Ljubljana, Slovenia Go Euregio - Maastricht, Netherlands; Li\u00e8ge/Hasselt, Belgium; Aachen, Germany Ukrainian Golang User Group - Kyiv, Ukraine L'viv Golang Group - L'viv, Ukraine Go SXB, Go! - Strasbourg, France Hannover Gophers Meetup - Hannover, Germany Golang N\u00fcrnberg - N\u00fcrnberg, Germany Helsinki Gophers - Helsinki, Finland Golang Cologne - Cologne/Bonn, Germany Golang Vilnius - Vilnius, Lithuania Meetup Surrey - Surrey, UK Golang Zagreb - Zagreb, Croatia Meetup Edinburgh - Edinburgh, UK M\u00fcnster Gophers - M\u00fcnster, Germany Vienna.go - Vienna Go User Group - Vienna, Austria Golang Bulgaria - Sofia, Bulgaria \ud83c\udde7\ud83c\uddec Go Oslo User Group - Oslo, Norway Gophers Linz - Linz, Austria Golang Rotterdam - Rotterdam, Netherlands Leipzig Gophers - Leipzig, Germany North America Canada Edmonton Go Meetup - Edmonton AB, Canada. vangophers - Vancouver BC, Canada. Go Vancouver - Vancouver BC, Canada. GolangVan meetup - Vancouver BC, Canada. GolangVan - Vancouver BC, Canada. GoTO - Toronto ON, Canada. Ottawa Go - Ottawa ON, Canada. KW Go Developers - Waterloo, ON, Canada. Golang Montr\u00e9al - Montr\u00e9al, QC Golang Winnipeg - Winnipeg MB, Canada Dominican Republic Golang Dominicana - Rep\u00fablica Dominicana. Latin America Golang-ES - Golang en Espa\u00f1ol. Mexico Golang Monterrey - Monterrey, Mexico United States Los-Angeles-Gophers - Los Angeles CA, USA. Westside GoLang Meetup - Los Angeles CA, USA. OC Gophers - Orange County CA, USA. SDGophers \u2014 San Diego CA, USA GoSF - San Francisco CA, USA. GoSV - San Mateo CA, USA. Boulder Gophers - Boulder CO, USA. Denver Go Language User Group - Denver CO, USA. DTC Go Meetup - Denver Tech Center CO, USA. Go-Miami - Miami FL, USA. Orlando Go Users - Orlando FL, USA Go-Users-Group-Atlanta - Atlanta GA, USA. chicagolang - Chicago IL, USA. Chicago Ultimate Golang - Chicago IL, USA. Boston Golang - Boston MA, USA. Framingham Go - Framingham MA, USA. GoMN - Minneapolis MN, USA. Buffalo GoLang Meetup Group - Buffalo NY, USA. New York Go Language Meetup - New York NY, USA. New Jersey Go Language Meetup - New Jersey NY, USA. Bowery Golang Meetup - New York NY, USA. GoLangPhilly - Philadelphia PA, USA. GoLangPhoenix - Phoenix AZ, USA. GoLangCleveland - Cleveland OH, USA. Cincinnati Golang Meetup - Cincinnati, OH, USA. EUG-Go - Eugene, OR, USA. PDX-Go - Portland, OR, USA. GoLancaster - Lancaster PA, USA. ATX-Golang - Austin TX, USA. GoDFW - Dallas TX, USA. Golang Houston - Houston TX, USA. Utah Golang (#UTGO) - Salt Lake City UT, USA. Golang-DC - Arlington VA, USA. Seattle Go Programmers - Seattle WA, USA. Go Charlotte Meetup - Charlotte NC, USA Triangle Golang - Raleigh NC, USA. Las Vegas Go Meetup - Las Vegas NV, USA. Ann Arbor Gophers - Ann Arbor MI, USA Baltimore Metro Area Golang - Baltimore MD, USA Nashville Gophers - Nashville TN, USA Omaha Gophers - Omaha NE, USA St Louis Go Meetup - St Louis, MO, USA Oceania Canberra Gophers - Canberra, Australia. golang-sydney - Sydney, Australia. golang-nz - New Zealand. Golang Wellington - Wellington, New Zealand. Melbourne-Go-Nuts - Melbourne, Australia. Brisbane Gophers - Brisbane, Australia. Honolulu Go Users - Oahu, Hawaii South America Golang Brasil - Brazil. Golang Rio de Janeiro - Rio de Janeiro, Brazil. Golang Recife - Recife, Pernambuco, Brazil. Golang Argentina - Argentina. Golang Medell\u00edn - Colombia. Golang Chile - Chile. Golang Panam\u00e1 - Panam\u00e1. Golang Lima - Per\u00fa","title":"GoUserGroups"},{"location":"GoUserGroups/#africa","text":"Golang Buea - Buea, Cameroon Go Egypt - Cairo, Egypt. Go Cape Town - Cape Town. golang-dakar Dakar (S\u00e9n\u00e9gal) Joburg Golang Group - Johannesburg angolang Luanda, Angola Golang Nigeria - Lagos, Nigeria Golang Abuja - Abuja, Nigeria Gophers Mauritius - Mauritius cyberstorm.mu - Mauritius Tunisian Gophers - Tunisia","title":"Africa"},{"location":"GoUserGroups/#asia","text":"Golang \u0650Arabic Community Golang Azerbaijan - Baku, Azerbaijan \ud83c\udde6\ud83c\uddff Golang Iraq - Iraq Indonesia - Indonesia GoJakarta - Jakarta, Indonesia. Golang Surabaya - Surabaya, Indonesia. Persia Telegram Iranian Group - Iran devheroes Iran - Iran India Golang New Delhi - New Delhi, India. Golang Bangalore - Bangalore, India. Golang Chennai - Chennai, India Golang Pune - Pune, India. Golang Ahmedabad - Ahmedabad, India. Golang Kolkata - Kolkata, India. Japan Gophers Japan - Japan. golang.tokyo - Tokyo, Japan. Akiba.go - Tokyo, Japan. Women Who Go Tokyo - Tokyo, Japan. kyoto.go - Kyoto, Japan. Umeda.go - Osaka, Japan. Sendai.go - Miyagi, Japan. Fukuoka.go - Fukuoka, Japan. Okayama.go - Okayama, Japan. nagoya.go - Aichi, Japan. Shizuoka.go - Shizuoka, Japan. Golang\u672d\u5e4c - Hokkaido, Japan. Gopher\u9053\u5834 - Japan. Go Language Specification \u8f2a\u8aad\u4f1a - Japan. \u30b4\u30ea\u30e9.Go - Japan. Other Golang China - China. Golang Korea - Korea. Golang Vietnam - github - Vietnam Golang Taiwan - Taiwan. Golang Israel - Israel. Singapore Gophers - Meetup - Singapore Golang UAE - UAE. Golang Malaysia - Homepage - Malaysia. Go Developers Network Bangladesh - Bangladesh. Golang Pakistan - Facebook Group - Pakistan","title":"Asia"},{"location":"GoUserGroups/#europe","text":"B\u00e4rner Go Meetup - Berne, Switzerland Budapest Go Meetup - Budapest, Hungary Athens Gophers - Athens, Greece. Golang T\u00fcrkiye - Istanbul, Turkey. Gophers Aachen - Aachen, Germany. Amsterdam, NL Belarus - Belarus. Belfast Gophers - Belfast, UK. Barcelona - Barcelona, Catalunya, Spain. Brno Golang - Brno, the Czech Republic Golang Prague - Prague, Czech Republic. Cambridge Gophers - Cambridge, UK Suffolk Gophers - Suffolk, UK Stuttgart Gophers - Stuttgart, Germany. GDG Berlin Golang - Berlin, Germany. Go-User-Group-Hamburg - Hamburg, Germany. Go-User-Group Rhein-Ruhr - Rhine-Ruhr region, Germany. Go Lithuania User Group - Lithuania, Kaunas. Go London User Group - London, UK. ManGo The Manchester Go User Group - Manchester, UK. Golang Dorset - Bournemouth, UK. Golang Bristol++ - Bristol, UK. GoSheffield - Sheffield, UK. GoMAD - Madrid, Spain Go Valhalla - Valencia, Spain. \ud83c\uddfb\ud83c\uddf3 Go Wales User Group - Wales, UK. Golang \u041c\u043e\u0441\u043a\u0432\u0430 - Moscow, Russia. Golang \u041f\u0438\u0442\u0435\u0440 - Saint Petersburg, Russia. Golang \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a - Novosibirsk, Russia. Golang \u041a\u0430\u0437\u0430\u043d\u044c - Kazan, Russia. Go Yola - Yoshkar-Ola, Russia. Chisinau Golang Meetup - Chisinau, Moldova Munich Gophers - Munich, Germany Golang Paris - Paris, France. Golang Rennes - Rennes, France. Golang Lyon - Lyon, France. Golang Lille - Lille, France. Golang Marseille - Marseille, France. golang-pl - Poland. Gophers Katowice - Katowice, Poland. Golang Warsaw - Warsaw, Poland. G.L.U.G. Wroclaw - Wroclaw, Poland Golang User Group Tr\u00f3jmiasto - Gda\u0144sk/Gdynia/Sopot, Poland Go-Stockholm - Stockholm, Sweden. Go-Uppsala - Uppsala, Sweden. Go-Malm\u00f6 - Malm\u00f6, Sweden. golang-greece - Greece GolangIT - Italy. Go-Turkey - Turkey. Go Graz - Graz, Austria Meetup Belgium - Belgium Meetup Lausanne - Lausanne, Switzerland Meetup Zurich - Zurich, Switzerland Meetup Frankfurt - Frankfurt am Main, Germany Go-ningen - Groningen, The Netherlands Golang Ljubljana - Ljubljana, Slovenia Go Euregio - Maastricht, Netherlands; Li\u00e8ge/Hasselt, Belgium; Aachen, Germany Ukrainian Golang User Group - Kyiv, Ukraine L'viv Golang Group - L'viv, Ukraine Go SXB, Go! - Strasbourg, France Hannover Gophers Meetup - Hannover, Germany Golang N\u00fcrnberg - N\u00fcrnberg, Germany Helsinki Gophers - Helsinki, Finland Golang Cologne - Cologne/Bonn, Germany Golang Vilnius - Vilnius, Lithuania Meetup Surrey - Surrey, UK Golang Zagreb - Zagreb, Croatia Meetup Edinburgh - Edinburgh, UK M\u00fcnster Gophers - M\u00fcnster, Germany Vienna.go - Vienna Go User Group - Vienna, Austria Golang Bulgaria - Sofia, Bulgaria \ud83c\udde7\ud83c\uddec Go Oslo User Group - Oslo, Norway Gophers Linz - Linz, Austria Golang Rotterdam - Rotterdam, Netherlands Leipzig Gophers - Leipzig, Germany","title":"Europe"},{"location":"GoUserGroups/#north-america","text":"","title":"North America"},{"location":"GoUserGroups/#canada","text":"Edmonton Go Meetup - Edmonton AB, Canada. vangophers - Vancouver BC, Canada. Go Vancouver - Vancouver BC, Canada. GolangVan meetup - Vancouver BC, Canada. GolangVan - Vancouver BC, Canada. GoTO - Toronto ON, Canada. Ottawa Go - Ottawa ON, Canada. KW Go Developers - Waterloo, ON, Canada. Golang Montr\u00e9al - Montr\u00e9al, QC Golang Winnipeg - Winnipeg MB, Canada","title":"Canada"},{"location":"GoUserGroups/#dominican-republic","text":"Golang Dominicana - Rep\u00fablica Dominicana.","title":"Dominican Republic"},{"location":"GoUserGroups/#latin-america","text":"Golang-ES - Golang en Espa\u00f1ol.","title":"Latin America"},{"location":"GoUserGroups/#mexico","text":"Golang Monterrey - Monterrey, Mexico","title":"Mexico"},{"location":"GoUserGroups/#united-states","text":"Los-Angeles-Gophers - Los Angeles CA, USA. Westside GoLang Meetup - Los Angeles CA, USA. OC Gophers - Orange County CA, USA. SDGophers \u2014 San Diego CA, USA GoSF - San Francisco CA, USA. GoSV - San Mateo CA, USA. Boulder Gophers - Boulder CO, USA. Denver Go Language User Group - Denver CO, USA. DTC Go Meetup - Denver Tech Center CO, USA. Go-Miami - Miami FL, USA. Orlando Go Users - Orlando FL, USA Go-Users-Group-Atlanta - Atlanta GA, USA. chicagolang - Chicago IL, USA. Chicago Ultimate Golang - Chicago IL, USA. Boston Golang - Boston MA, USA. Framingham Go - Framingham MA, USA. GoMN - Minneapolis MN, USA. Buffalo GoLang Meetup Group - Buffalo NY, USA. New York Go Language Meetup - New York NY, USA. New Jersey Go Language Meetup - New Jersey NY, USA. Bowery Golang Meetup - New York NY, USA. GoLangPhilly - Philadelphia PA, USA. GoLangPhoenix - Phoenix AZ, USA. GoLangCleveland - Cleveland OH, USA. Cincinnati Golang Meetup - Cincinnati, OH, USA. EUG-Go - Eugene, OR, USA. PDX-Go - Portland, OR, USA. GoLancaster - Lancaster PA, USA. ATX-Golang - Austin TX, USA. GoDFW - Dallas TX, USA. Golang Houston - Houston TX, USA. Utah Golang (#UTGO) - Salt Lake City UT, USA. Golang-DC - Arlington VA, USA. Seattle Go Programmers - Seattle WA, USA. Go Charlotte Meetup - Charlotte NC, USA Triangle Golang - Raleigh NC, USA. Las Vegas Go Meetup - Las Vegas NV, USA. Ann Arbor Gophers - Ann Arbor MI, USA Baltimore Metro Area Golang - Baltimore MD, USA Nashville Gophers - Nashville TN, USA Omaha Gophers - Omaha NE, USA St Louis Go Meetup - St Louis, MO, USA","title":"United States"},{"location":"GoUserGroups/#oceania","text":"Canberra Gophers - Canberra, Australia. golang-sydney - Sydney, Australia. golang-nz - New Zealand. Golang Wellington - Wellington, New Zealand. Melbourne-Go-Nuts - Melbourne, Australia. Brisbane Gophers - Brisbane, Australia. Honolulu Go Users - Oahu, Hawaii","title":"Oceania"},{"location":"GoUserGroups/#south-america","text":"Golang Brasil - Brazil. Golang Rio de Janeiro - Rio de Janeiro, Brazil. Golang Recife - Recife, Pernambuco, Brazil. Golang Argentina - Argentina. Golang Medell\u00edn - Colombia. Golang Chile - Chile. Golang Panam\u00e1 - Panam\u00e1. Golang Lima - Per\u00fa","title":"South America"},{"location":"GoUsers/","text":"Companies currently using Go throughout the world Africa Analitica Innovare - Data Analytics and Artificial Intelligence company in Ghana. Jumia Food - Instant delivery platform. Global Performance Index (GPI) - Biggest Software automation company in Nigeria. Argentina Mercadolibre - Biggest E-Commerce platform in Latam. Wilab - Industrial IoT platform. Azerbaijan Engossip - Finding partners to practice speaking in English (Globally). Tural Asgar - Tural Asgar's personal blog. Australia Assembly Payments - github - Flexible payment solutions provider Atlassian AusOcean - Helping our oceans through the use of technology. BCZ - Free website creation platform. Buildkite - github Crewmojo - People management platform. Dgraph Labs - github Fleet Space Technologies Fly365 - github mx51 - github Massive Interactive MNF Group OneConfig - my.oneconfig.com GO1 SafetyCulture Sajari - github blog SocietyOne VERSENT Nine Publishing (formerly known as Fairfax Media) Austria Digital City Solutions Symflower , github Bangladesh AppsCode Ltd. (BD subsidiary of AppsCode Inc.) - facebook , github , twitter Furqan Software Telenor Health (A health service company) built USSD server with go Pathao (A ride sharing company) GAAN Restra ELO (Embedded Logic Operations) Belarus Cactussoft - github BykovSoft - github SmartPro Spiral Scout - github Intelligent Speaker - proprietary fremium text-to-speech browser extension Belgium IN4IT Be-Mobile Elimity Factry - github nexuzhealth OTA Insight Pronovix - github Showpad UZ Leuven KU Leuven Twixl media dploy.ai (MLOps platform | Belgium & remote ) Brazil 99 Taxis - github Acesso - github AStar - github Astrolink - github B2W - github Beauty Date Bemobi - linkedin Benef\u00edcio F\u00e1cil - forums Bexs - an forex Bank BoaCompra Catho - github CloudWalk - github - an open payment platform Coderockr Codenation Compuf\u00e1cil Conductor Conta Azul - github Dafiti - github Delivery Much - github DAXPER - github Dinamize - github Dito - github Dropadev Easy Carros Emprego Ligado Estrat\u00e9gia Concursos - github Eventials - github Everymind Finan\u00e7as 360 Fliper Fluid FourTwo - github GissOnline Globo.com - github article Grupo Bandeirantes Hurb - github Hubcash - github iFood - github In Loco - github Involves - github IQ Escolhas Inteligentes - github Jexia - github Jusbrasil - github Koli - github Levpay - github Loggi - github M4U - github MadeiraMadeira - github Magazine Luiza - github Mendelics - github Mercado Livre - github Meu Astro Moip Pagamentos MundiPagg - github Neoway Business Solutions - github Newcore Nic.br - github Nuveo - github Olist - github OLX Brasil - github Open Vista Global OPLEN Pagar.me Pagro PagSeguro PicPay Pismo Planrockr Pol\u00edcia Militar do Estado de Minas Gerais Rednaxel - github Resultados Digitais Reviewr - github Riocard Tecnologia da Informa\u00e7\u00e3o Sensedia Sage Brasil ServiceNet SiBBr.gov.br - github SumUp Stone Pagamentos - github Studio Sol - github Synchro TOTVS Ulife - github Universo Online - github VivaReal - github Walmart Zup Innovation - an open source tool that allows you to create, store and share automations Fundamentei Bulgaria clouWay - github SumUp Gtmhub Canada 1Password ActiveState - blog - github Apex Bold Commerce ChainSafe Systems - github district m - jobs Greenfield Labs / Zenreach - jobs Go2Mobi - HN Hootsuite Index Exchange - jobs Insights.gg - jobs Kira Systems \u2014 jobs Klei Entertainment - jobs KOHO - jobs League - jobs Lendesk - jobs LoginRadius - Blog - Github Manifold NV Digital Obkio Pressly - github Sendwithus SweetIQ - jobs ThinkSquare Tidal Migrations Tulip - jobs Wattpad 500px - blog - github Qlik - jobs - github Chile Prey - blog - github Webdox China Baidu Alibaba Xiaomi Tencent 163yun - github - Netease Public Cloud BaishanCloud ByteDance Ciprun CS2C - github deepin - github - a linux distribution aiming to provide an elegant desktop EasyAR Feiyu FunPlus - We Create Leading Innovative and Fun Experiences Worldwide FutureBots iDCOS CloudBoot Inke - the most popular broadcast platform Kidswant KLOOK MegaEase Megvii Mili MobiExchanger - Mobile Internet advertising company Momenta MZD - github OPPO Qiniu - github - Qiniu builds and operates one of the largest public cloud services in China, with millions of code written in Go since 2011. Rainbond - github - Rainbond is an application centric PaaS SenseTime - a global leading A.I. company Teambition - github TiDB - tweet: Golang in TiDB - github - TiDB is a distributed HTAP database compatible with the MySQL protocol Udesk - github XiaoChuan Xiaoying Xunlei YeePay Yeeuu Youmi - a global leading comprehensive mobile internet enterprise cshome DiDi meicai - Catering supply chain service provider 360 Croatia Crossvallia CROZ - github GoodCode - github Kraken Leapbit minus5 - github Nivas - github Rentlio - github Sartura - github Syntio - github Colombia Wawandco - github Denmark SYBO Games Vivino Estonia Wallester - github Finland Alma Media - Media/Publishing company. Twitter France Accenta Algolia Batch.com Containo.us Crisp cr\u00e8me de la cr\u00e8me Digikong Equisense Eleven Labs Fabriks HAProxy Technologies - github Heetch - github IoThings IRI France Leboncoin - github - blog LibMed Molotov TV Objenious OneStock Orange ProcessOne PSA - github Rive Scaleway - github - blog Sendinblue Sfeir Synthesio Teads.tv TF1 Ulule - github Veepee - github - blog Zenly teckinside Germany B\u00fcrkert Cloudogu - github Doozer - github Centrifuge - github Delivery Hero EGYM - Blog ESONO AG FastBill Fraugster Friendsurance fromAtoB - blog HaCon Ingenieurgesellschaft mbH HelloFresh - github Herdius - github HolidayCheck - github - [Blog] IDAGIO Industrial-DevOps - gitlab JustWatch - HN KI Labs loodse - github limango Meplato Naga Virtual Native Instruments - github networkteam GmbH - github OptioPay ownCloud - github Posteo - Green, secure, ad-free email service PubNative - github simplesurance Sixt Spreadshirt solarisBank SoundCloud - blog SumUp Streetspotr - blog - tweet Tourlane trivago N.V. - blog - github Weaveworks Zalando SE - blog Onefootball Sudokoin Greece Beat Skroutz BestPrice Inaccess Hong Kong PassKit - github Lalamove Sandbox VR Hungary Pronovix - github India AirCTO AmberStudent Betacraft BookMyShow CRED C42 Engineering Cralina CodeIgnition - twitter Company 0 Cloudsdeal Continuum Managed Solutions Crowdfire Tasker Project Management Tool CoderCV.com Freelancer Marketplace DeepSource - Automated code review tool for developers Dunzo Euphoros Limited Exotel - website Fastah (Blackbuck Computing) FStack (Golang Consulting) Fynd GeekTrust GetMega Gloop Gojek Gradeup Guavus Halodoc Hasura Hotstar Instamojo Ithaka Jabong Josh Software JusTickets - built with Go Kayako LiteBreeze MakeMyTrip Mindbowser Mindship Nazara Games Noticeboard teckinside Onet OpenEBS - Containerized,opensource storage for containers Pincode.app - Local Social Network Propebbles Provlem.com PubMatic - AdTech company Qube Cinema Qwentic - A Golang specialized software development company Qwinix RevvSales Rapyuta Robotics Razorpay RenoApp Ruhi handblock Printers Sahaj Software Solutions Saltside Technologies AB Saven Technologies Ltd Sendinblue SellerApp Sezzle Siminars Singulerp SocialCops - engineering page SoStronk Squadcast - A Site Reliability Engineering (SRE) Product company Synerzip Tarkalabs Techequity Technologies ThoughtBox Online Services Pvt Ltd - A FinTech Solution Provider ThoughtWorks Unbxd UserCV.com Freelancer Marketplace Vernacular.ai WazirX Zomato Zerodha ZopSmart Indonesia 123 Berita Auditsi Executive Recruitment Services Amartha Alphamor Bareksa Bhinneka BlockchainZoo Brankas Brodo Bukalapak CICIL.CO.ID Codemi Learning Management System DigiAset EACIIT Gilkor GoApotik GOJEK Graboards Guteninc Halodoc HappyFresh Indonesia Ice House Corp Jejak Techno Kelir.tv Koinworks - P2P Lending Platform. Korina Kudo kumparan Kurio Lazada LinkAja LionJobs Matahari Mall Magicsoft Asia Systems Medcampus Michael Page Indonesia Midtrans Payment Gateway meTube.id Minyak Telon Nodeflux Pinjam Indonesia - FinTech Pintu Magang - Jobs for Student President University Qasico Teknologi Indonesia Qasir.id Qiscus QUPAS.ID Ralali - B2B Marketplace Platform Raydar RebelWorks RedtreeMobile Reservasi Rimbun Job Agency RSU Anwar Medika Ruangguru Sorabel by Sale Stock SAP Indonesia Tokopedia Tech in Asia Indonesia Valutac Tugujatim Tugumalang Iraq eSITE Iran Kamva \u2013 Kamva eCommerce Platform github Idpay - bank gateways and a stable billing service in order to connect payments. IranBooking - Online booking system for hotels in Iran QuizOfKings - Online trivia game among the most popular mobile game in iran ManaGroup - github Iranian Payment And Traveling Solution \ud83d\udcb8\u2705\ud83d\ude80 Emji - Emji is a new refined social networking platform aimed at simplicity and connectivity Clickyab - Clickyab is diffrent online advertising & digital media agency Sazito - Sazito is multi-functional tools to build and manage your online store. AlAlam \u2013 AlAlam news network TV channel Aparat \u2013 Most popular video sharing platform in Iran Asan Pardakht \u2013 Pay Smarter. Pay Simpler. Pay Anywhere! SabzCity - github Bahamta - Fintech company. 5 th dimension - Advertising Agency. Telmaperfume - Promotional Gifts. Giftsbox - Promotional Mothers Day Gifts. Snapp - Snapp is a web and mobile ride-hailing platform in Iran Parsaspace - Parsaspace is an iranian storage as a service Cafe Bazaar - Iranian Android marketplace Alfa Movie - Best download center platform in Iran. Alibaba Travels Co. - (Github) - Iranian online travel agency Ireland EXADS Intercom Teamwork - blog Nitro - We make document productivity easy, powerful, affordable, and available to all. Israel 353Solutions AppsFlyer Aqua Security BigPanda Bottomline Technologies Bringg Check Point Cloud Invent Cloudinary CTERA Cyren Dragontail Systems Domino's Pizza Elastifile Ltd Ensilo EyeSight Fiverr Firedome Gett HERE Mobility Intuit ironSource Jewish Interactive JFrog - github Firedome - github Iguazio - Data science and analytics PaaS v3io - Iguazio open source nuclio - Nuclio Serverless project JobJob LivePerson Make My Day Medtronic Mathematic.ai Nexar Nexite Panoply playtech Peer5 PlanGrid Proofpoint Protected Media PUB+ PushApps Rimoto Rounds SentinelOne sigmadots Soluto SimilarWeb spot.im Stratoscale - github StreamRail TechedUp - ( Blog ) Tikal Tufin Twistlock uponit Yodas Yotpo ZipRecruiter MinuteMedia Italy Oxequa - ( Realize , Grace ) Qurami - github Sorint.lab - github Tren\u00ect! - ( FB post ) \u2013 Most popular mobile app for Italian trains schedules Develer Qlik - jobs Wellnet Pixartprinting Japan 3-shake, Inc. ACALL, Inc. and factory, Inc. ANDPAD Inc. Appify Technologies, Inc. gqlgo - GraphQL Go organization aptpod, Inc. AtCoder, Inc. Atrae, Inc. Axsh, Co. LiquidMetal is a web service and a hardware appliance that together bring continuous automated testing to network system operation. Azoop Co., Ltd. Baseconnect, Inc. BASE BANK, Inc. Belong Inc. Bengo4.com,Inc. CloudSign Cloud Ace, Inc. Clover Lab.,inc. Connehito Inc. Cookpad Inc. CyberAgent, Inc. PipeCD - Continuous Delivery for Declarative Kubernetes, Serverless and Infrastructure Applications ecs-formation - ecs-formation is a tool for defining several Docker continers and clusters on Amazon EC2 Container Service(ECS) plasma - plasma is event push middleware by using gRPC stream Cybozu - github DeNA Co.,Ltd. D.A.Consortium Inc. DIP Corporation. Dr.'s Prime, Inc. D2C Inc. Eichiii, Inc. enish,Inc. eureka feedtailor Fenrir Finatext Ltd. Fixpoint, Inc. Kompira cloud - Automation service for system operator Flatt - Live Commerce Application FreakOut, Inc. freee K.K. Fringe81 Fusic Co., Ltd. Future Architect Vuls - Vulnerability scanner for Linux/FreeBSD, agentless, written in Go Fuller, Inc. Fringe81 Co., Ltd. Gaudiy, Inc. GameWith, Inc. Gemcook, Inc. GMO Pepabo, Inc. Graffer, Inc. Groovenauts, Inc. Gunosy Inc. Gurunavi, Inc. Hatena Mackerel - Monitoring as a Service ( github ) HEARTBEATS happo-agent - Yet another Nagios nrpe HENNGE K.K. hey, Inc. HiCustomer - a Customer Success management platform Howtelevision, Inc. HRBrain, Inc. Internet Initiative Japan Inc. istyle Inc. JapanTaxi Co.,Ltd. JX Press Corporation Kanmu, Inc. KAYAC Inc. - github KLab Inc. KRPEO Kyash Inc LayerX, Inc Link-U Inc. Linkbal Inc. LINE Liquid Inc. Livesense Inc. - github LOB, Inc. - github M3 Makuake, Inc. mediba Mercari, Inc. gaurun - Gaurun is the general push notification server in Go. widebullet - Widebullet is an API gateway with JSON-RPC. go-httpdoc - Golang package for generating API documentation from httptest. Datastore - (AE|Cloud) Datastore Wrapper. yo - yo is a command-line tool to generate Go code for Google Cloud Spanner. go-dnscache - Go package for caching DNS lookup results in memory. grpc-http-proxy - A reverse proxy server which translate JSON HTTP requests to gRPC calls based on protoreflect. go-httpstats - Go package for reporting HTTP stats. certificate-expiry-monitor-controller - Certificate Expiry Monitor Controller monitors the expiration of TLS certificates used in Ingress. tfnotify - A CLI command to parse Terraform execution result and notify it to GitHub. imageflux-cli - Imageflux Client written in Go. Merpay, Inc. MNES, Inc. Miniascape Co., Ltd. Minna Bank, Ltd. Mirrativ, Inc. Mobingi - github Mokelab - github Momentum Inc. Money Forward, Inc. MF KESSAI, Inc. Nagisa Inc. neuet, Inc. Nikkei Inc. Nulab - github omeroid OPTiM Corporation Origami Inc. PERSOL CAREER CO., LTD. PicApp Inc. pixiv Inc. Preferred Networks SensorBee - Lightweight streaming processing engine for IoT Quipper Ltd. Rakuten Inc. - Largest e-commerce, online bank, and credit card (by transaction value) company in Japan with many smaller online services and subsidiaries. READYFOR INC. Repro Inc. Retail AI, Inc. Retty Inc. redish Inc. - Message delivery service on AWS Lambda SAKURA Internet Inc. - github Arukas - github - Docker Container Hosting Web Accelerator sakura.io Sharedine Showcase Gig Inc. SMART EDUCATION, Ltd. KitS Artpop! SmartShopping, Inc. SODA inc. - SNKRDUNK is a Japan\u2019s No.1 Sneaker & Streetwear C2C Marketplace. Souzoh, Inc. Spectra, Inc. Speee, Inc. SYN, Inc. Chompy TOPGATE Toreta, Inc. UPSIDER, Inc. VELTRA Corporation Video Market Corporation Voicy, Inc. VOYAGE GROUP VRize, Inc. WACUL, Inc. Wantedly, Inc. github WealthPark, Inc. XSHELL Isaax IoTit Flashing tool Yahoo! JAPAN Corporation Vald - A highly scalable distributed fast approximate nearest neighbor dense vector search engine. NGTD - NGTD provides serving function for NGT. gongt - NGT Go client library Athenz - Open source platform for X.509 certificate based service authentication and fine grained access control in dynamic infrastructures Garm - Kubernetes authorization webhook (SubjectAccessReview API) server for Athenz Athenz Authorizer - Athenz policy management library for golang Athenz Client Sidecar - An implementation of Kubernetes sidecar container to provide a common interface to retrieve authentication and authorization credential from Athenz server. Athenz Authorization Proxy - An implementation of Kubernetes sidecar container to provide a common interface for API endpoint authentication and authorization. It caches the policies from Athenz, and provides a reverse proxy interface to control access on specific URL endpoints. Yappli, Inc. Kazakhstan Kolesa LLC - microservices for classified ads websites and mobile applications backend ( Kolesa , Krisha , Market ) Korea (South) ComTrue Technologies - Network Packet Analyzer Digitalidea - inhouse tool for VFX FlyHigh - Information Security Solution KonaCard - Payment Service Lazypic - Contents creation and support Solution NHN Entertainment Quicket - Image Proxy, Push, Messenger Toast Cloud - Public Cloud Service Wemakeprice - CRM Solution Gabia - Server monitoring solution BankSalad - Personal Finance Management Service Lithuania DATA-DOG Malaysia MHub Revenue Monster iflix - Free and Subscription Video On Demand Service AirAsia Mexico Conekta - Payment Service Segundamano Entropy - Ecommerce Marketing Optimization Platform. Credijusto - Financial Services Tredicom - B2B, EDI & Ecommerce Services Middle-East ThoughtBox Technologies - A FinTech Solution Provider Moldova Emphatic Spark Morocco Avito Nepal Leapfrog Technology Netherlands Aan Zee BloomReach bol.com booking.com Bubble Shooter Cloudbear - github Dataswimmer Datumprikker.nl FindHotel Housing Anywhere ISAAC Jexia - github Kickstox Kopano - github localsensor MessageBird - github Nerdalize - github Nextail NPO - github nx'change Pocket Media - company website , github Poki - company website , github Pointer Brand Protection Sensys Gatso Group Sentia The Things Network - github Travix International - github Ultraware Wercker - github Xebia - github Yonego New Zealand Hapara - github Vend - github Weta Digital - Slides Spalk Movio - article Aeroqual Jasper - github Norway Aller media Amedia Arcane Crypto Avinor Bouvet Bridge Technologies Bulder Bank Capra Consulting Conclude Disruptive Technologies DNB Finn.no Futurehome Jottacloud Just Technologies Laerdal Medical Neatframe No Isolation Northern.tech Norwegian Labour and Welfare Administration (NAV) Nurofy Oslo kommune Oslo Origo Owners Room Payr Pexip Pioner Labs reMarkable Rendra Sanity.io Searis Shortcut Sportradar Sysco Tapad Telenor Telia Teston , part of UserTesting TIDAL Unacast Vipps Zeipt Zendera Oman Rihal - Designed for Data Pakistan Datum Brain - github - AI, data science, big data analytics and IoT company TalkShot - Social Networking based on Live events Philippines 22 Delta Labs - github - AI, data science, software and product development company EngageSPARK Poland OLX - blog allegro - blog - biggest polish e-commerce platform hostit.pl - blog Brainhub - blog Cardinal Cryptography - blockchain, DLT, and software development CloudThing - IoT cloud platform HolidayCheck Husar Labs - software development company RnDity - software and hardware development company Grey Wizard - cybersecurity company podioom - With podioom we create bonds that support those who care and who want to stay in shape! beFOGG - platform that will take tourism to the next level Miquido - Mobile-first software development company Brainly - blog limango SoftKraft - software development company Portugal OLX - blog AppGeneration Lmit Uniplaces Bright Pixel Observador Worten Romania Primal Skill - software development company focusing on web, API development with offices in Romania Trisoft - software development company with offices in San Francisco and Romania JobDone - Freelancer Marketplace CrowdStrike - software development company with offices in US, UK, Romania and Australia Russia 2GIS Acronis avito.ru citilink.ru Gett ITooLabs Izvestia iSpring Mail.ru mc\u00b2 software OZON.ru Positive Technologies PostmanQ - High performance Mail Transfer Agent (MTA) ThetaPad Tinkoff Tochka TRY.FIT VK.COM (Part of our Go services: https://www.youtube.com/watch?v=Llmpfv8PIt4 ) Quadcode Saudi Arabia Tamkeen Technologies Serbia Seven Bridges - github Singapore OKiT247 - Frontend analytics and web content delivery. Rate Singapore Power Eatigo ekeynow Slovenia Visionect d.o.o. Niteo Koofr South Africa Luno - github Span Digital - github Southeast Asia Dwarves Foundation - github engageSPARK - HN Grab HealthCo Pocketmath Tokopedia TablePlus Carousell Spain alea soluciones Bugfender Cabify - github , twitter jobandtalent Ximdex puzzlopia - github binomads Schibsted Mediasmart.io - twitter Mavrix - github Typeform source{d} Nayar Systems Stayforlong Hosco Sri Lanka Xiges.io - Low-code Industrial IoT Platform PickMe - Universal Hailing Platform Mybudget - Financial Health Management System Moneta - Sri Lankans' Best Lifestyle App TryFix - Go Platform Developers Circles.Life - Building Telecommunication Provider Platform Running in Singapore Sweden Abios - The world's most trusted esports API. Booli Digital Route Greta Ingrid Kiliaro Min Doktor Northvolt - The Future of Energy Qlik - jobs Slagkryssaren Studentlitteratur TV4 - blog Switzerland AgFlow SA Aleph Zero - blockchain platform Centralway Numbrs AG HolidayCheck Magazine zum Globus AG - github Perron2 GmbH Proton Technologies AG Ricardo Taiwan QNAP Systems, Inc. ProphetStor Data Services, Inc. Duotify Inc. (\u591a\u5947\u6578\u4f4d\u5275\u610f\u6709\u9650\u516c\u53f8) Thailand 3DS Interactive Appsynth Asia Beebber botio AIS - Top 3 of telecommunication company in Thailand. Computerlogy Dcenbase Drone Academy Thailand DTAC - Top 3 of telecommunication company in Thailand. Donuts Bangkok Fastwork - Freelance platform in Thailand and Indonesia. Findx Solution Finnomena Gurusquare hytexts IBM Solutions Delivery Imatthio - Cloud Service Platform Development in Thailand Insightera KBTG : KASIKORN Business-Technology Group - A group of tech companies of Kasikorn Bank Group. Top 3 in banking services in Thailand. KTB : Krung Thai Bank - Top 10 in banking services in Thailand. LINE Company (Thailand) - Most popular message platform in Thailand. LINE MAN Wongnai NEXPIE Odd-e Thailand ODDS - A group of people that belive tha software development should be fun. And we belive in continues improvement. Omise - Payment gateway for Thailand. Onedaycat Paybox Paiduaykanmai Fillgoods Que Q Sellsuki SIX network - Financial Services SPRINT3r T.N. Incorporation - Core banking tranformation company. Tencent Thailand THiNKNET ThoughtWorks Thailand True E-Logistics TRUE - Top 3 telecommunication company in Thailand. WISESIGHT - Social media data analysis, Previously ThothZocial Xcellence Corporation Zanroo Zarewoft Turkey icibot Frigbo Hepiyo Admongrel Insider Mentornity, Inc. - Backend API Mos Teknoloji Optimum Yaz\u0131l\u0131m Peak Games - github - Processing billions of events per day. put.io - github MasomoGaming - github - Online HeadBall2 Game Server by Go LocRep - github - DevOps OSS Artifact Manager. Azure-DevOps - CI/CD and Scrum Trendyol.com - github - Backend APIs Sir Studios Ukraine Agilites ElifTech iLighten QArea Diligences ElementalsWeb monobank United Arab Emirates Milenow United Kingdom Acuris Admongrel A1comms Badoo - github BBC - public source BBC Worldwide - source Bedful Booking System Belua bet365 - github Bubble Student Bud comnoco Countingup - github Cytora - github Deliveroo - github DeviseOps Form3 - github Fortifi - github Awesome Shit You Can Buy Freelance Marketplace GOV.UK - slides github blog Geckoboard graze - github HM Treasury, UK.gov - github Intern Avenue iZettle - github Lush Digital - GitHub Micro - github Monzo - github , blog New Bamboo - blog News UK oyato cloud - github Paymentsense - Data team Pusher - github blog Ravelin Reactive Markets Resource Guru - blog Restorepoint Ryanair - source Sainsbury's Sky Betting & Gaming Skyscanner Songkick StorageOS Synthace - github thinkmoney Tyk - github Utility Warehouse Weaveworks XTX Markets - github YouView TV Ltd Ernest.io Landoop - github , blog Gram Games 90% of the backend and internal tools implemented with Go. Using it in production since 2015. WhatsOnChain - Backend APIs for Blockchain Explorer United States Google - the core Go team work at Google. Most uses of Go at Google are confidential. Kubernetes The YouTube team have released their MySQL scaling infrastructure as open source software 1 , 2 , 3 dl.google.com is written in Go: mailing list discussion / OSCON slides Flywheel: Google's Data Compression Proxy for the Mobile Web , blog post on the rewrite A lot of scripts that earlier were written in Sawzall Seesaw load balancer - github repo Other known uses include the Turkey Doodle (2011) , the Santa Tracker (2012) , writing map/reduce jobs , Jam With Chrome , the CubeSlam Chrome Experiment , Google Helpouts, Doorman, Global Distributed Client Side Rate Limiting pprof command line tool pi.delivery API for Pi Day 2019 6Wunderkinder - video 99designs - golang-nuts Abot - github ActiveState - github Acquia - blog adeven - blog Adobe SEMRush Pricing Adori Labs AeroFS - github , blog Aerospike - blog Airbrake Airware - eng blog , github Alaska Airlines - github Amazon Web Services - github github American Express - github Apcera - blog Apeiron Data Systems Appbase Append Media Appoxy - twitter AppsCode Inc. - github , twitter Arista Networks - twitter Ardan Studios/Labs - twitter Aruba Networks - golang-nuts Ascendant Compliance Manager - Batch process millions of security trades per day. Assembled - github AT&T - Github and gopkgs repository Atatus - blog Avocet - blog Awake Networks Axioms - blog Basecamp - blog Beachfront Media article Beam - github Beehively - Presentation Betable - talk #1 , talk #2 Benzinga - pro , jobs BigCommerce - blog , github Bitbucket - source bitly - github blog Blippar Blink Analytics - github Bolt bol.com - github blog botvs.com Booking.com - source Bread Finance Bridgevine - github Brightcove Bringhub BuySellAds BuzzFeed - talk Byndr ByteGain Canonical - source , email CBS Interactive - github Capital One - blog Caprinova Carmatec Carbon Games - source CB Insights - source CenturyLink - github Channel Chatlio Chubbs Solutions - Progressive Tech (APIs). Cisco - github CircleCI Circonus Clearblade - github Clever - github blog ClickAway CloudFlare - blog article Cloud Foundry - blog github CloudWalk - github clypd - blog Cockroach Labs - blog github CodeShip - blog Comcast - github Conformal Systems - github Copper.IO - blog CoreOS - github , blog Couchbase - github Crashlytics - tweet Crowdstrike - blog Cupcake - tweet github CURT Manufacturing - github Cycle.io CustomerIO - tweet Dailymotion - github , blog Datadog - blog Datascale DeferPanic - github Dell Diggernaut - Data mining and extraction service DigitalOcean - blog Discovery - Video streaming. Disney - Gophercon 2017 lightning talk Disqus - blog , blog DNSimple - blog Docker - docker [slides] domainr - tweet Dollar Shave Club - blog DotDashPay - github DoubleDutch ( http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go ) Doximity DramaFever - github DreamList drone.io - post github Dropbox - blog , github eBay - github , meetup Economist - github Embedly - blog EMC Cloud Services - tweet Enova - github , blog ERNIT - Medium EverQuote Everything.me - blog Expedia - github Facebook - github , blog FieldEngineer Factom - github Fanatics - github Fast - github , twitter ForexSignals Fastly - blog , twitter - The only real-time content delivery network designed to seamlessly integrate with your development stack. Foize - github Flipboard - source (job post) FLXOne - blog Fullstory - blog FuboTV Gaikai (Playstation NOW) Gatherer - twitter Gamegos Gametime Gemfury General Electric Software - tweet , jobs Gengo - blog Getty Images - tweet tweet GitHub - blog post GitLab - gitaly GlobalSign Granify - blog GrayMeta, Inc. Grovo Glympse Hailo - slides Happy Pancake - blog HashiCorp - github HER Heroku - Go blog post , news Hewlett Packard Enterprise - Github Home24 - github Honeywell Hooklift - github HP HyperDev - blog post IBM - Clampify , i18n4go , libsecurity Igneous Imagefly Imgix - StackShare , job posting Imgur - github INdigital - APIs and Microservices for Public Safety. InfluxData - blog github Instela Intel - snap telemetry framework , ciao cloud orchestration , Clear Containers identakid.com Invoiced Ionic Security IPinfo.io Iron.io - source blog:\"30 servers to 2\" blog:\"2 years of production Go\" ISDC - InsideSales.com iTechArt Jack Henry and Associates JelloLabs Jenkins X - GitHub Jimdo - tweet github Jive - github Jive Software - github JPMorgan Chase - github Karma - blog Kayako - twitter Keybase.io - github Kohl's - github Kingsoft - github Chamoji - augmented reality K&J Translations Kochava Koding - quora LabStack - github , website Laserlike LaunchDarkly - github , golang sdk Lean Labs - git release Liftoff Lincoln Loop - blog (as part of https://botbot.me/ , #go-nuts IRC logging) Linc Global LiveRamp Lob LocalRaces - website LogPacker - website Lovoo - github Luckie & Company Luxor Lyft - github Lytics - CDP that automates 1:1 marketing Magento Magic Leap - twitter Maldive MalwareBytes - blog Mastercard - github Mattel - Mattel uses go on its backend for APIs and IOT data processing. Mattermost - github - Open source, private cloud Slack-alternative MaxCDN - blog Medium - blog MediaMath - github , youtube Mesosphere - github Meta Search - twitter Microcosm - slides Mindbowser Minio - github blog - Object Storage compatible with Amazon S3 API Modcloth - github Moovweb - github source MongoDB - blog Monsoon Commerce - blog Mozilla - github MROffice - source Namely - blog NetApp - github Netflix - github , blog New Relic - HN New York Times - source News Corp Newspaper - source Nextdoor - source Next Jump - Next Jump the company that manages the perks platform Perks at Work uses Go in it's backend. NextUser Nexway Nike - github Ninchat - twitter Nordstrom - github Northwestern Mutual - github Novartis - g+ post Nutanix Odoscope - twitter , job Ookma-Kyi - Open Source Implementation of the now defunct Battlemail MMO Github Twitter Ooyala - github Opendoor - HN OpenShift - blog Oracle - Wercker is a Automation platform for Kubernetes & Microservice Deployments Orijtech - github Ottemo - Managed Commerce Platform written in golang Outdoorsy Outreach OvrClk - github Oyster Books - blog Pachyderm.io - github Packet - github Pagoda Box/Nanopack - github Pantheon - blog Parse.com - blog Partner Fusion PayPal.com - github Percona - blog pet.io Pilosa - github Pinshape - job Pinterest - github Pivotal - Cloud Foundry and Cloud Foundry Incubator PocketList Points.com - Points Loyalty Wallet pool.ntp.org - blog status Poptip - blog , job posting Pressly - github , product Procore - github Pronovix - blog , github , product Public Good Corp - meetup PullRequest - meetup Quoori - github Rackspace - github RailsCarma Raintank - blog Rakuten Marketing Recime RapidLoop - product Rawstream - tweets Raygun - blog RealBuildPro - product Reddit - AMA post , github Red Ventures ReelDx - medvid.io , twitter Remember The Milk Remind101 - github , blog Remitly Rendered :Text - blog Replicated Repustate ReverbNation ReviewTrackers - HN Revolving Cow Riot Games - talk Room for More Rounds - blog RueBaRue Runscope - blog Sagan Systems - HN Samsara - blog Secret - blog SecurityScorecard - github blog Segment - github SendGrid - blog SendHub - source (shipbuilder PaaS) SessionM - HN Shopify tweet Showyou source Shutterfly SignalFx - blog Slack - blog SlingTV SmartyStreets - github , blog SmugMug - blog Skimlinks blog Social Blade Sorint.US - github SoundCloud - blog SoundHound Sourcegraph - talk , github source{d} - github , twitter , blog Space Monkey - blog SpaceX - reddit SpeedyTV Sphere Software - github Splice - tweet , blog , blog Springer - tweet Squadcast Square - blog StackEngine - blog Stack Exchange - blog , github , website Staffjoy - blog StatHat - Go blog post Steals.com blog SteelSeries - blog StorReduce Stream - github Stripe - github SumoLogic - github SuperHuman - HN SyndicatePro - source Tamber - blog Tapglue Tapjoy - blog , github Target - blog Teespring Telit IoT Portal TelTech - github Tendermint - github TF2Stadium - github , blog TGen - github , blog The Home Depot The Plant - Qortex , QoR Thisissoon - github Thomson Reuters Eikon - github source , video thoughtbot - blog github Thumbtack - Go Hercule blog post TIBCO Ticketmaster - github Timehop - blog TinkerCad Toggl - blog Torbit - blog Total Care Auto Transloadit - blog Treetop Commons, NobleHour - tweet Trippple Trisoft - software development company with offices in San Francisco and Romania Tumblr - github source Tune TurboBytes - github , tweet Twitch - blog Twitter - blog TweetQureet - blog Uber - blog github tweet Ulele - tweet Umbel - tweet Underarmour - github Undisclosed.ch - github Upskill - github Verifone Vertamedia - github VerveMobile VHSCast Vimeo - blog , github VividCortex - blog , github VMware - github VSCO - blog post Vungle - shared libs, OpenRTB, VAST, etc Walmart Labs - github Wasabi Weave Weaveworks Western Digital - github Wercker - github Whim - meetup , tweet Wikia Wireless Registry - github Workiva - github WP Engine - github Verizon Media / Yahoo - github Yandex - blog Yik Yak - tweet Zalando - github Zapier - github Zenoss - github Zenreach - jobs ZITEC Zumba - github Zynga - github Tipe - github 4wardtech Inc Vietnam BeGroup ChoTot Money Forward Vietnam ViralWorks WeTrust VinID See also Success Stories See also Wikipedia category and Wikidata and Wikidata for free and open-source software only","title":"GoUsers"},{"location":"GoUsers/#companies-currently-using-go-throughout-the-world","text":"","title":"Companies currently using Go throughout the world"},{"location":"GoUsers/#africa","text":"Analitica Innovare - Data Analytics and Artificial Intelligence company in Ghana. Jumia Food - Instant delivery platform. Global Performance Index (GPI) - Biggest Software automation company in Nigeria.","title":"Africa"},{"location":"GoUsers/#argentina","text":"Mercadolibre - Biggest E-Commerce platform in Latam. Wilab - Industrial IoT platform.","title":"Argentina"},{"location":"GoUsers/#azerbaijan","text":"Engossip - Finding partners to practice speaking in English (Globally). Tural Asgar - Tural Asgar's personal blog.","title":"Azerbaijan"},{"location":"GoUsers/#australia","text":"Assembly Payments - github - Flexible payment solutions provider Atlassian AusOcean - Helping our oceans through the use of technology. BCZ - Free website creation platform. Buildkite - github Crewmojo - People management platform. Dgraph Labs - github Fleet Space Technologies Fly365 - github mx51 - github Massive Interactive MNF Group OneConfig - my.oneconfig.com GO1 SafetyCulture Sajari - github blog SocietyOne VERSENT Nine Publishing (formerly known as Fairfax Media)","title":"Australia"},{"location":"GoUsers/#austria","text":"Digital City Solutions Symflower , github","title":"Austria"},{"location":"GoUsers/#bangladesh","text":"AppsCode Ltd. (BD subsidiary of AppsCode Inc.) - facebook , github , twitter Furqan Software Telenor Health (A health service company) built USSD server with go Pathao (A ride sharing company) GAAN Restra ELO (Embedded Logic Operations)","title":"Bangladesh"},{"location":"GoUsers/#belarus","text":"Cactussoft - github BykovSoft - github SmartPro Spiral Scout - github Intelligent Speaker - proprietary fremium text-to-speech browser extension","title":"Belarus"},{"location":"GoUsers/#belgium","text":"IN4IT Be-Mobile Elimity Factry - github nexuzhealth OTA Insight Pronovix - github Showpad UZ Leuven KU Leuven Twixl media dploy.ai (MLOps platform | Belgium & remote )","title":"Belgium"},{"location":"GoUsers/#brazil","text":"99 Taxis - github Acesso - github AStar - github Astrolink - github B2W - github Beauty Date Bemobi - linkedin Benef\u00edcio F\u00e1cil - forums Bexs - an forex Bank BoaCompra Catho - github CloudWalk - github - an open payment platform Coderockr Codenation Compuf\u00e1cil Conductor Conta Azul - github Dafiti - github Delivery Much - github DAXPER - github Dinamize - github Dito - github Dropadev Easy Carros Emprego Ligado Estrat\u00e9gia Concursos - github Eventials - github Everymind Finan\u00e7as 360 Fliper Fluid FourTwo - github GissOnline Globo.com - github article Grupo Bandeirantes Hurb - github Hubcash - github iFood - github In Loco - github Involves - github IQ Escolhas Inteligentes - github Jexia - github Jusbrasil - github Koli - github Levpay - github Loggi - github M4U - github MadeiraMadeira - github Magazine Luiza - github Mendelics - github Mercado Livre - github Meu Astro Moip Pagamentos MundiPagg - github Neoway Business Solutions - github Newcore Nic.br - github Nuveo - github Olist - github OLX Brasil - github Open Vista Global OPLEN Pagar.me Pagro PagSeguro PicPay Pismo Planrockr Pol\u00edcia Militar do Estado de Minas Gerais Rednaxel - github Resultados Digitais Reviewr - github Riocard Tecnologia da Informa\u00e7\u00e3o Sensedia Sage Brasil ServiceNet SiBBr.gov.br - github SumUp Stone Pagamentos - github Studio Sol - github Synchro TOTVS Ulife - github Universo Online - github VivaReal - github Walmart Zup Innovation - an open source tool that allows you to create, store and share automations Fundamentei","title":"Brazil"},{"location":"GoUsers/#bulgaria","text":"clouWay - github SumUp Gtmhub","title":"Bulgaria"},{"location":"GoUsers/#canada","text":"1Password ActiveState - blog - github Apex Bold Commerce ChainSafe Systems - github district m - jobs Greenfield Labs / Zenreach - jobs Go2Mobi - HN Hootsuite Index Exchange - jobs Insights.gg - jobs Kira Systems \u2014 jobs Klei Entertainment - jobs KOHO - jobs League - jobs Lendesk - jobs LoginRadius - Blog - Github Manifold NV Digital Obkio Pressly - github Sendwithus SweetIQ - jobs ThinkSquare Tidal Migrations Tulip - jobs Wattpad 500px - blog - github Qlik - jobs - github","title":"Canada"},{"location":"GoUsers/#chile","text":"Prey - blog - github Webdox","title":"Chile"},{"location":"GoUsers/#china","text":"Baidu Alibaba Xiaomi Tencent 163yun - github - Netease Public Cloud BaishanCloud ByteDance Ciprun CS2C - github deepin - github - a linux distribution aiming to provide an elegant desktop EasyAR Feiyu FunPlus - We Create Leading Innovative and Fun Experiences Worldwide FutureBots iDCOS CloudBoot Inke - the most popular broadcast platform Kidswant KLOOK MegaEase Megvii Mili MobiExchanger - Mobile Internet advertising company Momenta MZD - github OPPO Qiniu - github - Qiniu builds and operates one of the largest public cloud services in China, with millions of code written in Go since 2011. Rainbond - github - Rainbond is an application centric PaaS SenseTime - a global leading A.I. company Teambition - github TiDB - tweet: Golang in TiDB - github - TiDB is a distributed HTAP database compatible with the MySQL protocol Udesk - github XiaoChuan Xiaoying Xunlei YeePay Yeeuu Youmi - a global leading comprehensive mobile internet enterprise cshome DiDi meicai - Catering supply chain service provider 360","title":"China"},{"location":"GoUsers/#croatia","text":"Crossvallia CROZ - github GoodCode - github Kraken Leapbit minus5 - github Nivas - github Rentlio - github Sartura - github Syntio - github","title":"Croatia"},{"location":"GoUsers/#colombia","text":"Wawandco - github","title":"Colombia"},{"location":"GoUsers/#denmark","text":"SYBO Games Vivino","title":"Denmark"},{"location":"GoUsers/#estonia","text":"Wallester - github","title":"Estonia"},{"location":"GoUsers/#finland","text":"Alma Media - Media/Publishing company. Twitter","title":"Finland"},{"location":"GoUsers/#france","text":"Accenta Algolia Batch.com Containo.us Crisp cr\u00e8me de la cr\u00e8me Digikong Equisense Eleven Labs Fabriks HAProxy Technologies - github Heetch - github IoThings IRI France Leboncoin - github - blog LibMed Molotov TV Objenious OneStock Orange ProcessOne PSA - github Rive Scaleway - github - blog Sendinblue Sfeir Synthesio Teads.tv TF1 Ulule - github Veepee - github - blog Zenly teckinside","title":"France"},{"location":"GoUsers/#germany","text":"B\u00fcrkert Cloudogu - github Doozer - github Centrifuge - github Delivery Hero EGYM - Blog ESONO AG FastBill Fraugster Friendsurance fromAtoB - blog HaCon Ingenieurgesellschaft mbH HelloFresh - github Herdius - github HolidayCheck - github - [Blog] IDAGIO Industrial-DevOps - gitlab JustWatch - HN KI Labs loodse - github limango Meplato Naga Virtual Native Instruments - github networkteam GmbH - github OptioPay ownCloud - github Posteo - Green, secure, ad-free email service PubNative - github simplesurance Sixt Spreadshirt solarisBank SoundCloud - blog SumUp Streetspotr - blog - tweet Tourlane trivago N.V. - blog - github Weaveworks Zalando SE - blog Onefootball Sudokoin","title":"Germany"},{"location":"GoUsers/#greece","text":"Beat Skroutz BestPrice Inaccess","title":"Greece"},{"location":"GoUsers/#hong-kong","text":"PassKit - github Lalamove Sandbox VR","title":"Hong Kong"},{"location":"GoUsers/#hungary","text":"Pronovix - github","title":"Hungary"},{"location":"GoUsers/#india","text":"AirCTO AmberStudent Betacraft BookMyShow CRED C42 Engineering Cralina CodeIgnition - twitter Company 0 Cloudsdeal Continuum Managed Solutions Crowdfire Tasker Project Management Tool CoderCV.com Freelancer Marketplace DeepSource - Automated code review tool for developers Dunzo Euphoros Limited Exotel - website Fastah (Blackbuck Computing) FStack (Golang Consulting) Fynd GeekTrust GetMega Gloop Gojek Gradeup Guavus Halodoc Hasura Hotstar Instamojo Ithaka Jabong Josh Software JusTickets - built with Go Kayako LiteBreeze MakeMyTrip Mindbowser Mindship Nazara Games Noticeboard teckinside Onet OpenEBS - Containerized,opensource storage for containers Pincode.app - Local Social Network Propebbles Provlem.com PubMatic - AdTech company Qube Cinema Qwentic - A Golang specialized software development company Qwinix RevvSales Rapyuta Robotics Razorpay RenoApp Ruhi handblock Printers Sahaj Software Solutions Saltside Technologies AB Saven Technologies Ltd Sendinblue SellerApp Sezzle Siminars Singulerp SocialCops - engineering page SoStronk Squadcast - A Site Reliability Engineering (SRE) Product company Synerzip Tarkalabs Techequity Technologies ThoughtBox Online Services Pvt Ltd - A FinTech Solution Provider ThoughtWorks Unbxd UserCV.com Freelancer Marketplace Vernacular.ai WazirX Zomato Zerodha ZopSmart","title":"India"},{"location":"GoUsers/#indonesia","text":"123 Berita Auditsi Executive Recruitment Services Amartha Alphamor Bareksa Bhinneka BlockchainZoo Brankas Brodo Bukalapak CICIL.CO.ID Codemi Learning Management System DigiAset EACIIT Gilkor GoApotik GOJEK Graboards Guteninc Halodoc HappyFresh Indonesia Ice House Corp Jejak Techno Kelir.tv Koinworks - P2P Lending Platform. Korina Kudo kumparan Kurio Lazada LinkAja LionJobs Matahari Mall Magicsoft Asia Systems Medcampus Michael Page Indonesia Midtrans Payment Gateway meTube.id Minyak Telon Nodeflux Pinjam Indonesia - FinTech Pintu Magang - Jobs for Student President University Qasico Teknologi Indonesia Qasir.id Qiscus QUPAS.ID Ralali - B2B Marketplace Platform Raydar RebelWorks RedtreeMobile Reservasi Rimbun Job Agency RSU Anwar Medika Ruangguru Sorabel by Sale Stock SAP Indonesia Tokopedia Tech in Asia Indonesia Valutac Tugujatim Tugumalang","title":"Indonesia"},{"location":"GoUsers/#iraq","text":"eSITE","title":"Iraq"},{"location":"GoUsers/#iran","text":"Kamva \u2013 Kamva eCommerce Platform github Idpay - bank gateways and a stable billing service in order to connect payments. IranBooking - Online booking system for hotels in Iran QuizOfKings - Online trivia game among the most popular mobile game in iran ManaGroup - github Iranian Payment And Traveling Solution \ud83d\udcb8\u2705\ud83d\ude80 Emji - Emji is a new refined social networking platform aimed at simplicity and connectivity Clickyab - Clickyab is diffrent online advertising & digital media agency Sazito - Sazito is multi-functional tools to build and manage your online store. AlAlam \u2013 AlAlam news network TV channel Aparat \u2013 Most popular video sharing platform in Iran Asan Pardakht \u2013 Pay Smarter. Pay Simpler. Pay Anywhere! SabzCity - github Bahamta - Fintech company. 5 th dimension - Advertising Agency. Telmaperfume - Promotional Gifts. Giftsbox - Promotional Mothers Day Gifts. Snapp - Snapp is a web and mobile ride-hailing platform in Iran Parsaspace - Parsaspace is an iranian storage as a service Cafe Bazaar - Iranian Android marketplace Alfa Movie - Best download center platform in Iran. Alibaba Travels Co. - (Github) - Iranian online travel agency","title":"Iran"},{"location":"GoUsers/#ireland","text":"EXADS Intercom Teamwork - blog Nitro - We make document productivity easy, powerful, affordable, and available to all.","title":"Ireland"},{"location":"GoUsers/#israel","text":"353Solutions AppsFlyer Aqua Security BigPanda Bottomline Technologies Bringg Check Point Cloud Invent Cloudinary CTERA Cyren Dragontail Systems Domino's Pizza Elastifile Ltd Ensilo EyeSight Fiverr Firedome Gett HERE Mobility Intuit ironSource Jewish Interactive JFrog - github Firedome - github Iguazio - Data science and analytics PaaS v3io - Iguazio open source nuclio - Nuclio Serverless project JobJob LivePerson Make My Day Medtronic Mathematic.ai Nexar Nexite Panoply playtech Peer5 PlanGrid Proofpoint Protected Media PUB+ PushApps Rimoto Rounds SentinelOne sigmadots Soluto SimilarWeb spot.im Stratoscale - github StreamRail TechedUp - ( Blog ) Tikal Tufin Twistlock uponit Yodas Yotpo ZipRecruiter MinuteMedia","title":"Israel"},{"location":"GoUsers/#italy","text":"Oxequa - ( Realize , Grace ) Qurami - github Sorint.lab - github Tren\u00ect! - ( FB post ) \u2013 Most popular mobile app for Italian trains schedules Develer Qlik - jobs Wellnet Pixartprinting","title":"Italy"},{"location":"GoUsers/#japan","text":"3-shake, Inc. ACALL, Inc. and factory, Inc. ANDPAD Inc. Appify Technologies, Inc. gqlgo - GraphQL Go organization aptpod, Inc. AtCoder, Inc. Atrae, Inc. Axsh, Co. LiquidMetal is a web service and a hardware appliance that together bring continuous automated testing to network system operation. Azoop Co., Ltd. Baseconnect, Inc. BASE BANK, Inc. Belong Inc. Bengo4.com,Inc. CloudSign Cloud Ace, Inc. Clover Lab.,inc. Connehito Inc. Cookpad Inc. CyberAgent, Inc. PipeCD - Continuous Delivery for Declarative Kubernetes, Serverless and Infrastructure Applications ecs-formation - ecs-formation is a tool for defining several Docker continers and clusters on Amazon EC2 Container Service(ECS) plasma - plasma is event push middleware by using gRPC stream Cybozu - github DeNA Co.,Ltd. D.A.Consortium Inc. DIP Corporation. Dr.'s Prime, Inc. D2C Inc. Eichiii, Inc. enish,Inc. eureka feedtailor Fenrir Finatext Ltd. Fixpoint, Inc. Kompira cloud - Automation service for system operator Flatt - Live Commerce Application FreakOut, Inc. freee K.K. Fringe81 Fusic Co., Ltd. Future Architect Vuls - Vulnerability scanner for Linux/FreeBSD, agentless, written in Go Fuller, Inc. Fringe81 Co., Ltd. Gaudiy, Inc. GameWith, Inc. Gemcook, Inc. GMO Pepabo, Inc. Graffer, Inc. Groovenauts, Inc. Gunosy Inc. Gurunavi, Inc. Hatena Mackerel - Monitoring as a Service ( github ) HEARTBEATS happo-agent - Yet another Nagios nrpe HENNGE K.K. hey, Inc. HiCustomer - a Customer Success management platform Howtelevision, Inc. HRBrain, Inc. Internet Initiative Japan Inc. istyle Inc. JapanTaxi Co.,Ltd. JX Press Corporation Kanmu, Inc. KAYAC Inc. - github KLab Inc. KRPEO Kyash Inc LayerX, Inc Link-U Inc. Linkbal Inc. LINE Liquid Inc. Livesense Inc. - github LOB, Inc. - github M3 Makuake, Inc. mediba Mercari, Inc. gaurun - Gaurun is the general push notification server in Go. widebullet - Widebullet is an API gateway with JSON-RPC. go-httpdoc - Golang package for generating API documentation from httptest. Datastore - (AE|Cloud) Datastore Wrapper. yo - yo is a command-line tool to generate Go code for Google Cloud Spanner. go-dnscache - Go package for caching DNS lookup results in memory. grpc-http-proxy - A reverse proxy server which translate JSON HTTP requests to gRPC calls based on protoreflect. go-httpstats - Go package for reporting HTTP stats. certificate-expiry-monitor-controller - Certificate Expiry Monitor Controller monitors the expiration of TLS certificates used in Ingress. tfnotify - A CLI command to parse Terraform execution result and notify it to GitHub. imageflux-cli - Imageflux Client written in Go. Merpay, Inc. MNES, Inc. Miniascape Co., Ltd. Minna Bank, Ltd. Mirrativ, Inc. Mobingi - github Mokelab - github Momentum Inc. Money Forward, Inc. MF KESSAI, Inc. Nagisa Inc. neuet, Inc. Nikkei Inc. Nulab - github omeroid OPTiM Corporation Origami Inc. PERSOL CAREER CO., LTD. PicApp Inc. pixiv Inc. Preferred Networks SensorBee - Lightweight streaming processing engine for IoT Quipper Ltd. Rakuten Inc. - Largest e-commerce, online bank, and credit card (by transaction value) company in Japan with many smaller online services and subsidiaries. READYFOR INC. Repro Inc. Retail AI, Inc. Retty Inc. redish Inc. - Message delivery service on AWS Lambda SAKURA Internet Inc. - github Arukas - github - Docker Container Hosting Web Accelerator sakura.io Sharedine Showcase Gig Inc. SMART EDUCATION, Ltd. KitS Artpop! SmartShopping, Inc. SODA inc. - SNKRDUNK is a Japan\u2019s No.1 Sneaker & Streetwear C2C Marketplace. Souzoh, Inc. Spectra, Inc. Speee, Inc. SYN, Inc. Chompy TOPGATE Toreta, Inc. UPSIDER, Inc. VELTRA Corporation Video Market Corporation Voicy, Inc. VOYAGE GROUP VRize, Inc. WACUL, Inc. Wantedly, Inc. github WealthPark, Inc. XSHELL Isaax IoTit Flashing tool Yahoo! JAPAN Corporation Vald - A highly scalable distributed fast approximate nearest neighbor dense vector search engine. NGTD - NGTD provides serving function for NGT. gongt - NGT Go client library Athenz - Open source platform for X.509 certificate based service authentication and fine grained access control in dynamic infrastructures Garm - Kubernetes authorization webhook (SubjectAccessReview API) server for Athenz Athenz Authorizer - Athenz policy management library for golang Athenz Client Sidecar - An implementation of Kubernetes sidecar container to provide a common interface to retrieve authentication and authorization credential from Athenz server. Athenz Authorization Proxy - An implementation of Kubernetes sidecar container to provide a common interface for API endpoint authentication and authorization. It caches the policies from Athenz, and provides a reverse proxy interface to control access on specific URL endpoints. Yappli, Inc.","title":"Japan"},{"location":"GoUsers/#kazakhstan","text":"Kolesa LLC - microservices for classified ads websites and mobile applications backend ( Kolesa , Krisha , Market )","title":"Kazakhstan"},{"location":"GoUsers/#korea-south","text":"ComTrue Technologies - Network Packet Analyzer Digitalidea - inhouse tool for VFX FlyHigh - Information Security Solution KonaCard - Payment Service Lazypic - Contents creation and support Solution NHN Entertainment Quicket - Image Proxy, Push, Messenger Toast Cloud - Public Cloud Service Wemakeprice - CRM Solution Gabia - Server monitoring solution BankSalad - Personal Finance Management Service","title":"Korea (South)"},{"location":"GoUsers/#lithuania","text":"DATA-DOG","title":"Lithuania"},{"location":"GoUsers/#malaysia","text":"MHub Revenue Monster iflix - Free and Subscription Video On Demand Service AirAsia","title":"Malaysia"},{"location":"GoUsers/#mexico","text":"Conekta - Payment Service Segundamano Entropy - Ecommerce Marketing Optimization Platform. Credijusto - Financial Services Tredicom - B2B, EDI & Ecommerce Services","title":"Mexico"},{"location":"GoUsers/#middle-east","text":"ThoughtBox Technologies - A FinTech Solution Provider","title":"Middle-East"},{"location":"GoUsers/#moldova","text":"Emphatic Spark","title":"Moldova"},{"location":"GoUsers/#morocco","text":"Avito","title":"Morocco"},{"location":"GoUsers/#nepal","text":"Leapfrog Technology","title":"Nepal"},{"location":"GoUsers/#netherlands","text":"Aan Zee BloomReach bol.com booking.com Bubble Shooter Cloudbear - github Dataswimmer Datumprikker.nl FindHotel Housing Anywhere ISAAC Jexia - github Kickstox Kopano - github localsensor MessageBird - github Nerdalize - github Nextail NPO - github nx'change Pocket Media - company website , github Poki - company website , github Pointer Brand Protection Sensys Gatso Group Sentia The Things Network - github Travix International - github Ultraware Wercker - github Xebia - github Yonego","title":"Netherlands"},{"location":"GoUsers/#new-zealand","text":"Hapara - github Vend - github Weta Digital - Slides Spalk Movio - article Aeroqual Jasper - github","title":"New Zealand"},{"location":"GoUsers/#norway","text":"Aller media Amedia Arcane Crypto Avinor Bouvet Bridge Technologies Bulder Bank Capra Consulting Conclude Disruptive Technologies DNB Finn.no Futurehome Jottacloud Just Technologies Laerdal Medical Neatframe No Isolation Northern.tech Norwegian Labour and Welfare Administration (NAV) Nurofy Oslo kommune Oslo Origo Owners Room Payr Pexip Pioner Labs reMarkable Rendra Sanity.io Searis Shortcut Sportradar Sysco Tapad Telenor Telia Teston , part of UserTesting TIDAL Unacast Vipps Zeipt Zendera","title":"Norway"},{"location":"GoUsers/#oman","text":"Rihal - Designed for Data","title":"Oman"},{"location":"GoUsers/#pakistan","text":"Datum Brain - github - AI, data science, big data analytics and IoT company TalkShot - Social Networking based on Live events","title":"Pakistan"},{"location":"GoUsers/#philippines","text":"22 Delta Labs - github - AI, data science, software and product development company EngageSPARK","title":"Philippines"},{"location":"GoUsers/#poland","text":"OLX - blog allegro - blog - biggest polish e-commerce platform hostit.pl - blog Brainhub - blog Cardinal Cryptography - blockchain, DLT, and software development CloudThing - IoT cloud platform HolidayCheck Husar Labs - software development company RnDity - software and hardware development company Grey Wizard - cybersecurity company podioom - With podioom we create bonds that support those who care and who want to stay in shape! beFOGG - platform that will take tourism to the next level Miquido - Mobile-first software development company Brainly - blog limango SoftKraft - software development company","title":"Poland"},{"location":"GoUsers/#portugal","text":"OLX - blog AppGeneration Lmit Uniplaces Bright Pixel Observador Worten","title":"Portugal"},{"location":"GoUsers/#romania","text":"Primal Skill - software development company focusing on web, API development with offices in Romania Trisoft - software development company with offices in San Francisco and Romania JobDone - Freelancer Marketplace CrowdStrike - software development company with offices in US, UK, Romania and Australia","title":"Romania"},{"location":"GoUsers/#russia","text":"2GIS Acronis avito.ru citilink.ru Gett ITooLabs Izvestia iSpring Mail.ru mc\u00b2 software OZON.ru Positive Technologies PostmanQ - High performance Mail Transfer Agent (MTA) ThetaPad Tinkoff Tochka TRY.FIT VK.COM (Part of our Go services: https://www.youtube.com/watch?v=Llmpfv8PIt4 ) Quadcode","title":"Russia"},{"location":"GoUsers/#saudi-arabia","text":"Tamkeen Technologies","title":"Saudi Arabia"},{"location":"GoUsers/#serbia","text":"Seven Bridges - github","title":"Serbia"},{"location":"GoUsers/#singapore","text":"OKiT247 - Frontend analytics and web content delivery. Rate Singapore Power Eatigo ekeynow","title":"Singapore"},{"location":"GoUsers/#slovenia","text":"Visionect d.o.o. Niteo Koofr","title":"Slovenia"},{"location":"GoUsers/#south-africa","text":"Luno - github Span Digital - github","title":"South Africa"},{"location":"GoUsers/#southeast-asia","text":"Dwarves Foundation - github engageSPARK - HN Grab HealthCo Pocketmath Tokopedia TablePlus Carousell","title":"Southeast Asia"},{"location":"GoUsers/#spain","text":"alea soluciones Bugfender Cabify - github , twitter jobandtalent Ximdex puzzlopia - github binomads Schibsted Mediasmart.io - twitter Mavrix - github Typeform source{d} Nayar Systems Stayforlong Hosco","title":"Spain"},{"location":"GoUsers/#sri-lanka","text":"Xiges.io - Low-code Industrial IoT Platform PickMe - Universal Hailing Platform Mybudget - Financial Health Management System Moneta - Sri Lankans' Best Lifestyle App TryFix - Go Platform Developers Circles.Life - Building Telecommunication Provider Platform Running in Singapore","title":"Sri Lanka"},{"location":"GoUsers/#sweden","text":"Abios - The world's most trusted esports API. Booli Digital Route Greta Ingrid Kiliaro Min Doktor Northvolt - The Future of Energy Qlik - jobs Slagkryssaren Studentlitteratur TV4 - blog","title":"Sweden"},{"location":"GoUsers/#switzerland","text":"AgFlow SA Aleph Zero - blockchain platform Centralway Numbrs AG HolidayCheck Magazine zum Globus AG - github Perron2 GmbH Proton Technologies AG Ricardo","title":"Switzerland"},{"location":"GoUsers/#taiwan","text":"QNAP Systems, Inc. ProphetStor Data Services, Inc. Duotify Inc. (\u591a\u5947\u6578\u4f4d\u5275\u610f\u6709\u9650\u516c\u53f8)","title":"Taiwan"},{"location":"GoUsers/#thailand","text":"3DS Interactive Appsynth Asia Beebber botio AIS - Top 3 of telecommunication company in Thailand. Computerlogy Dcenbase Drone Academy Thailand DTAC - Top 3 of telecommunication company in Thailand. Donuts Bangkok Fastwork - Freelance platform in Thailand and Indonesia. Findx Solution Finnomena Gurusquare hytexts IBM Solutions Delivery Imatthio - Cloud Service Platform Development in Thailand Insightera KBTG : KASIKORN Business-Technology Group - A group of tech companies of Kasikorn Bank Group. Top 3 in banking services in Thailand. KTB : Krung Thai Bank - Top 10 in banking services in Thailand. LINE Company (Thailand) - Most popular message platform in Thailand. LINE MAN Wongnai NEXPIE Odd-e Thailand ODDS - A group of people that belive tha software development should be fun. And we belive in continues improvement. Omise - Payment gateway for Thailand. Onedaycat Paybox Paiduaykanmai Fillgoods Que Q Sellsuki SIX network - Financial Services SPRINT3r T.N. Incorporation - Core banking tranformation company. Tencent Thailand THiNKNET ThoughtWorks Thailand True E-Logistics TRUE - Top 3 telecommunication company in Thailand. WISESIGHT - Social media data analysis, Previously ThothZocial Xcellence Corporation Zanroo Zarewoft","title":"Thailand"},{"location":"GoUsers/#turkey","text":"icibot Frigbo Hepiyo Admongrel Insider Mentornity, Inc. - Backend API Mos Teknoloji Optimum Yaz\u0131l\u0131m Peak Games - github - Processing billions of events per day. put.io - github MasomoGaming - github - Online HeadBall2 Game Server by Go LocRep - github - DevOps OSS Artifact Manager. Azure-DevOps - CI/CD and Scrum Trendyol.com - github - Backend APIs Sir Studios","title":"Turkey"},{"location":"GoUsers/#ukraine","text":"Agilites ElifTech iLighten QArea Diligences ElementalsWeb monobank","title":"Ukraine"},{"location":"GoUsers/#united-arab-emirates","text":"Milenow","title":"United Arab Emirates"},{"location":"GoUsers/#united-kingdom","text":"Acuris Admongrel A1comms Badoo - github BBC - public source BBC Worldwide - source Bedful Booking System Belua bet365 - github Bubble Student Bud comnoco Countingup - github Cytora - github Deliveroo - github DeviseOps Form3 - github Fortifi - github Awesome Shit You Can Buy Freelance Marketplace GOV.UK - slides github blog Geckoboard graze - github HM Treasury, UK.gov - github Intern Avenue iZettle - github Lush Digital - GitHub Micro - github Monzo - github , blog New Bamboo - blog News UK oyato cloud - github Paymentsense - Data team Pusher - github blog Ravelin Reactive Markets Resource Guru - blog Restorepoint Ryanair - source Sainsbury's Sky Betting & Gaming Skyscanner Songkick StorageOS Synthace - github thinkmoney Tyk - github Utility Warehouse Weaveworks XTX Markets - github YouView TV Ltd Ernest.io Landoop - github , blog Gram Games 90% of the backend and internal tools implemented with Go. Using it in production since 2015. WhatsOnChain - Backend APIs for Blockchain Explorer","title":"United Kingdom"},{"location":"GoUsers/#united-states","text":"Google - the core Go team work at Google. Most uses of Go at Google are confidential. Kubernetes The YouTube team have released their MySQL scaling infrastructure as open source software 1 , 2 , 3 dl.google.com is written in Go: mailing list discussion / OSCON slides Flywheel: Google's Data Compression Proxy for the Mobile Web , blog post on the rewrite A lot of scripts that earlier were written in Sawzall Seesaw load balancer - github repo Other known uses include the Turkey Doodle (2011) , the Santa Tracker (2012) , writing map/reduce jobs , Jam With Chrome , the CubeSlam Chrome Experiment , Google Helpouts, Doorman, Global Distributed Client Side Rate Limiting pprof command line tool pi.delivery API for Pi Day 2019 6Wunderkinder - video 99designs - golang-nuts Abot - github ActiveState - github Acquia - blog adeven - blog Adobe SEMRush Pricing Adori Labs AeroFS - github , blog Aerospike - blog Airbrake Airware - eng blog , github Alaska Airlines - github Amazon Web Services - github github American Express - github Apcera - blog Apeiron Data Systems Appbase Append Media Appoxy - twitter AppsCode Inc. - github , twitter Arista Networks - twitter Ardan Studios/Labs - twitter Aruba Networks - golang-nuts Ascendant Compliance Manager - Batch process millions of security trades per day. Assembled - github AT&T - Github and gopkgs repository Atatus - blog Avocet - blog Awake Networks Axioms - blog Basecamp - blog Beachfront Media article Beam - github Beehively - Presentation Betable - talk #1 , talk #2 Benzinga - pro , jobs BigCommerce - blog , github Bitbucket - source bitly - github blog Blippar Blink Analytics - github Bolt bol.com - github blog botvs.com Booking.com - source Bread Finance Bridgevine - github Brightcove Bringhub BuySellAds BuzzFeed - talk Byndr ByteGain Canonical - source , email CBS Interactive - github Capital One - blog Caprinova Carmatec Carbon Games - source CB Insights - source CenturyLink - github Channel Chatlio Chubbs Solutions - Progressive Tech (APIs). Cisco - github CircleCI Circonus Clearblade - github Clever - github blog ClickAway CloudFlare - blog article Cloud Foundry - blog github CloudWalk - github clypd - blog Cockroach Labs - blog github CodeShip - blog Comcast - github Conformal Systems - github Copper.IO - blog CoreOS - github , blog Couchbase - github Crashlytics - tweet Crowdstrike - blog Cupcake - tweet github CURT Manufacturing - github Cycle.io CustomerIO - tweet Dailymotion - github , blog Datadog - blog Datascale DeferPanic - github Dell Diggernaut - Data mining and extraction service DigitalOcean - blog Discovery - Video streaming. Disney - Gophercon 2017 lightning talk Disqus - blog , blog DNSimple - blog Docker - docker [slides] domainr - tweet Dollar Shave Club - blog DotDashPay - github DoubleDutch ( http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go ) Doximity DramaFever - github DreamList drone.io - post github Dropbox - blog , github eBay - github , meetup Economist - github Embedly - blog EMC Cloud Services - tweet Enova - github , blog ERNIT - Medium EverQuote Everything.me - blog Expedia - github Facebook - github , blog FieldEngineer Factom - github Fanatics - github Fast - github , twitter ForexSignals Fastly - blog , twitter - The only real-time content delivery network designed to seamlessly integrate with your development stack. Foize - github Flipboard - source (job post) FLXOne - blog Fullstory - blog FuboTV Gaikai (Playstation NOW) Gatherer - twitter Gamegos Gametime Gemfury General Electric Software - tweet , jobs Gengo - blog Getty Images - tweet tweet GitHub - blog post GitLab - gitaly GlobalSign Granify - blog GrayMeta, Inc. Grovo Glympse Hailo - slides Happy Pancake - blog HashiCorp - github HER Heroku - Go blog post , news Hewlett Packard Enterprise - Github Home24 - github Honeywell Hooklift - github HP HyperDev - blog post IBM - Clampify , i18n4go , libsecurity Igneous Imagefly Imgix - StackShare , job posting Imgur - github INdigital - APIs and Microservices for Public Safety. InfluxData - blog github Instela Intel - snap telemetry framework , ciao cloud orchestration , Clear Containers identakid.com Invoiced Ionic Security IPinfo.io Iron.io - source blog:\"30 servers to 2\" blog:\"2 years of production Go\" ISDC - InsideSales.com iTechArt Jack Henry and Associates JelloLabs Jenkins X - GitHub Jimdo - tweet github Jive - github Jive Software - github JPMorgan Chase - github Karma - blog Kayako - twitter Keybase.io - github Kohl's - github Kingsoft - github Chamoji - augmented reality K&J Translations Kochava Koding - quora LabStack - github , website Laserlike LaunchDarkly - github , golang sdk Lean Labs - git release Liftoff Lincoln Loop - blog (as part of https://botbot.me/ , #go-nuts IRC logging) Linc Global LiveRamp Lob LocalRaces - website LogPacker - website Lovoo - github Luckie & Company Luxor Lyft - github Lytics - CDP that automates 1:1 marketing Magento Magic Leap - twitter Maldive MalwareBytes - blog Mastercard - github Mattel - Mattel uses go on its backend for APIs and IOT data processing. Mattermost - github - Open source, private cloud Slack-alternative MaxCDN - blog Medium - blog MediaMath - github , youtube Mesosphere - github Meta Search - twitter Microcosm - slides Mindbowser Minio - github blog - Object Storage compatible with Amazon S3 API Modcloth - github Moovweb - github source MongoDB - blog Monsoon Commerce - blog Mozilla - github MROffice - source Namely - blog NetApp - github Netflix - github , blog New Relic - HN New York Times - source News Corp Newspaper - source Nextdoor - source Next Jump - Next Jump the company that manages the perks platform Perks at Work uses Go in it's backend. NextUser Nexway Nike - github Ninchat - twitter Nordstrom - github Northwestern Mutual - github Novartis - g+ post Nutanix Odoscope - twitter , job Ookma-Kyi - Open Source Implementation of the now defunct Battlemail MMO Github Twitter Ooyala - github Opendoor - HN OpenShift - blog Oracle - Wercker is a Automation platform for Kubernetes & Microservice Deployments Orijtech - github Ottemo - Managed Commerce Platform written in golang Outdoorsy Outreach OvrClk - github Oyster Books - blog Pachyderm.io - github Packet - github Pagoda Box/Nanopack - github Pantheon - blog Parse.com - blog Partner Fusion PayPal.com - github Percona - blog pet.io Pilosa - github Pinshape - job Pinterest - github Pivotal - Cloud Foundry and Cloud Foundry Incubator PocketList Points.com - Points Loyalty Wallet pool.ntp.org - blog status Poptip - blog , job posting Pressly - github , product Procore - github Pronovix - blog , github , product Public Good Corp - meetup PullRequest - meetup Quoori - github Rackspace - github RailsCarma Raintank - blog Rakuten Marketing Recime RapidLoop - product Rawstream - tweets Raygun - blog RealBuildPro - product Reddit - AMA post , github Red Ventures ReelDx - medvid.io , twitter Remember The Milk Remind101 - github , blog Remitly Rendered :Text - blog Replicated Repustate ReverbNation ReviewTrackers - HN Revolving Cow Riot Games - talk Room for More Rounds - blog RueBaRue Runscope - blog Sagan Systems - HN Samsara - blog Secret - blog SecurityScorecard - github blog Segment - github SendGrid - blog SendHub - source (shipbuilder PaaS) SessionM - HN Shopify tweet Showyou source Shutterfly SignalFx - blog Slack - blog SlingTV SmartyStreets - github , blog SmugMug - blog Skimlinks blog Social Blade Sorint.US - github SoundCloud - blog SoundHound Sourcegraph - talk , github source{d} - github , twitter , blog Space Monkey - blog SpaceX - reddit SpeedyTV Sphere Software - github Splice - tweet , blog , blog Springer - tweet Squadcast Square - blog StackEngine - blog Stack Exchange - blog , github , website Staffjoy - blog StatHat - Go blog post Steals.com blog SteelSeries - blog StorReduce Stream - github Stripe - github SumoLogic - github SuperHuman - HN SyndicatePro - source Tamber - blog Tapglue Tapjoy - blog , github Target - blog Teespring Telit IoT Portal TelTech - github Tendermint - github TF2Stadium - github , blog TGen - github , blog The Home Depot The Plant - Qortex , QoR Thisissoon - github Thomson Reuters Eikon - github source , video thoughtbot - blog github Thumbtack - Go Hercule blog post TIBCO Ticketmaster - github Timehop - blog TinkerCad Toggl - blog Torbit - blog Total Care Auto Transloadit - blog Treetop Commons, NobleHour - tweet Trippple Trisoft - software development company with offices in San Francisco and Romania Tumblr - github source Tune TurboBytes - github , tweet Twitch - blog Twitter - blog TweetQureet - blog Uber - blog github tweet Ulele - tweet Umbel - tweet Underarmour - github Undisclosed.ch - github Upskill - github Verifone Vertamedia - github VerveMobile VHSCast Vimeo - blog , github VividCortex - blog , github VMware - github VSCO - blog post Vungle - shared libs, OpenRTB, VAST, etc Walmart Labs - github Wasabi Weave Weaveworks Western Digital - github Wercker - github Whim - meetup , tweet Wikia Wireless Registry - github Workiva - github WP Engine - github Verizon Media / Yahoo - github Yandex - blog Yik Yak - tweet Zalando - github Zapier - github Zenoss - github Zenreach - jobs ZITEC Zumba - github Zynga - github Tipe - github 4wardtech Inc","title":"United States"},{"location":"GoUsers/#vietnam","text":"BeGroup ChoTot Money Forward Vietnam ViralWorks WeTrust VinID See also Success Stories See also Wikipedia category and Wikidata and Wikidata for free and open-source software only","title":"Vietnam"},{"location":"GoVsGenerics/","text":"Introduction This page has moved to a community-written document: Summary of Go Generics Discussions","title":"GoVsGenerics"},{"location":"GoVsGenerics/#introduction","text":"This page has moved to a community-written document: Summary of Go Generics Discussions","title":"Introduction"},{"location":"Gomote/","text":"Using gomote Installing $ GO111MODULE=on go get -u golang.org/x/build/cmd/gomote # up to Go 1.15 OR $ go get golang.org/x/build/cmd/gomote@latest # Go 1.16 and latest (including current Go 1.16 dev tree) Using TODO: examples. For now: The gomote command is a client for the Go builder infrastructure. It's a remote control for remote Go builder machines. See https://golang.org/wiki/Gomote Usage: gomote [global-flags] cmd [cmd-flags] For example, $ gomote create openbsd-amd64-60 user-username-openbsd-amd64-60-0 $ gomote push user-username-openbsd-amd64-60-0 $ gomote run user-username-openbsd-amd64-60-0 go/src/make.bash $ gomote run user-username-openbsd-amd64-60-0 go/bin/go test -v -short os To list the subcommands, run \"gomote\" without arguments: Commands: create create a buildlet; with no args, list types of buildlets destroy destroy a buildlet gettar extract a tar.gz from a buildlet list list active buildlets ls list the contents of a directory on a buildlet ping test whether a buildlet is alive and reachable push sync your GOROOT directory to the buildlet put put files on a buildlet put14 put Go 1.4 in place puttar extract a tar.gz to a buildlet rm delete files or directories run run a command on a buildlet ssh ssh to a buildlet To list all the builder types available, run \"create\" with no arguments: $ gomote create (list tons of buildlet types) The \"gomote run\" command has many of its own flags: $ gomote run -h run usage: gomote run [run-opts] <instance> <cmd> [args...] -builderenv string Optional alternate builder to act like. Must share the same underlying buildlet host type, or it's an error. For instance, linux-amd64-race or linux-386-387 are compatible with linux-amd64, but openbsd-amd64 and openbsd-386 are different hosts. -debug write debug info about the command's execution before it begins -dir string Directory to run from. Defaults to the directory of the command, or the work directory if -system is true. -e value Environment variable KEY=value. The -e flag may be repeated multiple times to add multiple things to the environment. -path string Comma-separated list of ExecOpts.Path elements. The special string 'EMPTY' means to run without any $PATH. The empty string (default) does not modify the $PATH. Otherwise, the following expansions apply: the string '$PATH' expands to the current PATH element(s), the substring '$WORKDIR' expands to the buildlet's temp workdir. -system run inside the system, and not inside the workdir; this is implicit if cmd starts with '/' Debugging buildlets directly Using \"gomote create\" contacts the build coordinator (farmer.golang.org) and requests that it create the buildlet on your behalf. All subsequent commands (such as \"gomote run\" or \"gomote ls\") then proxy your request via the coordinator. To access a buildlet directly (for example, when working on the buildlet code), you can skip the \"gomote create\" step and use the special builder name \"<build-config-name>@ip[:port>\", such as \"windows-amd64-2008@10.1.5.3\". Tricks Windows $ gomote run -path '$PATH,$WORKDIR/go/bin' -e 'GOROOT=c:\\workdir\\go' $MOTE go/src/make.bat $ gomote run -path '$PATH,$WORKDIR/go/bin' -e 'GOROOT=c:\\workdir\\go' $MOTE go/bin/go.exe test cmd/go -short Subrepos on Windows $ tar --exclude .git -C ~/go/src/ -zc golang.org/x/tools | gomote puttar -dir=gopath/src $MOTE $ gomote run -e 'GOPATH=c:/workdir/gopath' $MOTE go/bin/go test -run=TestFixImportsVendorPackage golang.org/x/tools/imports If ssh'd into the machine, these envvars may be handy: $ set GOPATH=c:\\workdir\\gopath $ set PATH=%PATH%;c:\\workdir\\gopath\\bin;c:\\workdir\\go\\bin $ set CGO_ENABLED=0 Subrepos on Unix Testing golang.org/x/sys/unix on $MOTE $ tar -C $GOPATH/src/ -zc golang.org/x/sys/unix | gomote puttar -dir=gopath/src $MOTE $ gomote run -e 'GOPATH=/tmp/workdir/gopath' -dir 'gopath/src/golang.org/x/sys/unix' $MOTE go/bin/go test -v golang.org/x/sys/unix (The GOPATH part is for GOPATH compatibility mode; the -dir is for modules mode, which looks in the working directory and up for go.mod ) Android export MOTE=`gomote create android-arm64-wikofever` gomote push $MOTE gomote run $MOTE go/src/make.bash PATH must contain the exec wrapper, go_android_*_exec, built by make.bash. gomote run -path '$PATH,$WORKDIR/go/bin' $MOTE go/bin/go test math/big About Buildlets https://farmer.golang.org/builders lists information about how each buildlet is deployed and configured. The information is from golang.org/x/build/dashboard and golang.org/x/build/env. Access token Note that as of May 2021, new gomote accounts are on hold while new infrastructure is built. To get an access token, file an issue with the access: prefix and cc @golang/release-team , asking them to provide you with the hash reported by running genbuilderkey user-$USER , where $USER is your computer's username (as reported by echo $USER , or echo $USERNAME on Windows). Write the resulting token to the gomote config file, as in this hypothetical example: $ echo d41d8cd98f00b204e9800998ecf8427e > $HOME/.config/gomote/user-$USER.token gomote ssh The gomote ssh command uses SSH keys associated with your GitHub account for authentication. After creating a gomote instance (which requires a Gomote access token described above), to use gomote ssh to connect to it, you should ensure that: gophers.GitHubOfGomoteUser returns the correct GitHub account. If it needs to be modified, send a CL. You've added an SSH key to your GitHub account. You can test this with ssh -T git@github.com . See GitHub documentation for more information.","title":"Gomote"},{"location":"Gomote/#using-gomote","text":"","title":"Using gomote"},{"location":"Gomote/#installing","text":"$ GO111MODULE=on go get -u golang.org/x/build/cmd/gomote # up to Go 1.15 OR $ go get golang.org/x/build/cmd/gomote@latest # Go 1.16 and latest (including current Go 1.16 dev tree)","title":"Installing"},{"location":"Gomote/#using","text":"TODO: examples. For now: The gomote command is a client for the Go builder infrastructure. It's a remote control for remote Go builder machines. See https://golang.org/wiki/Gomote Usage: gomote [global-flags] cmd [cmd-flags] For example, $ gomote create openbsd-amd64-60 user-username-openbsd-amd64-60-0 $ gomote push user-username-openbsd-amd64-60-0 $ gomote run user-username-openbsd-amd64-60-0 go/src/make.bash $ gomote run user-username-openbsd-amd64-60-0 go/bin/go test -v -short os To list the subcommands, run \"gomote\" without arguments: Commands: create create a buildlet; with no args, list types of buildlets destroy destroy a buildlet gettar extract a tar.gz from a buildlet list list active buildlets ls list the contents of a directory on a buildlet ping test whether a buildlet is alive and reachable push sync your GOROOT directory to the buildlet put put files on a buildlet put14 put Go 1.4 in place puttar extract a tar.gz to a buildlet rm delete files or directories run run a command on a buildlet ssh ssh to a buildlet To list all the builder types available, run \"create\" with no arguments: $ gomote create (list tons of buildlet types) The \"gomote run\" command has many of its own flags: $ gomote run -h run usage: gomote run [run-opts] <instance> <cmd> [args...] -builderenv string Optional alternate builder to act like. Must share the same underlying buildlet host type, or it's an error. For instance, linux-amd64-race or linux-386-387 are compatible with linux-amd64, but openbsd-amd64 and openbsd-386 are different hosts. -debug write debug info about the command's execution before it begins -dir string Directory to run from. Defaults to the directory of the command, or the work directory if -system is true. -e value Environment variable KEY=value. The -e flag may be repeated multiple times to add multiple things to the environment. -path string Comma-separated list of ExecOpts.Path elements. The special string 'EMPTY' means to run without any $PATH. The empty string (default) does not modify the $PATH. Otherwise, the following expansions apply: the string '$PATH' expands to the current PATH element(s), the substring '$WORKDIR' expands to the buildlet's temp workdir. -system run inside the system, and not inside the workdir; this is implicit if cmd starts with '/' Debugging buildlets directly Using \"gomote create\" contacts the build coordinator (farmer.golang.org) and requests that it create the buildlet on your behalf. All subsequent commands (such as \"gomote run\" or \"gomote ls\") then proxy your request via the coordinator. To access a buildlet directly (for example, when working on the buildlet code), you can skip the \"gomote create\" step and use the special builder name \"<build-config-name>@ip[:port>\", such as \"windows-amd64-2008@10.1.5.3\".","title":"Using"},{"location":"Gomote/#tricks","text":"","title":"Tricks"},{"location":"Gomote/#windows","text":"$ gomote run -path '$PATH,$WORKDIR/go/bin' -e 'GOROOT=c:\\workdir\\go' $MOTE go/src/make.bat $ gomote run -path '$PATH,$WORKDIR/go/bin' -e 'GOROOT=c:\\workdir\\go' $MOTE go/bin/go.exe test cmd/go -short","title":"Windows"},{"location":"Gomote/#subrepos-on-windows","text":"$ tar --exclude .git -C ~/go/src/ -zc golang.org/x/tools | gomote puttar -dir=gopath/src $MOTE $ gomote run -e 'GOPATH=c:/workdir/gopath' $MOTE go/bin/go test -run=TestFixImportsVendorPackage golang.org/x/tools/imports If ssh'd into the machine, these envvars may be handy: $ set GOPATH=c:\\workdir\\gopath $ set PATH=%PATH%;c:\\workdir\\gopath\\bin;c:\\workdir\\go\\bin $ set CGO_ENABLED=0","title":"Subrepos on Windows"},{"location":"Gomote/#subrepos-on-unix","text":"Testing golang.org/x/sys/unix on $MOTE $ tar -C $GOPATH/src/ -zc golang.org/x/sys/unix | gomote puttar -dir=gopath/src $MOTE $ gomote run -e 'GOPATH=/tmp/workdir/gopath' -dir 'gopath/src/golang.org/x/sys/unix' $MOTE go/bin/go test -v golang.org/x/sys/unix (The GOPATH part is for GOPATH compatibility mode; the -dir is for modules mode, which looks in the working directory and up for go.mod )","title":"Subrepos on Unix"},{"location":"Gomote/#android","text":"export MOTE=`gomote create android-arm64-wikofever` gomote push $MOTE gomote run $MOTE go/src/make.bash PATH must contain the exec wrapper, go_android_*_exec, built by make.bash. gomote run -path '$PATH,$WORKDIR/go/bin' $MOTE go/bin/go test math/big","title":"Android"},{"location":"Gomote/#about-buildlets","text":"https://farmer.golang.org/builders lists information about how each buildlet is deployed and configured. The information is from golang.org/x/build/dashboard and golang.org/x/build/env.","title":"About Buildlets"},{"location":"Gomote/#access-token","text":"Note that as of May 2021, new gomote accounts are on hold while new infrastructure is built. To get an access token, file an issue with the access: prefix and cc @golang/release-team , asking them to provide you with the hash reported by running genbuilderkey user-$USER , where $USER is your computer's username (as reported by echo $USER , or echo $USERNAME on Windows). Write the resulting token to the gomote config file, as in this hypothetical example: $ echo d41d8cd98f00b204e9800998ecf8427e > $HOME/.config/gomote/user-$USER.token","title":"Access token"},{"location":"Gomote/#gomote-ssh","text":"The gomote ssh command uses SSH keys associated with your GitHub account for authentication. After creating a gomote instance (which requires a Gomote access token described above), to use gomote ssh to connect to it, you should ensure that: gophers.GitHubOfGomoteUser returns the correct GitHub account. If it needs to be modified, send a CL. You've added an SSH key to your GitHub account. You can test this with ssh -T git@github.com . See GitHub documentation for more information.","title":"gomote ssh"},{"location":"Gopher/","text":"The Go gopher was designed by Renee French . The design is licensed under the Creative Commons 3.0 Attributions license. Read this article and watch The Go Gopher A Character Study for more details. Where can I find more gopher illustrations? gophers in the Go website repository gopher vector gopher 3d golang graphics print-ready swimming gopher go gopher vector gopher gala gophericons gophers by Egon Elbre Go Gopher model (3d) Gopher Artwork by Ashley McNamara Gopherize.me - a Gopher avatar that's as unique as you Free Gophers Pack","title":"Gopher"},{"location":"Gopher/#where-can-i-find-more-gopher-illustrations","text":"gophers in the Go website repository gopher vector gopher 3d golang graphics print-ready swimming gopher go gopher vector gopher gala gophericons gophers by Egon Elbre Go Gopher model (3d) Gopher Artwork by Ashley McNamara Gopherize.me - a Gopher avatar that's as unique as you Free Gophers Pack","title":"Where can I find more gopher illustrations?"},{"location":"Gophers-Tunisia/","text":"Tunisia","title":"Gophers Tunisia"},{"location":"HandlingIssues/","text":"This document explains how we handle issue triage and scheduling in the Go project's issue tracker . Issue States Any issue must be in one of the following states. Project contributors move issues from one state to another. The intent behind these explicit states is to describe the (minimum) next steps required to bring the issue to resolution. Issues may move between states in any order, as dictated by the needs of the particular issue. New The issue has been filed. May not be correctly formatted (title, etc). To transition from this state, someone must clean up the issue report and optionally CC people who might best investigate or fix it. Needs Investigation Is correctly formatted. The title has a path prefix. The body describes the issue. Has a milestone. If the issue is not important, it is ok to set the milestone to Backlog . Otherwise, set it to the next upcoming release. Has the label NeedsInvestigation . May also have the label WaitingForInfo if the investigator is waiting for more information from someone (e.g., the issue reporter). To transition from this state, someone must examine the issue and confirm that it is valid and not a duplicate of an existing issue. Needs Decision The issue is real, but we're not sure what action to take. The issue can be addressed in Go 1. Feedback is required from experts, contributors, and/or the community before a fix can be made. Note that the majority of issues will never transition to this state, as most of the time the decision is an obvious \u201cYes, this should be fixed.\u201d Has a milestone. Has the label NeedsDecision . May have the label WaitingForInfo . May have the label Blocked if forward progress depends upon the resolution of another issue or the release of a future version of Go. An accompanying comment should explain the blockage. Must not have the label Go2 . (Those issues are handled separately.) To transition from this state, someone must decide how the issue is to be resolved. If the decision is complicated, the issue may be given a Proposal label. The issue remains in this state until the proposal process is complete, and moves to NeedsFix if approved. Needs Fix The path to resolution is known, but the work has not been done. Has a milestone. Has the label NeedsFix . May have the labels Blocked or WaitingForInfo . To transition from this state, someone must do the work to fix the issue. Fixed The issue is resolved. No further attention is required. The issue is closed. Issues move from one state to another where appropriate. For example, a contributor may file an issue, assign it to themselves, and immediately apply the NeedsFix label. Or, an issue may go from NeedsDecision to NeedsFix , only to later move back to NeedsDecision as complexities arise. An issue may be closed at any time, with a comment to indicate the reason for closure (\"fixed by \u2026\", \"duplicate of \u2026\", \"working as intended\", etc). At any state (except New) the issue may be assigned to someone. Unassigned issues are considered available for anyone to address. Milestones Milestones describe the timeline for issue resolution. Go1.x.y Must be fixed for release 1.x.y, or explicitly postponed to a later release. Proposal Is a proposal and does not pertain to a specific release. Soon Should be fixed soon, but is not included in or needed by a release. Backlog Someone has plans to work on it, but it is not assigned to a release milestone yet. Unplanned Might be fixed at some point, but nobody is planning to do it. Unreleased Is not included in or needed by a release. Gccgo For gccgo issues. Go2 Deferred until Go 2. Additional milestones may be used to manage specific project work.","title":"HandlingIssues"},{"location":"HandlingIssues/#issue-states","text":"Any issue must be in one of the following states. Project contributors move issues from one state to another. The intent behind these explicit states is to describe the (minimum) next steps required to bring the issue to resolution. Issues may move between states in any order, as dictated by the needs of the particular issue.","title":"Issue States"},{"location":"HandlingIssues/#new","text":"The issue has been filed. May not be correctly formatted (title, etc). To transition from this state, someone must clean up the issue report and optionally CC people who might best investigate or fix it.","title":"New"},{"location":"HandlingIssues/#needs-investigation","text":"Is correctly formatted. The title has a path prefix. The body describes the issue. Has a milestone. If the issue is not important, it is ok to set the milestone to Backlog . Otherwise, set it to the next upcoming release. Has the label NeedsInvestigation . May also have the label WaitingForInfo if the investigator is waiting for more information from someone (e.g., the issue reporter). To transition from this state, someone must examine the issue and confirm that it is valid and not a duplicate of an existing issue.","title":"Needs Investigation"},{"location":"HandlingIssues/#needs-decision","text":"The issue is real, but we're not sure what action to take. The issue can be addressed in Go 1. Feedback is required from experts, contributors, and/or the community before a fix can be made. Note that the majority of issues will never transition to this state, as most of the time the decision is an obvious \u201cYes, this should be fixed.\u201d Has a milestone. Has the label NeedsDecision . May have the label WaitingForInfo . May have the label Blocked if forward progress depends upon the resolution of another issue or the release of a future version of Go. An accompanying comment should explain the blockage. Must not have the label Go2 . (Those issues are handled separately.) To transition from this state, someone must decide how the issue is to be resolved. If the decision is complicated, the issue may be given a Proposal label. The issue remains in this state until the proposal process is complete, and moves to NeedsFix if approved.","title":"Needs Decision"},{"location":"HandlingIssues/#needs-fix","text":"The path to resolution is known, but the work has not been done. Has a milestone. Has the label NeedsFix . May have the labels Blocked or WaitingForInfo . To transition from this state, someone must do the work to fix the issue.","title":"Needs Fix"},{"location":"HandlingIssues/#fixed","text":"The issue is resolved. No further attention is required. The issue is closed. Issues move from one state to another where appropriate. For example, a contributor may file an issue, assign it to themselves, and immediately apply the NeedsFix label. Or, an issue may go from NeedsDecision to NeedsFix , only to later move back to NeedsDecision as complexities arise. An issue may be closed at any time, with a comment to indicate the reason for closure (\"fixed by \u2026\", \"duplicate of \u2026\", \"working as intended\", etc). At any state (except New) the issue may be assigned to someone. Unassigned issues are considered available for anyone to address.","title":"Fixed"},{"location":"HandlingIssues/#milestones","text":"Milestones describe the timeline for issue resolution. Go1.x.y Must be fixed for release 1.x.y, or explicitly postponed to a later release. Proposal Is a proposal and does not pertain to a specific release. Soon Should be fixed soon, but is not included in or needed by a release. Backlog Someone has plans to work on it, but it is not assigned to a release milestone yet. Unplanned Might be fixed at some point, but nobody is planning to do it. Unreleased Is not included in or needed by a release. Gccgo For gccgo issues. Go2 Deferred until Go 2. Additional milestones may be used to manage specific project work.","title":"Milestones"},{"location":"Hashing/","text":"Please consider move this into document for package hash . Hashing The hash.Hash interface All hashes defined in the standard library implement the hash.Hash interface. The Hash interface allows you to input data, get the sum (hash) of the previously inputted data, and forget previously inputted data. It also has some methods which return constants based on the hash type. To input data, you use the Write method. For example: h . Write ( byteSlice ) or io . Copy ( h , file ) While Write returns an int and error, these are just to comply with the io.Writer interface. A hash will never return an error or an n != len(byteSlice). At any time during data input, you can get the current sum by calling the Sum method. Use of the Sum() method will not effect future calls to sum. The most common way to use it is sum := h.Sum(nil) . What the Sum() method does is append the sum to the []byte parameter and return the new []byte. This can allow you to avoid allocating a new []byte each time you want the Sum. If you are summing often, you may do md5sum := make([]byte, 16) once and then do h.Sum(md5sum[:0]) each time you want the new hash. If you want to reuse an already created hash, you can use Reset() to ensure it forgets all previously inputted data.","title":"Hashing"},{"location":"Hashing/#hashing","text":"","title":"Hashing"},{"location":"Hashing/#the-hashhash-interface","text":"All hashes defined in the standard library implement the hash.Hash interface. The Hash interface allows you to input data, get the sum (hash) of the previously inputted data, and forget previously inputted data. It also has some methods which return constants based on the hash type. To input data, you use the Write method. For example: h . Write ( byteSlice ) or io . Copy ( h , file ) While Write returns an int and error, these are just to comply with the io.Writer interface. A hash will never return an error or an n != len(byteSlice). At any time during data input, you can get the current sum by calling the Sum method. Use of the Sum() method will not effect future calls to sum. The most common way to use it is sum := h.Sum(nil) . What the Sum() method does is append the sum to the []byte parameter and return the new []byte. This can allow you to avoid allocating a new []byte each time you want the Sum. If you are summing often, you may do md5sum := make([]byte, 16) once and then do h.Sum(md5sum[:0]) each time you want the new hash. If you want to reuse an already created hash, you can use Reset() to ensure it forgets all previously inputted data.","title":"The hash.Hash interface"},{"location":"Home/","text":"Welcome to the Go wiki, a collection of information about the Go Programming Language . Awesome Go is another great resource for Go programmers, curated by the Go community. Questions about Go See Questions . Contributing This wiki is open to editing by any member of the Go community with a GitHub account. If you would like to add a new page, please first open an issue in the Go issue tracker with the prefix 'wiki' to propose the addition. Clearly state why the content does not fit into any of the existing pages. Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page. Table of Contents Getting started with Go Working with Go Learning more about Go The Go Community Using the go toolchain Additional Go Programming Wikis Online Services that work with Go Troubleshooting Go Programs in Production Contributing to the Go Project Platform Specific Information Release Specific Information Questions Getting started with Go The Go Tour is the best place to start. Effective Go will help you learn how to write idiomatic Go code. Go standard library documentation to familiarize yourself with the standard library. Use the Go Playground to test out Go programs in your browser. Still not convinced? Check out this list of Go Users and a few of their Success stories . We've also assembled a long list of reasons why you should give Go a try . Read about the companies which have switched from other languages to Go . Working with Go Ready to write some Go code of your own? Here are a few links to help you get started. Install and Setup your Environment Start here: Official Installation Documentation If you prefer to install from source, read this first . InstallFromSource - Additional tips on source installs. Windows user? Install and configure Go, Git, and Atom for Windows Mac user? How I start - Go - A step-by-step guide to installing Go and building your first web service. Having installation problems? InstallTroubleShooting Make sure you have your $GOPATH environment variable set correctly If you need additional tips on using $GOPATH, go here . MultipleGoRoots - More advanced information on working with multiple go installations and the $GOROOT variable. Go IDEs and Editors - Information on how to use your favorite editor with Go. Tools for working with Go code - Formatting, linting, vetting, refactoring, navigation, and visualization. Finding Go Libraries and Packages Start here: Go open source projects . Search for Go packages: godoc.org Visualization of the Go open-source package graph Modules - documentation on the dependency management system built into the Go command, added in 1.11. Managing your dependencies - An overview of the tools you can use to manage third-party packages (vendoring). Publishing Go Packages as Open Source Getting ready to publish your package? Start here. The Go Checklist - A comprehensive guide for publishing a project. How to layout your GitHub repo to make it easy for other Go programmers to use with the go get command. Go Package, Go - A few recommendations for making Go packages easy to use. Learning more about Go Once you have an overview of the language, here are resources you can use to learn more. Learning Go - A collection of resources for learning Go - beginner to advanced. Best Practices for a New Go Developer - Insights from Go community members. Server programming - Building web, mobile, and API servers. More on concurrency More on error handling More on testing More on mobile - Android and iOS Books - A list of Go books that have been published (ebook, paper) Blogs - Blogs about Go Podcasts - Podcasts and episodes featuring Go Videos, Talks, and Presentations GopherVids (currently unreachable) is a searchable index of videos about Go. GoTalks - A collection of talks from Go conferences and meetups. Livestreams - live interactive Go project streams with members of the community Screencasts Articles - A collection of articles to help you learn more about Go. Training - Free and commercial, online, and classroom training for Go. University Courses - A list of CS programs and classes using Go. Resources for non-English speakers The Go Community Here are some of the places where you can find Gophers online. To get a sense of what it means to be a member of the Go community, read Damian Gryski's keynote from the GolangUK 2015 conference or watch Andrew Gerrand's closing keynote from GopherCon 2015 . Where Gophers hangout online: The Go Forum - An all-purpose discussion forum for the Go community. Gophers Slack Channel - For real-time chat ( request membership ). Golang News - For curated links about Go Programming. There is also a /r/golang sub-reddit. On Twitter, follow the @golang account and keep tabs on the #golang hashtag. We've also got a landing page on Stack Overflow for Go Q&A. Matrix enthusiasts are invited to join #Go:matrix.org . Discord users are welcome at the Discord Gophers server. Hashnode users talk and write about Go in Hashnode Go community . Mailing Lists The mailing list for Go users is golang-nuts - very high traffic. Before you post, check to see if it's already been answered , then read these tips on how to ask a good question For discussions about the core Go open source project, join golang-dev . To get just our release announcements, join golang-announce User Groups & Meetups - There are Go Meetups in many cities GoBridge - Volunteers helping underrepresented communities to teach technical skills and to foster diversity in Go. Women Who Go See here for additional information GoUserGroups GoDiscourse - Go Discourse is an open-source Go-based forum from hello world . Conferences - A list of upcoming and past Go conferences and major events. Companies using Go - A comprehensive list of companies using Go throughout the world. Learn more about the Go Gopher images by Renee French. Using the Go Toolchain Start with the standard documentation for the go command available here Start here to learn about vendoring . See also PackageManagementTools for package management tools. Cross Compilation Shared libraries and Go (buildmode) Go Shared Libraries - Examples for creating and using shared libraries from Go and Python. Sharing Go Packages with C - by @ralch . Calling Go libraries from Python - by Filippo Valsorda Calling Go libraries from Ruby - by Peter Hellberg Calling Go libraries from Swift - by Jaana Burcu Dogan Build a Ruby Gem with a Go native extension - by @jondot gohttplib - An experiment in using Go 1.5 buildmode=c-shared. See the wikis below for additional details: GoGetTools GoGetProxyConfig cgo CompilerOptimizations GccgoCrossCompilation GcToolchainTricks GoGenerateTools Go Tooling Essentials - by Jaana Burcu Dogan Additional Go Programming Wikis Why Go doesn't Support Generics: A Summary of Go Generics Discussions - Start here before you join the debate. Concurrency Timeouts - Abandon async calls that take too long LockOSThread MutexOrChannel - When to use one vs the other RaceDetector - How to detect and fix race conditions Working with Databases database/sql - Online tutorial for working with the database/sql package. SQLDrivers SQLInterface From other languages Go for Java Programmers Go for C++ Programmers Strings GoStrings String Matching Comments CommonMistakes Errors GcToolchainTricks Hashing HttpFetch HttpStaticFiles InterfaceSlice Iota MethodSets PanicAndRecover Range RateLimiting Rationales SendingMail SignalHandling SimultaneousAssignment SliceTricks Switch TableDrivenTests Online Services that work with Go If you're looking for services that support Go, here's a list to get you started. Cloud Computing - Go is well supported by most cloud service providers. Amazon Web Services Azure DigitalOcean GE Predix Google Cloud Platform for Go Heroku IBM Bluemix OpenStack Vscale Aliyun Tencent See here for information on additional providers Continuous Integration and Continuous Deployment - Go is well supported by most CI/CD frameworks Monitoring/Logging OpsDash - Go-based cluster monitoring platform. Package and Dependency Management Gopkg.in is a source for stable Go libraries, provided by Gustavo Niemeyer. Troubleshooting Go Programs in Production Understand the performance of your Go apps using the pprof package Heap Dumps heapdump13 heapdump14 heapdump15 Contributing to the Go Project Start by reading the Go Contribution Guidelines If you'd like to propose a change to the Go project, start by reading the Go Change Proposal Process An archive of design documents is also available Go releases happen at ~6-month intervals. See here for more information Want to know more about how the Go source X-repositories are structured? The Go project requires that all code be reviewed before it is submitted. Read more about our code review practices If you're commenting on code under review, please read these guidelines Issues Bug reports and feature requests should be filed using the GitHub issue tracker Want to understand how we handle issues that are reported? Project Dashboards Go Builds Dashboard info Performance Dashboard info Download failed logs and debugging Platform Specific Information See MinimumRequirements for minimum platform requirements of current Go ports. Considering porting Go to a new platform? Read our porting policy first Mobile Ubuntu Windows WindowsBuild WindowsCrossCompiling WindowsDLLs GoArm ChromeOS Darwin DragonFly BSD FreeBSD Linux NativeClient NetBSD OpenBSD Plan 9 Solaris Release Specific Information Go1point1Gotchas OlderVersions Notes: Please refrain from changing the title of the wiki pages, as some of them might be linked to from golang.org or other websites.","title":"Home"},{"location":"Home/#questions-about-go","text":"See Questions .","title":"Questions about Go"},{"location":"Home/#contributing","text":"This wiki is open to editing by any member of the Go community with a GitHub account. If you would like to add a new page, please first open an issue in the Go issue tracker with the prefix 'wiki' to propose the addition. Clearly state why the content does not fit into any of the existing pages. Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page.","title":"Contributing"},{"location":"Home/#table-of-contents","text":"Getting started with Go Working with Go Learning more about Go The Go Community Using the go toolchain Additional Go Programming Wikis Online Services that work with Go Troubleshooting Go Programs in Production Contributing to the Go Project Platform Specific Information Release Specific Information Questions","title":"Table of Contents"},{"location":"Home/#getting-started-with-go","text":"The Go Tour is the best place to start. Effective Go will help you learn how to write idiomatic Go code. Go standard library documentation to familiarize yourself with the standard library. Use the Go Playground to test out Go programs in your browser. Still not convinced? Check out this list of Go Users and a few of their Success stories . We've also assembled a long list of reasons why you should give Go a try . Read about the companies which have switched from other languages to Go .","title":"Getting started with Go"},{"location":"Home/#working-with-go","text":"Ready to write some Go code of your own? Here are a few links to help you get started. Install and Setup your Environment Start here: Official Installation Documentation If you prefer to install from source, read this first . InstallFromSource - Additional tips on source installs. Windows user? Install and configure Go, Git, and Atom for Windows Mac user? How I start - Go - A step-by-step guide to installing Go and building your first web service. Having installation problems? InstallTroubleShooting Make sure you have your $GOPATH environment variable set correctly If you need additional tips on using $GOPATH, go here . MultipleGoRoots - More advanced information on working with multiple go installations and the $GOROOT variable. Go IDEs and Editors - Information on how to use your favorite editor with Go. Tools for working with Go code - Formatting, linting, vetting, refactoring, navigation, and visualization. Finding Go Libraries and Packages Start here: Go open source projects . Search for Go packages: godoc.org Visualization of the Go open-source package graph Modules - documentation on the dependency management system built into the Go command, added in 1.11. Managing your dependencies - An overview of the tools you can use to manage third-party packages (vendoring). Publishing Go Packages as Open Source Getting ready to publish your package? Start here. The Go Checklist - A comprehensive guide for publishing a project. How to layout your GitHub repo to make it easy for other Go programmers to use with the go get command. Go Package, Go - A few recommendations for making Go packages easy to use.","title":"Working with Go"},{"location":"Home/#learning-more-about-go","text":"Once you have an overview of the language, here are resources you can use to learn more. Learning Go - A collection of resources for learning Go - beginner to advanced. Best Practices for a New Go Developer - Insights from Go community members. Server programming - Building web, mobile, and API servers. More on concurrency More on error handling More on testing More on mobile - Android and iOS Books - A list of Go books that have been published (ebook, paper) Blogs - Blogs about Go Podcasts - Podcasts and episodes featuring Go Videos, Talks, and Presentations GopherVids (currently unreachable) is a searchable index of videos about Go. GoTalks - A collection of talks from Go conferences and meetups. Livestreams - live interactive Go project streams with members of the community Screencasts Articles - A collection of articles to help you learn more about Go. Training - Free and commercial, online, and classroom training for Go. University Courses - A list of CS programs and classes using Go. Resources for non-English speakers","title":"Learning more about Go"},{"location":"Home/#the-go-community","text":"Here are some of the places where you can find Gophers online. To get a sense of what it means to be a member of the Go community, read Damian Gryski's keynote from the GolangUK 2015 conference or watch Andrew Gerrand's closing keynote from GopherCon 2015 . Where Gophers hangout online: The Go Forum - An all-purpose discussion forum for the Go community. Gophers Slack Channel - For real-time chat ( request membership ). Golang News - For curated links about Go Programming. There is also a /r/golang sub-reddit. On Twitter, follow the @golang account and keep tabs on the #golang hashtag. We've also got a landing page on Stack Overflow for Go Q&A. Matrix enthusiasts are invited to join #Go:matrix.org . Discord users are welcome at the Discord Gophers server. Hashnode users talk and write about Go in Hashnode Go community . Mailing Lists The mailing list for Go users is golang-nuts - very high traffic. Before you post, check to see if it's already been answered , then read these tips on how to ask a good question For discussions about the core Go open source project, join golang-dev . To get just our release announcements, join golang-announce User Groups & Meetups - There are Go Meetups in many cities GoBridge - Volunteers helping underrepresented communities to teach technical skills and to foster diversity in Go. Women Who Go See here for additional information GoUserGroups GoDiscourse - Go Discourse is an open-source Go-based forum from hello world . Conferences - A list of upcoming and past Go conferences and major events. Companies using Go - A comprehensive list of companies using Go throughout the world. Learn more about the Go Gopher images by Renee French.","title":"The Go Community"},{"location":"Home/#using-the-go-toolchain","text":"Start with the standard documentation for the go command available here Start here to learn about vendoring . See also PackageManagementTools for package management tools. Cross Compilation Shared libraries and Go (buildmode) Go Shared Libraries - Examples for creating and using shared libraries from Go and Python. Sharing Go Packages with C - by @ralch . Calling Go libraries from Python - by Filippo Valsorda Calling Go libraries from Ruby - by Peter Hellberg Calling Go libraries from Swift - by Jaana Burcu Dogan Build a Ruby Gem with a Go native extension - by @jondot gohttplib - An experiment in using Go 1.5 buildmode=c-shared. See the wikis below for additional details: GoGetTools GoGetProxyConfig cgo CompilerOptimizations GccgoCrossCompilation GcToolchainTricks GoGenerateTools Go Tooling Essentials - by Jaana Burcu Dogan","title":"Using the Go Toolchain"},{"location":"Home/#additional-go-programming-wikis","text":"Why Go doesn't Support Generics: A Summary of Go Generics Discussions - Start here before you join the debate. Concurrency Timeouts - Abandon async calls that take too long LockOSThread MutexOrChannel - When to use one vs the other RaceDetector - How to detect and fix race conditions Working with Databases database/sql - Online tutorial for working with the database/sql package. SQLDrivers SQLInterface From other languages Go for Java Programmers Go for C++ Programmers Strings GoStrings String Matching Comments CommonMistakes Errors GcToolchainTricks Hashing HttpFetch HttpStaticFiles InterfaceSlice Iota MethodSets PanicAndRecover Range RateLimiting Rationales SendingMail SignalHandling SimultaneousAssignment SliceTricks Switch TableDrivenTests","title":"Additional Go Programming Wikis"},{"location":"Home/#online-services-that-work-with-go","text":"If you're looking for services that support Go, here's a list to get you started. Cloud Computing - Go is well supported by most cloud service providers. Amazon Web Services Azure DigitalOcean GE Predix Google Cloud Platform for Go Heroku IBM Bluemix OpenStack Vscale Aliyun Tencent See here for information on additional providers Continuous Integration and Continuous Deployment - Go is well supported by most CI/CD frameworks Monitoring/Logging OpsDash - Go-based cluster monitoring platform. Package and Dependency Management Gopkg.in is a source for stable Go libraries, provided by Gustavo Niemeyer.","title":"Online Services that work with Go"},{"location":"Home/#troubleshooting-go-programs-in-production","text":"Understand the performance of your Go apps using the pprof package Heap Dumps heapdump13 heapdump14 heapdump15","title":"Troubleshooting Go Programs in Production"},{"location":"Home/#contributing-to-the-go-project","text":"Start by reading the Go Contribution Guidelines If you'd like to propose a change to the Go project, start by reading the Go Change Proposal Process An archive of design documents is also available Go releases happen at ~6-month intervals. See here for more information Want to know more about how the Go source X-repositories are structured? The Go project requires that all code be reviewed before it is submitted. Read more about our code review practices If you're commenting on code under review, please read these guidelines Issues Bug reports and feature requests should be filed using the GitHub issue tracker Want to understand how we handle issues that are reported? Project Dashboards Go Builds Dashboard info Performance Dashboard info Download failed logs and debugging","title":"Contributing to the Go Project"},{"location":"Home/#platform-specific-information","text":"See MinimumRequirements for minimum platform requirements of current Go ports. Considering porting Go to a new platform? Read our porting policy first Mobile Ubuntu Windows WindowsBuild WindowsCrossCompiling WindowsDLLs GoArm ChromeOS Darwin DragonFly BSD FreeBSD Linux NativeClient NetBSD OpenBSD Plan 9 Solaris","title":"Platform Specific Information"},{"location":"Home/#release-specific-information","text":"Go1point1Gotchas OlderVersions Notes: Please refrain from changing the title of the wiki pages, as some of them might be linked to from golang.org or other websites.","title":"Release Specific Information"},{"location":"HostedContinuousIntegration/","text":"A number of hosted continuous integration platforms have support for Go Provider Documentation Notes AppVeyor docs Windows CircleCI docs howto-1 howto-2 Codeship docs drone.io docs open-source version Jenkins docs Magnum CI docs Travis CI docs howto , go-client-api Azure Devops docs Wercker docs","title":"HostedContinuousIntegration"},{"location":"How-to-ask-for-help/","text":"This page gives some hints on how to successfully ask for help in the various Go support forums . Before you ask your question Before asking for help, please check that you've addressed the following common issues: Always check all errors Always check all errors. It is common to see problems reported related to nil panics due to code like this result, err := somefunction() if err != nil { log.Println(\"oops an error happened\", err) // return is missing here } // the code then continues to use result which is invalid. or result, _ := somefunction() // code uses result which might be invalid You should make sure it is clear that your code is correctly handling all error conditions before asking for help. Further reading: - Error handling and Go Check that your code is free from data races Unexpected runtime panics are often caused by data races in your program. If your program contains a data race you need to address the race before asking for help. If your program has good test coverage you can test for races by adding the -race flag to your go test invocation. If your program does not have good test coverage or the crash only happens when running the program, you can build a race enabled version of your program by passing -race to your go build or go install invocation. The behaviour of a Go program with a data race is undefined. There are no safe data races in Go programs. Further reading: - Introducing the race detector Asking questions The best way to get help is to show What you did, ideally with a small complete, stand-alone, example. If you ran a command, show the command that you ran. If your program failed, provide the source of the program that failed. If the program is too large, or you cannot share the source, instead provide a self contained, runnable example, that demonstrates the problem. What you expected to happen. If you expected the command to complete successfully, say that. If you expected the program to produce a particular output, give an example of the output you expected. What happened instead. If the command failed, include the full output of the failure, not just a single line that you though was the cause. If the program failed to produce the expected output, include what it did output. Additional tips If you are posting the output of a command, paste the text, not a screenshot of the text. If it's actually an image, that's ok. If you are posting a large amount of output, you may consider using a pastebin or gist service. When posting code samples, use the Go playground (unless it is unavailable in your country).","title":"How to ask for help"},{"location":"How-to-ask-for-help/#before-you-ask-your-question","text":"Before asking for help, please check that you've addressed the following common issues:","title":"Before you ask your question"},{"location":"How-to-ask-for-help/#always-check-all-errors","text":"Always check all errors. It is common to see problems reported related to nil panics due to code like this result, err := somefunction() if err != nil { log.Println(\"oops an error happened\", err) // return is missing here } // the code then continues to use result which is invalid. or result, _ := somefunction() // code uses result which might be invalid You should make sure it is clear that your code is correctly handling all error conditions before asking for help. Further reading: - Error handling and Go","title":"Always check all errors"},{"location":"How-to-ask-for-help/#check-that-your-code-is-free-from-data-races","text":"Unexpected runtime panics are often caused by data races in your program. If your program contains a data race you need to address the race before asking for help. If your program has good test coverage you can test for races by adding the -race flag to your go test invocation. If your program does not have good test coverage or the crash only happens when running the program, you can build a race enabled version of your program by passing -race to your go build or go install invocation. The behaviour of a Go program with a data race is undefined. There are no safe data races in Go programs. Further reading: - Introducing the race detector","title":"Check that your code is free from data races"},{"location":"How-to-ask-for-help/#asking-questions","text":"The best way to get help is to show What you did, ideally with a small complete, stand-alone, example. If you ran a command, show the command that you ran. If your program failed, provide the source of the program that failed. If the program is too large, or you cannot share the source, instead provide a self contained, runnable example, that demonstrates the problem. What you expected to happen. If you expected the command to complete successfully, say that. If you expected the program to produce a particular output, give an example of the output you expected. What happened instead. If the command failed, include the full output of the failure, not just a single line that you though was the cause. If the program failed to produce the expected output, include what it did output.","title":"Asking questions"},{"location":"How-to-ask-for-help/#additional-tips","text":"If you are posting the output of a command, paste the text, not a screenshot of the text. If it's actually an image, that's ok. If you are posting a large amount of output, you may consider using a pastebin or gist service. When posting code samples, use the Go playground (unless it is unavailable in your country).","title":"Additional tips"},{"location":"HowToAsk/","text":"A quick introduction Imagine you want to know how to get from \"Old street\" to \"New street\". You call a random person to get help and you ask \"What is the fastest way I can get from Old street 19 to New street 3?\". Would the random person be able to help you? There are a lot of \"New\" and \"Old\" streets in the world, so first he would need to know what country and city you are in. If the street layout is complicated then maybe you need to name some buildings that are near you. Of course because speed is an issue then your means of transportation is also important; are you by foot, bike, car or truck? You can go on foot into places where you can't get by truck. Those questions around the immediate question \"How do I X?\" is the context of the problem, it helps other people orient to the problem. Giving advice without context could mean that the other person will describe the wrong city. In person it's easy to ask those questions and can be done in rapid succession, although on the forums this will result in a lot of back-and-forth questions that can be avoided. So, how to properly give the context to the problem? How to ask a good question People on the forums have limited time available. So, to speed things up, here is a small template for asking a question that will get better answers and answers quicker: The gist of the problem you are having. How did you encounter the problem? What are you trying to accomplish? What is the context of the problem? What are the requirements for the solution? What are the context-specific constraints/properties? Your compilable and runnable example on play.golang.org Other notes about the situation (production/school/playing/learning) Things to keep in mind: Take your time to spell-check and make sure that your sentences are readable. The solution can be far away from the immediate problem. So be sure that the question contains answers to the 5 whys . The template implicitly already contains answers to 3 whys. The context of the question is important, so always give one. Not giving the context may end up hurting you, because you\u2019ll get an answer that\u2019s more suited to a different context. The context is the end-user or domain problem and goal, with the information how it tries to solve it. Try not to ask abstract questions but if you do then add multiple concrete examples. Asking abstract things without concrete examples (usually) wastes time. Although they can be sometimes interesting, the concrete examples allow the discussion to be precise. Avoid imprecise terms such as \"a lot of data\" or \"needs to work fast\". Give something measurable such as \"it needs to work upto 1GB of data\" or \"it needs to communicate with 1000 concurrent clients within 100ms\". If you are not able to give the compilable example in go, any language will do... many people are well versed in other languages. If you are not able to make it compile or run, it's fine too. Try to explain your situation: Noting that \"it is homework\" means people can explain a bit more and won't do the homework for you. Information such as \"it needs to work on a cluster of X nodes\" can provide situational context. Where and how the code must eventually run. Noting that \"it\u2019s for learning X\" makes it clear that you are trying to get a deeper understanding of different approaches. Noting that \"I\u2019m under NDA and can\u2019t disclose the code\", means people won\u2019t bother asking for it. Although you should still try to come up with a similar situation, it helps the answerer. Giving a simplified example can be helpful for readers, but do not forget to give the full version as well. The simplified version is different from the full version and therefore the solutions can be different. Of course, don't worry too much\u2026 you can't answer all possible questions. It's not needed to write a 4 page essay on the whole thing. People can always ask when something needs clarification. The story of a bad question Why is that template necessary? Let's put you in the shoes of the answerer, and let's say you get this question: How do I use the reflect Set method? From the askers perspective this may look like a straightforward problem. Of course, you have no idea what the asker is trying to do. Is he trying to set a value on a value, struct, array or a map? This means you need to ask the first question: Can you give an example? . Now the asker will provide an example: I'm basically trying to do this: m := make(map[string]int) v := reflect.ValueOf(m) key := reflect.ValueOf(\"hello\") val := reflect.ValueOf(123) v.MapIndex(k).Set(val) print(m) But it just panics. Now you've got some code that even doesn't compile. This means you need to copy paste it somewhere and fix the mistakes. Putting it on play.golang.org makes it easier to see the problem (e.g. play.golang.org/p/fCxBlL9V4Y ). The fix is simple; just use SetMapIndex instead. Of course that may not be the full story. The asker now comes back with another problem: Yay, I've got the reflection working, but it's not fast enough. How can I make it faster? What does \"faster\" mean? What is he trying to do? So you need to ask more about the specifics of the problem. So you ask: What are you trying to accomplish? I'm trying to implement a set package that can store generic types. Well, ok, but that still didn't answer why it needs to be faster. Why is he using reflect for that anyway, when you can use map instead. So you answer: Can't you just use map instead (e.g. map[type]struct{} )? What are you writing the set package for?. I'm writing a program that goes over multiple sequences and that finds the common elements. The main use for is for using on nucleotides and it should work on large datasets. But it should also work on proteins, which are represented by another type. Yes, the map[NucleotideIndex]struct{} works a bit better, but it's still not fast enough, and I would now have to write the same code for proteins. Finally we have all the information that's needed. The solution is straightforward: biogo https://code.google.com/p/biogo/ has most of the stuff necessary for handling large datasets and parallelism etc. Also what's the \" NucleotideIndex \". The asker may have found the answer and say: Thanks that's really nice. but there is a possibility of: Whoa, that looks nice, but I'm in a bioinformatics course and we need to write that code ourselves. The \" NucleotideIndex \" is a \" struct {Nucleotide Nucleotide; Index int} \". That looks weird, why would you do it that way. Nevertheless we've all done something stupid, so\u2026 now you can start suggesting something better: Probably dealing with map[Type]map[int]struct{} would be much easier. Because you are dealing with sequences and the set elements are always used in an increasing order you can just store the index in an array e.g. map[Type][]int . Also if the memory starts to become the problem you could make it into a run-length-encoded set\u2026 Now we can have a more meaningful discussion about the (dis)advantages of different set types. Hopefully after this long example, you probably understand why it's useful to provide more information. The initial back and forth questions could have been avoided. Proper question could have saved time for the question asker and the answerer. The initial question could have been: How do I use the reflect Set method with MapIndex ? I'm trying to set a value on a generic map for a set package. But it just gives a panic when I try to do that. play.golang.org/p/fCxBlL9V4Y I use the set package in a program that goes over multiple sequences and find all the common elements in a sequence. The sequence elements could be nucleotides or proteins. The program needs to be able to deal with data-sizes upto 1GB. My current code is available at github.com/... I'm writing this for a bioinformatics course, so I need to implement it myself. Summary: The best answer depends on the context. In some cases maybe research.swtch.com/sparse would be more appropriate. If the speed isn't important using a map would be sufficient. So the requirements are also important. The problem can be somewhere else. As you saw the answerer didn't expect that the structure of the program was at fault. Using a struct NucleotideIndex with a map , meant he had to build elaborate things with reflection. Often when you fix the higher-level problem, everything else will become much easier. Constraints/properties matter. The property \"set elements are used in increasing order\" meant that there was a simple method that didn't require a full-blown set implementation. This specialized structure can be much faster. The information about the system, context or domain may make the problem much simpler. The solution may differ from your usual approaches. Maybe the asker decided to use reflect package, because he was used to generics in Java. Go is different language, so the final solution may look a lot different from the solution in Java. More tips Smart questions Short, Self Contained, Correct (Compilable), Example","title":"HowToAsk"},{"location":"HowToAsk/#a-quick-introduction","text":"Imagine you want to know how to get from \"Old street\" to \"New street\". You call a random person to get help and you ask \"What is the fastest way I can get from Old street 19 to New street 3?\". Would the random person be able to help you? There are a lot of \"New\" and \"Old\" streets in the world, so first he would need to know what country and city you are in. If the street layout is complicated then maybe you need to name some buildings that are near you. Of course because speed is an issue then your means of transportation is also important; are you by foot, bike, car or truck? You can go on foot into places where you can't get by truck. Those questions around the immediate question \"How do I X?\" is the context of the problem, it helps other people orient to the problem. Giving advice without context could mean that the other person will describe the wrong city. In person it's easy to ask those questions and can be done in rapid succession, although on the forums this will result in a lot of back-and-forth questions that can be avoided. So, how to properly give the context to the problem?","title":"A quick introduction"},{"location":"HowToAsk/#how-to-ask-a-good-question","text":"People on the forums have limited time available. So, to speed things up, here is a small template for asking a question that will get better answers and answers quicker: The gist of the problem you are having. How did you encounter the problem? What are you trying to accomplish? What is the context of the problem? What are the requirements for the solution? What are the context-specific constraints/properties? Your compilable and runnable example on play.golang.org Other notes about the situation (production/school/playing/learning) Things to keep in mind: Take your time to spell-check and make sure that your sentences are readable. The solution can be far away from the immediate problem. So be sure that the question contains answers to the 5 whys . The template implicitly already contains answers to 3 whys. The context of the question is important, so always give one. Not giving the context may end up hurting you, because you\u2019ll get an answer that\u2019s more suited to a different context. The context is the end-user or domain problem and goal, with the information how it tries to solve it. Try not to ask abstract questions but if you do then add multiple concrete examples. Asking abstract things without concrete examples (usually) wastes time. Although they can be sometimes interesting, the concrete examples allow the discussion to be precise. Avoid imprecise terms such as \"a lot of data\" or \"needs to work fast\". Give something measurable such as \"it needs to work upto 1GB of data\" or \"it needs to communicate with 1000 concurrent clients within 100ms\". If you are not able to give the compilable example in go, any language will do... many people are well versed in other languages. If you are not able to make it compile or run, it's fine too. Try to explain your situation: Noting that \"it is homework\" means people can explain a bit more and won't do the homework for you. Information such as \"it needs to work on a cluster of X nodes\" can provide situational context. Where and how the code must eventually run. Noting that \"it\u2019s for learning X\" makes it clear that you are trying to get a deeper understanding of different approaches. Noting that \"I\u2019m under NDA and can\u2019t disclose the code\", means people won\u2019t bother asking for it. Although you should still try to come up with a similar situation, it helps the answerer. Giving a simplified example can be helpful for readers, but do not forget to give the full version as well. The simplified version is different from the full version and therefore the solutions can be different. Of course, don't worry too much\u2026 you can't answer all possible questions. It's not needed to write a 4 page essay on the whole thing. People can always ask when something needs clarification.","title":"How to ask a good question"},{"location":"HttpFetch/","text":"Fetching URLs with HTTP See the example in net/http .","title":"HttpFetch"},{"location":"HttpFetch/#fetching-urls-with-http","text":"See the example in net/http .","title":"Fetching URLs with HTTP"},{"location":"HttpStaticFiles/","text":"Serving Static Files with HTTP The HTTP package provides good support for efficiently serving static files. This is a complete Go webserver serving static files: package main import \"net/http\" func main () { panic ( http . ListenAndServe ( \":8080\" , http . FileServer ( http . Dir ( \"/usr/share/doc\" )))) } That example is intentionally short to make a point. Using panic() to deal with an error is probably too aggressive & would produce too much output. See net/http documentation and in particular the FileServer example for a more typical example.","title":"HttpStaticFiles"},{"location":"HttpStaticFiles/#serving-static-files-with-http","text":"The HTTP package provides good support for efficiently serving static files. This is a complete Go webserver serving static files: package main import \"net/http\" func main () { panic ( http . ListenAndServe ( \":8080\" , http . FileServer ( http . Dir ( \"/usr/share/doc\" )))) } That example is intentionally short to make a point. Using panic() to deal with an error is probably too aggressive & would produce too much output. See net/http documentation and in particular the FileServer example for a more typical example.","title":"Serving Static Files with HTTP"},{"location":"IDEsAndTextEditorPlugins/","text":"Editors and IDEs for Go Popular The Go Developer Survey showed these as the most popular editors. * Visual Studio Code : Free & open source IDE by Microsoft. Visual Studio Code supports Go syntax highlighting out of the box. Additional features are provided by the official vscode-go plugin. * GoLand : JetBrains's cross-platform, fully featured Go IDE (commercial). Free for students, teachers, open-source developers, and user-groups ( see details ). Also available as part of IntelliJ IDEA Ultimate. Vim & Neovim : Vi Improved. There are a number of plugins available that make editing Go code easier. The vim-go plugin includes misc/vim and has many other new improvements. The Syntastic plugin gives instant feedback on compile errors The tagbar plugin uses Gotags, above, to show an outline of the current file A vim compiler plugin for syntax checking A vim-godef plugin integrates with the 'godef' tool, above A vim-go-extra is vim plugin based on misc/vim in go repository. This works fine on windows too! The go-ide is a Neovim configuration file that ties go related plugins together making autocomplete, auto-importing, snippets, code formatting, and file search/browsing easier. govim is an LSP-driven vim plugin for Go development, written in Go using Vim8\u2019s channel support. Emacs : Extensible and customizable text editor. It has generic LSP support that works well with gopls, the official Go language server. LSP Mode provides LSP support with a batteries-included approach, with many integrations enabled \u201cout of the box\u201d and several additional behaviors provided by lsp-mode itself. Eglot provides LSP support with a minimally-intrusive approach, focusing on smooth integration with other established packages. It provides a few of its own eglot- commands but no additional keybindings by default. Mode file maintained at dominikh/go-mode.el . GoFlyMake Flymake-style syntax checking for Go go-errcheck.el Errcheck integration for Emacs flycheck-metalinter Flycheck integration for go-metalinter utility go-playground Local playground inside Emacs Less popular These editors are less popular, and may have less modern Go support. In particular, they may not support Go modules. * Atom : JavaScript-based editor from GitHub. Go support at go-plus * BBEdit : free text editor for macOS (with paid upgrade for pro features). * Go support available with the Go-bbpackage module including syntax highlighting, clippings, ctags standard library completion, and tools * Brackets : a modern, open source text editor that understands web design. * go-ide Go support with autocompletion through gocode. * Chime : Capable. Focused. Fast. A Go editor for macOS. * CodePerfect 95 : A blazing fast IDE for Go. * jEdit : open-source, cross-platform text editor written in Java. Syntax-highlighting file available . * Kate Kate is an advanced, cross-platform text editor developed by KDE, with Go support out-of-the-box. * Komodo IDE Powerful cross-platform IDE with built-in Go support * Komodo Edit Powerful cross-platform text editor, Go-lang support available via plugin * LiteIDE : A simple, open source and cross-platform Go IDE * Micro : A modern and intuitive terminal-based text editor written in Go * Go language support (gofmt and goimports) via plugin * Notepad++ : Free source code editor for Windows. * notepadplus-go Syntax highlighting, functions list panel (for code browsing), code completion for keywords & builtins. * The GOnpp plugin (available via Notepad++'s built-in Plugin Manager ) provides code completion (requires gocode), function calltips, goimports integration, and keyboard shortcuts for common go commands. [ sources , binaries ]. * GoAutocomplete is another code completion plugin. * Nova : Native Mac code editor. * Go Language Definition for Nova \u2014 Go syntax highlighting and interface with the Language Server Protocol (LSP) using Google's official gopls language server for Go (if installed). * Go Tools \u2014 Run goimports on save or via a command. Syntax highlighting for Go. * Source Insight : Commercial programming editor & code browser with built-in live analysis for C, C++, C#, Java, and more; helping you understand large projects. * golang.xclf is a Custom Language file adding syntax formatting and some parsing support to Source Insight for Go language. * Sublime Text : Commercial text editor. * GoSublime is a plugin collection with IDE-like features available. * Golang Build is the official Sublime Text package for Go build system integration. * Textadept : Textadept is a fast, minimalist, and remarkably extensible cross-platform text editor. Supports Go syntax highlighting out of the box. * TextMate : Commercial text editor for macOS. Source code available under the GPLv3. Bundle for Go available . Cloud Based IDEs Cloud9 : claims full Go support. Gitpod : GitHub integrated cloud IDE with full Go support.","title":"IDEsAndTextEditorPlugins"},{"location":"IDEsAndTextEditorPlugins/#editors-and-ides-for-go","text":"","title":"Editors and IDEs for Go"},{"location":"IDEsAndTextEditorPlugins/#popular","text":"The Go Developer Survey showed these as the most popular editors. * Visual Studio Code : Free & open source IDE by Microsoft. Visual Studio Code supports Go syntax highlighting out of the box. Additional features are provided by the official vscode-go plugin. * GoLand : JetBrains's cross-platform, fully featured Go IDE (commercial). Free for students, teachers, open-source developers, and user-groups ( see details ). Also available as part of IntelliJ IDEA Ultimate. Vim & Neovim : Vi Improved. There are a number of plugins available that make editing Go code easier. The vim-go plugin includes misc/vim and has many other new improvements. The Syntastic plugin gives instant feedback on compile errors The tagbar plugin uses Gotags, above, to show an outline of the current file A vim compiler plugin for syntax checking A vim-godef plugin integrates with the 'godef' tool, above A vim-go-extra is vim plugin based on misc/vim in go repository. This works fine on windows too! The go-ide is a Neovim configuration file that ties go related plugins together making autocomplete, auto-importing, snippets, code formatting, and file search/browsing easier. govim is an LSP-driven vim plugin for Go development, written in Go using Vim8\u2019s channel support. Emacs : Extensible and customizable text editor. It has generic LSP support that works well with gopls, the official Go language server. LSP Mode provides LSP support with a batteries-included approach, with many integrations enabled \u201cout of the box\u201d and several additional behaviors provided by lsp-mode itself. Eglot provides LSP support with a minimally-intrusive approach, focusing on smooth integration with other established packages. It provides a few of its own eglot- commands but no additional keybindings by default. Mode file maintained at dominikh/go-mode.el . GoFlyMake Flymake-style syntax checking for Go go-errcheck.el Errcheck integration for Emacs flycheck-metalinter Flycheck integration for go-metalinter utility go-playground Local playground inside Emacs","title":"Popular"},{"location":"IDEsAndTextEditorPlugins/#less-popular","text":"These editors are less popular, and may have less modern Go support. In particular, they may not support Go modules. * Atom : JavaScript-based editor from GitHub. Go support at go-plus * BBEdit : free text editor for macOS (with paid upgrade for pro features). * Go support available with the Go-bbpackage module including syntax highlighting, clippings, ctags standard library completion, and tools * Brackets : a modern, open source text editor that understands web design. * go-ide Go support with autocompletion through gocode. * Chime : Capable. Focused. Fast. A Go editor for macOS. * CodePerfect 95 : A blazing fast IDE for Go. * jEdit : open-source, cross-platform text editor written in Java. Syntax-highlighting file available . * Kate Kate is an advanced, cross-platform text editor developed by KDE, with Go support out-of-the-box. * Komodo IDE Powerful cross-platform IDE with built-in Go support * Komodo Edit Powerful cross-platform text editor, Go-lang support available via plugin * LiteIDE : A simple, open source and cross-platform Go IDE * Micro : A modern and intuitive terminal-based text editor written in Go * Go language support (gofmt and goimports) via plugin * Notepad++ : Free source code editor for Windows. * notepadplus-go Syntax highlighting, functions list panel (for code browsing), code completion for keywords & builtins. * The GOnpp plugin (available via Notepad++'s built-in Plugin Manager ) provides code completion (requires gocode), function calltips, goimports integration, and keyboard shortcuts for common go commands. [ sources , binaries ]. * GoAutocomplete is another code completion plugin. * Nova : Native Mac code editor. * Go Language Definition for Nova \u2014 Go syntax highlighting and interface with the Language Server Protocol (LSP) using Google's official gopls language server for Go (if installed). * Go Tools \u2014 Run goimports on save or via a command. Syntax highlighting for Go. * Source Insight : Commercial programming editor & code browser with built-in live analysis for C, C++, C#, Java, and more; helping you understand large projects. * golang.xclf is a Custom Language file adding syntax formatting and some parsing support to Source Insight for Go language. * Sublime Text : Commercial text editor. * GoSublime is a plugin collection with IDE-like features available. * Golang Build is the official Sublime Text package for Go build system integration. * Textadept : Textadept is a fast, minimalist, and remarkably extensible cross-platform text editor. Supports Go syntax highlighting out of the box. * TextMate : Commercial text editor for macOS. Source code available under the GPLv3. Bundle for Go available .","title":"Less popular"},{"location":"IDEsAndTextEditorPlugins/#cloud-based-ides","text":"Cloud9 : claims full Go support. Gitpod : GitHub integrated cloud IDE with full Go support.","title":"Cloud Based IDEs"},{"location":"InstallFromSource/","text":"Introduction This is a companion to http://golang.org/doc/install/source providing additional instructions for various operating systems. Install C tools On OS X, a C compiler is bundled in the command line tools for Xcode , and you don't need to install the whole Xcode to compile Go. If you have already installed Xcode 4.3+, you can install command line tools from the Components tab of the Downloads preferences panel. In more recent versions of Xcode, you can use xcode-select --install command to install the command line tools without opening Xcode. To verify you have a working compiler, just invoke gcc in a freshly created Terminal window, unless you see the \"gcc: command not found\" error, you are ready to go. On Ubuntu/Debian, use sudo apt-get install gcc libc6-dev . If you want to build 32-bit binaries on a 64-bit system you'll also need the libc6-dev-i386 package. On RedHat/Centos 6, use sudo yum install gcc glibc-devel . If you want to build 32-bit binaries on a 64-bit system you'll need both glibc-devel.i386 and glibc-devel.x86_64 packages. On Windows, install gcc with TDM-GCC . or try TDM-GCC Sourceforge link . (Make sure you add its bin subdirectory to your PATH .) Go does not support the Cygwin toolchain.","title":"InstallFromSource"},{"location":"InstallFromSource/#introduction","text":"This is a companion to http://golang.org/doc/install/source providing additional instructions for various operating systems.","title":"Introduction"},{"location":"InstallFromSource/#install-c-tools","text":"On OS X, a C compiler is bundled in the command line tools for Xcode , and you don't need to install the whole Xcode to compile Go. If you have already installed Xcode 4.3+, you can install command line tools from the Components tab of the Downloads preferences panel. In more recent versions of Xcode, you can use xcode-select --install command to install the command line tools without opening Xcode. To verify you have a working compiler, just invoke gcc in a freshly created Terminal window, unless you see the \"gcc: command not found\" error, you are ready to go. On Ubuntu/Debian, use sudo apt-get install gcc libc6-dev . If you want to build 32-bit binaries on a 64-bit system you'll also need the libc6-dev-i386 package. On RedHat/Centos 6, use sudo yum install gcc glibc-devel . If you want to build 32-bit binaries on a 64-bit system you'll need both glibc-devel.i386 and glibc-devel.x86_64 packages. On Windows, install gcc with TDM-GCC . or try TDM-GCC Sourceforge link . (Make sure you add its bin subdirectory to your PATH .) Go does not support the Cygwin toolchain.","title":"Install C tools"},{"location":"InterfaceSlice/","text":"Introduction Given that you can assign a variable of any type to an interface{} , often people will try code like the following. var dataSlice [] int = foo () var interfaceSlice [] interface {} = dataSlice This gets the error cannot use dataSlice (type []int) as type []interface { } in assignment The question then, \"Why can't I assign any slice to an []interface{} , when I can assign any type to an interface{} ?\" Why? There are two main reasons for this. The first is that a variable with type []interface{} is not an interface! It is a slice whose element type happens to be interface{} . But even given this, one might say that the meaning is clear. Well, is it? A variable with type []interface{} has a specific memory layout, known at compile time. Each interface{} takes up two words (one word for the type of what is contained, the other word for either the contained data or a pointer to it). As a consequence, a slice with length N and with type []interface{} is backed by a chunk of data that is N*2 words long. This is different than the chunk of data backing a slice with type []MyType and the same length. Its chunk of data will be N*sizeof(MyType) words long. The result is that you cannot quickly assign something of type []MyType to something of type []interface{} ; the data behind them just look different. What can I do instead? It depends on what you wanted to do in the first place. If you want a container for an arbitrary array type, and you plan on changing back to the original type before doing any indexing operations, you can just use an interface{} . The code will be generic (if not compile-time type-safe) and fast. If you really want a []interface{} because you'll be doing indexing before converting back, or you are using a particular interface type and you want to use its methods, you will have to make a copy of the slice. var dataSlice [] int = foo () var interfaceSlice [] interface {} = make ([] interface {}, len ( dataSlice )) for i , d := range dataSlice { interfaceSlice [ i ] = d }","title":"InterfaceSlice"},{"location":"InterfaceSlice/#introduction","text":"Given that you can assign a variable of any type to an interface{} , often people will try code like the following. var dataSlice [] int = foo () var interfaceSlice [] interface {} = dataSlice This gets the error cannot use dataSlice (type []int) as type []interface { } in assignment The question then, \"Why can't I assign any slice to an []interface{} , when I can assign any type to an interface{} ?\"","title":"Introduction"},{"location":"InterfaceSlice/#why","text":"There are two main reasons for this. The first is that a variable with type []interface{} is not an interface! It is a slice whose element type happens to be interface{} . But even given this, one might say that the meaning is clear. Well, is it? A variable with type []interface{} has a specific memory layout, known at compile time. Each interface{} takes up two words (one word for the type of what is contained, the other word for either the contained data or a pointer to it). As a consequence, a slice with length N and with type []interface{} is backed by a chunk of data that is N*2 words long. This is different than the chunk of data backing a slice with type []MyType and the same length. Its chunk of data will be N*sizeof(MyType) words long. The result is that you cannot quickly assign something of type []MyType to something of type []interface{} ; the data behind them just look different.","title":"Why?"},{"location":"InterfaceSlice/#what-can-i-do-instead","text":"It depends on what you wanted to do in the first place. If you want a container for an arbitrary array type, and you plan on changing back to the original type before doing any indexing operations, you can just use an interface{} . The code will be generic (if not compile-time type-safe) and fast. If you really want a []interface{} because you'll be doing indexing before converting back, or you are using a particular interface type and you want to use its methods, you will have to make a copy of the slice. var dataSlice [] int = foo () var interfaceSlice [] interface {} = make ([] interface {}, len ( dataSlice )) for i , d := range dataSlice { interfaceSlice [ i ] = d }","title":"What can I do instead?"},{"location":"InvalidFlag/","text":"invalid flag in #cgo CFLAGS This page describes the background for build errors like invalid flag in #cgo CFLAGS and what you can do about them. CVE-2018-6574 described a potential security violation in the go tool: running go get downloads and builds Go code from the Internet, Go code that uses cgo can specify options to pass to the compiler, so careful use of -fplugin can cause go get to execute arbitrary code. While it is difficult to block every possible way that the compiler might be attacked, we have chosen to block the obvious ones. As described at issue 23672 , this is done by using a safelist of compiler/linker options that are permitted during go get , go build , and friends. When cgo code tries to use to pass an option that is not on the safelist, the go tool will report an error invalid flag in #cgo CFLAGS (or #cgo LDFLAGS , pkg-config --cflags , pkg-config --ldflags , and so forth). This safelist is new in releases 1.8.7, 1.9.4, and 1.10, and all subsequent releases. What can I do? If this happens to you, and the option is benign, you should do two things: 1. Set the environment variable CGO_CFLAGS_ALLOW (or CGO_LDFLAGS_ALLOW , CGO_CXXFLAGS_ALLOW , and so forth) to a regexp that matches the option. 2. File a bug requesting that the option be added to the safelist. Be sure to include the complete error message and, if possible, a description of the code you are building. Why not use an unsafe list? Because if some new unsafe option is added to a compiler, all existing Go releases will become immediately vulnerable. Why not get a complete list of compiler options and safelist all of them? Because there are hundreds of options, and there is no clear way to get a complete list. Many compiler and linker options are target dependent, and thus only reported on specific platforms or in specific configurations. The documentation is known to be incomplete.","title":"InvalidFlag"},{"location":"InvalidFlag/#invalid-flag-in-cgo-cflags","text":"This page describes the background for build errors like invalid flag in #cgo CFLAGS and what you can do about them. CVE-2018-6574 described a potential security violation in the go tool: running go get downloads and builds Go code from the Internet, Go code that uses cgo can specify options to pass to the compiler, so careful use of -fplugin can cause go get to execute arbitrary code. While it is difficult to block every possible way that the compiler might be attacked, we have chosen to block the obvious ones. As described at issue 23672 , this is done by using a safelist of compiler/linker options that are permitted during go get , go build , and friends. When cgo code tries to use to pass an option that is not on the safelist, the go tool will report an error invalid flag in #cgo CFLAGS (or #cgo LDFLAGS , pkg-config --cflags , pkg-config --ldflags , and so forth). This safelist is new in releases 1.8.7, 1.9.4, and 1.10, and all subsequent releases.","title":"invalid flag in #cgo CFLAGS"},{"location":"InvalidFlag/#what-can-i-do","text":"If this happens to you, and the option is benign, you should do two things: 1. Set the environment variable CGO_CFLAGS_ALLOW (or CGO_LDFLAGS_ALLOW , CGO_CXXFLAGS_ALLOW , and so forth) to a regexp that matches the option. 2. File a bug requesting that the option be added to the safelist. Be sure to include the complete error message and, if possible, a description of the code you are building.","title":"What can I do?"},{"location":"InvalidFlag/#why-not-use-an-unsafe-list","text":"Because if some new unsafe option is added to a compiler, all existing Go releases will become immediately vulnerable.","title":"Why not use an unsafe list?"},{"location":"InvalidFlag/#why-not-get-a-complete-list-of-compiler-options-and-safelist-all-of-them","text":"Because there are hundreds of options, and there is no clear way to get a complete list. Many compiler and linker options are target dependent, and thus only reported on specific platforms or in specific configurations. The documentation is known to be incomplete.","title":"Why not get a complete list of compiler options and safelist all of them?"},{"location":"Iota/","text":"Summary Go's iota identifier is used in const declarations to simplify definitions of incrementing numbers. Because it can be used in expressions, it provides a generality beyond that of simple enumerations. The value of iota is reset to 0 whenever the reserved word const appears in the source (i.e. each const block) and incremented by one after each ConstSpec e.g. each Line. This can be combined with the constant shorthand (leaving out everything after the constant name) to very concisely define related constants. Iota: http://golang.org/doc/go_spec.html#Iota Constant declarations: http://golang.org/doc/go_spec.html#Constant_declarations Examples The official spec has two great examples: http://golang.org/doc/go_spec.html#Iota Here's one from Effective Go: type ByteSize float64 const ( _ = iota // ignore first value by assigning to blank identifier KB ByteSize = 1 << (10 * iota) MB GB TB PB EB ZB YB ) Weekday enum example - How iota is calculated - From Learn Go Programming Blog : Articles Ultimate Visual Guide to Go Enums and Iota 2017-10-09","title":"Iota"},{"location":"Iota/#summary","text":"Go's iota identifier is used in const declarations to simplify definitions of incrementing numbers. Because it can be used in expressions, it provides a generality beyond that of simple enumerations. The value of iota is reset to 0 whenever the reserved word const appears in the source (i.e. each const block) and incremented by one after each ConstSpec e.g. each Line. This can be combined with the constant shorthand (leaving out everything after the constant name) to very concisely define related constants. Iota: http://golang.org/doc/go_spec.html#Iota Constant declarations: http://golang.org/doc/go_spec.html#Constant_declarations","title":"Summary"},{"location":"Iota/#examples","text":"The official spec has two great examples: http://golang.org/doc/go_spec.html#Iota Here's one from Effective Go: type ByteSize float64 const ( _ = iota // ignore first value by assigning to blank identifier KB ByteSize = 1 << (10 * iota) MB GB TB PB EB ZB YB ) Weekday enum example - How iota is calculated - From Learn Go Programming Blog :","title":"Examples"},{"location":"Iota/#articles","text":"Ultimate Visual Guide to Go Enums and Iota 2017-10-09","title":"Articles"},{"location":"IssueLabels/","text":"Go Issue Tracker Labels This page is no longer necessary, as GitHub now supports label descriptions. See https://github.com/golang/go/labels instead.","title":"IssueLabels"},{"location":"IssueLabels/#go-issue-tracker-labels","text":"This page is no longer necessary, as GitHub now supports label descriptions. See https://github.com/golang/go/labels instead.","title":"Go Issue Tracker Labels"},{"location":"Learn/","text":"In addition to the resources available at golang.org there are a range of community-driven initiatives: Go in 5 Minutes The Little Go Book Tutorials Point Exercism.io - Go - Online code exercises for Go for practice and mentorship. EXLskills - A$AP Learn Go - Fast-paced free and open course for getting going with Go Learn Go in an Hour - Video 2015-02-15 Learning to Program in Go , a multi-part video training class. Learn Go with Tests - An introduction to Go using a TDD approach. Pluralsight Classes for Go - A growing collection of (paid) online classes. Ardan Labs Training - Commercial, live instruction for Go programming. O'Reilly Go Fundamentals - Video learning path for Go programming. Go By Example provides a series of annotated code snippets. Learn Go in Y minutes is a top-to-bottom walk-through of the language. Workshop-Go - Startup Slam Go Workshop - examples and slides. Go Fragments - A collection of annotated Go code examples. 50 Shades of Go: Traps, Gotchas, Common Mistakes for New Golang Devs Free Go Language Workshop Framework Training is running regular free BYOD workshops in London, UK Golang Tutorials - A free online class. Rob Pike's 2011 three day course - Day 1 , Day 2 , Day 3 ( links are broken , use the archived links from the wayback machine. Day 1 , Day 2 , Day 3 ) The Go Bridge Foundry - A member of the Bridge Foundry family, offering a complete set of free Go training materials with the goal of bringing Go to under-served communities. Golangbot - Tutorials to get started with programming in Go. Master Go - A paid online video course on Go for developers Learn to Create Web Applications using Go - A paid online video course and book about Web programming with Go Learn Go Programming - Weekly visual and concise tutorials for programming in Go. Gophercises - coding exercises for budding gophers Algorithms to Go - Texts about algorithms and Go, with plenty of code examples. Games With Go - Video series teaching programming fundamentals with game related projects. Go Language Tutorials - List of popular sites, blogs and tutorials for learning Go language. Golang Development Video Course - A growing list of videos focused purely on Go development. Go: The Complete Bootcamp Course - Step by step and intuitive explanations for every aspect of Go using animations (Paid) Learning Golang - TutorialEdge - A growing list of articles and courses on the fundamentals of Go. Go Discourse - Another forum base on Go, without framework and ORM. \u062f\u0648\u0631\u0629 \u0644\u063a\u0629 \u063a\u0648 \u0628\u0627\u0644\u0639\u0631\u0628\u064a Apuntes de Golang en Espa\u00f1ol - Apuntes para aprender Go en Espa\u00f1ol desde Cero. Go Classes at Codecademy - Online courses introducing the basics of Go. Learning resources for specific topics: * LearnConcurrency outlines a course of study of Go's concurrency model and patterns. * LearnErrorHandling links to resources about error handling in Go. * LearnTesting links to resources about testing in Go. * LearnServerProgramming links to resources about server programming in Go. * Golang Online Courses - A collection of Go online courses from several providers at Classpert * Hackr.io Golang Tutorials - Best Golang tutorials recommended by the programming community.","title":"Learn"},{"location":"LearnConcurrency/","text":"This page links to resources for learning about concurrency in Go. The items are presented in order, from beginner material to advanced topics. Beginner Read Effective Go: Concurrency Watch Simulating a real-world system in Go Study The Go Programming Language Specification , especially Go statements Channel types Send statements Receive operator Select statements Code A Tour of Go: Concurrency Read the Frequently Asked Questions (FAQ) , especially Why build concurrency on the ideas of CSP? Why goroutines instead of threads? Why are map operations not defined to be atomic? What operations are atomic? What about mutexes? Why doesn't my program run faster with more CPUs? How can I control the number of CPUs? What happens with closures running as goroutines? Intermediate Study Go by Example from goroutines through stateful goroutines Watch Go Concurrency Patterns Watch A Practical Guide to Preventing Deadlocks and Leaks in Go Read Share Memory By Communicating and do the codewalk Read Go Concurrency Patterns: Timing out, moving on Watch Concurrency is not Parallelism Read Go Concurrency Patterns: Pipelines and Cancellation Read Rethinking Classical Concurrency Patterns Study Package sync Read Introducing the Go Race Detector Watch Go: code that grows with grace Read Mutexes and Semaphores Demystified Advanced Watch Advanced Go Concurrency Patterns Read Advanced Go Concurrency Patterns Read Go Concurrency Patterns: Context Study The Go Memory Model Study Package atomic Read Principles of Designing Go APIs with Channels Read Advanced Go Concurrency Primitives Watch The Scheduler Saga Read The Scheduler Saga Watch Understanding Channels Read Understanding Channels","title":"LearnConcurrency"},{"location":"LearnConcurrency/#beginner","text":"Read Effective Go: Concurrency Watch Simulating a real-world system in Go Study The Go Programming Language Specification , especially Go statements Channel types Send statements Receive operator Select statements Code A Tour of Go: Concurrency Read the Frequently Asked Questions (FAQ) , especially Why build concurrency on the ideas of CSP? Why goroutines instead of threads? Why are map operations not defined to be atomic? What operations are atomic? What about mutexes? Why doesn't my program run faster with more CPUs? How can I control the number of CPUs? What happens with closures running as goroutines?","title":"Beginner"},{"location":"LearnConcurrency/#intermediate","text":"Study Go by Example from goroutines through stateful goroutines Watch Go Concurrency Patterns Watch A Practical Guide to Preventing Deadlocks and Leaks in Go Read Share Memory By Communicating and do the codewalk Read Go Concurrency Patterns: Timing out, moving on Watch Concurrency is not Parallelism Read Go Concurrency Patterns: Pipelines and Cancellation Read Rethinking Classical Concurrency Patterns Study Package sync Read Introducing the Go Race Detector Watch Go: code that grows with grace Read Mutexes and Semaphores Demystified","title":"Intermediate"},{"location":"LearnConcurrency/#advanced","text":"Watch Advanced Go Concurrency Patterns Read Advanced Go Concurrency Patterns Read Go Concurrency Patterns: Context Study The Go Memory Model Study Package atomic Read Principles of Designing Go APIs with Channels Read Advanced Go Concurrency Primitives Watch The Scheduler Saga Read The Scheduler Saga Watch Understanding Channels Read Understanding Channels","title":"Advanced"},{"location":"LearnErrorHandling/","text":"This page links to resources about error handling in Go. Getting Started Read Effective Go: Errors Code A Tour of Go: Errors and do the exercise Study The Go Programming Language Specification: Errors Study Package errors Study func fmt.Errorf Standard Practice Read Why does Go not have exceptions? Read Error handling and Go Read Go by Example: Errors Read Errors are values Read Working with Errors in Go 1.13 Read golang/go/wiki: Errors Advanced Topics Read Why is my nil error value not equal to nil? Read Defer, Panic, and Recover","title":"LearnErrorHandling"},{"location":"LearnErrorHandling/#getting-started","text":"Read Effective Go: Errors Code A Tour of Go: Errors and do the exercise Study The Go Programming Language Specification: Errors Study Package errors Study func fmt.Errorf","title":"Getting Started"},{"location":"LearnErrorHandling/#standard-practice","text":"Read Why does Go not have exceptions? Read Error handling and Go Read Go by Example: Errors Read Errors are values Read Working with Errors in Go 1.13 Read golang/go/wiki: Errors","title":"Standard Practice"},{"location":"LearnErrorHandling/#advanced-topics","text":"Read Why is my nil error value not equal to nil? Read Defer, Panic, and Recover","title":"Advanced Topics"},{"location":"LearnServerProgramming/","text":"This page links to resources for learning about server programming in Go - both web services and mobile backends. The items are organized into sections by topic. Getting Started Read Writing Web Applications with the Go standard library Read Build a Web Application With Go from the author of the BeeGo web framework Read Webapps in Go the anti textbook Read Building Web Applications in Go from the author of the Negroni and Martini webserver toolkits. First learn the absolute basics before going to this book. Read Building Your Own Web Framework in Go a 5-part series. Watch Go: code that grows with grace Download a full working 3-tier application example from the Sourcegraph Team. Middleware A topic you will see discussed frequently is \"middleware\". If you're not familiar with that term, we suggest you start out by reading a few of these articles: Middleware in Go: Best practices and examples 2014-11-13 Custom Handlers Part 1 - Avoiding Globals , Part 2 - Error Handling 2014-07-16 Making and Using HTTP Middleware 2014-10-21 Writing HTTP Middleware in Go 2013-10-09 Toolkits and Frameworks Before you decide to adopt a third party web framework or toolkit, keep in mind that the Go standard library provides all of the tools you need to build a sophisticated, modern web application. Keeping with Go's preference for simplicity and composability over complexity and magic, we suggest you see how far the standard library can take you . If you decide you need a bit more infrastructure, start by looking at some of the toolkits and libraries available. Toolkits & Libraries & Microframeworks Gorilla Toolkit Negroni Toolkit - Idiomatic HTTP Middleware for Go Echo Framework - Fast and Unfancy Goji Web Microframework Go Craft Middleware Go RESTful - Toolkit for RESTful service APIs limiter - Simple rate-limiting middleware for Go Kite Micro-service framework Alice - Painless middleware chaining for Go YAM - Yet Another Mux Bone - Fast HTTP Router Frameworks BeeGo Framework Frodo - Go mini web framework inspired by Laravel(php), Slim(php) and ExpressJS(node.js) GinGonic Macaron - Productive, modular web framework in Go. Revel Web Framework Ringo - Lightweight MVC web framework inspired by Rails, Gin. Utron - Lightweight MVC framework for web applications. Iris - Fast MVC framework for web applications. Communication Package net/http provides HTTP client and server implementations. Package encoding/json implements encoding and decoding of JSON objects as defined in RFC 4627. Package net/rpc provides access to the exported methods of an object across a network or other I/O connection. Package os/exec runs external commands. Presentation Package text/template implements data-driven templates for generating textual output. Package html/template implements data-driven templates for generating HTML output safe against code injection. Profiling and Performance Read Profiling Go Programs Read Arrays, slices (and strings): The mechanics of 'append' Read the Frequently Asked Questions (FAQ) , especially Why does Go perform badly on benchmark X? Why do garbage collection? Won't it be too expensive? Package bufio implements buffered I/O. Package runtime/pprof writes runtime profiling data in the format expected by the pprof visualization tool. Package net/http/pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool. Tracing, Monitoring, Logging, and Configuration Package expvar provides a standardized interface to public variables, such as operation counters in servers. Package flag implements command-line flag parsing. Package log implements a simple logging package. Package glog implements logging analogous to the Google-internal C++ INFO/ERROR/V setup. Storage Package os provides a platform-independent interface to operating system functionality. Package path/filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths. Package database/sql provides a generic interface around SQL (or SQL-like) databases. Platforms Google Cloud Platform Read Go, Cloud Endpoints and App Engine, Part 1 , Part 2 Read Google Cloud Platform: Go Runtime Environment Watch Go and the Google Cloud Platform Read Go on App Engine: tools, tests, and concurrency Get Google Cloud Platform Go Libraries Read Deploying Go servers with Docker Search packages for Google Cloud or gcloud Search packages for App Engine or GAE Amazon Web Services The aws-sdk-go repository provides automatically generated AWS clients in Go. It has official support from Amazon. Package goamz enables Go programs to interact with the Amazon Web Services. Search packages for AWS or Amazon services Microsoft Azure Microsoft OpenTech's azure-sdk-for-go provides a Golang package that makes it easy to consume and manage Microsoft Azure Services. Search packages for Azure Openstack / Rackspace Gophercloud is a Golang SDK for working with OpenStack clouds. Search packages for Openstack or Rackspace IBM BlueMix Write your first Golang app on BlueMix","title":"LearnServerProgramming"},{"location":"LearnServerProgramming/#getting-started","text":"Read Writing Web Applications with the Go standard library Read Build a Web Application With Go from the author of the BeeGo web framework Read Webapps in Go the anti textbook Read Building Web Applications in Go from the author of the Negroni and Martini webserver toolkits. First learn the absolute basics before going to this book. Read Building Your Own Web Framework in Go a 5-part series. Watch Go: code that grows with grace Download a full working 3-tier application example from the Sourcegraph Team.","title":"Getting Started"},{"location":"LearnServerProgramming/#middleware","text":"A topic you will see discussed frequently is \"middleware\". If you're not familiar with that term, we suggest you start out by reading a few of these articles: Middleware in Go: Best practices and examples 2014-11-13 Custom Handlers Part 1 - Avoiding Globals , Part 2 - Error Handling 2014-07-16 Making and Using HTTP Middleware 2014-10-21 Writing HTTP Middleware in Go 2013-10-09","title":"Middleware"},{"location":"LearnServerProgramming/#toolkits-and-frameworks","text":"Before you decide to adopt a third party web framework or toolkit, keep in mind that the Go standard library provides all of the tools you need to build a sophisticated, modern web application. Keeping with Go's preference for simplicity and composability over complexity and magic, we suggest you see how far the standard library can take you . If you decide you need a bit more infrastructure, start by looking at some of the toolkits and libraries available.","title":"Toolkits and Frameworks"},{"location":"LearnServerProgramming/#toolkits--libraries--microframeworks","text":"Gorilla Toolkit Negroni Toolkit - Idiomatic HTTP Middleware for Go Echo Framework - Fast and Unfancy Goji Web Microframework Go Craft Middleware Go RESTful - Toolkit for RESTful service APIs limiter - Simple rate-limiting middleware for Go Kite Micro-service framework Alice - Painless middleware chaining for Go YAM - Yet Another Mux Bone - Fast HTTP Router","title":"Toolkits &amp; Libraries &amp; Microframeworks"},{"location":"LearnServerProgramming/#frameworks","text":"BeeGo Framework Frodo - Go mini web framework inspired by Laravel(php), Slim(php) and ExpressJS(node.js) GinGonic Macaron - Productive, modular web framework in Go. Revel Web Framework Ringo - Lightweight MVC web framework inspired by Rails, Gin. Utron - Lightweight MVC framework for web applications. Iris - Fast MVC framework for web applications.","title":"Frameworks"},{"location":"LearnServerProgramming/#communication","text":"Package net/http provides HTTP client and server implementations. Package encoding/json implements encoding and decoding of JSON objects as defined in RFC 4627. Package net/rpc provides access to the exported methods of an object across a network or other I/O connection. Package os/exec runs external commands.","title":"Communication"},{"location":"LearnServerProgramming/#presentation","text":"Package text/template implements data-driven templates for generating textual output. Package html/template implements data-driven templates for generating HTML output safe against code injection.","title":"Presentation"},{"location":"LearnServerProgramming/#profiling-and-performance","text":"Read Profiling Go Programs Read Arrays, slices (and strings): The mechanics of 'append' Read the Frequently Asked Questions (FAQ) , especially Why does Go perform badly on benchmark X? Why do garbage collection? Won't it be too expensive? Package bufio implements buffered I/O. Package runtime/pprof writes runtime profiling data in the format expected by the pprof visualization tool. Package net/http/pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool.","title":"Profiling and Performance"},{"location":"LearnServerProgramming/#tracing-monitoring-logging-and-configuration","text":"Package expvar provides a standardized interface to public variables, such as operation counters in servers. Package flag implements command-line flag parsing. Package log implements a simple logging package. Package glog implements logging analogous to the Google-internal C++ INFO/ERROR/V setup.","title":"Tracing, Monitoring, Logging, and Configuration"},{"location":"LearnServerProgramming/#storage","text":"Package os provides a platform-independent interface to operating system functionality. Package path/filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths. Package database/sql provides a generic interface around SQL (or SQL-like) databases.","title":"Storage"},{"location":"LearnServerProgramming/#platforms","text":"","title":"Platforms"},{"location":"LearnServerProgramming/#google-cloud-platform","text":"Read Go, Cloud Endpoints and App Engine, Part 1 , Part 2 Read Google Cloud Platform: Go Runtime Environment Watch Go and the Google Cloud Platform Read Go on App Engine: tools, tests, and concurrency Get Google Cloud Platform Go Libraries Read Deploying Go servers with Docker Search packages for Google Cloud or gcloud Search packages for App Engine or GAE","title":"Google Cloud Platform"},{"location":"LearnServerProgramming/#amazon-web-services","text":"The aws-sdk-go repository provides automatically generated AWS clients in Go. It has official support from Amazon. Package goamz enables Go programs to interact with the Amazon Web Services. Search packages for AWS or Amazon services","title":"Amazon Web Services"},{"location":"LearnServerProgramming/#microsoft-azure","text":"Microsoft OpenTech's azure-sdk-for-go provides a Golang package that makes it easy to consume and manage Microsoft Azure Services. Search packages for Azure","title":"Microsoft Azure"},{"location":"LearnServerProgramming/#openstack--rackspace","text":"Gophercloud is a Golang SDK for working with OpenStack clouds. Search packages for Openstack or Rackspace","title":"Openstack / Rackspace"},{"location":"LearnServerProgramming/#ibm-bluemix","text":"Write your first Golang app on BlueMix","title":"IBM BlueMix"},{"location":"LearnTesting/","text":"This page links to resources about testing in Go. Read How to Write Go Code , especially Testing Study Package testing Read Why does Go not have assertions? Read Where is my favorite helper function for testing? Watch Testing Techniques Read TableDrivenTests Read Using Subtests and Sub-benchmarks","title":"LearnTesting"},{"location":"Linux/","text":"Go on Linux Kernel version Architectures Initial support version Final support version TBD mips, mipsle Go 1.8 TBD s390x Go 1.7 4.8 or above mips64le Go 1.6 TBD mips64 Go 1.6 TBD arm64, ppc64, ppc64le Go 1.5 3.1 or above arm Go 1.1 * 2.6.23 or above amd64, 386 Go 1 * * Go 1.5 or above is recommended.","title":"Linux"},{"location":"Linux/#go-on-linux","text":"Kernel version Architectures Initial support version Final support version TBD mips, mipsle Go 1.8 TBD s390x Go 1.7 4.8 or above mips64le Go 1.6 TBD mips64 Go 1.6 TBD arm64, ppc64, ppc64le Go 1.5 3.1 or above arm Go 1.1 * 2.6.23 or above amd64, 386 Go 1 * * Go 1.5 or above is recommended.","title":"Go on Linux"},{"location":"LinuxKernelSignalVectorBug/","text":"Introduction If you reached this page because of a message like this printed by a Go program: runtime: note: your Linux kernel may be buggy runtime: note: see https://golang.org/wiki/LinuxKernelSignalVectorBug runtime: note: mlock workaround for kernel bug failed with errno <number> then you are using a Linux kernel that may have a bug. This kernel bug may have caused memory corruption in your Go program, and may have caused your Go program to crash. If you understand why your program crashed, then you can ignore this page. Otherwise, this page will explain what the kernel bug is, and includes a C program that you can use to check whether your kernel has the bug. Bug description A bug was introduced in Linux kernel version 5.2: if a signal is delivered to a thread, and delivering the signal requires faulting in pages of the thread signal stack, then AVX YMM registers may be corrupted upon returning from the signal to the program. If the program was executing some function that uses the YMM registers, that function can behave unpredictably. The bug only happens on systems with an x86 processor. The bug affects programs written in any language. The bug only affects programs that receive signals. Among programs that receive signals, the bug is more likely to affect programs that use an alternate signal stack. The bug only affects programs that use the YMM registers. In Go programs in particular the bug will normally cause memory corruption, as Go programs primarily use the YMM registers to implement copying one memory buffer to another. The bug was reported to the Linux kernel developers . It was quickly fixed. The bug fix was not ported back to the Linux kernel 5.2 series. The bug was fixed in Linux kernel versions 5.3.15, 5.4.2, and 5.5 and later. The bug is only present if the kernel was compiled with GCC 9 or later. The bug is present in vanilla Linux kernel versions 5.2.x for any x, 5.3.0 through 5.3.14, and 5.4.0 and 5.4.1. However, many distros that are shipping those kernel versions have in fact backported the patch (which is very small). And, some distros are still compiling their kernel with GCC 8, in which case the kernel does not have the bug. In other words, even if your kernel is in the vulnerable range, there is a good chance that it is not vulnerable to the bug. Bug test To test whether your kernel has the bug, you can run the following C program (click on \"Details\" to see the program). On a buggy kernel, it will fail almost immediately. On a kernel without the bug, it will run for 60 seconds and then exit with a 0 status. // Build with: gcc -pthread test.c // // This demonstrates an issue where AVX state becomes corrupted when a // signal is delivered where the signal stack pages aren't faulted in. // // There appear to be three necessary ingredients, which are marked // with \"!!!\" below: // // 1. A thread doing AVX operations using YMM registers. // // 2. A signal where the kernel must fault in stack pages to write the // signal context. // // 3. Context switches. Having a single task isn't sufficient. #include <errno.h> #include <signal.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #include <pthread.h> #include <sys/mman.h> #include <sys/prctl.h> #include <sys/wait.h> static int sigs ; static stack_t altstack ; static pthread_t tid ; static void die ( const char * msg , int err ) { if ( err != 0 ) { fprintf ( stderr , \"%s: %s \\n \" , msg , strerror ( err )); } else { fprintf ( stderr , \"%s \\n \" , msg ); } exit ( EXIT_FAILURE ); } void handler ( int sig __attribute__ (( unused )), siginfo_t * info __attribute__ (( unused )), void * context __attribute__ (( unused ))) { sigs ++ ; } void * sender ( void * arg ) { int err ; for (;;) { usleep ( 100 ); err = pthread_kill ( tid , SIGWINCH ); if ( err != 0 ) die ( \"pthread_kill\" , err ); } return NULL ; } void dump ( const char * label , unsigned char * data ) { printf ( \"%s =\" , label ); for ( int i = 0 ; i < 32 ; i ++ ) printf ( \" %02x\" , data [ i ]); printf ( \" \\n \" ); } void doAVX ( void ) { unsigned char input [ 32 ]; unsigned char output [ 32 ]; // Set input to a known pattern. for ( int i = 0 ; i < sizeof input ; i ++ ) input [ i ] = i ; // Mix our PID in so we detect cross-process leakage, though this // doesn't appear to be what's happening. pid_t pid = getpid (); memcpy ( input , & pid , sizeof pid ); while ( 1 ) { for ( int i = 0 ; i < 1000 ; i ++ ) { // !!! Do some computation we can check using YMM registers. asm volatile ( \"vmovdqu %1, %%ymm0;\" \"vmovdqa %%ymm0, %%ymm1;\" \"vmovdqa %%ymm1, %%ymm2;\" \"vmovdqa %%ymm2, %%ymm3;\" \"vmovdqu %%ymm3, %0;\" : \"=m\" ( output ) : \"m\" ( input ) : \"memory\" , \"ymm0\" , \"ymm1\" , \"ymm2\" , \"ymm3\" ); // Check that input == output. if ( memcmp ( input , output , sizeof input ) != 0 ) { dump ( \"input \" , input ); dump ( \"output\" , output ); die ( \"mismatch\" , 0 ); } } // !!! Release the pages of the signal stack. This is necessary // because the error happens when copy_fpstate_to_sigframe enters // the failure path that handles faulting in the stack pages. // (mmap with MMAP_FIXED also works.) // // (We do this here to ensure it doesn't race with the signal // itself.) if ( madvise ( altstack . ss_sp , altstack . ss_size , MADV_DONTNEED ) != 0 ) die ( \"madvise\" , errno ); } } void doTest () { // Create an alternate signal stack so we can release its pages. void * altSigstack = mmap ( NULL , SIGSTKSZ , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , -1 , 0 ); if ( altSigstack == MAP_FAILED ) die ( \"mmap failed\" , errno ); altstack . ss_sp = altSigstack ; altstack . ss_size = SIGSTKSZ ; if ( sigaltstack ( & altstack , NULL ) < 0 ) die ( \"sigaltstack\" , errno ); // Install SIGWINCH handler. struct sigaction sa = { . sa_sigaction = handler , . sa_flags = SA_ONSTACK | SA_RESTART , }; sigfillset ( & sa . sa_mask ); if ( sigaction ( SIGWINCH , & sa , NULL ) < 0 ) die ( \"sigaction\" , errno ); // Start thread to send SIGWINCH. int err ; pthread_t ctid ; tid = pthread_self (); if (( err = pthread_create ( & ctid , NULL , sender , NULL )) != 0 ) die ( \"pthread_create sender\" , err ); // Run test. doAVX (); } void * exiter ( void * arg ) { sleep ( 60 ); exit ( 0 ); } int main () { int err ; pthread_t ctid ; // !!! We need several processes to cause context switches. Threads // probably also work. I don't know if the other tasks also need to // be doing AVX operations, but here we do. int nproc = sysconf ( _SC_NPROCESSORS_ONLN ); for ( int i = 0 ; i < 2 * nproc ; i ++ ) { pid_t child = fork (); if ( child < 0 ) { die ( \"fork failed\" , errno ); } else if ( child == 0 ) { // Exit if the parent dies. prctl ( PR_SET_PDEATHSIG , SIGKILL , 0 , 0 , 0 ); doTest (); } } // Exit after a while. if (( err = pthread_create ( & ctid , NULL , exiter , NULL )) != 0 ) die ( \"pthread_create exiter\" , err ); // Wait for a failure. int status ; if ( wait ( & status ) < 0 ) die ( \"wait\" , errno ); if ( status == 0 ) die ( \"child unexpectedly exited with success\" , 0 ); fprintf ( stderr , \"child process failed \\n \" ); exit ( 1 ); } What to do If your kernel version is in the range that may contain the bug, run the C program above to see if it fails. If it fails, your kernel is buggy. You should upgrade to a newer kernel. There is no workaround for this bug. Go programs built with 1.14 will attempt to mitigate the bug by using the mlock system call to lock the signal stack page into memory. This works because the bug only occurs if the signal stack page has to be faulted in. However, this use of mlock can fail. If you see the message runtime: note: mlock workaround for kernel bug failed with errno 12 the errno 12 (also known as ENOMEM ) means that mlock failed because the system set a limit on the amount of memory that a program can lock. If you can increase the limit, the program may succeed. This is done using ulimit -l . When running a program in a docker container, you can increase the limit by invoking docker with the option -ulimit memlock=67108864 . If you cannot increase the mlock limit, then you can make the bug less likely to interfere with your program by setting the environment variable GODEBUG=asyncpreemptoff=1 when running a Go program. However, this just makes your program less likely to suffer memory corruption (because it reduces the number of signals that your program will receive). The bug is still present, and memory corruption may still occur. Questions? Ask on the mailing list golang-nuts@googlegroups.com , or on any Go forum as described at Questions . Details To see more details on how the bug affects Go programs and how it was detected and understood, see #35777 and #35326 .","title":"LinuxKernelSignalVectorBug"},{"location":"LinuxKernelSignalVectorBug/#introduction","text":"If you reached this page because of a message like this printed by a Go program: runtime: note: your Linux kernel may be buggy runtime: note: see https://golang.org/wiki/LinuxKernelSignalVectorBug runtime: note: mlock workaround for kernel bug failed with errno <number> then you are using a Linux kernel that may have a bug. This kernel bug may have caused memory corruption in your Go program, and may have caused your Go program to crash. If you understand why your program crashed, then you can ignore this page. Otherwise, this page will explain what the kernel bug is, and includes a C program that you can use to check whether your kernel has the bug.","title":"Introduction"},{"location":"LinuxKernelSignalVectorBug/#bug-description","text":"A bug was introduced in Linux kernel version 5.2: if a signal is delivered to a thread, and delivering the signal requires faulting in pages of the thread signal stack, then AVX YMM registers may be corrupted upon returning from the signal to the program. If the program was executing some function that uses the YMM registers, that function can behave unpredictably. The bug only happens on systems with an x86 processor. The bug affects programs written in any language. The bug only affects programs that receive signals. Among programs that receive signals, the bug is more likely to affect programs that use an alternate signal stack. The bug only affects programs that use the YMM registers. In Go programs in particular the bug will normally cause memory corruption, as Go programs primarily use the YMM registers to implement copying one memory buffer to another. The bug was reported to the Linux kernel developers . It was quickly fixed. The bug fix was not ported back to the Linux kernel 5.2 series. The bug was fixed in Linux kernel versions 5.3.15, 5.4.2, and 5.5 and later. The bug is only present if the kernel was compiled with GCC 9 or later. The bug is present in vanilla Linux kernel versions 5.2.x for any x, 5.3.0 through 5.3.14, and 5.4.0 and 5.4.1. However, many distros that are shipping those kernel versions have in fact backported the patch (which is very small). And, some distros are still compiling their kernel with GCC 8, in which case the kernel does not have the bug. In other words, even if your kernel is in the vulnerable range, there is a good chance that it is not vulnerable to the bug.","title":"Bug description"},{"location":"LinuxKernelSignalVectorBug/#bug-test","text":"To test whether your kernel has the bug, you can run the following C program (click on \"Details\" to see the program). On a buggy kernel, it will fail almost immediately. On a kernel without the bug, it will run for 60 seconds and then exit with a 0 status. // Build with: gcc -pthread test.c // // This demonstrates an issue where AVX state becomes corrupted when a // signal is delivered where the signal stack pages aren't faulted in. // // There appear to be three necessary ingredients, which are marked // with \"!!!\" below: // // 1. A thread doing AVX operations using YMM registers. // // 2. A signal where the kernel must fault in stack pages to write the // signal context. // // 3. Context switches. Having a single task isn't sufficient. #include <errno.h> #include <signal.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #include <pthread.h> #include <sys/mman.h> #include <sys/prctl.h> #include <sys/wait.h> static int sigs ; static stack_t altstack ; static pthread_t tid ; static void die ( const char * msg , int err ) { if ( err != 0 ) { fprintf ( stderr , \"%s: %s \\n \" , msg , strerror ( err )); } else { fprintf ( stderr , \"%s \\n \" , msg ); } exit ( EXIT_FAILURE ); } void handler ( int sig __attribute__ (( unused )), siginfo_t * info __attribute__ (( unused )), void * context __attribute__ (( unused ))) { sigs ++ ; } void * sender ( void * arg ) { int err ; for (;;) { usleep ( 100 ); err = pthread_kill ( tid , SIGWINCH ); if ( err != 0 ) die ( \"pthread_kill\" , err ); } return NULL ; } void dump ( const char * label , unsigned char * data ) { printf ( \"%s =\" , label ); for ( int i = 0 ; i < 32 ; i ++ ) printf ( \" %02x\" , data [ i ]); printf ( \" \\n \" ); } void doAVX ( void ) { unsigned char input [ 32 ]; unsigned char output [ 32 ]; // Set input to a known pattern. for ( int i = 0 ; i < sizeof input ; i ++ ) input [ i ] = i ; // Mix our PID in so we detect cross-process leakage, though this // doesn't appear to be what's happening. pid_t pid = getpid (); memcpy ( input , & pid , sizeof pid ); while ( 1 ) { for ( int i = 0 ; i < 1000 ; i ++ ) { // !!! Do some computation we can check using YMM registers. asm volatile ( \"vmovdqu %1, %%ymm0;\" \"vmovdqa %%ymm0, %%ymm1;\" \"vmovdqa %%ymm1, %%ymm2;\" \"vmovdqa %%ymm2, %%ymm3;\" \"vmovdqu %%ymm3, %0;\" : \"=m\" ( output ) : \"m\" ( input ) : \"memory\" , \"ymm0\" , \"ymm1\" , \"ymm2\" , \"ymm3\" ); // Check that input == output. if ( memcmp ( input , output , sizeof input ) != 0 ) { dump ( \"input \" , input ); dump ( \"output\" , output ); die ( \"mismatch\" , 0 ); } } // !!! Release the pages of the signal stack. This is necessary // because the error happens when copy_fpstate_to_sigframe enters // the failure path that handles faulting in the stack pages. // (mmap with MMAP_FIXED also works.) // // (We do this here to ensure it doesn't race with the signal // itself.) if ( madvise ( altstack . ss_sp , altstack . ss_size , MADV_DONTNEED ) != 0 ) die ( \"madvise\" , errno ); } } void doTest () { // Create an alternate signal stack so we can release its pages. void * altSigstack = mmap ( NULL , SIGSTKSZ , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , -1 , 0 ); if ( altSigstack == MAP_FAILED ) die ( \"mmap failed\" , errno ); altstack . ss_sp = altSigstack ; altstack . ss_size = SIGSTKSZ ; if ( sigaltstack ( & altstack , NULL ) < 0 ) die ( \"sigaltstack\" , errno ); // Install SIGWINCH handler. struct sigaction sa = { . sa_sigaction = handler , . sa_flags = SA_ONSTACK | SA_RESTART , }; sigfillset ( & sa . sa_mask ); if ( sigaction ( SIGWINCH , & sa , NULL ) < 0 ) die ( \"sigaction\" , errno ); // Start thread to send SIGWINCH. int err ; pthread_t ctid ; tid = pthread_self (); if (( err = pthread_create ( & ctid , NULL , sender , NULL )) != 0 ) die ( \"pthread_create sender\" , err ); // Run test. doAVX (); } void * exiter ( void * arg ) { sleep ( 60 ); exit ( 0 ); } int main () { int err ; pthread_t ctid ; // !!! We need several processes to cause context switches. Threads // probably also work. I don't know if the other tasks also need to // be doing AVX operations, but here we do. int nproc = sysconf ( _SC_NPROCESSORS_ONLN ); for ( int i = 0 ; i < 2 * nproc ; i ++ ) { pid_t child = fork (); if ( child < 0 ) { die ( \"fork failed\" , errno ); } else if ( child == 0 ) { // Exit if the parent dies. prctl ( PR_SET_PDEATHSIG , SIGKILL , 0 , 0 , 0 ); doTest (); } } // Exit after a while. if (( err = pthread_create ( & ctid , NULL , exiter , NULL )) != 0 ) die ( \"pthread_create exiter\" , err ); // Wait for a failure. int status ; if ( wait ( & status ) < 0 ) die ( \"wait\" , errno ); if ( status == 0 ) die ( \"child unexpectedly exited with success\" , 0 ); fprintf ( stderr , \"child process failed \\n \" ); exit ( 1 ); }","title":"Bug test"},{"location":"LinuxKernelSignalVectorBug/#what-to-do","text":"If your kernel version is in the range that may contain the bug, run the C program above to see if it fails. If it fails, your kernel is buggy. You should upgrade to a newer kernel. There is no workaround for this bug. Go programs built with 1.14 will attempt to mitigate the bug by using the mlock system call to lock the signal stack page into memory. This works because the bug only occurs if the signal stack page has to be faulted in. However, this use of mlock can fail. If you see the message runtime: note: mlock workaround for kernel bug failed with errno 12 the errno 12 (also known as ENOMEM ) means that mlock failed because the system set a limit on the amount of memory that a program can lock. If you can increase the limit, the program may succeed. This is done using ulimit -l . When running a program in a docker container, you can increase the limit by invoking docker with the option -ulimit memlock=67108864 . If you cannot increase the mlock limit, then you can make the bug less likely to interfere with your program by setting the environment variable GODEBUG=asyncpreemptoff=1 when running a Go program. However, this just makes your program less likely to suffer memory corruption (because it reduces the number of signals that your program will receive). The bug is still present, and memory corruption may still occur.","title":"What to do"},{"location":"LinuxKernelSignalVectorBug/#questions","text":"Ask on the mailing list golang-nuts@googlegroups.com , or on any Go forum as described at Questions .","title":"Questions?"},{"location":"LinuxKernelSignalVectorBug/#details","text":"To see more details on how the bug affects Go programs and how it was detected and understood, see #35777 and #35326 .","title":"Details"},{"location":"Livestreams/","text":"This table attempts to collect all known regular livestreams centered around Go. Please keep each table sorted alphabetically by name. Note that conferences and podcasts have their own wiki pages already, and should not be included here. Similarly, meetups are already collected here . In English Name Topic (short) Frequency Link Ashley Jeffs Working on Benthos and OSS Twice per week https://www.youtube.com/c/Jeffail Chewxy Hacking around. Usually machine learning / deep neural networks related Weekly https://www.youtube.com/chewxy Jordan Lewis CockroachDB internals Twice per week https://www.twitch.tv/large__data__bank Matt Layher Linux networking/syscalls in Go Twice per month https://www.twitch.tv/mdlayher Matthew Dempsky Hacking on the Go compiler Three times per week https://www.twitch.tv/mdempsky Michael Stapelberg Hacking on OSS projects Aiming for 1x/month https://www.twitch.tv/stapelberg Travis Jeffery Distributed systems and data streaming Twice a month https://www.twitch.tv/travisjeffery In Russian Name Topic (short) Frequency Link Good reviewer - Bad reviewer Code review and commentary for open source projects Weekly YouTube Generic Talks Podcast about Go and systems programming Weekly YouTube In Chinese Name Topic (short) Frequency Link Go \u591c\u8bfb - TalkGo Weekly Go Online Meetup Weekly YouTube , Bilibili , GitHub","title":"Livestreams"},{"location":"Livestreams/#in-english","text":"Name Topic (short) Frequency Link Ashley Jeffs Working on Benthos and OSS Twice per week https://www.youtube.com/c/Jeffail Chewxy Hacking around. Usually machine learning / deep neural networks related Weekly https://www.youtube.com/chewxy Jordan Lewis CockroachDB internals Twice per week https://www.twitch.tv/large__data__bank Matt Layher Linux networking/syscalls in Go Twice per month https://www.twitch.tv/mdlayher Matthew Dempsky Hacking on the Go compiler Three times per week https://www.twitch.tv/mdempsky Michael Stapelberg Hacking on OSS projects Aiming for 1x/month https://www.twitch.tv/stapelberg Travis Jeffery Distributed systems and data streaming Twice a month https://www.twitch.tv/travisjeffery","title":"In English"},{"location":"Livestreams/#in-russian","text":"Name Topic (short) Frequency Link Good reviewer - Bad reviewer Code review and commentary for open source projects Weekly YouTube Generic Talks Podcast about Go and systems programming Weekly YouTube","title":"In Russian"},{"location":"Livestreams/#in-chinese","text":"Name Topic (short) Frequency Link Go \u591c\u8bfb - TalkGo Weekly Go Online Meetup Weekly YouTube , Bilibili , GitHub","title":"In Chinese"},{"location":"LockOSThread/","text":"Introduction Some libraries\u2014especially graphical frameworks and libraries like Cocoa, OpenGL, and libSDL\u2014use thread-local state and can require functions to be called only from a specific OS thread, typically the 'main' thread. Go provides the runtime.LockOSThread function for this, but it's notoriously difficult to use correctly. Solutions Russ Cox presented a good solution for this problem in this thread . package sdl // Arrange that main.main runs on main thread. func init () { runtime . LockOSThread () } // Main runs the main SDL service loop. // The binary's main.main must call sdl.Main() to run this loop. // Main does not return. If the binary needs to do other work, it // must do it in separate goroutines. func Main () { for f := range mainfunc { f () } } // queue of work to run in main thread. var mainfunc = make ( chan func ()) // do runs f on the main thread. func do ( f func ()) { done := make ( chan bool , 1 ) mainfunc <- func () { f () done <- true } <- done } And then other functions you write in package sdl can be like func Beep () { do ( func () { // whatever must run in main thread }) }","title":"LockOSThread"},{"location":"LockOSThread/#introduction","text":"Some libraries\u2014especially graphical frameworks and libraries like Cocoa, OpenGL, and libSDL\u2014use thread-local state and can require functions to be called only from a specific OS thread, typically the 'main' thread. Go provides the runtime.LockOSThread function for this, but it's notoriously difficult to use correctly.","title":"Introduction"},{"location":"LockOSThread/#solutions","text":"Russ Cox presented a good solution for this problem in this thread . package sdl // Arrange that main.main runs on main thread. func init () { runtime . LockOSThread () } // Main runs the main SDL service loop. // The binary's main.main must call sdl.Main() to run this loop. // Main does not return. If the binary needs to do other work, it // must do it in separate goroutines. func Main () { for f := range mainfunc { f () } } // queue of work to run in main thread. var mainfunc = make ( chan func ()) // do runs f on the main thread. func do ( f func ()) { done := make ( chan bool , 1 ) mainfunc <- func () { f () done <- true } <- done } And then other functions you write in package sdl can be like func Beep () { do ( func () { // whatever must run in main thread }) }","title":"Solutions"},{"location":"MethodSets/","text":"Table of Contents Introduction The Spec Usage Variables Slice Elements Map Elements Interfaces Introduction Method sets of a particular type or value are of particular importance in Go, where the method set determines what interfaces a value implements. The Spec There are two important clauses in the Go Language Specification about method sets. They are as follows: Method Sets : A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other named type T consists of all methods with receiver type T . The method set of the corresponding pointer type *T is the set of all methods with receiver *T or T (that is, it also contains the method set of T ). Any other type has an empty method set. In a method set, each method must have a unique name. Calls : A method call x.m() is valid if the method set of (the type of) x contains m and the argument list can be assigned to the parameter list of m . If x is addressable and &x 's method set contains m , x.m() is shorthand for (&x).m() . Usage There are many different cases during which a method set crops up in day-to-day programming. Some of the main ones are when calling methods on variables, calling methods on slice elements, calling methods on map elements, and storing values in interfaces. Variables In general, when you have a variable of a type, you can pretty much call whatever you want on it. When you combine the two rules above together, the following is valid: type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } func main () { // A bare value var lst List lst . Append ( 1 ) fmt . Printf ( \"%v (len: %d)\\n\" , lst , lst . Len ()) // A pointer value plst := new ( List ) plst . Append ( 2 ) fmt . Printf ( \"%v (len: %d)\\n\" , plst , plst . Len ()) } Note that both pointer and value methods can both be called on both pointer and non-pointer values. To understand why, let's examine the method sets of both types, directly from the spec: List - Len () int * List - Len () int - Append ( int ) Notice that the method set for List does not actually contain Append(int) even though you can see from the above program that you can call the method without a problem. This is a result of the second spec section above. It implicitly translates the first line below into the second: lst . Append ( 1 ) ( & lst ). Append ( 1 ) Now that the value before the dot is a *List , its method set includes Append, and the call is legal. To make it easier to remember these rules, it may be helpful to simply consider the pointer- and value-receiver methods separately from the method set. It is legal to call a pointer-valued method on anything that is already a pointer or whose address can be taken (as is the case in the above example). It is legal to call a value method on anything which is a value or whose value can be dereferenced (as is the case with any pointer; this case is specified explicitly in the spec). Slice Elements Slice elements are almost identical to variables. Because they are addressable, both pointer- and value-receiver methods can be called on both pointer- and value-element slices. Map Elements Map elements are not addressable. Therefore, the following is an illegal operation: lists := map [ string ] List {} lists [ \"primes\" ]. Append ( 7 ) // cannot be rewritten as (&lists[\"primes\"]).Append(7) However, the following is still valid (and is the far more common case): lists := map [ string ] * List {} lists [ \"primes\" ] = new ( List ) lists [ \"primes\" ]. Append ( 7 ) count := lists [ \"primes\" ]. Len () // can be rewritten as (*lists[\"primes\"]).Len() Thus, both pointer- and value-receiver methods can be called on pointer-element maps, but only value-receiver methods can be called on value-element maps. This is the reason that maps with struct elements are almost always made with pointer elements. Interfaces The concrete value stored in an interface is not addressable, in the same way that a map element is not addressable. Therefore, when you call a method on an interface, it must either have an identical receiver type or it must be directly discernible from the concrete type: pointer- and value-receiver methods can be called with pointers and values respectively, as you would expect. Value-receiver methods can be called with pointer values because they can be dereferenced first. Pointer-receiver methods cannot be called with values, however, because the value stored inside an interface has no address. When assigning a value to an interface, the compiler ensures that all possible interface methods can actually be called on that value, and thus trying to make an improper assignment will fail on compilation. To extend the earlier example, the following describes what is valid and what is not: type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } type Appender interface { Append ( int ) } func CountInto ( a Appender , start , end int ) { for i := start ; i <= end ; i ++ { a . Append ( i ) } } type Lener interface { Len () int } func LongEnough ( l Lener ) bool { return l . Len () * 10 > 42 } func main () { // A bare value var lst List CountInto ( lst , 1 , 10 ) // INVALID: Append has a pointer receiver if LongEnough ( lst ) { // VALID: Identical receiver type fmt . Printf ( \" - lst is long enough\" ) } // A pointer value plst := new ( List ) CountInto ( plst , 1 , 10 ) // VALID: Identical receiver type if LongEnough ( plst ) { // VALID: a *List can be dereferenced for the receiver fmt . Printf ( \" - plst is long enough\" ) } }","title":"MethodSets"},{"location":"MethodSets/#table-of-contents","text":"Introduction The Spec Usage Variables Slice Elements Map Elements Interfaces","title":"Table of Contents"},{"location":"MethodSets/#introduction","text":"Method sets of a particular type or value are of particular importance in Go, where the method set determines what interfaces a value implements.","title":"Introduction"},{"location":"MethodSets/#the-spec","text":"There are two important clauses in the Go Language Specification about method sets. They are as follows: Method Sets : A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other named type T consists of all methods with receiver type T . The method set of the corresponding pointer type *T is the set of all methods with receiver *T or T (that is, it also contains the method set of T ). Any other type has an empty method set. In a method set, each method must have a unique name. Calls : A method call x.m() is valid if the method set of (the type of) x contains m and the argument list can be assigned to the parameter list of m . If x is addressable and &x 's method set contains m , x.m() is shorthand for (&x).m() .","title":"The Spec"},{"location":"MethodSets/#usage","text":"There are many different cases during which a method set crops up in day-to-day programming. Some of the main ones are when calling methods on variables, calling methods on slice elements, calling methods on map elements, and storing values in interfaces.","title":"Usage"},{"location":"MethodSets/#variables","text":"In general, when you have a variable of a type, you can pretty much call whatever you want on it. When you combine the two rules above together, the following is valid: type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } func main () { // A bare value var lst List lst . Append ( 1 ) fmt . Printf ( \"%v (len: %d)\\n\" , lst , lst . Len ()) // A pointer value plst := new ( List ) plst . Append ( 2 ) fmt . Printf ( \"%v (len: %d)\\n\" , plst , plst . Len ()) } Note that both pointer and value methods can both be called on both pointer and non-pointer values. To understand why, let's examine the method sets of both types, directly from the spec: List - Len () int * List - Len () int - Append ( int ) Notice that the method set for List does not actually contain Append(int) even though you can see from the above program that you can call the method without a problem. This is a result of the second spec section above. It implicitly translates the first line below into the second: lst . Append ( 1 ) ( & lst ). Append ( 1 ) Now that the value before the dot is a *List , its method set includes Append, and the call is legal. To make it easier to remember these rules, it may be helpful to simply consider the pointer- and value-receiver methods separately from the method set. It is legal to call a pointer-valued method on anything that is already a pointer or whose address can be taken (as is the case in the above example). It is legal to call a value method on anything which is a value or whose value can be dereferenced (as is the case with any pointer; this case is specified explicitly in the spec).","title":"Variables"},{"location":"MethodSets/#slice-elements","text":"Slice elements are almost identical to variables. Because they are addressable, both pointer- and value-receiver methods can be called on both pointer- and value-element slices.","title":"Slice Elements"},{"location":"MethodSets/#map-elements","text":"Map elements are not addressable. Therefore, the following is an illegal operation: lists := map [ string ] List {} lists [ \"primes\" ]. Append ( 7 ) // cannot be rewritten as (&lists[\"primes\"]).Append(7) However, the following is still valid (and is the far more common case): lists := map [ string ] * List {} lists [ \"primes\" ] = new ( List ) lists [ \"primes\" ]. Append ( 7 ) count := lists [ \"primes\" ]. Len () // can be rewritten as (*lists[\"primes\"]).Len() Thus, both pointer- and value-receiver methods can be called on pointer-element maps, but only value-receiver methods can be called on value-element maps. This is the reason that maps with struct elements are almost always made with pointer elements.","title":"Map Elements"},{"location":"MethodSets/#interfaces","text":"The concrete value stored in an interface is not addressable, in the same way that a map element is not addressable. Therefore, when you call a method on an interface, it must either have an identical receiver type or it must be directly discernible from the concrete type: pointer- and value-receiver methods can be called with pointers and values respectively, as you would expect. Value-receiver methods can be called with pointer values because they can be dereferenced first. Pointer-receiver methods cannot be called with values, however, because the value stored inside an interface has no address. When assigning a value to an interface, the compiler ensures that all possible interface methods can actually be called on that value, and thus trying to make an improper assignment will fail on compilation. To extend the earlier example, the following describes what is valid and what is not: type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } type Appender interface { Append ( int ) } func CountInto ( a Appender , start , end int ) { for i := start ; i <= end ; i ++ { a . Append ( i ) } } type Lener interface { Len () int } func LongEnough ( l Lener ) bool { return l . Len () * 10 > 42 } func main () { // A bare value var lst List CountInto ( lst , 1 , 10 ) // INVALID: Append has a pointer receiver if LongEnough ( lst ) { // VALID: Identical receiver type fmt . Printf ( \" - lst is long enough\" ) } // A pointer value plst := new ( List ) CountInto ( plst , 1 , 10 ) // VALID: Identical receiver type if LongEnough ( plst ) { // VALID: a *List can be dereferenced for the receiver fmt . Printf ( \" - plst is long enough\" ) } }","title":"Interfaces"},{"location":"MinimumRequirements/","text":"Minimum Requirements Operating Systems Linux Kernel version 2.6.23 or later. [ This depends on architecture though, we need to have specific builder for this. ] Linux/ARMv5 requires much newer kernels, at least v3.1 (for __kuser_cmpxchg64 ). We don't support CentOS 5. The kernel is too old (2.6.18). For little-endian MIPS64, kernel version 4.1 is known to fail, and 4.8 works . If you are using tinyconfig (e.g. make tinyconfig) for embedded systems, you will also almost certainly enable printk in the kernel as well as a console; we will not include those generic options here. For Go, you must also enable CONFIG_FUTEX. On arm64, an out of date (lower than version 2.33) ld.gold may cause shared library tests to fail, See golang/go#28334 ). Windows For Go 1.10: Windows XP (w/ Service Pack 3) or higher. For Go 1.11 and later: Windows Server 2008R2 and higher or Windows 7 and higher. We test on Windows Server 2008 R2, 2012 R2, and 2016, which are roughly Windows 7, Windows 8, and Windows 10. macOS (n\u00e9e OS X, aka Darwin) macOS Sierra 10.12 or higher requires Go 1.7.1 or above. Go 1.15 and later only support macOS Sierra 10.12 or newer, see https://golang.org/doc/go1.15#darwin We only have builders for 10.12, 10.14 and 10.15 as of 2020-11-18. OpenBSD The current officially supported -stable versions only. DragonFly BSD Generally only the latest release version only. We have a builder, but it's not the most stable of our ports. FreeBSD FreeBSD 10 or higher. We only run builders testing FreeBSD 10.4, 11.2 and 12.0. On arm64, at least 12.0 is required. NetBSD There are known NetBSD bugs (including kernel crashes) up to the current NetBSD 7.1. There is a reported fix in NetBSD 7.1.1 but it's unverified as of 2017-07-10, as we're not running builders again yet. See https://tip.golang.org/doc/go1.9#known_issues and golang/go#20852 Native Client Go 1.13: pepper_39 or newer. Go 1.14 and later: unsupported . Solaris illumos (former OpenSolaris 10) based distributions or Oracle Solaris 11+. Architectures amd64 All 64-bit x86 processors. 386 See https://golang.org/doc/install/source#environment GO386=sse2 (default): Any processor with at least SSE2 GO386=softfloat: All Pentium MMX or later processors (uses software floating point emulation) arm See https://golang.org/doc/install/source#environment GOARM=5: use software floating point; when CPU doesn't have VFP co-processor GOARM=6: use VFPv1 only; default if cross compiling; usually ARM11 or better cores (VFPv2 or better is also supported) GOARM=7: use VFPv3; usually Cortex-A cores arm64 All ARMv8-A processors. ppc64 (big endian) POWER5 and above. Starting with Go 1.9, only POWER8 and above are supported. ppc64le (little endian) POWER8 and above. mips64 (big endian) MIPS III or higher. Builder is using MIPS64r2. mips64le (little endian) MIPS III or higher in little endian mode. s390x z196+ mips (big endian) and mipsle (little endian) MIPS32r1 cgo For programs using cgo, gcc 4.6 or newer is required.","title":"MinimumRequirements"},{"location":"MinimumRequirements/#minimum-requirements","text":"","title":"Minimum Requirements"},{"location":"MinimumRequirements/#operating-systems","text":"","title":"Operating Systems"},{"location":"MinimumRequirements/#linux","text":"Kernel version 2.6.23 or later. [ This depends on architecture though, we need to have specific builder for this. ] Linux/ARMv5 requires much newer kernels, at least v3.1 (for __kuser_cmpxchg64 ). We don't support CentOS 5. The kernel is too old (2.6.18). For little-endian MIPS64, kernel version 4.1 is known to fail, and 4.8 works . If you are using tinyconfig (e.g. make tinyconfig) for embedded systems, you will also almost certainly enable printk in the kernel as well as a console; we will not include those generic options here. For Go, you must also enable CONFIG_FUTEX. On arm64, an out of date (lower than version 2.33) ld.gold may cause shared library tests to fail, See golang/go#28334 ).","title":"Linux"},{"location":"MinimumRequirements/#windows","text":"For Go 1.10: Windows XP (w/ Service Pack 3) or higher. For Go 1.11 and later: Windows Server 2008R2 and higher or Windows 7 and higher. We test on Windows Server 2008 R2, 2012 R2, and 2016, which are roughly Windows 7, Windows 8, and Windows 10.","title":"Windows"},{"location":"MinimumRequirements/#macos-n\u00e9e-os-x-aka-darwin","text":"macOS Sierra 10.12 or higher requires Go 1.7.1 or above. Go 1.15 and later only support macOS Sierra 10.12 or newer, see https://golang.org/doc/go1.15#darwin We only have builders for 10.12, 10.14 and 10.15 as of 2020-11-18.","title":"macOS (n\u00e9e OS X, aka Darwin)"},{"location":"MinimumRequirements/#openbsd","text":"The current officially supported -stable versions only.","title":"OpenBSD"},{"location":"MinimumRequirements/#dragonfly-bsd","text":"Generally only the latest release version only. We have a builder, but it's not the most stable of our ports.","title":"DragonFly BSD"},{"location":"MinimumRequirements/#freebsd","text":"FreeBSD 10 or higher. We only run builders testing FreeBSD 10.4, 11.2 and 12.0. On arm64, at least 12.0 is required.","title":"FreeBSD"},{"location":"MinimumRequirements/#netbsd","text":"There are known NetBSD bugs (including kernel crashes) up to the current NetBSD 7.1. There is a reported fix in NetBSD 7.1.1 but it's unverified as of 2017-07-10, as we're not running builders again yet. See https://tip.golang.org/doc/go1.9#known_issues and golang/go#20852","title":"NetBSD"},{"location":"MinimumRequirements/#native-client","text":"Go 1.13: pepper_39 or newer. Go 1.14 and later: unsupported .","title":"Native Client"},{"location":"MinimumRequirements/#solaris","text":"illumos (former OpenSolaris 10) based distributions or Oracle Solaris 11+.","title":"Solaris"},{"location":"MinimumRequirements/#architectures","text":"","title":"Architectures"},{"location":"MinimumRequirements/#amd64","text":"All 64-bit x86 processors.","title":"amd64"},{"location":"MinimumRequirements/#386","text":"See https://golang.org/doc/install/source#environment GO386=sse2 (default): Any processor with at least SSE2 GO386=softfloat: All Pentium MMX or later processors (uses software floating point emulation)","title":"386"},{"location":"MinimumRequirements/#arm","text":"See https://golang.org/doc/install/source#environment GOARM=5: use software floating point; when CPU doesn't have VFP co-processor GOARM=6: use VFPv1 only; default if cross compiling; usually ARM11 or better cores (VFPv2 or better is also supported) GOARM=7: use VFPv3; usually Cortex-A cores","title":"arm"},{"location":"MinimumRequirements/#arm64","text":"All ARMv8-A processors.","title":"arm64"},{"location":"MinimumRequirements/#ppc64-big-endian","text":"POWER5 and above. Starting with Go 1.9, only POWER8 and above are supported.","title":"ppc64 (big endian)"},{"location":"MinimumRequirements/#ppc64le-little-endian","text":"POWER8 and above.","title":"ppc64le (little endian)"},{"location":"MinimumRequirements/#mips64-big-endian","text":"MIPS III or higher. Builder is using MIPS64r2.","title":"mips64 (big endian)"},{"location":"MinimumRequirements/#mips64le-little-endian","text":"MIPS III or higher in little endian mode.","title":"mips64le (little endian)"},{"location":"MinimumRequirements/#s390x","text":"z196+","title":"s390x"},{"location":"MinimumRequirements/#mips-big-endian-and-mipsle-little-endian","text":"MIPS32r1","title":"mips (big endian) and mipsle (little endian)"},{"location":"MinimumRequirements/#cgo","text":"For programs using cgo, gcc 4.6 or newer is required.","title":"cgo"},{"location":"MinorReleases/","text":"Our default decision should always be to not backport, but fixes for security issues , serious problems with no workaround , and documentation fixes are backported to the most recent two release branches, if applicable to that branch. (for example, the most current two release branches are release-branch.go1.13 and release-branch.go1.14 , from which new Go 1.13.x and Go 1.14.x releases are cut) Fixes for experimental ports are generally not backported. A \u201cserious\u201d problem is one that prevents a program from working at all. As soon as an interested party thinks an issue should be considered for backport, they open one or two \u201cchild\u201d issues titled like package: title [1.9 backport] . The issue should include a link to the original issue and a short rationale about why the backport might be needed. GopherBot is capable of opening the backport issues automatically in response to comments like the following on the main issue. (The keywords are @gopherbot , backport , please and optionally the release. The entire message is quoted in the new issue.) @gopherbot please consider this for backport to 1.10, it's a regression. @gopherbot please open the backport tracking issues. This is a severe compiler bug. The fix is developed for the main issue, which is closed when the fix is merged to the master branch. The child issue is assigned to the minor release milestone and labeled CherryPickCandidate , and its candidacy is discussed there. Once it is approved it transitions to CherryPickApproved . Release managers (a subset of the Go team that handles the release process) and/or code owners approve cherry-picks via an informal process. When the child issue is labeled CherryPickApproved , the original author of the change fixing that issue should immediately create and mail a cherry-pick change against the release branch, which will be merged as soon as it is ready, closing the child issue. At release time, any open backport issue which is not release-blocker is pushed to the next minor release milestone, and a minor release is minted with the already merged changes. Making cherry-pick CLs Note that only the authors of the original CL (or maintainers with the \"impersonate\" permission) have the ability to create the cherry-pick. Once the main fix has been submitted to master, please make a cherry-pick CL to the applicable release branch. You can use the Gerrit UI to make a cherry-pick if there are no merge conflicts: In the popup enter the branch name (like release-branch.go1.10 ), add the commit message prefix (like [release-branch.go1.10] ), update the \"Fixes\" line and do not change any of the other automated lines. To cherry-pick from the command line or to resolve a merge conflict, take note of the final commit hash, then use git codereview and git cherry-pick to prepare a cherry-pick CL: git checkout release-branch.go1.10 git codereview change cherry-pick-NNNN git cherry-pick $COMMIT_HASH git commit --amend # add message prefix and change Fixes line git codereview mail The cherry-pick CL must include a message prefix like [release-branch.go1.10] , and update the \"Fixes\" line to the child issue. Do not change or remove the \"Change-Id\" line nor the other Gerrit lines. Gerrit is configured to only allow release managers to submit to release branches, but the code review process is otherwise the usual. At this time, it's not possible to make a cherry-pick CL by sending a [[Pull Request|GerritBot]]. Only Gerrit is supported. See golang.org/issue/30037 . Cherry-pick CLs for vendored golang.org/x packages The Go standard library includes some generated files whose source of truth is outside the main repository, in golang.org/x repositories. For example, a copy of the golang.org/x/sys/unix package is vendored into the Go tree, and a copy of the golang.org/x/net/http2 package is bundled . That means a fix to a golang.org/x package that needs to be backported to a Go release will need two corresponding CLs: In the golang.org/x repository, cherry-pick the fix from the master branch to the internal-branch.go1.x-vendor branch. The commit message should include \"Updates golang/go#nnn\" to mention the backport issue. In the main repository on the release-branch.go1.x branch, create a CL that pulls in the fix from the golang.org/x internal branch: go get -d golang.org/x/repo@internal-branch.go1.x-vendor go mod tidy go mod vendor go generate -run=bundle std # If a bundled package needs regeneration. The commit message should include \"Fixes #nnn\" to close the backport issue. (As of Go 1.16, the golang.org/x branch name is always internal-branch.go1.x-vendor . In Go 1.15, the name of the golang.org/x branch is release-branch.go1.x or release-branch.go1.x-bundle in special cases .) Security releases Security releases preempt the next minor release and need to ship only the security fix. To avoid rolling back the release branch in that exceptional case, a new release branch is created based on the previous release. For example release-branch.go1.9-security is branched from tag go1.9.4 . The release is tagged from that branch, and the branch is then merged into the main release branch. For example go1.9.5 is tagged from release-branch.go1.9-security , which is then merged into release-branch.go1.9 .","title":"MinorReleases"},{"location":"MinorReleases/#making-cherry-pick-cls","text":"Note that only the authors of the original CL (or maintainers with the \"impersonate\" permission) have the ability to create the cherry-pick. Once the main fix has been submitted to master, please make a cherry-pick CL to the applicable release branch. You can use the Gerrit UI to make a cherry-pick if there are no merge conflicts: In the popup enter the branch name (like release-branch.go1.10 ), add the commit message prefix (like [release-branch.go1.10] ), update the \"Fixes\" line and do not change any of the other automated lines. To cherry-pick from the command line or to resolve a merge conflict, take note of the final commit hash, then use git codereview and git cherry-pick to prepare a cherry-pick CL: git checkout release-branch.go1.10 git codereview change cherry-pick-NNNN git cherry-pick $COMMIT_HASH git commit --amend # add message prefix and change Fixes line git codereview mail The cherry-pick CL must include a message prefix like [release-branch.go1.10] , and update the \"Fixes\" line to the child issue. Do not change or remove the \"Change-Id\" line nor the other Gerrit lines. Gerrit is configured to only allow release managers to submit to release branches, but the code review process is otherwise the usual. At this time, it's not possible to make a cherry-pick CL by sending a [[Pull Request|GerritBot]]. Only Gerrit is supported. See golang.org/issue/30037 .","title":"Making cherry-pick CLs"},{"location":"MinorReleases/#cherry-pick-cls-for-vendored-golangorgx-packages","text":"The Go standard library includes some generated files whose source of truth is outside the main repository, in golang.org/x repositories. For example, a copy of the golang.org/x/sys/unix package is vendored into the Go tree, and a copy of the golang.org/x/net/http2 package is bundled . That means a fix to a golang.org/x package that needs to be backported to a Go release will need two corresponding CLs: In the golang.org/x repository, cherry-pick the fix from the master branch to the internal-branch.go1.x-vendor branch. The commit message should include \"Updates golang/go#nnn\" to mention the backport issue. In the main repository on the release-branch.go1.x branch, create a CL that pulls in the fix from the golang.org/x internal branch: go get -d golang.org/x/repo@internal-branch.go1.x-vendor go mod tidy go mod vendor go generate -run=bundle std # If a bundled package needs regeneration. The commit message should include \"Fixes #nnn\" to close the backport issue. (As of Go 1.16, the golang.org/x branch name is always internal-branch.go1.x-vendor . In Go 1.15, the name of the golang.org/x branch is release-branch.go1.x or release-branch.go1.x-bundle in special cases .)","title":"Cherry-pick CLs for vendored golang.org/x packages"},{"location":"MinorReleases/#security-releases","text":"Security releases preempt the next minor release and need to ship only the security fix. To avoid rolling back the release branch in that exceptional case, a new release branch is created based on the previous release. For example release-branch.go1.9-security is branched from tag go1.9.4 . The release is tagged from that branch, and the branch is then merged into the main release branch. For example go1.9.5 is tagged from release-branch.go1.9-security , which is then merged into release-branch.go1.9 .","title":"Security releases"},{"location":"Mobile/","text":"* *The Go mobile subrepository adds support for mobile platforms (Android and iOS) and provides tools to build mobile applications. There are two strategies you can follow to include Go into your mobile stack: Writing all-Go native mobile applications. Writing SDK applications by generating bindings from a Go package and invoke them from Java (on Android) and Objective-C (on iOS). This article will contain step-by-step guides to explain how to achieve these strategies. Tools Native applications Building and deploying to Android Building and deploying to iOS App icon SDK applications Building and deploying to Android Building and deploying to iOS iOS Simulator Tools Note: You need to have Go 1.5 or above to install mobile tools. (Or at least Go 1.7.4 if using macOS Sierra) Go Mobile introduces a new tool, gomobile , to help you with the build and the binding process. gomobile support Go Modules now! $ gomobile bind -v -o android.aar -target=android ./package under project directory works now. On macOS, you will need to have Xcode Command Line Tools installed. When using Go 1.16.x we have to switch the module aware build mode to auto before we can install/use gomobile by executing: go env -w GO111MODULE=auto Then you can install gomobile tools: $ go get golang.org/x/mobile/cmd/gomobile $ gomobile init (The following sections will help you how to use the gomobile tool.) Native applications The native category includes applications entirely written in Go. Currently, the golang.org/x/mobile contains only a small set of packages that focus on: App control and configuration OpenGL ES 2 and ES 3 bindings Asset management Event management Experimental packages include OpenAL bindings, audio, font, sprite and motion sensors There are various example native applications under golang.org/x/mobile/example . We will build and deploy the basic example both to an Android and iOS device. Grab the application. $ go get -d golang.org/x/mobile/example/basic Building and deploying to Android Run gomobile build to build an Android APK. $ gomobile build -target=android golang.org/x/mobile/example/basic Build command will build an APK named basic.apk. If an AndroidManifest.xml is defined in the package directory, it is added to the APK output. Otherwise, a default manifest is generated. If you have the adb command installed on your machine, you can use gomobile install to build and push the APK to your mobile device. $ gomobile install golang.org/x/mobile/example/basic Building and deploying to iOS Run gomobile build to build the package as an iOS application. Note: target=ios requires the host machine running macOS. You need to obtain a signing identity and download provisioning profiles in order to continue. $ gomobile build -target=ios golang.org/x/mobile/example/basic The build command will build an application bundle, named basic.app . You can deploy .app files by dragging and dropping them to the device. In Xcode, open Window > Devices. Select the physical device from the left pane. Drag and drop the .app file to \"Installed Apps\" section. Check the \"Copy items if needed\" option Alternatively, you can deploy application bundles to your iOS device by using the ios-deploy utility command line tool. Use ios-deploy to push the application to your device. $ ios-deploy -b basic.app App icon It is possible to set an app icon by creating assets/icon.png . SDK applications and generating bindings In this category, we will show you how you can use a Go package in your existing Android or iOS application. The advantages to following this strategy: You can reuse a Go package from a mobile app without making significant changes to your existing application. In cases where you want to share a common code base between your Android and iOS application, you can write the common functionality once in Go and glue them to the platform-specific code by invoking the Go package through bindings. Current limitations are listed below. Only a subset of Go types are currently supported. Language bindings have a performance overhead. There are a few limitations on how the exported APIs should look due to the limitations of the target language. We will use the example package under golang.org/x/mobile/example/bind/hello to generate bindings and invoke Greetings function from Java and Objective-C. Grab the example by running the command below. $ go get -d golang.org/x/mobile/example/bind/... Building and deploying to Android Note: Go Mobile runs on the same architectures as Go, which currently means ARM, ARM64, 386 and amd64 devices and emulators. Notably, Android on MIPS devices is not yet supported. Run the following command to generate the aar file that is suitable for importing into Android projects: $ gomobile bind -o app/hello.aar -target=android golang.org/x/mobile/example/bind/hello Launch Android Studio. File > Import Project\u2026 to import the reference project from $GOPATH/src/golang.org/x/mobile/example/bind/android. Build and deploy the application to the device. The app module contains the main application that invokes the hello.Greetings . When the application is launched the text view is updated with the string returned value. If you are not using Android Studio, in order to work with bindings for Android, you need to have Android SDK installed and ANDROID_HOME environment variable set to the SDK path. You also need the NDK installed; the easiest way is to run the SDK command sdkmanager ndk-bundle . Alternatively, if you are not familiar with android development, and you do not wish to set up all the required environment (Android SDK, Gradle, etc), you can use this Dockerfile to build the application in docker instead. Besides, if you try to add yourmodule.aar into your own project, after copy the yourmodule.aar file and yourmodule.jar file to \"androidapp\" folder, below editing in \"androidappbuild.gradle\" file should be done in order to make your module imported correctly. + repositories { + flatDir { + dirs '.' + } + } dependencies { ... + implementation (name:'yourmodulename', ext:'aar') } Building and deploying to iOS Note: target=ios requires the host machine to be running macOS. $ cd $GOPATH/src/golang.org/x/mobile/example/bind $ gomobile bind -target=ios golang.org/x/mobile/example/bind/hello Gomobile bind will generate a framework bundle called Hello.framework . Open the sample Xcode project by running the command below. $ open ios/bind.xcodeproj Drag and drop the Hello.framework bundle to the Xcode project. Check \"Copy items if needed\" if you need a different copy of the framework bundle within the Xcode otherwise. Otherwise, modifying the Go package source code and rerunning gomobile bind will update the hello.framework. If you decide to keep Hello.framework in the main directory you have to add the main directory to the Framework Search Paths in the the targets Build Settings. Your project layout should look like what's shown below. Build and run it on the simulator or an actual device (Cmd+R). When the application launches, the label on the main view will be modified with the string returned from GoHelloGreetings which invokes the hello.Greetings function. Note that you can also invoke GoHelloGreetings from Swift by importing Hello. @ import Hello // ... let msg = Hello . GoHelloGreetings ( \"gopher\" ) iOS Simulator As of Go 1.5, only darwin/amd64 works on the iOS simulator. To use the simulator, you need to configure Xcode to only try to run 64-bit binaries. Xcode matches the bit width of the ARM binaries when running on the X86 simulator. That is, if you configure Xcode to build both 32-bit and 64-bit ARM binaries (the default), it will attempt to run 32-bit X86 binaries on the simulator, which will not work with Go today. Modify the Xcode build settings to only build 64-bit ARM binaries, and the simulator will run the amd64 binary.","title":"Mobile"},{"location":"Mobile/#tools","text":"Note: You need to have Go 1.5 or above to install mobile tools. (Or at least Go 1.7.4 if using macOS Sierra) Go Mobile introduces a new tool, gomobile , to help you with the build and the binding process. gomobile support Go Modules now! $ gomobile bind -v -o android.aar -target=android ./package under project directory works now. On macOS, you will need to have Xcode Command Line Tools installed. When using Go 1.16.x we have to switch the module aware build mode to auto before we can install/use gomobile by executing: go env -w GO111MODULE=auto Then you can install gomobile tools: $ go get golang.org/x/mobile/cmd/gomobile $ gomobile init (The following sections will help you how to use the gomobile tool.)","title":"Tools"},{"location":"Mobile/#native-applications","text":"The native category includes applications entirely written in Go. Currently, the golang.org/x/mobile contains only a small set of packages that focus on: App control and configuration OpenGL ES 2 and ES 3 bindings Asset management Event management Experimental packages include OpenAL bindings, audio, font, sprite and motion sensors There are various example native applications under golang.org/x/mobile/example . We will build and deploy the basic example both to an Android and iOS device. Grab the application. $ go get -d golang.org/x/mobile/example/basic","title":"Native applications"},{"location":"Mobile/#building-and-deploying-to-android","text":"Run gomobile build to build an Android APK. $ gomobile build -target=android golang.org/x/mobile/example/basic Build command will build an APK named basic.apk. If an AndroidManifest.xml is defined in the package directory, it is added to the APK output. Otherwise, a default manifest is generated. If you have the adb command installed on your machine, you can use gomobile install to build and push the APK to your mobile device. $ gomobile install golang.org/x/mobile/example/basic","title":"Building and deploying to Android"},{"location":"Mobile/#building-and-deploying-to-ios","text":"Run gomobile build to build the package as an iOS application. Note: target=ios requires the host machine running macOS. You need to obtain a signing identity and download provisioning profiles in order to continue. $ gomobile build -target=ios golang.org/x/mobile/example/basic The build command will build an application bundle, named basic.app . You can deploy .app files by dragging and dropping them to the device. In Xcode, open Window > Devices. Select the physical device from the left pane. Drag and drop the .app file to \"Installed Apps\" section. Check the \"Copy items if needed\" option Alternatively, you can deploy application bundles to your iOS device by using the ios-deploy utility command line tool. Use ios-deploy to push the application to your device. $ ios-deploy -b basic.app","title":"Building and deploying to iOS"},{"location":"Mobile/#app-icon","text":"It is possible to set an app icon by creating assets/icon.png .","title":"App icon"},{"location":"Mobile/#sdk-applications-and-generating-bindings","text":"In this category, we will show you how you can use a Go package in your existing Android or iOS application. The advantages to following this strategy: You can reuse a Go package from a mobile app without making significant changes to your existing application. In cases where you want to share a common code base between your Android and iOS application, you can write the common functionality once in Go and glue them to the platform-specific code by invoking the Go package through bindings. Current limitations are listed below. Only a subset of Go types are currently supported. Language bindings have a performance overhead. There are a few limitations on how the exported APIs should look due to the limitations of the target language. We will use the example package under golang.org/x/mobile/example/bind/hello to generate bindings and invoke Greetings function from Java and Objective-C. Grab the example by running the command below. $ go get -d golang.org/x/mobile/example/bind/...","title":"SDK applications and generating bindings"},{"location":"Mobile/#building-and-deploying-to-android_1","text":"Note: Go Mobile runs on the same architectures as Go, which currently means ARM, ARM64, 386 and amd64 devices and emulators. Notably, Android on MIPS devices is not yet supported. Run the following command to generate the aar file that is suitable for importing into Android projects: $ gomobile bind -o app/hello.aar -target=android golang.org/x/mobile/example/bind/hello Launch Android Studio. File > Import Project\u2026 to import the reference project from $GOPATH/src/golang.org/x/mobile/example/bind/android. Build and deploy the application to the device. The app module contains the main application that invokes the hello.Greetings . When the application is launched the text view is updated with the string returned value. If you are not using Android Studio, in order to work with bindings for Android, you need to have Android SDK installed and ANDROID_HOME environment variable set to the SDK path. You also need the NDK installed; the easiest way is to run the SDK command sdkmanager ndk-bundle . Alternatively, if you are not familiar with android development, and you do not wish to set up all the required environment (Android SDK, Gradle, etc), you can use this Dockerfile to build the application in docker instead. Besides, if you try to add yourmodule.aar into your own project, after copy the yourmodule.aar file and yourmodule.jar file to \"androidapp\" folder, below editing in \"androidappbuild.gradle\" file should be done in order to make your module imported correctly. + repositories { + flatDir { + dirs '.' + } + } dependencies { ... + implementation (name:'yourmodulename', ext:'aar') }","title":"Building and deploying to Android"},{"location":"Mobile/#building-and-deploying-to-ios_1","text":"Note: target=ios requires the host machine to be running macOS. $ cd $GOPATH/src/golang.org/x/mobile/example/bind $ gomobile bind -target=ios golang.org/x/mobile/example/bind/hello Gomobile bind will generate a framework bundle called Hello.framework . Open the sample Xcode project by running the command below. $ open ios/bind.xcodeproj Drag and drop the Hello.framework bundle to the Xcode project. Check \"Copy items if needed\" if you need a different copy of the framework bundle within the Xcode otherwise. Otherwise, modifying the Go package source code and rerunning gomobile bind will update the hello.framework. If you decide to keep Hello.framework in the main directory you have to add the main directory to the Framework Search Paths in the the targets Build Settings. Your project layout should look like what's shown below. Build and run it on the simulator or an actual device (Cmd+R). When the application launches, the label on the main view will be modified with the string returned from GoHelloGreetings which invokes the hello.Greetings function. Note that you can also invoke GoHelloGreetings from Swift by importing Hello. @ import Hello // ... let msg = Hello . GoHelloGreetings ( \"gopher\" )","title":"Building and deploying to iOS"},{"location":"Mobile/#ios-simulator","text":"As of Go 1.5, only darwin/amd64 works on the iOS simulator. To use the simulator, you need to configure Xcode to only try to run 64-bit binaries. Xcode matches the bit width of the ARM binaries when running on the X86 simulator. That is, if you configure Xcode to build both 32-bit and 64-bit ARM binaries (the default), it will attempt to run 32-bit X86 binaries on the simulator, which will not work with Go today. Modify the Xcode build settings to only build 64-bit ARM binaries, and the simulator will run the amd64 binary.","title":"iOS Simulator"},{"location":"Modules/","text":"Go Modules This wiki page serves as a usage and troubleshooting guide. * For tutorial blog posts, see Using Go Modules . * For a technical reference, see the Go Modules Reference (under development). Go has included support for versioned modules as proposed here since 1.11. The initial prototype vgo was announced in February 2018. In July 2018, versioned modules landed in the main Go repository. Since Go 1.14 , module support is considered ready for production use, and all users are encouraged to migrate to modules from other dependency management systems. If you are unable to migrate due to a problem in the Go toolchain, please ensure that the problem has an open issue filed. (If the issue is not on the Go1.16 milestone, please comment on why it prevents you from migrating so it can be prioritized appropriately). You can also provide an experience report for more detailed feedback. Recent Changes Go 1.16 See the Go 1.16 release notes for details. Module mode ( GO111MODULE=on ) is the default in all cases Commands no longer modify go.mod / go.sum by default ( -mod=readonly ) go install pkg@version is the recommended way to globally install packages / executables retract is available in go.mod Go 1.15 See the Go 1.15 release notes for details. The location of the module cache may now be set with the GOMODCACHE environment variable. The default value of GOMODCACHE is GOPATH[0]/pkg/mod , the location of the module cache before this change. A workaround is now available for Windows \"Access is denied\" errors in go commands that access the module cache, caused by external programs concurrently scanning the file system (see issue #36568 ). The workaround is not enabled by default because it is not safe to use when Go versions lower than 1.14.2 and 1.13.10 are running concurrently with the same module cache. It can be enabled by explicitly setting the environment variable GODEBUG=modcacheunzipinplace=1 . Go 1.14 See the Go 1.14 release notes for details. When the main module contains a top-level vendor directory and its go.mod file specifies go 1.14 or higher, the go command now defaults to -mod=vendor for operations that accept that flag. -mod=readonly is now set by default when the go.mod file is read-only and no top-level vendor directory is present. -modcacherw is a new flag that instructs the go command to leave newly-created directories in the module cache at their default permissions rather than making them read-only. -modfile=file is a new flag that instructs the go command to read (and possibly write) an alternate go.mod file instead of the one in the module root directory. When module-aware mode is enabled explicitly (by setting GO111MODULE=on ), most module commands have more limited functionality if no go.mod file is present. The go command now supports Subversion repositories in module mode. Go 1.13 See the Go 1.13 release notes for details. The go tool now defaults to downloading modules from the public Go module mirror at https://proxy.golang.org , and also defaults to validating downloaded modules (regardless of source) against the public Go checksum database at https://sum.golang.org . If you have private code, you most likely should configure the GOPRIVATE setting (such as go env -w GOPRIVATE=*.corp.com,github.com/secret/repo ), or the more fine-grained variants GONOPROXY or GONOSUMDB that support less frequent use cases. See the documentation for more details. GO111MODULE=auto enables module-mode if any go.mod is found, even inside GOPATH. (Prior to Go 1.13, GO111MODULE=auto would never enable module-mode inside GOPATH). go get arguments have changed: go get -u (without any arguments) now only upgrades the direct and indirect dependencies of your current package , and no longer examines your entire module . go get -u ./... from your module root upgrades all the direct and indirect dependencies of your module, and now excludes test dependencies. go get -u -t ./... is similar, but also upgrades test dependencies. go get no longer supports -m (because it would have largely overlapped with go get -d due to other changes; you can usually replace go get -m foo with go get -d foo ). Table of Contents The \"Quick Start\" and \"New Concepts\" sections are particularly important for someone who is starting to work with modules. The \"How to\u2026\" sections cover more details on mechanics. The largest quantity of content on this page is in the FAQs answering more specific questions; it can be worthwhile to at least skim the FAQ one-liners listed here. Quick Start Example Daily Workflow New Concepts Modules go.mod Version Selection Semantic Import Versioning How to Use Modules How to Install and Activate Module Support How to Define a Module How to Upgrade and Downgrade Dependencies How to Prepare for a Release (All Versions) How to Prepare for a Release (v2 or Higher) Publishing a Release Migrating to Modules Additional Resources Changes Since the Initial Vgo Proposal GitHub Issues FAQs How are versions marked as incompatible? When do I get old behavior vs. new module-based behavior? Why does installing a tool via 'go get' fail with error 'cannot find main module'? How can I track tool dependencies for a module? What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc.? FAQs \u2014 Additional Control What community tooling exists for working with modules? When should I use the 'replace' directive? Can I work entirely outside of VCS on my local filesystem? How do I use vendoring with modules? Is vendoring going away? Are there \"always on\" module repositories and enterprise proxies? Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies? How do I use modules with CI systems such as Travis or CircleCI? How do I download modules needed to build specific packages or tests? FAQs \u2014 go.mod and go.sum Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'? Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using? Should I still add a 'go.mod' file if I do not have any dependencies? Should I commit my 'go.sum' file as well as my 'go.mod' file? FAQs \u2014 Semantic Import Versioning Why must major version numbers appear in import paths? Why are major versions v0, v1 omitted from import paths? What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+? Can a module consume a package that has not opted in to modules? Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean? How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11? What happens if I create a go.mod but do not apply semver tags to my repository? Can a module depend on a different version of itself? FAQs \u2014 Multi-Module Repositories What are multi-module repositories? Should I have multiple modules in a single repository? Is it possible to add a module to a multi-module repository? Is it possible to remove a module from a multi-module repository? Can a module depend on an internal/ in another? Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file? FAQs \u2014 Minimal Version Selection Won't minimal version selection keep developers from getting important updates? FAQs \u2014 Possible Problems What are some general things I can spot check if I am seeing a problem? What can I check if I am not seeing the expected version of a dependency? Why am I getting an error 'cannot find module providing package foo'? Why does 'go mod init' give the error 'cannot determine module path for source directory'? I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager? How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity? Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used? Do modules work with relative imports like import \"./subdir\" ? Some needed files may not be present in populated vendor directory Quick Start Example The details are covered in the remainder of this page, but here is a simple example of creating a module from scratch. Create a directory outside of your GOPATH, and optionally initialize VCS: $ mkdir -p /tmp/scratchpad/repo $ cd /tmp/scratchpad/repo $ git init -q $ git remote add origin https://github.com/my/repo Initialize a new module: $ go mod init github.com/my/repo go: creating new go.mod: module github.com/my/repo Write your code: $ cat <<EOF > hello.go package main import ( \"fmt\" \"rsc.io/quote\" ) func main() { fmt.Println(quote.Hello()) } EOF Build and run: $ go build -o hello $ ./hello Hello, world. The go.mod file was updated to include explicit versions for your dependencies, where v1.5.2 here is a semver tag: $ cat go.mod module github.com/my/repo require rsc.io/quote v1.5.2 Daily Workflow Note there was no go get required in the example above. Your typical day-to-day workflow can be: Add import statements to your .go code as needed. Standard commands like go build or go test will automatically add new dependencies as needed to satisfy imports (updating go.mod and downloading the new dependencies). When needed, more specific versions of dependencies can be chosen with commands such as go get foo@v1.2.3 , go get foo@master ( foo@default with mercurial), go get foo@e3702bed2 , or by editing go.mod directly. A brief tour of other common functionality you might use: go list -m all \u2014 View final versions that will be used in a build for all direct and indirect dependencies ( details ) go list -u -m all \u2014 View available minor and patch upgrades for all direct and indirect dependencies ( details ) go get -u ./... or go get -u=patch ./... (from module root directory) \u2014 Update all direct and indirect dependencies to latest minor or patch upgrades (pre-releases are ignored) ( details ) go build ./... or go test ./... (from module root directory) \u2014 Build or test all packages in the module ( details ) go mod tidy \u2014 Prune any no-longer-needed dependencies from go.mod and add any dependencies needed for other combinations of OS, architecture, and build tags ( details ) replace directive or gohack \u2014 Use a fork, local copy or exact version of a dependency ( details ) go mod vendor \u2014 Optional step to create a vendor directory ( details ) After reading the next four sections on \"New Concepts\", you will have enough information to get started with modules for most projects. It is also useful to review the Table of Contents above (including the FAQ one-liners there) to familiarize yourself with the list of more detailed topics. New Concepts These sections provide a high-level introduction to the main new concepts. For more details and rationale, please see this 40-minute introductory video by Russ Cox describing the philosophy behind the design , the official proposal document , or the more detailed initial vgo blog series . Modules A module is a collection of related Go packages that are versioned together as a single unit. Modules record precise dependency requirements and create reproducible builds. Most often, a version control repository contains exactly one module defined in the repository root. ( Multiple modules are supported in a single repository , but typically that would result in more work on an on-going basis than a single module per repository). Summarizing the relationship between repositories, modules, and packages: * A repository contains one or more Go modules. * Each module contains one or more Go packages. * Each package consists of one or more Go source files in a single directory. Modules must be semantically versioned according to semver , usually in the form v(major).(minor).(patch) , such as v0.1.0 , v1.2.3 , or v1.5.0-rc.1 . The leading v is required. If using Git, tag released commits with their versions. Public and private module repositories and proxies are becoming available (see FAQ below ). go.mod A module is defined by a tree of Go source files with a go.mod file in the tree's root directory. Module source code may be located outside of GOPATH. There are four directives: module , require , replace , exclude . Here is an example go.mod file defining the module github.com/my/thing : module github.com/my/thing require ( github.com/some/dependency v1.2.3 github.com/another/dependency/v4 v4.0.0 ) A module declares its identity in its go.mod via the module directive, which provides the module path . The import paths for all packages in a module share the module path as a common prefix. The module path and the relative path from the go.mod to a package's directory together determine a package's import path. For example, if you are creating a module for a repository github.com/user/mymod that will contain two packages with import paths github.com/user/mymod/foo and github.com/user/mymod/bar , then the first line in your go.mod file typically would declare your module path as module github.com/user/mymod , and the corresponding on-disk structure could be: mymod |-- bar | `-- bar.go |-- foo | `-- foo.go `-- go.mod In Go source code, packages are imported using the full path including the module path. For example, if in our example above, we declared the module identity in go.mod as module github.com/user/mymod , a consumer could do: import \"github.com/user/mymod/bar\" This imports package bar from the module github.com/user/mymod . exclude and replace directives only operate on the current (\u201cmain\u201d) module. exclude and replace directives in modules other than the main module are ignored when building the main module. The replace and exclude statements, therefore, allow the main module complete control over its own build, without also being subject to complete control by dependencies. (See FAQ below for a discussion of when to use a replace directive). Version Selection If you add a new import to your source code that is not yet covered by a require in go.mod , most go commands like 'go build' and 'go test' will automatically look up the proper module and add the highest version of that new direct dependency to your module's go.mod as a require directive. For example, if your new import corresponds to dependency M whose latest tagged release version is v1.2.3 , your module's go.mod will end up with require M v1.2.3 , which indicates module M is a dependency with allowed version >= v1.2.3 (and < v2, given v2 is considered incompatible with v1). The minimal version selection algorithm is used to select the versions of all modules used in a build. For each module in a build, the version selected by minimal version selection is always the semantically highest of the versions explicitly listed by a require directive in the main module or one of its dependencies. As an example, if your module depends on module A which has a require D v1.0.0 , and your module also depends on module B which has a require D v1.1.1 , then minimal version selection would choose v1.1.1 of D to include in the build (given it is the highest listed require version). This selection of v1.1.1 remains consistent even if sometime later a v1.2.0 of D becomes available. This is an example of how the modules system provides 100% reproducible builds. When ready, the module author or user might choose to upgrade to the latest available version of D or choose an explicit version for D. For a brief rationale and overview of the minimal version selection algorithm, see the \"High Fidelity Builds\" section of the official proposal, or see the more detailed vgo blog series . To see a list of the selected module versions (including indirect dependencies), use go list -m all . See also the \"How to Upgrade and Downgrade Dependencies\" section below and the \"How are versions marked as incompatible?\" FAQ below. Semantic Import Versioning For many years, the official Go FAQ has included this advice on package versioning: \"Packages intended for public use should try to maintain backward compatibility as they evolve. The Go 1 compatibility guidelines are a good reference here: don't remove exported names, encourage tagged composite literals, and so on. If different functionality is required, add a new name instead of changing an old one. If a complete break is required, create a new package with a new import path.\" The last sentence is especially important \u2014 if you break compatibility, you should change the import path of your package. With Go 1.11 modules, that advice is formalized into the import compatibility rule : \"If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.\" Recall semver requires a major version change when a v1 or higher package makes a backwards-incompatible change. The result of following both the import compatibility rule and semver is called Semantic Import Versioning , where the major version is included in the import path \u2014 this ensures the import path changes any time the major version increments due to a compatibility break. As a result of Semantic Import Versioning, code opting in to Go modules must comply with these rules : * Follow semver . (An example VCS tag is v1.2.3 ). * If the module is version v2 or higher, the major version of the module must be included as a /vN at the end of the module paths used in go.mod files (e.g., module github.com/my/mod/v2 , require github.com/my/mod/v2 v2.0.1 ) and in the package import path (e.g., import \"github.com/my/mod/v2/mypkg\" ). This includes the paths used in go get commands (e.g., go get github.com/my/mod/v2@v2.0.1 . Note there is both a /v2 and a @v2.0.1 in that example. One way to think about it is that the module name now includes the /v2 , so include /v2 whenever you are using the module name). * If the module is version v0 or v1, do not include the major version in either the module path or the import path. In general, packages with different import paths are different packages. For example, math/rand is a different package than crypto/rand . This is also true if different import paths are due to different major versions appearing in the import path. Thus example.com/my/mod/mypkg is a different package than example.com/my/mod/v2/mypkg , and both may be imported in a single build, which among other benefits helps with diamond dependency problems and also allows a v1 module to be implemented in terms of its v2 replacement or vice versa. See the \"Module compatibility and semantic versioning\" section of the go command documentation for more details on Semantic Import Versioning, and see https://semver.org for more about semantic versioning. This section so far has been focused on code that has opted in to modules and imports other modules. However, putting major versions in import paths for v2+ modules could create incompatibilities with older versions of Go, or with code that has not yet opted in to modules. To help with this, there are three important transitional special cases or exceptions to the behavior and rules described above. These transitional exceptions will become less important over time as more packages opt in to modules. Three Transitional Exceptions gopkg.in Existing code that uses import paths starting with gopkg.in (such as gopkg.in/yaml.v1 and gopkg.in/yaml.v2 ) can continue to use those forms for their module paths and import paths even after opting in to modules. '+incompatible' when importing non-module v2+ packages A module can import a v2+ package that has not opted in to modules itself. A non-module v2+ package that has a valid v2+ semver tag will be recorded with a +incompatible suffix in the importing module's go.mod file. The +incompatible suffix indicates that even though the v2+ package has a valid v2+ semver tag such as v2.0.0 , the v2+ package has not actively opted in to modules and hence that v2+ package is assumed to have not been created with an understanding of the implications of Semantic Import Versioning and how to use major versions in import paths. Therefore, when operating in module mode , the go tool will treat a non-module v2+ package as an (incompatible) extension of the v1 version series of the package and assume the package has no awareness of Semantic Import Versioning, and the +incompatible suffix is an indication that the go tool is doing so. \"Minimal module compatibility\" when module mode is not enabled To help with backwards-compatibility, Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated to make it easier for code built with those releases to be able to properly consume v2+ modules without requiring modification of pre-existing code. This behavior is called \"minimal module compatibility\", and it only takes effect when full module mode is disabled for the go tool, such as if such as you have set GO111MODULE=off in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+. When relying on this \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11, a package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules (in order to properly import the v2+ module when the go tool is operating in full module mode with full awareness of Semantic Import Versioning). For the exact mechanics required to release a v2+ module, please see the \"Releasing Modules (v2 or Higher)\" section below. How to Use Modules How to Install and Activate Module Support To use modules, two install options are: * Install the latest Go 1.11 release . * Install the Go toolchain from source on the master branch. Once installed, you can then activate module support in one of two ways: * Invoke the go command in a directory outside of the $GOPATH/src tree, with a valid go.mod file in the current directory or any parent of it and the environment variable GO111MODULE unset (or explicitly set to auto ). * Invoke the go command with GO111MODULE=on environment variable set. How to Define a Module To create a go.mod for an existing project: Navigate to the root of the module's source tree outside of GOPATH: $ cd <project path outside $GOPATH/src> # e.g., cd ~/projects/hello Note that outside of GOPATH, you do not need to set GO111MODULE to activate module mode. Alternatively, if you want to work in your GOPATH: $ export GO111MODULE=on # manually active module mode $ cd $GOPATH/src/<project path> # e.g., cd $GOPATH/src/you/hello Create the initial module definition and write it to the go.mod file: $ go mod init This step converts from any existing dep Gopkg.lock file or any of the other nine total supported dependency formats , adding require statements to match the existing configuration. go mod init will often be able to use auxiliary data (such as VCS meta-data) to automatically determine the appropriate module path, but if go mod init states it can not automatically determine the module path, or if you need to otherwise override that path, you can supply the module path as an optional argument to go mod init , for example: $ go mod init github.com/my/repo Note that if your dependencies include v2+ modules, or if you are initializing a v2+ module, then after running go mod init you might also need to edit your go.mod and .go code to add /vN to import paths and module paths as described in the \"Semantic Import Versioning\" section above. This applies even if go mod init automatically converted your dependency information from dep or other dependency managers. (Because of this, after running go mod init , you typically should not run go mod tidy until you have successfully run go build ./... or similar, which is the sequence shown in this section). Build the module. When executed from the root directory of a module, the ./... pattern matches all the packages within the current module. go build will automatically add missing or unconverted dependencies as needed to satisfy imports for this particular build invocation: $ go build ./... 4. Test the module as configured to ensure that it works with the selected versions: $ go test ./... (Optional) Run the tests for your module plus the tests for all direct and indirect dependencies to check for incompatibilities: $ go test all Prior to tagging a release, see the \"How to Prepare for a Release\" section below. For more information on all of these topics, the primary entry point to the official modules documentation is available on golang.org . How to Upgrade and Downgrade Dependencies Day-to-day upgrading and downgrading of dependencies should be done using 'go get', which will automatically update the go.mod file. Alternatively, you can edit go.mod directly. In addition, go commands like 'go build', 'go test', or even 'go list' will automatically add new dependencies as needed to satisfy imports (updating go.mod and downloading the new dependencies). To upgrade a dependency to the latest version: go get example.com/package To upgrade a dependency and all its dependencies to the latest version: go get -u example.com/package To view available minor and patch upgrades for all direct and indirect dependencies: go list -u -m all To view available minor and patch upgrades only for the direct dependencies, run: go list -u -f '{{if (and (not (or .Main .Indirect)) .Update)}}{{.Path}}: {{.Version}} -> {{.Update.Version}}{{end}}' -m all 2> /dev/null To upgrade to the latest version for all direct and indirect dependencies of the current module, the following can be run from the module root directory: * go get -u ./... to use the latest minor or patch releases (and add -t to also upgrade test dependencies) * go get -u=patch ./... to use the latest patch releases (and add -t to also upgrade test dependencies) go get foo updates to the latest version of foo . go get foo is equivalent to go get foo@latest \u2014 in other words, @latest is the default if no @ version is specified. In this section, \"latest\" is the latest version with a semver tag, or the latest known commit if there are no semver tags. Prerelease tags are not selected as \"latest\" unless there are no other semver tags on the repository ( details ). A common mistake is thinking go get -u foo solely gets the latest version of foo . In actuality, the -u in go get -u foo or go get -u foo@latest means to also get the latest versions for all of the direct and indirect dependencies of foo . A common starting point when upgrading foo is instead to do go get foo or go get foo@latest without a -u (and after things are working, consider go get -u=patch foo , go get -u=patch , go get -u foo , or go get -u ). To upgrade or downgrade to a more specific version, 'go get' allows version selection to be overridden by adding an @version suffix or \"module query\" to the package argument, such as go get foo@v1.6.2 , go get foo@e3702bed2 , or go get foo@'<v1.6.2' . Using a branch name such as go get foo@master ( foo@default with mercurial) is one way to obtain the latest commit regardless of whether or not it has a semver tag. In general, module queries that do not resolve to a semver tag will be recorded as pseudo-versions in the go.mod file. See the \"Module-aware go get\" and \"Module queries\" sections of the go command documentation for more information on the topics here. Modules are capable of consuming packages that have not yet opted into modules, including recording any available semver tags in go.mod and using those semver tags to upgrade or downgrade. Modules can also consume packages that do not yet have any proper semver tags (in which case they will be recorded using pseudo-versions in go.mod ). After upgrading or downgrading any dependencies, you may then want to run the tests again for all packages in your build (including direct and indirect dependencies) to check for incompatibilities: $ go test all How to Prepare for a Release Releasing Modules (All Versions) Best practices for creating a release of a module are expected to emerge as part of the initial modules experiment. Many of these might end up being automated by a future 'go release' tool . Some current suggested best practices to consider prior to tagging a release: Run go mod tidy to possibly prune any extraneous requirements (as described here ) and also ensure your current go.mod reflects all possible build tags/OS/architecture combinations (as described here ). In contrast, other commands like go build and go test will not remove dependencies from go.mod that are no longer required and only update go.mod based on the current build invocation's tags/OS/architecture. Run go test all to test your module (including running the tests for your direct and indirect dependencies) as a way of validating that the currently selected package versions are compatible. The number of possible version combinations is exponential in the number of modules, so in general, you cannot expect your dependencies to have tested against all possible combinations of their dependencies. As part of the modules work, go test all has been re-defined to be more useful : to include all the packages in the current module plus all the packages they depend on through a sequence of one or more imports while excluding packages that don't matter in the current module. Ensure your go.sum file is committed along with your go.mod file. See FAQ below for more details and rationale. Releasing Modules (v2 or Higher) If you are releasing a v2 or higher module, please first review the discussion in the \"Semantic Import Versioning\" section above, which includes why major versions are included in the module path and import path for v2+ modules, as well as how Go versions 1.9.7+ and 1.10.3+ have been updated to simplify that transition. Note that if you are adopting modules for the first time for a pre-existing repository or set of packages that have already been tagged v2.0.0 or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are the author of foo , and the latest tag for the foo repository is v2.2.2 , and foo has not yet adopted modules, then the best practice would be to use v3.0.0 for the first release of foo to adopt modules (and hence the first release of foo to contain a go.mod file). Incrementing the major version in this case provides greater clarity to consumers of foo , allows for additional non-module patches or minor releases on the v2 series of foo if needed, and provides a strong signal for a module-based consumer of foo that different major versions result if you do import \"foo\" and a corresponding require foo v2.2.2+incompatible , vs. import \"foo/v3\" and a corresponding require foo/v3 v3.0.0 . (Note that this advice regarding incrementing the major version when first adopting modules does not apply to pre-existing repos or packages whose latest versions are v0.x.x or v1.x.x). There are two alternative mechanisms to release a v2 or higher module. Note that with both techniques, the new module release becomes available to consumers when the module author pushes the new tags. Using the example of creating a v3.0.0 release, the two options are: Major branch : Update the go.mod file to include a /v3 at the end of the module path in the module directive (e.g., module github.com/my/module/v3 ). Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\" ). Tag the release with v3.0.0 . Go versions 1.9.7+, 1.10.3+, and 1.11 are able to properly consume and build a v2+ module created using this approach without requiring updates to consumer code that has not yet opted in to modules (as described in the \"Semantic Import Versioning\" section above). A community tool github.com/marwan-at-work/mod helps automate this procedure. See the repository or the community tooling FAQ below for an overview. To avoid confusion with this approach, consider putting the v3.*.* commits for the module on a separate v3 branch. Note: creating a new branch is not required. If instead you have been previously releasing on master and would prefer to tag v3.0.0 on master, that is a viable option. (However, be aware that introducing an incompatible API change in master can cause issues for non-modules users who issue a go get -u given the go tool is not aware of semver prior to Go 1.11 or when module mode is not enabled in Go 1.11+). Pre-existing dependency management solutions such as dep currently can have problems consuming a v2+ module created in this way. See for example dep#1962 . Major subdirectory : Create a new v3 subdirectory (e.g., my/module/v3 ) and place a new go.mod file in that subdirectory. The module path must end with /v3 . Copy or move the code into the v3 subdirectory. Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\" ). Tag the release with v3.0.0 . This provides greater backwards-compatibility. In particular, Go versions older than 1.9.7 and 1.10.3 are also able to properly consume and build a v2+ module created using this approach. A more sophisticated approach here could exploit type aliases (introduced in Go 1.9) and forwarding shims between major versions residing in different subdirectories. This can provide additional compatibility and allow one major version to be implemented in terms of another major version but would entail more work for a module author. An in-progress tool to automate this is goforward . Please see here for more details and rationale, along with a functioning initial version of goforward . Pre-existing dependency management solutions such as dep should be able to consume a v2+ module created in this way. See https://research.swtch.com/vgo-module for a more in-depth discussion of these alternatives. Publishing a release A new module version may be published by pushing a tag to the repository that contains the module source code. The tag is formed by concatenating two strings: a prefix and a version . The version is the semantic import version for the release. It should be chosen by following the rules of semantic import versioning . The prefix indicates where a module is defined within a repository. If the module is defined at the root of the repository, the prefix is empty, and the tag is just the version. However, in multi-module repositories , the prefix distinguishes versions for different modules. The prefix is the directory within the repository where the module is defined. If the repository follows the major subdirectory pattern described above, the prefix does not include the major version suffix. For example, suppose we have a module example.com/repo/sub/v2 , and we want to publish version v2.1.6 . The repository root corresponds to example.com/repo , and the module is defined in sub/v2/go.mod within the repository. The prefix for this module is sub/ . The full tag for this release should be sub/v2.1.6 . Migrating to Modules This section attempts to briefly enumerate the major decisions to be made when migrating to modules as well as list other migration-related topics. References are generally provided to other sections for more details. This material is primarily based on best practices that have emerged from the community as part of the modules experiment; this is, therefore, a work-in-progress section that will improve as the community gains more experience. Summary: The modules system is designed to allow different packages in the overall Go ecosystem to opt-in at different rates. Packages that are already on version v2 or higher have more migration considerations, primarily due to the implications of Semantic Import versioning . New packages and packages on v0 or v1 have substantially fewer considerations when adopting modules. Modules defined with Go 1.11 can be used by older Go versions (although the exact Go versions depend on the strategy used by the main module and its dependencies, as outlined below). Migration topics: Automatic Migration from Prior Dependency Managers go mod init automatically translates the required information from dep, glide, govendor, godep, and 5 other pre-existing dependency managers into a go.mod file that produces the equivalent build. If you are creating a v2+ module, be sure your module directive in the converted go.mod includes the appropriate /vN (e.g., module foo/v3 ). Note that if you are importing v2+ modules, you might need to do some manual adjustments after an initial conversion in order to add /vN to the require statements that go mod init generates after translating from a prior dependency manager. See the \"How to Define a Module\" section above for more details. In addition, go mod init will not edit your .go code to add any required /vN to import statements. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for the required steps, including some options around community tools to automate the conversion. Providing Dependency Information to Older Versions of Go and Non-Module Consumers Older versions of Go understand how to consume a vendor directory created by go mod vendor , as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. See the vendoring FAQ and the go command documentation for more details. Updating Pre-Existing Install Instructions Pre-modules, it is common for install instructions to include go get -u foo . If you are publishing a module foo , consider dropping the -u in instructions for modules-based consumers. -u asks the go tool to upgrade all the direct and indirect dependencies of foo . A module consumer might choose to run go get -u foo later, but there are more benefits of \"High Fidelity Builds\" if -u is not part of the initial install instructions. See \"How to Upgrade and Downgrade Dependencies\" for more details. go get -u foo does still work, and can still be a valid choice for install instructions. In addition, go get foo is not strictly needed for a module-based consumer. Simply adding an import statement import \"foo\" is sufficient. (Subsequent commands like go build or go test will automatically download foo and update go.mod as needed). Module-based consumers will not use a vendor directory by default. When module mode is enabled in the go tool, vendor is not strictly required when consuming a module (given the information contained in go.mod and the cryptographic checksums in go.sum ), but some pre-existing install instructions assume the go tool will use vendor by default. See the vendoring FAQ for more details. Install instructions that include go get foo/... might have issues in some cases (see discussion in #27215 ). Avoid Breaking Existing Import Paths A module declares its identity in its go.mod via the module directive, such as module github.com/my/module . All packages within the module must be imported by any module-aware consumer with import paths that match the module's declared module path (either exactly for a root package, or with the module path as a prefix of the import path). The go command reports an unexpected module path error if there is a mismatch between an import path vs. the corresponding module's declared module path. When adopting modules for a pre-existing set of packages, care should be taken to avoid breaking existing import paths used by existing consumers, unless you are incrementing your major version when adopting modules. For example, if your pre-existing README has been telling consumers to use import \"gopkg.in/foo.v1\" , and if you then adopt modules with a v1 release, your initial go.mod should almost certainly read module gopkg.in/foo.v1 . If you wanted to move away from using gopkg.in , that would be a breaking change for your current consumers. One approach would be to change to something like module github.com/repo/foo/v2 if you later move to v2. Note that module paths and import paths are case-sensitive. Changing a module from github.com/Sirupsen/logrus to github.com/sirupsen/logrus , for example, is a breaking change for consumers, even if GitHub automatically forwards from one repository name to the new repository name. After you have adopted modules, changing your module path in your go.mod is a breaking change. Overall, this is similar to the pre-modules enforcement of a canonical import path via \"import path comments\" , which are also sometimes called \"import pragmas\" or \"import path enforcement\". As an example, the package go.uber.org/zap is currently hosted at github.com/uber-go/zap , but uses an import path comment next to the package declaration that triggers an error for any pre-modules consumer using the wrong github-based import path: package zap // import \"go.uber.org/zap\" Import path comments are obsoleted by the go.mod file's module statement. Incrementing the Major Version When First Adopting Modules with v2+ Packages If you have packages that have already been tagged v2.0.0 or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are on v2.0.1 and have not yet adopted modules, then you would use v3.0.0 for the first release that adopts modules. See the \"Releasing Modules (v2 or Higher)\" section above for more details. v2+ Modules Allow Multiple Major Versions Within a Single Build If a module is on v2 or higher, an implication is that multiple major versions can be in a single build (e.g., foo and foo/v3 might end up in a single build). This flows naturally from the rule that \"packages with different import paths are different packages\". When this happens, there will be multiple copies of package-level state (e.g., package-level state for foo and package-level state for foo/v3 ) as well as each major version will run its own init function. This approach helps with multiple aspects of the modules system, including helping with diamond dependency problems, gradual migration to new versions within large codebases, and allowing a major version to be implemented as a shim around a different major version. See the \"Avoiding Singleton Problems\" section of https://research.swtch.com/vgo-import or #27514 for some related discussion. Modules Consuming Non-Module Code Modules are capable of consuming packages that have not yet opted into modules, with the appropriate package version information recorded in the importing module's go.mod . Modules can consume packages that do not yet have any proper semver tags. See FAQ below for more details. Modules can also import a v2+ package that has not opted into modules. It will be recorded with a +incompatible suffix if the imported v2+ package has valid semver tags. See FAQ below for more details. Non-Module Code Consuming Modules Non-module code consuming v0 and v1 modules : Code that has not yet opted in to modules can consume and build v0 and v1 modules (without any requirement related to the Go version used). Non-module code consuming v2+ modules : Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated so that code built with those releases can properly consume v2+ modules without requiring modification of pre-existing code as described in the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above. Go versions prior to 1.9.7 and 1.10.3 can consume v2+ modules if the v2+ module was created following the \"Major subdirectory\" approach outlined in the \"Releasing Modules (v2 or Higher)\" section. Strategies for Authors of Pre-Existing v2+ Packages For authors of pre-existing v2+ packages considering opting in to modules, one way to summarize the alternative approaches is as a choice between three top-level strategies. Each choice then has follow-on decisions and variations (as outlined above). These alternative top-level strategies are: Require clients to use Go versions 1.9.7+, 1.10.3+, or 1.11+ . The approach uses the \"Major Branch\" approach and relies on the \"minimal module awareness\" that was backported to 1.9.7 and 1.10.3. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details. Allow clients to use even older Go versions like Go 1.8 . This approach uses the \"Major Subdirectory\" approach and involves creating a subdirectory such as /v2 or /v3 . See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details. Wait on opting into modules . In this strategy, things continue to work with client code that has opted into modules as well as with client code that has not opted into modules. As time goes by, Go versions 1.9.7+, 1.10.3+, and 1.11+ will be out for an increasingly longer time period, and at some point in the future, it becomes more natural or client-friendly to require Go versions 1.9.7+/1.10.3+/1.11+, and at that point in time, you can implement strategy 1 above (requiring Go versions 1.9.7+, 1.10.3+, or 1.11+) or even strategy 2 above (though if you are ultimately going to go with strategy 2 above in order to support older Go versions like 1.8, then that is something you can do now). Additional Resources Documentation and Proposal Official documentation: Latest HTML documentation for modules on golang.org Run go help modules for more about modules. (This is the main entry point for modules topics via go help ) Run go help mod for more about the go mod command. Run go help module-get for more about the behavior of go get when in module-aware mode. Run go help goproxy for more about the module proxy, including a pure file-based option via a file:/// URL. The initial \"Go & Versioning\" series of blog posts on vgo by Russ Cox (first posted February 20, 2018) Official golang.org blog post introducing the proposal (March 26, 2018) This provides a more succinct overview of the proposal than the full vgo blog series, along with some of the history and process behind the proposal Official Versioned Go Modules Proposal (last updated March 20, 2018) Introductory Material Introductory 40-minute video \"The Principles of Versions in Go\" from GopherCon Singapore by Russ Cox (May 2, 2018) Succinctly covers the philosophy behind the design of versioned Go modules, including the three core principles of \"Compatibility\", \"Repeatability\", and \"Cooperation\" Example based 35-minute introductory video \"What are Go modules and how do I use them?\" ( slides ) by Paul Jolly (August 15, 2018) Introductory blog post \"Taking Go Modules for a Spin\" by Dave Cheney (July 14, 2018) Introductory Go Meetup slides on modules by Chris Hines (July 16, 2018) Introductory 30-minute video \"Intro to Go Modules and SemVer\" by Francesc Campoy (Nov 15, 2018) Additional Material Blog post \"Using Go modules with vendor support on Travis CI\" by Fatih Arslan (August 26, 2018) Blog post \"Go Modules and CircleCI\" by Todd Keech (July 30, 2018) Blog post \"The vgo proposal is accepted. Now what?\" by Russ Cox (May 29, 2018) Includes a summary of what it means that versioned modules are currently an experimental opt-in feature Blog post on how to build go from tip and start using go modules by Carolyn Van Slyck (July 16, 2018) Changes Since the Initial Vgo Proposal As part of the proposal, prototype, and beta processes, there have been over 400 issues created by the overall community. Please continue to supply feedback. Here is a partial list of some of the larger changes and improvements, almost all of which were primarily based on feedback from the community: Top-level vendor support was retained rather than vgo-based builds ignoring vendor directories entirely ( discussion , CL ) Backported minimal module-awareness to allow older Go versions 1.9.7+ and 1.10.3+ to more easily consume modules for v2+ projects ( discussion , CL ) Allowed vgo to use v2+ tags by default for pre-existing packages did not yet have a go.mod (recent update in related behavior described here ) Added support via command go get -u=patch to update all transitive dependencies to the latest available patch-level versions on the same minor version ( discussion , documentation ) Additional control via environmental variables (e.g., GOFLAGS in #26585 , CL ) Finer grain control on whether or not go.mod is allowed to be updated, how vendor directory is used, and whether or not network access is allowed (e.g., -mod=readonly, -mod=vendor, GOPROXY=off; related CL for a recent change) Added more flexible replace directives ( CL ) Added additional ways to interrogate modules (for human consumption, as well as for better editor / IDE integration) The UX of the go CLI has continued to be refined based on experiences so far (e.g., #26581 , CL ) Additional support for warming caches for use cases such as CI or docker builds via go mod download ( #26610 ) Most likely : better support for installing specific versions of programs to GOBIN ( #24250 ) GitHub Issues Currently open module issues Closed module issues Closed vgo issues Submit a new module issue using 'cmd/go:' as the prefix FAQs How are versions marked as incompatible? The require directive allows any module to declare that it should be built with version >= x.y.z of a dependency D (which may be specified due to incompatibilities with version < x.y.z of module D). Empirical data suggests this is the dominant form of constraints used in dep and cargo . In addition, the top-level module in the build can exclude specific versions of dependencies or replace other modules with different code. See the full proposal for more details and rationale . One of the key goals of the versioned modules proposal is to add a common vocabulary and semantics around versions of Go code for both tools and developers. This lays a foundation for future capabilities to declare additional forms of incompatibilities, such as possibly: * declaring deprecated versions as described in the initial vgo blog series * declaring pair-wise incompatibility between modules in an external system as discussed for example here during the proposal process * declaring pair-wise incompatible versions or insecure versions of a module after a release has been published. See for example the on-going discussion in #24031 and #26829 When do I get old behavior vs. new module-based behavior? In general, modules are opt-in for Go 1.11, so by design old behavior is preserved by default. Summarizing when you get the old 1.10 status quo behavior vs. the new opt-in modules-based behavior: Inside GOPATH \u2014 defaults to old 1.10 behavior (ignoring modules) Outside GOPATH while inside a file tree with a go.mod \u2014 defaults to modules behavior GO111MODULE environment variable: unset or auto \u2014 default behavior above on \u2014 force module support on regardless of directory location off \u2014 force module support off regardless of directory location Why does installing a tool via go get fail with error cannot find main module ? This occurs when you have set GO111MODULE=on , but are not inside of a file tree with a go.mod when you run go get . The simplest solution is to leave GO111MODULE unset (or equivalently explicitly set to GO111MODULE=auto ), which avoids this error. Recall one of the primary reason modules exist is to record precise dependency information. This dependency information is written to your current go.mod . If you are not inside of a file tree with a go.mod but you have told the go get command to operate in module mode by setting GO111MODULE=on , then running go get will result in the error cannot find main module because there is no go.mod available to record dependency information. Solution alternatives include: Leave GO111MODULE unset (the default, or explicitly set GO111MODULE=auto ), which results in friendlier behavior. This will give you Go 1.10 behavior when you are outside of a module and hence will avoid go get reporting cannot find main module . Leave GO111MODULE=on , but as needed disable modules temporarily and enable Go 1.10 behavior during go get , such as via GO111MODULE=off go get example.com/cmd . This can be turned into a simple script or shell alias such as alias oldget='GO111MODULE=off go get' Create a temporary go.mod file that is then discarded. This has been automated by a simple shell script by @rogpeppe . This script allows version information to optionally be supplied via vgoget example.com/cmd[@version] . (This can be a solution for avoiding the error cannot use path@version syntax in GOPATH mode ). gobin is a module-aware command to install and run main packages. By default, gobin installs/runs main packages without first needing to manually create a module, but with the -m flag it can be told to use an existing module to resolve dependencies. Please see the gobin README and FAQ for details and additional use cases. Create a go.mod you use to track your globally installed tools, such as in ~/global-tools/go.mod , and cd to that directory prior to running go get or go install for any globally installed tools. Create a go.mod for each tool in separate directories, such as ~/tools/gorename/go.mod and ~/tools/goimports/go.mod , and cd to that appropriate directory prior to running go get or go install for the tool. This current limitation will be resolved. However, the primary issue is that modules are currently opt-in, and a full solution will likely wait until GO111MODULE=on becomes the default behavior. See #24250 for more discussion, including this comment: This clearly must work eventually. The thing I'm not sure about is exactly what this does as far as the version is concerned: does it create a temporary module root and go.mod, do the install, and then throw it away? Probably. But I'm not completely sure, and for now, I didn't want to confuse people by making vgo do things outside go.mod trees. Certainly, the eventual go command integration has to support this. This FAQ has been discussing tracking globally installed tools. If instead, you want to track the tools required by a specific module, see the next FAQ. How can I track tool dependencies for a module? If you: * want to use a go-based tool (e.g. stringer ) while working on a module, and * want to ensure that everyone is using the same version of that tool while tracking the tool's version in your module's go.mod file then one currently recommended approach is to add a tools.go file to your module that includes import statements for the tools of interest (such as import _ \"golang.org/x/tools/cmd/stringer\" ), along with a // +build tools build constraint. The import statements allow the go command to precisely record the version information for your tools in your module's go.mod , while the // +build tools build constraint prevents your normal builds from actually importing your tools. For a concrete example of how to do this, please see this \"Go Modules by Example\" walkthrough . A discussion of the approach along with an earlier concrete example of how to do this is in this comment in #25922 . The brief rationale (also from #25922 ): I think the tools.go file is, in fact, the best practice for tool dependencies, certainly for Go 1.11. I like it because it does not introduce new mechanisms. It simply reuses existing ones. What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc? Support for modules is starting to land in editors and IDEs. For example: * GoLand : currently has full support for modules outside and inside GOPATH, including completion, syntax analysis, refactoring, navigation as described here . * VS Code : work is complete, MS recommending modules over GOPATH, the former tracking issue ( #1532 ) has been closed. Documentation is available in the VS Code module repository . * Atom with go-plus : tracking issue is #761 . * vim with vim-go : initial support for syntax highlighting and formatting go.mod has landed . Broader support tracked in #1906 . * emacs with go-mode.el : tracking issue in #237 . The status of other tools such as goimports, guru, gorename and similar tools is being tracked in an umbrella issue #24661 . Please see that umbrella issue for latest status. Some tracking issues for particular tools include: * gocode : tracking issue in mdempsky/gocode/#46 . Note that nsf/gocode is recommending people migrate off of nsf/gocode to mdempsky/gocode . * go-tools (tools by dominikh such as staticcheck, megacheck, gosimple): sample tracking issue dominikh/go-tools#328 . In general, even if your editor, IDE or other tools have not yet been made module aware, much of their functionality should work with modules if you are using modules inside GOPATH and do go mod vendor (because then the proper dependencies should be picked up via GOPATH). The full fix is to move programs that load packages off of go/build and onto golang.org/x/tools/go/packages , which understands how to locate packages in a module-aware manner. This will likely eventually become go/packages . FAQs \u2014 Additional Control What community tooling exists for working with modules? The community is starting to build tooling on top of modules. For example: github.com/rogpeppe/gohack A new community tool to automate and greatly simplify replace and multi-module workflows, including allowing you to easily modify one of your dependencies For example, gohack example.com/some/dependency automatically clones the appropriate repository and adds the necessary replace directives to your go.mod Remove all gohack replace statements with gohack undo The project is continuing to expand to make other module-related workflows easier github.com/marwan-at-work/mod Command line tool to automatically upgrade/downgrade major versions for modules Automatically adjusts go.mod files and related import statements in go source code Helps with upgrades, or when first opting into modules with a v2+ package github.com/akyoto/mgit Lets you view & control semver tags of all of your local projects Shows untagged commits and lets you tag them all at once ( mgit -tag +0.0.1 ) github.com/goware/modvendor Helps copy additional files into the vendor/ folder, such as shell scripts, .cpp files, .proto files, etc. github.com/psampaz/go-mod-outdated Displays outdated dependencies in a human friendly way Provides a way to filter indirect dependencies and dependencies without updates Provides a way to break CI pipelines in case of outdated dependencies github.com/oligot/go-mod-upgrade Update outdated Go dependencies interactively When should I use the replace directive? As described in the 'go.mod' concepts section above , replace directives provide additional control in the top-level go.mod for what is actually used to satisfy a dependency found in the Go source or go.mod files, while replace directives in modules other than the main module are ignored when building the main module. The replace directive allows you to supply another import path that might be another module located in VCS (GitHub or elsewhere), or on your local filesystem with a relative or absolute file path. The new import path from the replace directive is used without needing to update the import paths in the actual source code. replace allows the top-level module control over the exact version used for a dependency, such as: * replace example.com/some/dependency => example.com/some/dependency v1.2.3 replace also allows the use of a forked dependency, such as: * replace example.com/some/dependency => example.com/some/dependency-fork v1.2.3 You can also reference branches, for example: * replace example.com/some/dependency => example.com/some/dependency-fork master One sample use case is if you need to fix or investigate something in a dependency, you can have a local fork and add something like the following in your top-level go.mod : * replace example.com/original/import/path => /your/forked/import/path replace also can be used to inform the go tooling of the relative or absolute on-disk location of modules in a multi-module project, such as: * replace example.com/project/foo => ../foo Note : if the right-hand side of a replace directive is a filesystem path, then the target must have a go.mod file at that location. If the go.mod file is not present, you can create one with go mod init . In general, you have the option of specifying a version to the left of the => in a replace directive, but typically it is less sensitive to change if you omit that (e.g., as done in all of the replace examples above). A require directive is needed for each replace directive of a direct dependency. When replacing a dependency from a filesystem path, the version of the corresponding require directive is essentially ignored; in this case, the pseudoversion v0.0.0 is a good choice to make this clear, e.g. require example.com/module v0.0.0 . You can confirm you are getting your expected versions by running go list -m all , which shows you the actual final versions that will be used in your build including taking into account replace statements. See the 'go mod edit' documentation for more details. github.com/rogpeppe/gohack makes these types of workflows much easier, especially if your goal is to have mutable checkouts of dependencies of a module. See the repository or the immediately prior FAQ for an overview. See the next FAQ for the details of using replace to work entirely outside of VCS. Can I work entirely outside of VCS on my local filesystem? Yes. VCS is not required. This is very simple if you have a single module you want to edit at a time outside of VCS (and you either have only one module in total, or if the other modules reside in VCS). In this case, you can place the file tree containing the single go.mod in a convenient location. Your go build , go test and similar commands will work even if your single module is outside of VCS (without requiring any use of replace in your go.mod ). If you want to have multiple inter-related modules on your local disk that you want to edit at the same time, then replace directives are one approach. Here is a sample go.mod that uses a replace with a relative path to point the hello module at the on-disk location of the goodbye module (without relying on any VCS): module example.com/me/hello require ( example.com/me/goodbye v0.0.0 ) replace example.com/me/goodbye => ../goodbye A small runnable example is shown in this thread . How do I use vendoring with modules? Is vendoring going away? The initial series of vgo blog posts did propose dropping vendoring entirely, but feedback from the community resulted in retaining support for vendoring. In brief, to use vendoring with modules: * go mod vendor resets the main module's vendor directory to include all packages needed to build and test all of the module's packages based on the state of the go.mod files and Go source code. * By default, go commands like go build ignore the vendor directory when in module mode. * The -mod=vendor flag (e.g., go build -mod=vendor ) instructs the go commands to use the main module's top-level vendor directory to satisfy dependencies. The go commands in this mode therefore ignore the dependency descriptions in go.mod and assume that the vendor directory holds the correct copies of dependencies. Note that only the main module's top-level vendor directory is used; vendor directories in other locations are still ignored. * Some people will want to routinely opt-in to vendoring by setting a GOFLAGS=-mod=vendor environment variable. Older versions of Go such as 1.10 understand how to consume a vendor directory created by go mod vendor , as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. If you are considering using vendoring, it is worthwhile to read the \"Modules and vendoring\" and \"Make vendored copy of dependencies\" sections of the tip documentation. Are there \"always on\" module repositories and enterprise proxies? Publicly hosted \"always on\" immutable module repositories and optional privately hosted proxies and repositories are becoming available. For example: * proxy.golang.org - Official project - Run by Google - The default Go module proxy built by the Go team. * proxy.golang.com.cn - China proxy project - Run by China Golang Contributor Club - China Go module proxy. * mirrors.tencent.com/go - Commercial project - Run by Tencent Cloud - A Go module proxy alternate. * mirrors.aliyun.com/goproxy - Commercial project - Run by Alibaba Cloud - A Go module proxy alternate. * goproxy.cn - Open source project - Run by Qiniu Cloud - The most trusted Go module proxy in China. * goproxy.io - Open source project - Run by China Golang Contributor Club - A global proxy for Go modules. * Athens - Open source project - Self-hosted - A Go module datastore and proxy. * athens.azurefd.net - Open source project - A hosted module proxy running Athens. * Goproxy - Open source project - Self-hosted - A minimalist Go module proxy handler. * THUMBAI - Open source project - Self-hosted - Go mod proxy server and Go vanity import path server. Note that you are not required to run a proxy. Rather, the go tooling in 1.11 has added optional proxy support via GOPROXY to enable more enterprise use cases (such as greater control), and also to better handle situations such as \"GitHub is down\" or people deleting GitHub repositories. Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies? By default, a command like go build will reach out to the network as needed to satisfy imports. Some teams will want to disallow the go tooling from touching the network at certain points, or will want greater control regarding when the go tooling updates go.mod , how dependencies are obtained, and how vendoring is used. The go tooling provides a fair amount of flexibility to adjust or disable these default behaviors, including via -mod=readonly , -mod=vendor , GOFLAGS , GOPROXY=off , GOPROXY=file:///filesystem/path , go mod vendor , and go mod download . The details on these options are spread throughout the official documentation. One community attempt at a consolidated overview of knobs related to these behaviors is here , which includes links to the official documentation for more information. How do I use modules with CI systems such as Travis or CircleCI? The simplest approach is likely just setting the environment variable GO111MODULE=on , which should work with most CI systems. However, it can be valuable to run tests in CI on Go 1.11 with modules enabled as well as disabled, given some of your users will not have yet opted in to modules themselves. Vendoring is also a topic to consider. The following two blog posts cover these topics more concretely: \"Using Go modules with vendor support on Travis CI\" by Fatih Arslan \"Go Modules and CircleCI\" by Todd Keech How do I download modules needed to build specific packages or tests? The go mod download command (or equivalently, go mod download all ) downloads all modules in the build list (as reported by go list -m all ). Many of these modules aren't needed to build packages in the main module, since the full build list contains things like test dependencies and tool dependencies for other modules. Consequently, Docker images prepared with go mod download may be larger than necessary. Instead, consider using go list . For example, go list ./... will download the modules needed to build the packages ./... (the set of packages in the main module, when run from the module root directory). To download test dependencies as well, use go list -test ./... . By default, go list will only consider dependencies needed for the current platform. You can set GOOS and GOARCH to make go list consider another platform, for example, GOOS=linux GOARCH=amd64 go list ./... . The -tags flag may also be used to select packages with specific build tags. This technique may be less necessary in the future when lazy module loading is implemented (see #36460 ), since the module pattern all will include fewer modules. FAQs \u2014 go.mod and go.sum Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'? The modules system records precise dependency requirements in your go.mod . (For more details, see the go.mod concepts section above or the go.mod tip documentation ). go mod tidy updates your current go.mod to include the dependencies needed for tests in your module \u2014 if a test fails, we must know which dependencies were used in order to reproduce the failure. go mod tidy also ensures your current go.mod reflects the dependency requirements for all possible combinations of OS, architecture, and build tags (as described here ). In contrast, other commands like go build and go test only update go.mod to provide the packages imported by the requested packages under the current GOOS , GOARCH , and build tags (which is one reason go mod tidy might add requirements that were not added by go build or similar). If a dependency of your module does not itself have a go.mod (e.g., because the dependency has not yet opted in to modules itself), or if its go.mod file is missing one or more of its dependencies (e.g., because the module author did not run go mod tidy ), then the missing transitive dependencies will be added to your module's requirements, along with an // indirect comment to indicate that the dependency is not from a direct import within your module. Note that this also means that any missing test dependencies from your direct or indirect dependencies will also be recorded in your go.mod . (An example of when this is important: go test all runs the tests of all direct and indirect dependencies of your module, which is one way to validate that your current combination of versions work together. If a test fails in one of your dependencies when you run go test all , it is important to have a complete set of test dependency information recorded so that you have reproducible go test all behavior). Another reason you might have // indirect dependencies in your go.mod file is if you have upgraded (or downgraded) one of your indirect dependencies beyond what is required by your direct dependencies, such as if you ran go get -u or go get foo@1.2.3 . The go tooling needs a place to record those new versions, and it does so in your go.mod file (and it does not reach down into your dependencies to modify their go.mod files). In general, the behaviors described above are part of how modules provide 100% reproducible builds and tests by recording precise dependency information. If you are curious as to why a particular module is showing up in your go.mod , you can run go mod why -m <module> to answer that question. Other useful tools for inspecting requirements and versions include go mod graph and go list -m all . Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using? No, go.sum is not a lock file. The go.mod files in a build provide enough information for 100% reproducible builds. For validation purposes, go.sum contains the expected cryptographic checksums of the content of specific module versions. See the FAQ below for more details on go.sum (including why you typically should check in go.sum ) as well as the \"Module downloading and verification\" section in the tip documentation. In part because go.sum is not a lock file, it retains cryptographic checksums for module versions even after you stop using a module or particular module version. This allows validation of the checksums if you later resume using something, which provides additional safety. In addition, your module's go.sum records checksums for all direct and indirect dependencies used in a build (and hence your go.sum will frequently have more modules listed than your go.mod ). Should I commit my 'go.sum' file as well as my 'go.mod' file? Typically your module's go.sum file should be committed along with your go.mod file. go.sum contains the expected cryptographic checksums of the content of specific module versions. If someone clones your repository and downloads your dependencies using the go command, they will receive an error if there is any mismatch between their downloaded copies of your dependencies and the corresponding entries in your go.sum . In addition, go mod verify checks that the on-disk cached copies of module downloads still match the entries in go.sum . Note that go.sum is not a lock file as used in some alternative dependency management systems. ( go.mod provides enough information for reproducible builds). See very brief rationale here from Filippo Valsorda on why you should check in your go.sum . See the \"Module downloading and verification\" section of the tip documentation for more details. See possible future extensions being discussed for example in #24117 and #25530 . Should I still add a 'go.mod' file if I do not have any dependencies? Yes. This supports working outside of GOPATH, helps communicate to the ecosystem that you are opting in to modules, and in addition the module directive in your go.mod serves as a definitive declaration of the identity of your code (which is one reason why import comments might eventually be deprecated). Of course, modules are purely an opt-in capability in Go 1.11. FAQs \u2014 Semantic Import Versioning Why must major version numbers appear in import paths? Please see the discussion on the Semantic Import Versioning and the import compatibility rule in the \"Semantic Import Versioning\" concepts section above. See also the blog post announcing the proposal , which talks more about the motivation and justification for the import compatibility rule. Why are major versions v0, v1 omitted from import paths?\" Please see the question \"Why are major versions v0, v1 omitted from import paths?\" in the earlier FAQ from the official proposal discussion . What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+? In response to a comment about \"k8s does minor releases but changes the Go API in each minor release\" , Russ Cox made the following response that highlights some implications for picking v0, v1, vs. frequently making breaking changes with v2, v3, v4, etc. with your project: I don't fully understand the k8s dev cycle etc, but I think generally the k8s team needs to decide/confirm what they intend to guarantee to users about stability and then apply version numbers accordingly to express that. To make a promise about API compatibility (which seems like the best user experience!) then start doing that and use 1.X.Y. To have the flexibility to make backwards-incompatible changes in every release but allow different parts of a large program to upgrade their code on different schedules, meaning different parts can use different major versions of the API in one program, then use X.Y.0, along with import paths like k8s.io/client/vX/foo. To make no promises about API compatible and also require every build to have only one copy of the k8s libraries no matter what, with the implied forcing of all parts of a build to use the same version even if not all of them are ready for it, then use 0.X.Y. On a related note, Kubernetes has some atypical build approaches (currently including custom wrapper scripts on top of godep), and hence Kubernetes is an imperfect example for many other projects, but it will likely be an interesting example as Kubernetes moves towards adopting Go 1.11 modules . Can a module consume a package that has not opted in to modules? Yes. If a repository has not opted in to modules but has been tagged with valid semver tags (including the required leading v ), then those semver tags can be used in a go get , and a corresponding semver version will be record in the importing module's go.mod file. If the repository does not have any valid semver tags, then the repository's version will be recorded with a \"pseudo-version\" such as v0.0.0-20171006230638-a6e239ea1c69 (which includes a timestamp and a commit hash, and which are designed to allow a total ordering across versions recored in go.mod and to make it easier to reason about which recorded versions are \"later\" than another recorded version). For example, if the latest version of package foo is tagged v1.2.3 but foo has not itself opted in to modules, then running go get foo or go get foo@v1.2.3 from inside module M will be recorded in module M's go.mod file as: require foo v1.2.3 The go tool will also use available semver tags for a non-module package in additional workflows (such as go list -u=patch , which upgrades the dependencies of a module to available patch releases, or go list -u -m all , which shows available upgrades, etc.). Please see the next FAQs for additional details related to v2+ packages that have not opted in to modules. Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean? Yes, a module can import a v2+ package that has not opted into modules, and if the imported v2+ package has a valid semver tag, it will be recorded with a +incompatible suffix. Additional Details Please be familiar with the material in the \"Semantic Import Versioning\" section above. It is helpful to first review some core principles that are generally useful but particularly important to keep in mind when thinking about the behavior described in this FAQ. The following core principles are always true when the go tool is operating in module mode (e.g., GO111MODULE=on ): A package's import path defines the identity of the package. Packages with different import paths are treated as different packages. Packages with the same import path are treated as the same package (and this is true even if the VCS tags say the packages have different major versions). An import path without a /vN is treated as a v1 or v0 module (and this is true even if the imported package has not opted in to modules and has VCS tags that say the major version is greater than 1). The module path (such as module foo/v2 ) declared at the start of a module's go.mod file is both: the definitive declaration of that module's identity the definitive declaration of how that module must be imported by consuming code As we will see in the next FAQ, these principles are not always true when the go tool is not in module mode, but these principles are always true when the go tool is in module mode. In short, the +incompatible suffix indicates that principle 2 above is in effect when the following are true: * an imported package has not opted in to modules, and * its VCS tags say the major version is greater than 1, and * principle 2 is overriding the VCS tags \u2013 the import path without a /vN is treated as a v1 or v0 module (even though the VCS tags say otherwise) When the go tool is in module mode, it will assume a non-module v2+ package has no awareness of Semantic Import Versioning and treat it as an (incompatible) extension of the v1 version series of the package (and the +incompatible suffix is an indication that the go tool is doing so). Example Suppose: * oldpackage is a package that predates the introduction of modules * oldpackage has never opted in to modules (and hence does not have a go.mod itself) * oldpackage has a valid semver tag v3.0.1 , which is its latest tag In this case, running for example go get oldpackage@latest from inside module M will record the following in module M's go.mod file: require oldpackage v3.0.1+incompatible Note that there is no /v3 used at the end of oldpackage in the go get command above or in the recorded require directive \u2013 using /vN in module paths and import paths is a feature of Semantic Import Versioning , and oldpackage has not signaled its acceptance and understanding of Semantic Import Versioning given oldpackage has not opted into modules by having a go.mod file within oldpackage itself. In other words, even though oldpackage has a semver tag of v3.0.1 , oldpackage is not granted the rights and responsibilities of Semantic Import Versioning (such as using /vN in import paths) because oldpackage has not yet stated its desire to do so. The +incompatible suffix indicates that the v3.0.1 version of oldpackage has not actively opted in to modules, and hence the v3.0.1 version of oldpackage is assumed to not understand Semantic Import Versioning or how to use major versions in import paths. Therefore, when operating in module mode , the go tool will treat the non-module v3.0.1 version of oldpackage as an (incompatible) extension of the v1 version series of oldpackage and assume that the v3.0.1 version of oldpackage has no awareness of Semantic Import Versioning, and the +incompatible suffix is an indication that the go tool is doing so. The fact that the v3.0.1 version of oldpackage is considered to be part of the v1 release series according to Semantic Import Versioning means for example that versions v1.0.0 , v2.0.0 , and v3.0.1 are all always imported using the same import path: import \"oldpackage\" Note again that there is no /v3 used at the end of oldpackage . In general, packages with different import paths are different packages. In this example, given versions v1.0.0 , v2.0.0 , and v3.0.1 of oldpackage would all be imported using the same import path, they are therefore treated by a build as the same package (again because oldpackage has not yet opted in to Semantic Import Versioning), with a single copy of oldpackage ending up in any given build. (The version used will be the semantically highest of the versions listed in any require directives; see \"Version Selection\" ). If we suppose that later a new v4.0.0 release of oldpackage is created that adopts modules and hence contains a go.mod file, that is the signal that oldpackage now understands the rights and responsibilities of Semantic Import Versioning, and hence a module-based consumer would now import using /v4 in the import path: import \"oldpackage/v4\" and the version would be recorded as: require oldpackage/v4 v4.0.0 oldpackage/v4 is now a different import path than oldpackage , and hence a different package. Two copies (one for each import path) would end up in a module-aware build if some consumers in the build have import \"oldpackage/v4\" while other consumers in the same build have import \"oldpackage\" . This is desirable as part of the strategy to allow gradual adoption of modules. In addition, even after modules are out of their current transitional phase, this behavior is also desirable to allow gradual code evolution over time with different consumers upgrading at different rates to newer versions (e.g., allowing different consumers in a large build to choose to upgrade at different rates from oldpackage/v4 to some future oldpackage/v5 ). How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11? When considering older Go versions or Go code that has not yet opted in to modules, Semantic Import Versioning has significant backwards-compatibility implications related to v2+ modules. As described in the \"Semantic Import Versioning\" section above: * a module that is version v2 or higher must include a /vN in its own module path declared in its go.mod . * a module-based consumer (that is, code that has opted in to modules) must include a /vN in the import path to import a v2+ module. However, the ecosystem is expected to proceed at varying paces of adoption for modules and Semantic Import Versioning. As described in more detail in the \"How to Release a v2+ Module\" section, in the \"Major Subdirectory\" approach, the author of a v2+ module creates subdirectories such as mymodule/v2 or mymodule/v3 and moves or copies the approriate packages underneath those subdirectories. This means the traditional import path logic (even in older Go releases such as Go 1.8 or 1.7) will find the appropriate packages upon seeing an import statement such as import \"mymodule/v2/mypkg\" . Hence, packages residing in a \"Major Subdirectory\" v2+ module will be found and used even if modules support is not enabled (whether that is because you are running Go 1.11 and have not enabled modules, or because you are running a older version like Go 1.7, 1.8, 1.9 or 1.10 that does not have full module support). Please see the \"How to Release a v2+ Module\" section for more details on the \"Major Subdirectory\" approach. The remainder of this FAQ is focused on the \"Major Branch\" approach described in the \"How to Release a v2+ Module\" section. In the \"Major Branch\" approach, no /vN subdirectories are created and instead the module version information is communicated by the go.mod file and by applying semver tags to commits (which often will be on master , but could be on different branches). In order to help during the current transitional period, \"minimal module compatibility\" was introduced to Go 1.11 to provide greater compatibility for Go code that has not yet opted in to modules, and that \"minimal module compatibility\" was also backported to Go 1.9.7 and 1.10.3 (where those versions are effectively always operating with full module mode disabled given those older Go versions do not have full module support). The primary goals of \"minimal module compatibility\" are: Allow older Go versions 1.9.7+ and 1.10.3+ to be able to more easily compile modules that are using Semantic Import Versioning with /vN in import paths, and provide that same behavior when module mode is disabled in Go 1.11. Allow old code to be able to consume a v2+ module without requiring that old consumer code to immediately change to using a new /vN import path when consuming a v2+ module. Do so without relying on the module author to create /vN subdirectories. Additional Details \u2013 \"Minimal Module Compatibility\" \"Minimal module compatibility\" only takes effect when full module mode is disabled for the go tool, such as if you have set GO111MODULE=off in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+. When a v2+ module author has not created /v2 or /vN subdirectories and you are instead relying on the \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11: A package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules. If a package has opted in to modules, but does not include the major version in the import path when importing a v2+ modules, it will not import a v2+ version of that module when the go tool is operating in full module mode. (A package that has opted in to modules is assumed to \"speak\" Semantic Import Versioning. If foo is a module with v2+ versions, then under Semantic Import Versioning saying import \"foo\" means import the v1 Semantic Import Versioning series of foo ). The mechanism used to implement \"minimal module compatibility\" is intentionally very narrow: The entirety of the logic is \u2013 when operating in GOPATH mode, an unresolvable import statement containing a /vN will be tried again after removing the /vN if the import statement is inside code that has opted in to modules (that is, import statements in .go files within a tree with a valid go.mod file). The net effect is that an import statement such as import \"foo/v2\" within code that lives inside of a module will still compile correctly in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11, and it will resolve as if it said import \"foo\" (without the /v2 ), which means it will use the version of foo that resides in your GOPATH without being confused by the extra /v2 . \"Minimal module compatibility\" does not affect anything else, including it does not the affect paths used in the go command line (such as arguments to go get or go list ). This transitional \"minimal module awareness\" mechanism purposefully breaks the rule of \"packages with different import paths are treated as different packages\" in pursuit a very specific backwards-compatibility goal \u2013 to allow old code to compile unmodified when it is consuming a v2+ module. In slightly more detail: It would be a more burdensome for the overall ecosystem if the only way for old code to consume a v2+ module was to first change the old code. If we are not modifying old code, then that old code must work with pre-module import paths for v2+ modules. On the other hand, new or updated code opting in to modules must use the new /vN import for v2+ modules. The new import path is not equal to old import path, yet both are allowed to work in a single build, and therefore we have two different functioning import paths that resolve to the same package. For example, when operating in GOPATH mode, import \"foo/v2\" appearing in module-based code resolves to the same code residing in your GOPATH as import \"foo\" , and the build ends up with one copy of foo \u2013 in particular, whatever version is on disk in GOPATH. This allows module-based code with import \"foo/v2\" to compile even in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11. In contrast, when the go tool is operating in full module mode: There are no exceptions to the rule \"packages with different import paths are different packages\" (including vendoring has been refined in full module mode to also adhere to this rule). For example, if the go tool is in full module mode and foo is a v2+ module, then import \"foo\" is asking for a v1 version of foo vs. import \"foo/v2\" is asking for a v2 version of foo . What happens if I create a go.mod but do not apply semver tags to my repository? semver is a foundation of the modules system. In order to provide the best experience for consumers, module authors are encouraged to apply semver VCS tags (e.g., v0.1.0 or v1.2.3-rc.1 ), but semver VCS tags are not strictly required: Modules are required to follow the semver specification in order for the go command to behave as documented. This includes following the semver specification regarding how and when breaking changes are allowed. Modules that do not have semver VCS tags are recorded by consumers using a semver version in the form of a pseudo-version . Typically this will be a v0 major version, unless the module author constructed a v2+ module following the \"Major Subdirectory\" approach. Therefore, modules that do not apply semver VCS tags and have not created a \"Major Subdirectory\" are effectively declaring themselves to be in the semver v0 major version series, and a module-based consumer will treat them as having a semver v0 major version. Can a module depend on a different version of itself? A module can depend on a different major version of itself: by-and-large, this is comparable to depending on a different module. This can be useful for different reasons, including to allow a major version of a module to be implemented as a shim around a different major version. In addition, a module can depend on a different major version of itself in a cycle, just as two completely different modules can depend on each other in a cycle. However, if you are not expecting a module to depend on a different version of itself, it can be a sign of a mistake. For example, .go code intending to import a package from a v3 module might be missing the required /v3 in the import statement. That mistake can manifest as a v3 module depending on the v1 version of itself. If you are surprised to see a module to depend on a different version of itself, it can be worthwhile to review the \"Semantic Import Versioning\" section above along with the FAQ \"What can I check if I am not seeing the expected version of a dependency?\" . It continues to be a constraint that two packages may not depend on each other in a cycle. FAQS \u2014 Multi-Module Repositories What are multi-module repositories? A multi-module repository is a repository that contains multiple modules, each with its own go.mod file. Each module starts at the directory containing its go.mod file, and contains all packages from that directory and its subdirectories recursively, excluding any subtree that contains another go.mod file. Each module has its own version information. Version tags for modules below the root of the repository must include the relative directory as a prefix. For example, consider the following repository: my-repo `-- foo `-- rop `-- go.mod The tag for version 1.2.3 of module \"my-repo/foo/rop\" is \"foo/rop/v1.2.3\". Typically, the path for one module in the repository will be a prefix of the others. For example, consider this repository: my-repo |-- bar |-- foo | |-- rop | `-- yut |-- go.mod `-- mig |-- go.mod `-- vub Fig. A top-level module's path is a prefix of another module's path. This repository contains two modules. However, the module \"my-repo\" is a prefix of the path of the module \"my-repo/mig\". Should I have multiple modules in a single repository? Adding modules, removing modules, and versioning modules in such a configuration require considerable care and deliberation, so it is almost always easier and simpler to manage a single-module repository rather than multiple modules in an existing repository. Russ Cox commented in #26664 : For all but power users, you probably want to adopt the usual convention that one repo = one module. It's important for long-term evolution of code storage options that a repo can contain multiple modules, but it's almost certainly not something you want to do by default. Two examples of how multi-modules can be more work: * go test ./... from the repository root will no longer test everything in the repository * you might need to routinely manage the relationship between the modules via replace directives. However, there is additional nuance beyond those two examples. Please read the FAQs in this sub-section carefully if you are considering having multiple modules in a single repository. Two example scenarios where it can make sense to have more than one go.mod in a repository: if you have usage examples where the examples themselves have a complex set of dependencies (e.g., perhaps you have a small package but include an example of using your package with kubernetes). In that case, it can make sense for your repository to have an example or _example directory with its own go.mod , such as shown here . if you have a repository with a complex set of dependencies, but you have a client API with a smaller set of dependencies. In some cases, it might make sense to have an api or clientapi or similar directory with its own go.mod , or to separate out that clientapi into its own repository. However, for both of those cases, if you are considering creating a multi-module repository for performance or download size for a large set of indirect dependencies, you are strongly encouraged to first try with a GOPROXY, which will be enabled by default in Go 1.13. Using a GOPROXY mostly equals any performance benefits or dependency download size benefits that might otherwise come from creating a multi-module repository. Is it possible to add a module to a multi-module repository? Yes. However, there are two classes of this problem: The first class: the package to which the module is being added to is not in version control yet (a new package). This case is straightforward: add the package and the go.mod in the same commit, tag the commit, and push. The second class: the path at which the module is being added is in version control and contains one or more existing packages. This case requires a considerable amount of care. To illustrate, consider again the following repository (now in a github.com location to simulate the real-world better): github.com/my-repo |-- bar |-- foo | |-- rop | `-- yut |-- go.mod `-- mig `-- vub Consider adding module \"github.com/my-repo/mig\". If one were to follow the same approach as above, the package /my-repo/mig could be provided by two different modules: the old version of \"github.com/my-repo\", and the new, standalone module \"github.com/my-repo/mig. If both modules are active, importing \"github.com/my-repo/mig\" would cause an \u201cambiguous import\u201d error at compile time. The way to get around this is to make the newly-added module depend on the module it was \"carved out\" from, at a version after which it was carved out. Let's step through this with the above repository, assuming that \"github.com/my-repo\" is currently at v1.2.3: Add github.com/my-repo/mig/go.mod: cd path-to/github.com/my-repo/mig go mod init github.com/my-repo/mig # Note: if \"my-repo/mig\" does not actually depend on \"my-repo\", add a blank # import. # Note: version must be at or after the carve-out. go mod edit -require github.com/myrepo@v1.3 git commit git tag v1.3.0 git tag mig/v1.0.0 Next, let's test these. We can't go build or go test naively, since the go commands would try to fetch each dependent module from the module cache. So, we need to use replace rules to cause go commands to use the local copies: cd path-to/github.com/my-repo/mig go mod edit -replace github.com/my-repo@v1.3.0=../ go test ./... go mod edit -dropreplace github.com/my-repo@v1.3.0 git push origin master v1.3.0 mig/v1.0.0 push the commit and both tags Note that in the future golang.org/issue/28835 should make the testing step a more straightforward experience. Note also that code was removed from module \"github.com/my-repo\" between minor versions. It may seem strange to not consider this a major change, but in this instance the transitive dependencies continue to provide compatible implementations of the removed packages at their original import paths. Is it possible to remove a module from a multi-module repository? Yes, with the same two cases and similar steps as above. Can a module depend on an internal/ in another? Yes. Packages in one module are allowed to import internal packages from another module as long as they share the same path prefix up to the internal/ path component. For example, consider the following repository: my-repo |-- foo | `-- go.mod |-- go.mod `-- internal Here, package foo can import /my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo\". Similarly, in the following repository: my-repo |-- foo | `-- go.mod `-- internal `-- go.mod Here, package foo can import my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo/internal\". The semantics are the same in both: since my-repo is a shared path prefix between my-repo/internal and my-repo/foo, package foo is allowed to import package internal. Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file? One additional use case for having multiple go.mod files in a single repository is if the repository has files that should be pruned from a module. For example, a repository might have very large files that are not needed for the Go module, or a multi-language repository might have many non-Go files. An empty go.mod in a directory will cause that directory and all of its subdirectories to be excluded from the top-level Go module. If the excluded directory does not contain any .go files, no additional steps are needed beyond placing the empty go.mod file. If the excluded directory does contain .go files, please first carefully review the other FAQs in this multi-module repository section . FAQs \u2014 Minimal Version Selection Won't minimal version selection keep developers from getting important updates? Please see the question \"Won't minimal version selection keep developers from getting important updates?\" in the earlier FAQ from the official proposal discussion . FAQs \u2014 Possible Problems What are some general things I can spot check if I am seeing a problem? Double-check that modules are enabled by running go env to confirm it does not show an empty value for the read-only GOMOD variable. Note: you never set GOMOD as a variable because it is effectively read-only debug output that go env outputs. If you are setting GO111MODULE=on to enable modules, double-check that it is not accidentally the plural GO111MODULES=on . (People sometimes naturally include the S because the feature is often called \"modules\"). If vendoring is expected to be used, check that the -mod=vendor flag is being passed to go build or similar, or that GOFLAGS=-mod=vendor is set. Modules by default ignore the vendor directory unless you ask the go tool to use vendor . It is frequently helpful to check go list -m all to see the list of actual versions selected for your build go list -m all usually gives you more detail compared to if you were to instead just look a go.mod file. If running go get foo fails in some way, or if go build is failing on a particular package foo , it often can be helpful to check the output from go get -v foo or go get -v -x foo : In general, go get will often provide more a detailed error message than go build . The -v flag to go get asks to print more verbose details, though be mindful that certain \"errors\" such as 404 errors might be expected based on how a remote repository was configured. If the nature of the problem is still not clear, you can also try the more verbose go get -v -x foo , which also shows the git or other VCS commands being issued. (If warranted, you can often execute the same git commands outside of the context of the go tool for troubleshooting purposes). You can check to see if you are using a particularly old git version Older versions of git were a common source of problems for the vgo prototype and Go 1.11 beta, but much less frequently in the GA 1.11. The module cache in Go 1.11 can sometimes cause various errors, primarily if there were previously network issues or multiple go commands executing in parallel (see #26794 , which is addressed for Go 1.12). As a troubleshooting step, you can copy $GOPATH/pkg/mod to a backup directory (in case further investigation is warranted later), run go clean -modcache , and then see whether the original problem persists. If you are using Docker, it can be helpful to check if you can reproduce the behavior outside of Docker (and if the behavior only occurs in Docker, the list of bullets above can be used as a starting point to compare results between inside Docker vs. outside). The error you are currently examining might be a secondary issue caused by not having the expected version of a particular module or package in your build. Therefore, if the cause of a particular error is not obvious, it can be helpful to spot check your versions as described in the next FAQ. What can I check if I am not seeing the expected version of a dependency? A good first step is to run go mod tidy . There is some chance this might resolve the issue, but it will also help put your go.mod file into a consistent state with respect to your .go source code, which will help make any subsequent investigation easier. (If go mod tidy itself changes the versions of a dependency in a way you don't expect, first read this FAQ on 'go mod tidy' . If that does not explain it, you can try resetting your go.mod and then run go list -mod=readonly all , which might give a more specific message about whatever was requiring a change to its version). The second step usually should be to check go list -m all to see the list of actual versions selected for your build. go list -m all shows you the final selected versions, including for indirect dependencies and after resolving versions for any shared dependencies. It also shows the outcome of any replace and exclude directives. A good next step can be to examine the output of go mod graph or go mod graph | grep <module-of-interest> . go mod graph prints the module requirement graph (including taking into account replacements). Each line in the output has two fields: the first column is a consuming module, and the second column is one of that module's requirements (including the version required by that consuming module). This can be a quick way to see which modules are requiring a particular dependency, including when your build has a dependency that has different required versions from different consumers in your build (and if that is the case, it is important to be familiar with the behavior described in the \"Version Selection\" section above). go mod why -m <module> can also be useful here, although it is typically more useful for seeing why a dependency is included at all (rather than why a dependency ends up with a particular version). go list provides many more variations of queries that can be useful to interrogate your modules if needed. One example is the following, which will show the exact versions used in your build excluding test-only dependencies: go list -deps -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' ./... | sort -u A more detailed set of commands and examples for interrogating your modules can be seen in a runnable \"Go Modules by Example\" walkthough . One cause of unexpected versions can be due to someone having created an invalid or unexpected go.mod file that was not intended, or a related mistake (for example: a v2.0.1 version of module might have incorrectly declared itself to be module foo in its go.mod without the required /v2 ; an import statement in .go code intended to import a v3 module might be be missing the required /v3 ; a require statement in a go.mod for a v4 module might be be missing the required /v4 ). Therefore, if the cause of a particular issue you are seeing is not obvious, it can be worthwhile to first re-read the material in the \"go.mod\" and \"Semantic Import Versioning\" sections above (given these include important rules that modules must follow) and then take a few minutes to spot check the most relevant go.mod files and import statements. Why am I getting an error 'cannot find module providing package foo'? This is a general error message that can occur for several different underlying causes. In some cases, this error is simply due to a mistyped path, so the first step likely should be to double-check for incorrect paths based on the details listed in the error message. If you have not already done so, a good next step is often to try go get -v foo or go get -v -x foo : * In general, go get will often provide more a detailed error message than go build . * See the first troubleshooting FAQ in this section above for more details. Some other possible causes: You might see the error cannot find module providing package foo if you have issued go build or go build . but do not have any .go source files in the current directory. If this is what you are encountering, the solution might be an alternative invocation such as go build ./... (where the ./... expands out to match all the packages within the current module). See #27122 . The module cache in Go 1.11 can cause this error, including in the face of network issues or multiple go commands executing in parallel. This is resolved in Go 1.12. See the first troubleshooting FAQ in this section above for more details and possible corrective steps. Why does 'go mod init' give the error 'cannot determine module path for source directory'? go mod init without any arguments will attempt to guess the proper module path based on different hints such as VCS meta data. However, it is not expected that go mod init will always be able to guess the proper module path. If go mod init gives you this error, those heuristics were not able to guess, and you must supply the module path yourself (such as go mod init github.com/you/hello ). I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager? Yes. This requires some manual steps, but can be helpful in some more complex cases. When you run go mod init when initializing your own module, it will automatically convert from a prior dependency manager by translating configuration files like Gopkg.lock , glide.lock , or vendor.json into a go.mod file that contains corresponding require directives. The information in a pre-existing Gopkg.lock file for example usually describes version information for all of your direct and indirect dependencies. However, if instead you are adding a new dependency that has not yet opted in to modules itself, there is not a similar automatic conversion process from any prior dependency manager that your new dependency might have been using. If that new dependency itself has non-module dependencies that have had breaking changes, then in some cases that can cause incompatibility problems. In other words, a prior dependency manager of your new dependency is not automatically used, and that can cause problems with your indirect dependencies in some cases. One approach is to run go mod init on your problematic non-module direct dependency to convert from its current dependency manager, and then use the require directives from the resulting temporary go.mod to populate or update the go.mod in your module. For example, if github.com/some/nonmodule is a problematic direct dependency of your module that is currently using another dependency manager, you can do something similar to: $ git clone -b v1.2.3 https://github.com/some/nonmodule /tmp/scratchpad/nonmodule $ cd /tmp/scratchpad/nonmodule $ go mod init $ cat go.mod The resulting require information from the temporary go.mod can be manually moved into the actual go.mod for your module, or you can consider using rogpeppe/gomodmerge , which is a community tool targeting this use case. In addition, you will want to add a require github.com/some/nonmodule v1.2.3 to your actual go.mod to match the version that you manually cloned. A concrete example of following this technique for docker is in this #28489 comment , which illustrates getting a consistent set of versions of docker dependencies to avoid case sensitive issues between github.com/sirupsen/logrus vs. github.com/Sirupsen/logrus . How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity? Why does this error occur? In general, a module declares its identity in its go.mod via the module directive, such as module example.com/m . This is the \"module path\" for that module, and the go tool enforces consistency between that declared module path and the import paths used by any consumer. If a module's go.mod file reads module example.com/m , then a consumer must import packages from that module using import paths that start with that module path (e.g., import \"example.com/m\" or import \"example.com/m/sub/pkg\" ). The go command reports a parsing go.mod: unexpected module path fatal error if there is a mismatch between an import path used by a consumer vs. the corresponding declared module path. In addition, in some cases the go command will then report a more generic error loading module requirements error afterwards. The most common cause of this error is if there was a name change (e.g., github.com/Sirupsen/logrus to github.com/sirupsen/logrus ), or if a module was sometimes used via two different names prior to modules due to a vanity import path (e.g., github.com/golang/sync vs. the recommended golang.org/x/sync ). This can then cause problems if you have a dependency that is still being imported via an older name (e.g., github.com/Sirupsen/logrus ) or a non-canonical name (e.g., github.com/golang/sync ) but that dependency has subsequently adopted modules and now declares its canonical name in its go.mod . The error here can then trigger during an upgrade when the upgraded version of the module is found declaring a canonical module path that no longer matches the older import path. Example problem scenario You are indirectly depending on github.com/Quasilyte/go-consistent . The project adopts modules, and then later changes its name to github.com/quasilyte/go-consistent (changing Q to lowercase q ), which is a breaking change. GitHub forwards from the old name to the new name. You run go get -u , which attempts to upgrade all of your direct and indirect dependencies. github.com/Quasilyte/go-consistent is attempted to be upgraded, but the latest go.mod found now reads module github.com/quasilyte/go-consistent . The overall upgrade operation fails to complete, with error: go: github.com/Quasilyte/go-consistent@v0.0.0-20190521200055-c6f3937de18c: parsing go.mod: unexpected module path \"github.com/quasilyte/go-consistent\" go get: error loading module requirements Resolving The most common form of the error is: go: example.com/some/OLD/name@vX.Y.Z: parsing go.mod: unexpected module path \"example.com/some/NEW/name\" If you visit the repository for example.com/some/NEW/name (from the right-side of the error), you can check the go.mod file for the latest release or master to see if it declares itself on the first line of the go.mod as module example.com/some/NEW/name . If so, that is a hint that you are seeing an \"old module name\" vs. \"new module name\" problem. This remainder of this section focuses on resolving the \"old name\" vs. \"new name\" form of this the error by following these steps in sequence: Check your own code to see if you are importing using example.com/some/OLD/name . If so, update your code to import using example.com/some/NEW/name . If you received this error during an upgrade, you should try upgrading using the tip version of Go, which has more targeted upgrade logic ( #26902 ) that can often sidestep this problem and also often has a better error message for this situation. Note that the go get arguments in tip / 1.13 are different than in 1.12. Example of obtaining tip and using it to upgrade your dependencies: go get golang.org/dl/gotip && gotip download gotip get -u all gotip mod tidy Because the problematic old import is often in an indirect dependency, upgrading with tip and then running go mod tidy can frequently upgrade you past the problematic version and then also remove the problematic version from your go.mod as no longer needed, which then puts you into a functioning state when you return to using Go 1.12 or 1.11 for day-to-day use. For example, see that approach work here to upgrade past github.com/golang/lint vs. golang.org/x/lint problems. If you received this error while doing go get -u foo or go get -u foo@latest , try removing the -u . This will give you the set of dependencies used by foo@latest without upgrading the dependencies of foo past the versions that the author of foo likely verified as working when releasing foo . This can be important especially during this transitional time when some of the direct and indirect dependencies of foo might not yet have adopted semver or modules. (A common mistake is thinking go get -u foo solely gets the latest version of foo . In actuality, the -u in go get -u foo or go get -u foo@latest means to also get the latest versions for all of the direct and indirect dependencies of foo ; that might be what you want, but it might not be especially if it is otherwise failing due to deep indirect dependencies). If the steps above have not resolved the error, the next approach is slightly more complicated, but most often should work to resolve an \"old name\" vs. \"new name\" form of this error. This uses just information solely from the error message itself, plus some brief looking at some VCS history. 4.1. Go to the example.com/some/NEW/name repository 4.2. Determine when the go.mod file was introduced there (e.g., by looking at the blame or history view for the go.mod ). 4.3. Pick the release or commit from just before the go.mod file was introduced there. 4.4. In your go.mod file, add a replace statement using the old name on both sides of the replace statement: replace example.com/some/OLD/name => example.com/some/OLD/name <version-just-before-go.mod> Using our prior example where github.com/Quasilyte/go-consistent is the old name and github.com/quasilyte/go-consistent is the new name, we can see that the go.mod was first introduced there in commit 00c5b0cf371a . That repository is not using semver tags, so we will take the immediately prior commit 00dd7fb039e and add it to the replace using the old uppercase Quasilyte name on both sides of the replace : replace github.com/Quasilyte/go-consistent => github.com/Quasilyte/go-consistent 00dd7fb039e This replace statement then enables us to upgrade past the problematic \"old name\" vs. \"new name\" mismatch by effectively preventing the old name from being upgraded to the new name in the presence of a go.mod . Usually, an upgrade via go get -u or similar can now avoid the error. If the upgrade completes, you can check to see if anyone is still importing the old name (e.g., go mod graph | grep github.com/Quasilyte/go-consistent ) and if not, the replace can then be removed. (The reason this often works is because the upgrade itself can otherwise fail if an old problematic import path is used even though it might not be used in the final result if the upgrade had completed, which is tracked in #30831 ). If the above steps have not resolved the problem, it might be because the problematic old import path is still in use by the latest version of one or more of your dependencies. In this case, it is important to identify who is still using the problematic old import path, and find or open an issue asking that the problematic importer change to using the now canonical import path. Using gotip in step 2. above might identify the problematic importer, but it does not do so in all cases, especially for upgrades ( #30661 ). If it is unclear who is importing using the problematic old import path, you can usually find out by creating a clean module cache, performing the operation or operations that trigger the error, and then grepping for the old problematic import path within the module cache. For example: export GOPATH=$(mktemp -d) go get -u foo # peform operation that generates the error of interest cd $GOPATH/pkg/mod grep -R --include=\"*.go\" github.com/Quasilyte/go-consistent If these steps are not sufficient to resolve the issue, or if you are a maintainer of a project that seems unable to remove references to an older problematic import path due to circular references, please see a much more detailed write-up of the problem on a separate wiki page . Finally, the above steps focus on how to resolve an underlying \"old name\" vs. \"new name\" problem. However, the same error message can also appear if a go.mod was placed in the wrong location or simply has the wrong module path. If that is the case, the importing that module should always fail. If you are importing a new module that you just created and has never been successfully imported before, you should check that the go.mod file is located correctly and that it has the proper module path that corresponds to that location. (The most common approach is a single go.mod per repository, with the single go.mod file placed in the repository root, and using the repository name as the module path declared in the module directive). See the \"go.mod\" section for more details. Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used? In short: Because the pre-built packages are non-module builds and can\u2019t be reused. Sorry. Disable cgo for now or install gcc. This is only an issue when opting in to modules (e.g., via GO111MODULE=on ). See #26988 for additional discussion. Do modules work with relative imports like import \"./subdir\" ? No. See #26645 , which includes: In modules, there finally is a name for the subdirectory. If the parent directory says \"module m\" then the subdirectory is imported as \"m/subdir\", no longer \"./subdir\". Some needed files may not be present in populated vendor directory Directories without .go files are not copied inside the vendor directory by go mod vendor . This is by design. In short, setting aside any particular vendoring behavior \u2013 the overall model for go builds is that the files needed to build a package should be in the directory with the .go files. Using the example of cgo \u2013 modifying C source code in other directories will not trigger a rebuild, and instead your build will use stale cache entries. The cgo documentation now includes : Note that changes to files in other directories do not cause the package to be recompiled, so all non-Go source code for the package should be stored in the package directory , not in subdirectories. A community tool goware/modvendor allows you to easily copy a complete set of .c, .h, .s, .proto or other files from a module into the vendor directory. Although this can be helpful, some care must be taken to make sure your go build is being handled properly in general (regardless of vendoring) if you have files needed to build a package that are outside of the directory with the .go files. See additional discussion in #26366 . An alternative approach to traditional vendoring is to check in the module cache. It can end up with similar benefits as traditional vendoring and in some ways ends up with a higher fidelity copy. This approach is explained as a \"Go Modules by Example\" walkthrough .","title":"Modules"},{"location":"Modules/#go-modules","text":"This wiki page serves as a usage and troubleshooting guide. * For tutorial blog posts, see Using Go Modules . * For a technical reference, see the Go Modules Reference (under development). Go has included support for versioned modules as proposed here since 1.11. The initial prototype vgo was announced in February 2018. In July 2018, versioned modules landed in the main Go repository. Since Go 1.14 , module support is considered ready for production use, and all users are encouraged to migrate to modules from other dependency management systems. If you are unable to migrate due to a problem in the Go toolchain, please ensure that the problem has an open issue filed. (If the issue is not on the Go1.16 milestone, please comment on why it prevents you from migrating so it can be prioritized appropriately). You can also provide an experience report for more detailed feedback.","title":"Go Modules"},{"location":"Modules/#recent-changes","text":"","title":"Recent Changes"},{"location":"Modules/#go-116","text":"See the Go 1.16 release notes for details. Module mode ( GO111MODULE=on ) is the default in all cases Commands no longer modify go.mod / go.sum by default ( -mod=readonly ) go install pkg@version is the recommended way to globally install packages / executables retract is available in go.mod","title":"Go 1.16"},{"location":"Modules/#go-115","text":"See the Go 1.15 release notes for details. The location of the module cache may now be set with the GOMODCACHE environment variable. The default value of GOMODCACHE is GOPATH[0]/pkg/mod , the location of the module cache before this change. A workaround is now available for Windows \"Access is denied\" errors in go commands that access the module cache, caused by external programs concurrently scanning the file system (see issue #36568 ). The workaround is not enabled by default because it is not safe to use when Go versions lower than 1.14.2 and 1.13.10 are running concurrently with the same module cache. It can be enabled by explicitly setting the environment variable GODEBUG=modcacheunzipinplace=1 .","title":"Go 1.15"},{"location":"Modules/#go-114","text":"See the Go 1.14 release notes for details. When the main module contains a top-level vendor directory and its go.mod file specifies go 1.14 or higher, the go command now defaults to -mod=vendor for operations that accept that flag. -mod=readonly is now set by default when the go.mod file is read-only and no top-level vendor directory is present. -modcacherw is a new flag that instructs the go command to leave newly-created directories in the module cache at their default permissions rather than making them read-only. -modfile=file is a new flag that instructs the go command to read (and possibly write) an alternate go.mod file instead of the one in the module root directory. When module-aware mode is enabled explicitly (by setting GO111MODULE=on ), most module commands have more limited functionality if no go.mod file is present. The go command now supports Subversion repositories in module mode.","title":"Go 1.14"},{"location":"Modules/#go-113","text":"See the Go 1.13 release notes for details. The go tool now defaults to downloading modules from the public Go module mirror at https://proxy.golang.org , and also defaults to validating downloaded modules (regardless of source) against the public Go checksum database at https://sum.golang.org . If you have private code, you most likely should configure the GOPRIVATE setting (such as go env -w GOPRIVATE=*.corp.com,github.com/secret/repo ), or the more fine-grained variants GONOPROXY or GONOSUMDB that support less frequent use cases. See the documentation for more details. GO111MODULE=auto enables module-mode if any go.mod is found, even inside GOPATH. (Prior to Go 1.13, GO111MODULE=auto would never enable module-mode inside GOPATH). go get arguments have changed: go get -u (without any arguments) now only upgrades the direct and indirect dependencies of your current package , and no longer examines your entire module . go get -u ./... from your module root upgrades all the direct and indirect dependencies of your module, and now excludes test dependencies. go get -u -t ./... is similar, but also upgrades test dependencies. go get no longer supports -m (because it would have largely overlapped with go get -d due to other changes; you can usually replace go get -m foo with go get -d foo ).","title":"Go 1.13"},{"location":"Modules/#table-of-contents","text":"The \"Quick Start\" and \"New Concepts\" sections are particularly important for someone who is starting to work with modules. The \"How to\u2026\" sections cover more details on mechanics. The largest quantity of content on this page is in the FAQs answering more specific questions; it can be worthwhile to at least skim the FAQ one-liners listed here. Quick Start Example Daily Workflow New Concepts Modules go.mod Version Selection Semantic Import Versioning How to Use Modules How to Install and Activate Module Support How to Define a Module How to Upgrade and Downgrade Dependencies How to Prepare for a Release (All Versions) How to Prepare for a Release (v2 or Higher) Publishing a Release Migrating to Modules Additional Resources Changes Since the Initial Vgo Proposal GitHub Issues FAQs How are versions marked as incompatible? When do I get old behavior vs. new module-based behavior? Why does installing a tool via 'go get' fail with error 'cannot find main module'? How can I track tool dependencies for a module? What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc.? FAQs \u2014 Additional Control What community tooling exists for working with modules? When should I use the 'replace' directive? Can I work entirely outside of VCS on my local filesystem? How do I use vendoring with modules? Is vendoring going away? Are there \"always on\" module repositories and enterprise proxies? Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies? How do I use modules with CI systems such as Travis or CircleCI? How do I download modules needed to build specific packages or tests? FAQs \u2014 go.mod and go.sum Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'? Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using? Should I still add a 'go.mod' file if I do not have any dependencies? Should I commit my 'go.sum' file as well as my 'go.mod' file? FAQs \u2014 Semantic Import Versioning Why must major version numbers appear in import paths? Why are major versions v0, v1 omitted from import paths? What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+? Can a module consume a package that has not opted in to modules? Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean? How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11? What happens if I create a go.mod but do not apply semver tags to my repository? Can a module depend on a different version of itself? FAQs \u2014 Multi-Module Repositories What are multi-module repositories? Should I have multiple modules in a single repository? Is it possible to add a module to a multi-module repository? Is it possible to remove a module from a multi-module repository? Can a module depend on an internal/ in another? Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file? FAQs \u2014 Minimal Version Selection Won't minimal version selection keep developers from getting important updates? FAQs \u2014 Possible Problems What are some general things I can spot check if I am seeing a problem? What can I check if I am not seeing the expected version of a dependency? Why am I getting an error 'cannot find module providing package foo'? Why does 'go mod init' give the error 'cannot determine module path for source directory'? I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager? How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity? Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used? Do modules work with relative imports like import \"./subdir\" ? Some needed files may not be present in populated vendor directory","title":"Table of Contents"},{"location":"Modules/#quick-start","text":"","title":"Quick Start"},{"location":"Modules/#example","text":"The details are covered in the remainder of this page, but here is a simple example of creating a module from scratch. Create a directory outside of your GOPATH, and optionally initialize VCS: $ mkdir -p /tmp/scratchpad/repo $ cd /tmp/scratchpad/repo $ git init -q $ git remote add origin https://github.com/my/repo Initialize a new module: $ go mod init github.com/my/repo go: creating new go.mod: module github.com/my/repo Write your code: $ cat <<EOF > hello.go package main import ( \"fmt\" \"rsc.io/quote\" ) func main() { fmt.Println(quote.Hello()) } EOF Build and run: $ go build -o hello $ ./hello Hello, world. The go.mod file was updated to include explicit versions for your dependencies, where v1.5.2 here is a semver tag: $ cat go.mod module github.com/my/repo require rsc.io/quote v1.5.2","title":"Example"},{"location":"Modules/#daily-workflow","text":"Note there was no go get required in the example above. Your typical day-to-day workflow can be: Add import statements to your .go code as needed. Standard commands like go build or go test will automatically add new dependencies as needed to satisfy imports (updating go.mod and downloading the new dependencies). When needed, more specific versions of dependencies can be chosen with commands such as go get foo@v1.2.3 , go get foo@master ( foo@default with mercurial), go get foo@e3702bed2 , or by editing go.mod directly. A brief tour of other common functionality you might use: go list -m all \u2014 View final versions that will be used in a build for all direct and indirect dependencies ( details ) go list -u -m all \u2014 View available minor and patch upgrades for all direct and indirect dependencies ( details ) go get -u ./... or go get -u=patch ./... (from module root directory) \u2014 Update all direct and indirect dependencies to latest minor or patch upgrades (pre-releases are ignored) ( details ) go build ./... or go test ./... (from module root directory) \u2014 Build or test all packages in the module ( details ) go mod tidy \u2014 Prune any no-longer-needed dependencies from go.mod and add any dependencies needed for other combinations of OS, architecture, and build tags ( details ) replace directive or gohack \u2014 Use a fork, local copy or exact version of a dependency ( details ) go mod vendor \u2014 Optional step to create a vendor directory ( details ) After reading the next four sections on \"New Concepts\", you will have enough information to get started with modules for most projects. It is also useful to review the Table of Contents above (including the FAQ one-liners there) to familiarize yourself with the list of more detailed topics.","title":"Daily Workflow"},{"location":"Modules/#new-concepts","text":"These sections provide a high-level introduction to the main new concepts. For more details and rationale, please see this 40-minute introductory video by Russ Cox describing the philosophy behind the design , the official proposal document , or the more detailed initial vgo blog series .","title":"New Concepts"},{"location":"Modules/#modules","text":"A module is a collection of related Go packages that are versioned together as a single unit. Modules record precise dependency requirements and create reproducible builds. Most often, a version control repository contains exactly one module defined in the repository root. ( Multiple modules are supported in a single repository , but typically that would result in more work on an on-going basis than a single module per repository). Summarizing the relationship between repositories, modules, and packages: * A repository contains one or more Go modules. * Each module contains one or more Go packages. * Each package consists of one or more Go source files in a single directory. Modules must be semantically versioned according to semver , usually in the form v(major).(minor).(patch) , such as v0.1.0 , v1.2.3 , or v1.5.0-rc.1 . The leading v is required. If using Git, tag released commits with their versions. Public and private module repositories and proxies are becoming available (see FAQ below ).","title":"Modules"},{"location":"Modules/#gomod","text":"A module is defined by a tree of Go source files with a go.mod file in the tree's root directory. Module source code may be located outside of GOPATH. There are four directives: module , require , replace , exclude . Here is an example go.mod file defining the module github.com/my/thing : module github.com/my/thing require ( github.com/some/dependency v1.2.3 github.com/another/dependency/v4 v4.0.0 ) A module declares its identity in its go.mod via the module directive, which provides the module path . The import paths for all packages in a module share the module path as a common prefix. The module path and the relative path from the go.mod to a package's directory together determine a package's import path. For example, if you are creating a module for a repository github.com/user/mymod that will contain two packages with import paths github.com/user/mymod/foo and github.com/user/mymod/bar , then the first line in your go.mod file typically would declare your module path as module github.com/user/mymod , and the corresponding on-disk structure could be: mymod |-- bar | `-- bar.go |-- foo | `-- foo.go `-- go.mod In Go source code, packages are imported using the full path including the module path. For example, if in our example above, we declared the module identity in go.mod as module github.com/user/mymod , a consumer could do: import \"github.com/user/mymod/bar\" This imports package bar from the module github.com/user/mymod . exclude and replace directives only operate on the current (\u201cmain\u201d) module. exclude and replace directives in modules other than the main module are ignored when building the main module. The replace and exclude statements, therefore, allow the main module complete control over its own build, without also being subject to complete control by dependencies. (See FAQ below for a discussion of when to use a replace directive).","title":"go.mod"},{"location":"Modules/#version-selection","text":"If you add a new import to your source code that is not yet covered by a require in go.mod , most go commands like 'go build' and 'go test' will automatically look up the proper module and add the highest version of that new direct dependency to your module's go.mod as a require directive. For example, if your new import corresponds to dependency M whose latest tagged release version is v1.2.3 , your module's go.mod will end up with require M v1.2.3 , which indicates module M is a dependency with allowed version >= v1.2.3 (and < v2, given v2 is considered incompatible with v1). The minimal version selection algorithm is used to select the versions of all modules used in a build. For each module in a build, the version selected by minimal version selection is always the semantically highest of the versions explicitly listed by a require directive in the main module or one of its dependencies. As an example, if your module depends on module A which has a require D v1.0.0 , and your module also depends on module B which has a require D v1.1.1 , then minimal version selection would choose v1.1.1 of D to include in the build (given it is the highest listed require version). This selection of v1.1.1 remains consistent even if sometime later a v1.2.0 of D becomes available. This is an example of how the modules system provides 100% reproducible builds. When ready, the module author or user might choose to upgrade to the latest available version of D or choose an explicit version for D. For a brief rationale and overview of the minimal version selection algorithm, see the \"High Fidelity Builds\" section of the official proposal, or see the more detailed vgo blog series . To see a list of the selected module versions (including indirect dependencies), use go list -m all . See also the \"How to Upgrade and Downgrade Dependencies\" section below and the \"How are versions marked as incompatible?\" FAQ below.","title":"Version Selection"},{"location":"Modules/#semantic-import-versioning","text":"For many years, the official Go FAQ has included this advice on package versioning: \"Packages intended for public use should try to maintain backward compatibility as they evolve. The Go 1 compatibility guidelines are a good reference here: don't remove exported names, encourage tagged composite literals, and so on. If different functionality is required, add a new name instead of changing an old one. If a complete break is required, create a new package with a new import path.\" The last sentence is especially important \u2014 if you break compatibility, you should change the import path of your package. With Go 1.11 modules, that advice is formalized into the import compatibility rule : \"If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.\" Recall semver requires a major version change when a v1 or higher package makes a backwards-incompatible change. The result of following both the import compatibility rule and semver is called Semantic Import Versioning , where the major version is included in the import path \u2014 this ensures the import path changes any time the major version increments due to a compatibility break. As a result of Semantic Import Versioning, code opting in to Go modules must comply with these rules : * Follow semver . (An example VCS tag is v1.2.3 ). * If the module is version v2 or higher, the major version of the module must be included as a /vN at the end of the module paths used in go.mod files (e.g., module github.com/my/mod/v2 , require github.com/my/mod/v2 v2.0.1 ) and in the package import path (e.g., import \"github.com/my/mod/v2/mypkg\" ). This includes the paths used in go get commands (e.g., go get github.com/my/mod/v2@v2.0.1 . Note there is both a /v2 and a @v2.0.1 in that example. One way to think about it is that the module name now includes the /v2 , so include /v2 whenever you are using the module name). * If the module is version v0 or v1, do not include the major version in either the module path or the import path. In general, packages with different import paths are different packages. For example, math/rand is a different package than crypto/rand . This is also true if different import paths are due to different major versions appearing in the import path. Thus example.com/my/mod/mypkg is a different package than example.com/my/mod/v2/mypkg , and both may be imported in a single build, which among other benefits helps with diamond dependency problems and also allows a v1 module to be implemented in terms of its v2 replacement or vice versa. See the \"Module compatibility and semantic versioning\" section of the go command documentation for more details on Semantic Import Versioning, and see https://semver.org for more about semantic versioning. This section so far has been focused on code that has opted in to modules and imports other modules. However, putting major versions in import paths for v2+ modules could create incompatibilities with older versions of Go, or with code that has not yet opted in to modules. To help with this, there are three important transitional special cases or exceptions to the behavior and rules described above. These transitional exceptions will become less important over time as more packages opt in to modules. Three Transitional Exceptions gopkg.in Existing code that uses import paths starting with gopkg.in (such as gopkg.in/yaml.v1 and gopkg.in/yaml.v2 ) can continue to use those forms for their module paths and import paths even after opting in to modules. '+incompatible' when importing non-module v2+ packages A module can import a v2+ package that has not opted in to modules itself. A non-module v2+ package that has a valid v2+ semver tag will be recorded with a +incompatible suffix in the importing module's go.mod file. The +incompatible suffix indicates that even though the v2+ package has a valid v2+ semver tag such as v2.0.0 , the v2+ package has not actively opted in to modules and hence that v2+ package is assumed to have not been created with an understanding of the implications of Semantic Import Versioning and how to use major versions in import paths. Therefore, when operating in module mode , the go tool will treat a non-module v2+ package as an (incompatible) extension of the v1 version series of the package and assume the package has no awareness of Semantic Import Versioning, and the +incompatible suffix is an indication that the go tool is doing so. \"Minimal module compatibility\" when module mode is not enabled To help with backwards-compatibility, Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated to make it easier for code built with those releases to be able to properly consume v2+ modules without requiring modification of pre-existing code. This behavior is called \"minimal module compatibility\", and it only takes effect when full module mode is disabled for the go tool, such as if such as you have set GO111MODULE=off in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+. When relying on this \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11, a package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules (in order to properly import the v2+ module when the go tool is operating in full module mode with full awareness of Semantic Import Versioning). For the exact mechanics required to release a v2+ module, please see the \"Releasing Modules (v2 or Higher)\" section below.","title":"Semantic Import Versioning"},{"location":"Modules/#how-to-use-modules","text":"","title":"How to Use Modules"},{"location":"Modules/#how-to-install-and-activate-module-support","text":"To use modules, two install options are: * Install the latest Go 1.11 release . * Install the Go toolchain from source on the master branch. Once installed, you can then activate module support in one of two ways: * Invoke the go command in a directory outside of the $GOPATH/src tree, with a valid go.mod file in the current directory or any parent of it and the environment variable GO111MODULE unset (or explicitly set to auto ). * Invoke the go command with GO111MODULE=on environment variable set.","title":"How to Install and Activate Module Support"},{"location":"Modules/#how-to-define-a-module","text":"To create a go.mod for an existing project: Navigate to the root of the module's source tree outside of GOPATH: $ cd <project path outside $GOPATH/src> # e.g., cd ~/projects/hello Note that outside of GOPATH, you do not need to set GO111MODULE to activate module mode. Alternatively, if you want to work in your GOPATH: $ export GO111MODULE=on # manually active module mode $ cd $GOPATH/src/<project path> # e.g., cd $GOPATH/src/you/hello Create the initial module definition and write it to the go.mod file: $ go mod init This step converts from any existing dep Gopkg.lock file or any of the other nine total supported dependency formats , adding require statements to match the existing configuration. go mod init will often be able to use auxiliary data (such as VCS meta-data) to automatically determine the appropriate module path, but if go mod init states it can not automatically determine the module path, or if you need to otherwise override that path, you can supply the module path as an optional argument to go mod init , for example: $ go mod init github.com/my/repo Note that if your dependencies include v2+ modules, or if you are initializing a v2+ module, then after running go mod init you might also need to edit your go.mod and .go code to add /vN to import paths and module paths as described in the \"Semantic Import Versioning\" section above. This applies even if go mod init automatically converted your dependency information from dep or other dependency managers. (Because of this, after running go mod init , you typically should not run go mod tidy until you have successfully run go build ./... or similar, which is the sequence shown in this section). Build the module. When executed from the root directory of a module, the ./... pattern matches all the packages within the current module. go build will automatically add missing or unconverted dependencies as needed to satisfy imports for this particular build invocation: $ go build ./... 4. Test the module as configured to ensure that it works with the selected versions: $ go test ./... (Optional) Run the tests for your module plus the tests for all direct and indirect dependencies to check for incompatibilities: $ go test all Prior to tagging a release, see the \"How to Prepare for a Release\" section below. For more information on all of these topics, the primary entry point to the official modules documentation is available on golang.org .","title":"How to Define a Module"},{"location":"Modules/#how-to-upgrade-and-downgrade-dependencies","text":"Day-to-day upgrading and downgrading of dependencies should be done using 'go get', which will automatically update the go.mod file. Alternatively, you can edit go.mod directly. In addition, go commands like 'go build', 'go test', or even 'go list' will automatically add new dependencies as needed to satisfy imports (updating go.mod and downloading the new dependencies). To upgrade a dependency to the latest version: go get example.com/package To upgrade a dependency and all its dependencies to the latest version: go get -u example.com/package To view available minor and patch upgrades for all direct and indirect dependencies: go list -u -m all To view available minor and patch upgrades only for the direct dependencies, run: go list -u -f '{{if (and (not (or .Main .Indirect)) .Update)}}{{.Path}}: {{.Version}} -> {{.Update.Version}}{{end}}' -m all 2> /dev/null To upgrade to the latest version for all direct and indirect dependencies of the current module, the following can be run from the module root directory: * go get -u ./... to use the latest minor or patch releases (and add -t to also upgrade test dependencies) * go get -u=patch ./... to use the latest patch releases (and add -t to also upgrade test dependencies) go get foo updates to the latest version of foo . go get foo is equivalent to go get foo@latest \u2014 in other words, @latest is the default if no @ version is specified. In this section, \"latest\" is the latest version with a semver tag, or the latest known commit if there are no semver tags. Prerelease tags are not selected as \"latest\" unless there are no other semver tags on the repository ( details ). A common mistake is thinking go get -u foo solely gets the latest version of foo . In actuality, the -u in go get -u foo or go get -u foo@latest means to also get the latest versions for all of the direct and indirect dependencies of foo . A common starting point when upgrading foo is instead to do go get foo or go get foo@latest without a -u (and after things are working, consider go get -u=patch foo , go get -u=patch , go get -u foo , or go get -u ). To upgrade or downgrade to a more specific version, 'go get' allows version selection to be overridden by adding an @version suffix or \"module query\" to the package argument, such as go get foo@v1.6.2 , go get foo@e3702bed2 , or go get foo@'<v1.6.2' . Using a branch name such as go get foo@master ( foo@default with mercurial) is one way to obtain the latest commit regardless of whether or not it has a semver tag. In general, module queries that do not resolve to a semver tag will be recorded as pseudo-versions in the go.mod file. See the \"Module-aware go get\" and \"Module queries\" sections of the go command documentation for more information on the topics here. Modules are capable of consuming packages that have not yet opted into modules, including recording any available semver tags in go.mod and using those semver tags to upgrade or downgrade. Modules can also consume packages that do not yet have any proper semver tags (in which case they will be recorded using pseudo-versions in go.mod ). After upgrading or downgrading any dependencies, you may then want to run the tests again for all packages in your build (including direct and indirect dependencies) to check for incompatibilities: $ go test all","title":"How to Upgrade and Downgrade Dependencies"},{"location":"Modules/#how-to-prepare-for-a-release","text":"","title":"How to Prepare for a Release"},{"location":"Modules/#releasing-modules-all-versions","text":"Best practices for creating a release of a module are expected to emerge as part of the initial modules experiment. Many of these might end up being automated by a future 'go release' tool . Some current suggested best practices to consider prior to tagging a release: Run go mod tidy to possibly prune any extraneous requirements (as described here ) and also ensure your current go.mod reflects all possible build tags/OS/architecture combinations (as described here ). In contrast, other commands like go build and go test will not remove dependencies from go.mod that are no longer required and only update go.mod based on the current build invocation's tags/OS/architecture. Run go test all to test your module (including running the tests for your direct and indirect dependencies) as a way of validating that the currently selected package versions are compatible. The number of possible version combinations is exponential in the number of modules, so in general, you cannot expect your dependencies to have tested against all possible combinations of their dependencies. As part of the modules work, go test all has been re-defined to be more useful : to include all the packages in the current module plus all the packages they depend on through a sequence of one or more imports while excluding packages that don't matter in the current module. Ensure your go.sum file is committed along with your go.mod file. See FAQ below for more details and rationale.","title":"Releasing Modules (All Versions)"},{"location":"Modules/#releasing-modules-v2-or-higher","text":"If you are releasing a v2 or higher module, please first review the discussion in the \"Semantic Import Versioning\" section above, which includes why major versions are included in the module path and import path for v2+ modules, as well as how Go versions 1.9.7+ and 1.10.3+ have been updated to simplify that transition. Note that if you are adopting modules for the first time for a pre-existing repository or set of packages that have already been tagged v2.0.0 or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are the author of foo , and the latest tag for the foo repository is v2.2.2 , and foo has not yet adopted modules, then the best practice would be to use v3.0.0 for the first release of foo to adopt modules (and hence the first release of foo to contain a go.mod file). Incrementing the major version in this case provides greater clarity to consumers of foo , allows for additional non-module patches or minor releases on the v2 series of foo if needed, and provides a strong signal for a module-based consumer of foo that different major versions result if you do import \"foo\" and a corresponding require foo v2.2.2+incompatible , vs. import \"foo/v3\" and a corresponding require foo/v3 v3.0.0 . (Note that this advice regarding incrementing the major version when first adopting modules does not apply to pre-existing repos or packages whose latest versions are v0.x.x or v1.x.x). There are two alternative mechanisms to release a v2 or higher module. Note that with both techniques, the new module release becomes available to consumers when the module author pushes the new tags. Using the example of creating a v3.0.0 release, the two options are: Major branch : Update the go.mod file to include a /v3 at the end of the module path in the module directive (e.g., module github.com/my/module/v3 ). Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\" ). Tag the release with v3.0.0 . Go versions 1.9.7+, 1.10.3+, and 1.11 are able to properly consume and build a v2+ module created using this approach without requiring updates to consumer code that has not yet opted in to modules (as described in the \"Semantic Import Versioning\" section above). A community tool github.com/marwan-at-work/mod helps automate this procedure. See the repository or the community tooling FAQ below for an overview. To avoid confusion with this approach, consider putting the v3.*.* commits for the module on a separate v3 branch. Note: creating a new branch is not required. If instead you have been previously releasing on master and would prefer to tag v3.0.0 on master, that is a viable option. (However, be aware that introducing an incompatible API change in master can cause issues for non-modules users who issue a go get -u given the go tool is not aware of semver prior to Go 1.11 or when module mode is not enabled in Go 1.11+). Pre-existing dependency management solutions such as dep currently can have problems consuming a v2+ module created in this way. See for example dep#1962 . Major subdirectory : Create a new v3 subdirectory (e.g., my/module/v3 ) and place a new go.mod file in that subdirectory. The module path must end with /v3 . Copy or move the code into the v3 subdirectory. Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\" ). Tag the release with v3.0.0 . This provides greater backwards-compatibility. In particular, Go versions older than 1.9.7 and 1.10.3 are also able to properly consume and build a v2+ module created using this approach. A more sophisticated approach here could exploit type aliases (introduced in Go 1.9) and forwarding shims between major versions residing in different subdirectories. This can provide additional compatibility and allow one major version to be implemented in terms of another major version but would entail more work for a module author. An in-progress tool to automate this is goforward . Please see here for more details and rationale, along with a functioning initial version of goforward . Pre-existing dependency management solutions such as dep should be able to consume a v2+ module created in this way. See https://research.swtch.com/vgo-module for a more in-depth discussion of these alternatives.","title":"Releasing Modules (v2 or Higher)"},{"location":"Modules/#publishing-a-release","text":"A new module version may be published by pushing a tag to the repository that contains the module source code. The tag is formed by concatenating two strings: a prefix and a version . The version is the semantic import version for the release. It should be chosen by following the rules of semantic import versioning . The prefix indicates where a module is defined within a repository. If the module is defined at the root of the repository, the prefix is empty, and the tag is just the version. However, in multi-module repositories , the prefix distinguishes versions for different modules. The prefix is the directory within the repository where the module is defined. If the repository follows the major subdirectory pattern described above, the prefix does not include the major version suffix. For example, suppose we have a module example.com/repo/sub/v2 , and we want to publish version v2.1.6 . The repository root corresponds to example.com/repo , and the module is defined in sub/v2/go.mod within the repository. The prefix for this module is sub/ . The full tag for this release should be sub/v2.1.6 .","title":"Publishing a release"},{"location":"Modules/#migrating-to-modules","text":"This section attempts to briefly enumerate the major decisions to be made when migrating to modules as well as list other migration-related topics. References are generally provided to other sections for more details. This material is primarily based on best practices that have emerged from the community as part of the modules experiment; this is, therefore, a work-in-progress section that will improve as the community gains more experience. Summary: The modules system is designed to allow different packages in the overall Go ecosystem to opt-in at different rates. Packages that are already on version v2 or higher have more migration considerations, primarily due to the implications of Semantic Import versioning . New packages and packages on v0 or v1 have substantially fewer considerations when adopting modules. Modules defined with Go 1.11 can be used by older Go versions (although the exact Go versions depend on the strategy used by the main module and its dependencies, as outlined below). Migration topics:","title":"Migrating to Modules"},{"location":"Modules/#automatic-migration-from-prior-dependency-managers","text":"go mod init automatically translates the required information from dep, glide, govendor, godep, and 5 other pre-existing dependency managers into a go.mod file that produces the equivalent build. If you are creating a v2+ module, be sure your module directive in the converted go.mod includes the appropriate /vN (e.g., module foo/v3 ). Note that if you are importing v2+ modules, you might need to do some manual adjustments after an initial conversion in order to add /vN to the require statements that go mod init generates after translating from a prior dependency manager. See the \"How to Define a Module\" section above for more details. In addition, go mod init will not edit your .go code to add any required /vN to import statements. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for the required steps, including some options around community tools to automate the conversion.","title":"Automatic Migration from Prior Dependency Managers"},{"location":"Modules/#providing-dependency-information-to-older-versions-of-go-and-non-module-consumers","text":"Older versions of Go understand how to consume a vendor directory created by go mod vendor , as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. See the vendoring FAQ and the go command documentation for more details.","title":"Providing Dependency Information to Older Versions of Go and Non-Module Consumers"},{"location":"Modules/#updating-pre-existing-install-instructions","text":"Pre-modules, it is common for install instructions to include go get -u foo . If you are publishing a module foo , consider dropping the -u in instructions for modules-based consumers. -u asks the go tool to upgrade all the direct and indirect dependencies of foo . A module consumer might choose to run go get -u foo later, but there are more benefits of \"High Fidelity Builds\" if -u is not part of the initial install instructions. See \"How to Upgrade and Downgrade Dependencies\" for more details. go get -u foo does still work, and can still be a valid choice for install instructions. In addition, go get foo is not strictly needed for a module-based consumer. Simply adding an import statement import \"foo\" is sufficient. (Subsequent commands like go build or go test will automatically download foo and update go.mod as needed). Module-based consumers will not use a vendor directory by default. When module mode is enabled in the go tool, vendor is not strictly required when consuming a module (given the information contained in go.mod and the cryptographic checksums in go.sum ), but some pre-existing install instructions assume the go tool will use vendor by default. See the vendoring FAQ for more details. Install instructions that include go get foo/... might have issues in some cases (see discussion in #27215 ).","title":"Updating Pre-Existing Install Instructions"},{"location":"Modules/#avoid-breaking-existing-import-paths","text":"A module declares its identity in its go.mod via the module directive, such as module github.com/my/module . All packages within the module must be imported by any module-aware consumer with import paths that match the module's declared module path (either exactly for a root package, or with the module path as a prefix of the import path). The go command reports an unexpected module path error if there is a mismatch between an import path vs. the corresponding module's declared module path. When adopting modules for a pre-existing set of packages, care should be taken to avoid breaking existing import paths used by existing consumers, unless you are incrementing your major version when adopting modules. For example, if your pre-existing README has been telling consumers to use import \"gopkg.in/foo.v1\" , and if you then adopt modules with a v1 release, your initial go.mod should almost certainly read module gopkg.in/foo.v1 . If you wanted to move away from using gopkg.in , that would be a breaking change for your current consumers. One approach would be to change to something like module github.com/repo/foo/v2 if you later move to v2. Note that module paths and import paths are case-sensitive. Changing a module from github.com/Sirupsen/logrus to github.com/sirupsen/logrus , for example, is a breaking change for consumers, even if GitHub automatically forwards from one repository name to the new repository name. After you have adopted modules, changing your module path in your go.mod is a breaking change. Overall, this is similar to the pre-modules enforcement of a canonical import path via \"import path comments\" , which are also sometimes called \"import pragmas\" or \"import path enforcement\". As an example, the package go.uber.org/zap is currently hosted at github.com/uber-go/zap , but uses an import path comment next to the package declaration that triggers an error for any pre-modules consumer using the wrong github-based import path: package zap // import \"go.uber.org/zap\" Import path comments are obsoleted by the go.mod file's module statement.","title":"Avoid Breaking Existing Import Paths"},{"location":"Modules/#incrementing-the-major-version-when-first-adopting-modules-with-v2-packages","text":"If you have packages that have already been tagged v2.0.0 or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are on v2.0.1 and have not yet adopted modules, then you would use v3.0.0 for the first release that adopts modules. See the \"Releasing Modules (v2 or Higher)\" section above for more details.","title":"Incrementing the Major Version When First Adopting Modules with v2+ Packages"},{"location":"Modules/#v2-modules-allow-multiple-major-versions-within-a-single-build","text":"If a module is on v2 or higher, an implication is that multiple major versions can be in a single build (e.g., foo and foo/v3 might end up in a single build). This flows naturally from the rule that \"packages with different import paths are different packages\". When this happens, there will be multiple copies of package-level state (e.g., package-level state for foo and package-level state for foo/v3 ) as well as each major version will run its own init function. This approach helps with multiple aspects of the modules system, including helping with diamond dependency problems, gradual migration to new versions within large codebases, and allowing a major version to be implemented as a shim around a different major version. See the \"Avoiding Singleton Problems\" section of https://research.swtch.com/vgo-import or #27514 for some related discussion.","title":"v2+ Modules Allow Multiple Major Versions Within a Single Build"},{"location":"Modules/#modules-consuming-non-module-code","text":"Modules are capable of consuming packages that have not yet opted into modules, with the appropriate package version information recorded in the importing module's go.mod . Modules can consume packages that do not yet have any proper semver tags. See FAQ below for more details. Modules can also import a v2+ package that has not opted into modules. It will be recorded with a +incompatible suffix if the imported v2+ package has valid semver tags. See FAQ below for more details.","title":"Modules Consuming Non-Module Code"},{"location":"Modules/#non-module-code-consuming-modules","text":"Non-module code consuming v0 and v1 modules : Code that has not yet opted in to modules can consume and build v0 and v1 modules (without any requirement related to the Go version used). Non-module code consuming v2+ modules : Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated so that code built with those releases can properly consume v2+ modules without requiring modification of pre-existing code as described in the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above. Go versions prior to 1.9.7 and 1.10.3 can consume v2+ modules if the v2+ module was created following the \"Major subdirectory\" approach outlined in the \"Releasing Modules (v2 or Higher)\" section.","title":"Non-Module Code Consuming Modules"},{"location":"Modules/#strategies-for-authors-of-pre-existing-v2-packages","text":"For authors of pre-existing v2+ packages considering opting in to modules, one way to summarize the alternative approaches is as a choice between three top-level strategies. Each choice then has follow-on decisions and variations (as outlined above). These alternative top-level strategies are: Require clients to use Go versions 1.9.7+, 1.10.3+, or 1.11+ . The approach uses the \"Major Branch\" approach and relies on the \"minimal module awareness\" that was backported to 1.9.7 and 1.10.3. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details. Allow clients to use even older Go versions like Go 1.8 . This approach uses the \"Major Subdirectory\" approach and involves creating a subdirectory such as /v2 or /v3 . See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details. Wait on opting into modules . In this strategy, things continue to work with client code that has opted into modules as well as with client code that has not opted into modules. As time goes by, Go versions 1.9.7+, 1.10.3+, and 1.11+ will be out for an increasingly longer time period, and at some point in the future, it becomes more natural or client-friendly to require Go versions 1.9.7+/1.10.3+/1.11+, and at that point in time, you can implement strategy 1 above (requiring Go versions 1.9.7+, 1.10.3+, or 1.11+) or even strategy 2 above (though if you are ultimately going to go with strategy 2 above in order to support older Go versions like 1.8, then that is something you can do now).","title":"Strategies for Authors of Pre-Existing v2+ Packages"},{"location":"Modules/#additional-resources","text":"","title":"Additional Resources"},{"location":"Modules/#documentation-and-proposal","text":"Official documentation: Latest HTML documentation for modules on golang.org Run go help modules for more about modules. (This is the main entry point for modules topics via go help ) Run go help mod for more about the go mod command. Run go help module-get for more about the behavior of go get when in module-aware mode. Run go help goproxy for more about the module proxy, including a pure file-based option via a file:/// URL. The initial \"Go & Versioning\" series of blog posts on vgo by Russ Cox (first posted February 20, 2018) Official golang.org blog post introducing the proposal (March 26, 2018) This provides a more succinct overview of the proposal than the full vgo blog series, along with some of the history and process behind the proposal Official Versioned Go Modules Proposal (last updated March 20, 2018)","title":"Documentation and Proposal"},{"location":"Modules/#introductory-material","text":"Introductory 40-minute video \"The Principles of Versions in Go\" from GopherCon Singapore by Russ Cox (May 2, 2018) Succinctly covers the philosophy behind the design of versioned Go modules, including the three core principles of \"Compatibility\", \"Repeatability\", and \"Cooperation\" Example based 35-minute introductory video \"What are Go modules and how do I use them?\" ( slides ) by Paul Jolly (August 15, 2018) Introductory blog post \"Taking Go Modules for a Spin\" by Dave Cheney (July 14, 2018) Introductory Go Meetup slides on modules by Chris Hines (July 16, 2018) Introductory 30-minute video \"Intro to Go Modules and SemVer\" by Francesc Campoy (Nov 15, 2018)","title":"Introductory Material"},{"location":"Modules/#additional-material","text":"Blog post \"Using Go modules with vendor support on Travis CI\" by Fatih Arslan (August 26, 2018) Blog post \"Go Modules and CircleCI\" by Todd Keech (July 30, 2018) Blog post \"The vgo proposal is accepted. Now what?\" by Russ Cox (May 29, 2018) Includes a summary of what it means that versioned modules are currently an experimental opt-in feature Blog post on how to build go from tip and start using go modules by Carolyn Van Slyck (July 16, 2018)","title":"Additional Material"},{"location":"Modules/#changes-since-the-initial-vgo-proposal","text":"As part of the proposal, prototype, and beta processes, there have been over 400 issues created by the overall community. Please continue to supply feedback. Here is a partial list of some of the larger changes and improvements, almost all of which were primarily based on feedback from the community: Top-level vendor support was retained rather than vgo-based builds ignoring vendor directories entirely ( discussion , CL ) Backported minimal module-awareness to allow older Go versions 1.9.7+ and 1.10.3+ to more easily consume modules for v2+ projects ( discussion , CL ) Allowed vgo to use v2+ tags by default for pre-existing packages did not yet have a go.mod (recent update in related behavior described here ) Added support via command go get -u=patch to update all transitive dependencies to the latest available patch-level versions on the same minor version ( discussion , documentation ) Additional control via environmental variables (e.g., GOFLAGS in #26585 , CL ) Finer grain control on whether or not go.mod is allowed to be updated, how vendor directory is used, and whether or not network access is allowed (e.g., -mod=readonly, -mod=vendor, GOPROXY=off; related CL for a recent change) Added more flexible replace directives ( CL ) Added additional ways to interrogate modules (for human consumption, as well as for better editor / IDE integration) The UX of the go CLI has continued to be refined based on experiences so far (e.g., #26581 , CL ) Additional support for warming caches for use cases such as CI or docker builds via go mod download ( #26610 ) Most likely : better support for installing specific versions of programs to GOBIN ( #24250 )","title":"Changes Since the Initial Vgo Proposal"},{"location":"Modules/#github-issues","text":"Currently open module issues Closed module issues Closed vgo issues Submit a new module issue using 'cmd/go:' as the prefix","title":"GitHub Issues"},{"location":"Modules/#faqs","text":"","title":"FAQs"},{"location":"Modules/#how-are-versions-marked-as-incompatible","text":"The require directive allows any module to declare that it should be built with version >= x.y.z of a dependency D (which may be specified due to incompatibilities with version < x.y.z of module D). Empirical data suggests this is the dominant form of constraints used in dep and cargo . In addition, the top-level module in the build can exclude specific versions of dependencies or replace other modules with different code. See the full proposal for more details and rationale . One of the key goals of the versioned modules proposal is to add a common vocabulary and semantics around versions of Go code for both tools and developers. This lays a foundation for future capabilities to declare additional forms of incompatibilities, such as possibly: * declaring deprecated versions as described in the initial vgo blog series * declaring pair-wise incompatibility between modules in an external system as discussed for example here during the proposal process * declaring pair-wise incompatible versions or insecure versions of a module after a release has been published. See for example the on-going discussion in #24031 and #26829","title":"How are versions marked as incompatible?"},{"location":"Modules/#when-do-i-get-old-behavior-vs-new-module-based-behavior","text":"In general, modules are opt-in for Go 1.11, so by design old behavior is preserved by default. Summarizing when you get the old 1.10 status quo behavior vs. the new opt-in modules-based behavior: Inside GOPATH \u2014 defaults to old 1.10 behavior (ignoring modules) Outside GOPATH while inside a file tree with a go.mod \u2014 defaults to modules behavior GO111MODULE environment variable: unset or auto \u2014 default behavior above on \u2014 force module support on regardless of directory location off \u2014 force module support off regardless of directory location","title":"When do I get old behavior vs. new module-based behavior?"},{"location":"Modules/#why-does-installing-a-tool-via-go-get-fail-with-error-cannot-find-main-module","text":"This occurs when you have set GO111MODULE=on , but are not inside of a file tree with a go.mod when you run go get . The simplest solution is to leave GO111MODULE unset (or equivalently explicitly set to GO111MODULE=auto ), which avoids this error. Recall one of the primary reason modules exist is to record precise dependency information. This dependency information is written to your current go.mod . If you are not inside of a file tree with a go.mod but you have told the go get command to operate in module mode by setting GO111MODULE=on , then running go get will result in the error cannot find main module because there is no go.mod available to record dependency information. Solution alternatives include: Leave GO111MODULE unset (the default, or explicitly set GO111MODULE=auto ), which results in friendlier behavior. This will give you Go 1.10 behavior when you are outside of a module and hence will avoid go get reporting cannot find main module . Leave GO111MODULE=on , but as needed disable modules temporarily and enable Go 1.10 behavior during go get , such as via GO111MODULE=off go get example.com/cmd . This can be turned into a simple script or shell alias such as alias oldget='GO111MODULE=off go get' Create a temporary go.mod file that is then discarded. This has been automated by a simple shell script by @rogpeppe . This script allows version information to optionally be supplied via vgoget example.com/cmd[@version] . (This can be a solution for avoiding the error cannot use path@version syntax in GOPATH mode ). gobin is a module-aware command to install and run main packages. By default, gobin installs/runs main packages without first needing to manually create a module, but with the -m flag it can be told to use an existing module to resolve dependencies. Please see the gobin README and FAQ for details and additional use cases. Create a go.mod you use to track your globally installed tools, such as in ~/global-tools/go.mod , and cd to that directory prior to running go get or go install for any globally installed tools. Create a go.mod for each tool in separate directories, such as ~/tools/gorename/go.mod and ~/tools/goimports/go.mod , and cd to that appropriate directory prior to running go get or go install for the tool. This current limitation will be resolved. However, the primary issue is that modules are currently opt-in, and a full solution will likely wait until GO111MODULE=on becomes the default behavior. See #24250 for more discussion, including this comment: This clearly must work eventually. The thing I'm not sure about is exactly what this does as far as the version is concerned: does it create a temporary module root and go.mod, do the install, and then throw it away? Probably. But I'm not completely sure, and for now, I didn't want to confuse people by making vgo do things outside go.mod trees. Certainly, the eventual go command integration has to support this. This FAQ has been discussing tracking globally installed tools. If instead, you want to track the tools required by a specific module, see the next FAQ.","title":"Why does installing a tool via go get fail with error cannot find main module?"},{"location":"Modules/#how-can-i-track-tool-dependencies-for-a-module","text":"If you: * want to use a go-based tool (e.g. stringer ) while working on a module, and * want to ensure that everyone is using the same version of that tool while tracking the tool's version in your module's go.mod file then one currently recommended approach is to add a tools.go file to your module that includes import statements for the tools of interest (such as import _ \"golang.org/x/tools/cmd/stringer\" ), along with a // +build tools build constraint. The import statements allow the go command to precisely record the version information for your tools in your module's go.mod , while the // +build tools build constraint prevents your normal builds from actually importing your tools. For a concrete example of how to do this, please see this \"Go Modules by Example\" walkthrough . A discussion of the approach along with an earlier concrete example of how to do this is in this comment in #25922 . The brief rationale (also from #25922 ): I think the tools.go file is, in fact, the best practice for tool dependencies, certainly for Go 1.11. I like it because it does not introduce new mechanisms. It simply reuses existing ones.","title":"How can I track tool dependencies for a module?"},{"location":"Modules/#what-is-the-status-of-module-support-in-ides-editors-and-standard-tools-like-goimports-gorename-etc","text":"Support for modules is starting to land in editors and IDEs. For example: * GoLand : currently has full support for modules outside and inside GOPATH, including completion, syntax analysis, refactoring, navigation as described here . * VS Code : work is complete, MS recommending modules over GOPATH, the former tracking issue ( #1532 ) has been closed. Documentation is available in the VS Code module repository . * Atom with go-plus : tracking issue is #761 . * vim with vim-go : initial support for syntax highlighting and formatting go.mod has landed . Broader support tracked in #1906 . * emacs with go-mode.el : tracking issue in #237 . The status of other tools such as goimports, guru, gorename and similar tools is being tracked in an umbrella issue #24661 . Please see that umbrella issue for latest status. Some tracking issues for particular tools include: * gocode : tracking issue in mdempsky/gocode/#46 . Note that nsf/gocode is recommending people migrate off of nsf/gocode to mdempsky/gocode . * go-tools (tools by dominikh such as staticcheck, megacheck, gosimple): sample tracking issue dominikh/go-tools#328 . In general, even if your editor, IDE or other tools have not yet been made module aware, much of their functionality should work with modules if you are using modules inside GOPATH and do go mod vendor (because then the proper dependencies should be picked up via GOPATH). The full fix is to move programs that load packages off of go/build and onto golang.org/x/tools/go/packages , which understands how to locate packages in a module-aware manner. This will likely eventually become go/packages .","title":"What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc?"},{"location":"Modules/#faqs--additional-control","text":"","title":"FAQs \u2014 Additional Control"},{"location":"Modules/#what-community-tooling-exists-for-working-with-modules","text":"The community is starting to build tooling on top of modules. For example: github.com/rogpeppe/gohack A new community tool to automate and greatly simplify replace and multi-module workflows, including allowing you to easily modify one of your dependencies For example, gohack example.com/some/dependency automatically clones the appropriate repository and adds the necessary replace directives to your go.mod Remove all gohack replace statements with gohack undo The project is continuing to expand to make other module-related workflows easier github.com/marwan-at-work/mod Command line tool to automatically upgrade/downgrade major versions for modules Automatically adjusts go.mod files and related import statements in go source code Helps with upgrades, or when first opting into modules with a v2+ package github.com/akyoto/mgit Lets you view & control semver tags of all of your local projects Shows untagged commits and lets you tag them all at once ( mgit -tag +0.0.1 ) github.com/goware/modvendor Helps copy additional files into the vendor/ folder, such as shell scripts, .cpp files, .proto files, etc. github.com/psampaz/go-mod-outdated Displays outdated dependencies in a human friendly way Provides a way to filter indirect dependencies and dependencies without updates Provides a way to break CI pipelines in case of outdated dependencies github.com/oligot/go-mod-upgrade Update outdated Go dependencies interactively","title":"What community tooling exists for working with modules?"},{"location":"Modules/#when-should-i-use-the-replace-directive","text":"As described in the 'go.mod' concepts section above , replace directives provide additional control in the top-level go.mod for what is actually used to satisfy a dependency found in the Go source or go.mod files, while replace directives in modules other than the main module are ignored when building the main module. The replace directive allows you to supply another import path that might be another module located in VCS (GitHub or elsewhere), or on your local filesystem with a relative or absolute file path. The new import path from the replace directive is used without needing to update the import paths in the actual source code. replace allows the top-level module control over the exact version used for a dependency, such as: * replace example.com/some/dependency => example.com/some/dependency v1.2.3 replace also allows the use of a forked dependency, such as: * replace example.com/some/dependency => example.com/some/dependency-fork v1.2.3 You can also reference branches, for example: * replace example.com/some/dependency => example.com/some/dependency-fork master One sample use case is if you need to fix or investigate something in a dependency, you can have a local fork and add something like the following in your top-level go.mod : * replace example.com/original/import/path => /your/forked/import/path replace also can be used to inform the go tooling of the relative or absolute on-disk location of modules in a multi-module project, such as: * replace example.com/project/foo => ../foo Note : if the right-hand side of a replace directive is a filesystem path, then the target must have a go.mod file at that location. If the go.mod file is not present, you can create one with go mod init . In general, you have the option of specifying a version to the left of the => in a replace directive, but typically it is less sensitive to change if you omit that (e.g., as done in all of the replace examples above). A require directive is needed for each replace directive of a direct dependency. When replacing a dependency from a filesystem path, the version of the corresponding require directive is essentially ignored; in this case, the pseudoversion v0.0.0 is a good choice to make this clear, e.g. require example.com/module v0.0.0 . You can confirm you are getting your expected versions by running go list -m all , which shows you the actual final versions that will be used in your build including taking into account replace statements. See the 'go mod edit' documentation for more details. github.com/rogpeppe/gohack makes these types of workflows much easier, especially if your goal is to have mutable checkouts of dependencies of a module. See the repository or the immediately prior FAQ for an overview. See the next FAQ for the details of using replace to work entirely outside of VCS.","title":"When should I use the replace directive?"},{"location":"Modules/#can-i-work-entirely-outside-of-vcs-on-my-local-filesystem","text":"Yes. VCS is not required. This is very simple if you have a single module you want to edit at a time outside of VCS (and you either have only one module in total, or if the other modules reside in VCS). In this case, you can place the file tree containing the single go.mod in a convenient location. Your go build , go test and similar commands will work even if your single module is outside of VCS (without requiring any use of replace in your go.mod ). If you want to have multiple inter-related modules on your local disk that you want to edit at the same time, then replace directives are one approach. Here is a sample go.mod that uses a replace with a relative path to point the hello module at the on-disk location of the goodbye module (without relying on any VCS): module example.com/me/hello require ( example.com/me/goodbye v0.0.0 ) replace example.com/me/goodbye => ../goodbye A small runnable example is shown in this thread .","title":"Can I work entirely outside of VCS on my local filesystem?"},{"location":"Modules/#how-do-i-use-vendoring-with-modules-is-vendoring-going-away","text":"The initial series of vgo blog posts did propose dropping vendoring entirely, but feedback from the community resulted in retaining support for vendoring. In brief, to use vendoring with modules: * go mod vendor resets the main module's vendor directory to include all packages needed to build and test all of the module's packages based on the state of the go.mod files and Go source code. * By default, go commands like go build ignore the vendor directory when in module mode. * The -mod=vendor flag (e.g., go build -mod=vendor ) instructs the go commands to use the main module's top-level vendor directory to satisfy dependencies. The go commands in this mode therefore ignore the dependency descriptions in go.mod and assume that the vendor directory holds the correct copies of dependencies. Note that only the main module's top-level vendor directory is used; vendor directories in other locations are still ignored. * Some people will want to routinely opt-in to vendoring by setting a GOFLAGS=-mod=vendor environment variable. Older versions of Go such as 1.10 understand how to consume a vendor directory created by go mod vendor , as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. If you are considering using vendoring, it is worthwhile to read the \"Modules and vendoring\" and \"Make vendored copy of dependencies\" sections of the tip documentation.","title":"How do I use vendoring with modules? Is vendoring going away?"},{"location":"Modules/#are-there-always-on-module-repositories-and-enterprise-proxies","text":"Publicly hosted \"always on\" immutable module repositories and optional privately hosted proxies and repositories are becoming available. For example: * proxy.golang.org - Official project - Run by Google - The default Go module proxy built by the Go team. * proxy.golang.com.cn - China proxy project - Run by China Golang Contributor Club - China Go module proxy. * mirrors.tencent.com/go - Commercial project - Run by Tencent Cloud - A Go module proxy alternate. * mirrors.aliyun.com/goproxy - Commercial project - Run by Alibaba Cloud - A Go module proxy alternate. * goproxy.cn - Open source project - Run by Qiniu Cloud - The most trusted Go module proxy in China. * goproxy.io - Open source project - Run by China Golang Contributor Club - A global proxy for Go modules. * Athens - Open source project - Self-hosted - A Go module datastore and proxy. * athens.azurefd.net - Open source project - A hosted module proxy running Athens. * Goproxy - Open source project - Self-hosted - A minimalist Go module proxy handler. * THUMBAI - Open source project - Self-hosted - Go mod proxy server and Go vanity import path server. Note that you are not required to run a proxy. Rather, the go tooling in 1.11 has added optional proxy support via GOPROXY to enable more enterprise use cases (such as greater control), and also to better handle situations such as \"GitHub is down\" or people deleting GitHub repositories.","title":"Are there \"always on\" module repositories and enterprise proxies?"},{"location":"Modules/#can-i-control-when-gomod-gets-updated-and-when-the-go-tools-use-the-network-to-satisfy-dependencies","text":"By default, a command like go build will reach out to the network as needed to satisfy imports. Some teams will want to disallow the go tooling from touching the network at certain points, or will want greater control regarding when the go tooling updates go.mod , how dependencies are obtained, and how vendoring is used. The go tooling provides a fair amount of flexibility to adjust or disable these default behaviors, including via -mod=readonly , -mod=vendor , GOFLAGS , GOPROXY=off , GOPROXY=file:///filesystem/path , go mod vendor , and go mod download . The details on these options are spread throughout the official documentation. One community attempt at a consolidated overview of knobs related to these behaviors is here , which includes links to the official documentation for more information.","title":"Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies?"},{"location":"Modules/#how-do-i-use-modules-with-ci-systems-such-as-travis-or-circleci","text":"The simplest approach is likely just setting the environment variable GO111MODULE=on , which should work with most CI systems. However, it can be valuable to run tests in CI on Go 1.11 with modules enabled as well as disabled, given some of your users will not have yet opted in to modules themselves. Vendoring is also a topic to consider. The following two blog posts cover these topics more concretely: \"Using Go modules with vendor support on Travis CI\" by Fatih Arslan \"Go Modules and CircleCI\" by Todd Keech","title":"How do I use modules with CI systems such as Travis or CircleCI?"},{"location":"Modules/#how-do-i-download-modules-needed-to-build-specific-packages-or-tests","text":"The go mod download command (or equivalently, go mod download all ) downloads all modules in the build list (as reported by go list -m all ). Many of these modules aren't needed to build packages in the main module, since the full build list contains things like test dependencies and tool dependencies for other modules. Consequently, Docker images prepared with go mod download may be larger than necessary. Instead, consider using go list . For example, go list ./... will download the modules needed to build the packages ./... (the set of packages in the main module, when run from the module root directory). To download test dependencies as well, use go list -test ./... . By default, go list will only consider dependencies needed for the current platform. You can set GOOS and GOARCH to make go list consider another platform, for example, GOOS=linux GOARCH=amd64 go list ./... . The -tags flag may also be used to select packages with specific build tags. This technique may be less necessary in the future when lazy module loading is implemented (see #36460 ), since the module pattern all will include fewer modules.","title":"How do I download modules needed to build specific packages or tests?"},{"location":"Modules/#faqs--gomod-and-gosum","text":"","title":"FAQs \u2014 go.mod and go.sum"},{"location":"Modules/#why-does-go-mod-tidy-record-indirect-and-test-dependencies-in-my-gomod","text":"The modules system records precise dependency requirements in your go.mod . (For more details, see the go.mod concepts section above or the go.mod tip documentation ). go mod tidy updates your current go.mod to include the dependencies needed for tests in your module \u2014 if a test fails, we must know which dependencies were used in order to reproduce the failure. go mod tidy also ensures your current go.mod reflects the dependency requirements for all possible combinations of OS, architecture, and build tags (as described here ). In contrast, other commands like go build and go test only update go.mod to provide the packages imported by the requested packages under the current GOOS , GOARCH , and build tags (which is one reason go mod tidy might add requirements that were not added by go build or similar). If a dependency of your module does not itself have a go.mod (e.g., because the dependency has not yet opted in to modules itself), or if its go.mod file is missing one or more of its dependencies (e.g., because the module author did not run go mod tidy ), then the missing transitive dependencies will be added to your module's requirements, along with an // indirect comment to indicate that the dependency is not from a direct import within your module. Note that this also means that any missing test dependencies from your direct or indirect dependencies will also be recorded in your go.mod . (An example of when this is important: go test all runs the tests of all direct and indirect dependencies of your module, which is one way to validate that your current combination of versions work together. If a test fails in one of your dependencies when you run go test all , it is important to have a complete set of test dependency information recorded so that you have reproducible go test all behavior). Another reason you might have // indirect dependencies in your go.mod file is if you have upgraded (or downgraded) one of your indirect dependencies beyond what is required by your direct dependencies, such as if you ran go get -u or go get foo@1.2.3 . The go tooling needs a place to record those new versions, and it does so in your go.mod file (and it does not reach down into your dependencies to modify their go.mod files). In general, the behaviors described above are part of how modules provide 100% reproducible builds and tests by recording precise dependency information. If you are curious as to why a particular module is showing up in your go.mod , you can run go mod why -m <module> to answer that question. Other useful tools for inspecting requirements and versions include go mod graph and go list -m all .","title":"Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'?"},{"location":"Modules/#is-gosum-a-lock-file-why-does-gosum-include-information-for-module-versions-i-am-no-longer-using","text":"No, go.sum is not a lock file. The go.mod files in a build provide enough information for 100% reproducible builds. For validation purposes, go.sum contains the expected cryptographic checksums of the content of specific module versions. See the FAQ below for more details on go.sum (including why you typically should check in go.sum ) as well as the \"Module downloading and verification\" section in the tip documentation. In part because go.sum is not a lock file, it retains cryptographic checksums for module versions even after you stop using a module or particular module version. This allows validation of the checksums if you later resume using something, which provides additional safety. In addition, your module's go.sum records checksums for all direct and indirect dependencies used in a build (and hence your go.sum will frequently have more modules listed than your go.mod ).","title":"Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using?"},{"location":"Modules/#should-i-commit-my-gosum-file-as-well-as-my-gomod-file","text":"Typically your module's go.sum file should be committed along with your go.mod file. go.sum contains the expected cryptographic checksums of the content of specific module versions. If someone clones your repository and downloads your dependencies using the go command, they will receive an error if there is any mismatch between their downloaded copies of your dependencies and the corresponding entries in your go.sum . In addition, go mod verify checks that the on-disk cached copies of module downloads still match the entries in go.sum . Note that go.sum is not a lock file as used in some alternative dependency management systems. ( go.mod provides enough information for reproducible builds). See very brief rationale here from Filippo Valsorda on why you should check in your go.sum . See the \"Module downloading and verification\" section of the tip documentation for more details. See possible future extensions being discussed for example in #24117 and #25530 .","title":"Should I commit my 'go.sum' file as well as my 'go.mod' file?"},{"location":"Modules/#should-i-still-add-a-gomod-file-if-i-do-not-have-any-dependencies","text":"Yes. This supports working outside of GOPATH, helps communicate to the ecosystem that you are opting in to modules, and in addition the module directive in your go.mod serves as a definitive declaration of the identity of your code (which is one reason why import comments might eventually be deprecated). Of course, modules are purely an opt-in capability in Go 1.11.","title":"Should I still add a 'go.mod' file if I do not have any dependencies?"},{"location":"Modules/#faqs--semantic-import-versioning","text":"","title":"FAQs \u2014 Semantic Import Versioning"},{"location":"Modules/#why-must-major-version-numbers-appear-in-import-paths","text":"Please see the discussion on the Semantic Import Versioning and the import compatibility rule in the \"Semantic Import Versioning\" concepts section above. See also the blog post announcing the proposal , which talks more about the motivation and justification for the import compatibility rule.","title":"Why must major version numbers appear in import paths?"},{"location":"Modules/#why-are-major-versions-v0-v1-omitted-from-import-paths","text":"Please see the question \"Why are major versions v0, v1 omitted from import paths?\" in the earlier FAQ from the official proposal discussion .","title":"Why are major versions v0, v1 omitted from import paths?\""},{"location":"Modules/#what-are-some-implications-of-tagging-my-project-with-major-version-v0-v1-or-making-breaking-changes-with-v2","text":"In response to a comment about \"k8s does minor releases but changes the Go API in each minor release\" , Russ Cox made the following response that highlights some implications for picking v0, v1, vs. frequently making breaking changes with v2, v3, v4, etc. with your project: I don't fully understand the k8s dev cycle etc, but I think generally the k8s team needs to decide/confirm what they intend to guarantee to users about stability and then apply version numbers accordingly to express that. To make a promise about API compatibility (which seems like the best user experience!) then start doing that and use 1.X.Y. To have the flexibility to make backwards-incompatible changes in every release but allow different parts of a large program to upgrade their code on different schedules, meaning different parts can use different major versions of the API in one program, then use X.Y.0, along with import paths like k8s.io/client/vX/foo. To make no promises about API compatible and also require every build to have only one copy of the k8s libraries no matter what, with the implied forcing of all parts of a build to use the same version even if not all of them are ready for it, then use 0.X.Y. On a related note, Kubernetes has some atypical build approaches (currently including custom wrapper scripts on top of godep), and hence Kubernetes is an imperfect example for many other projects, but it will likely be an interesting example as Kubernetes moves towards adopting Go 1.11 modules .","title":"What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+?"},{"location":"Modules/#can-a-module-consume-a-package-that-has-not-opted-in-to-modules","text":"Yes. If a repository has not opted in to modules but has been tagged with valid semver tags (including the required leading v ), then those semver tags can be used in a go get , and a corresponding semver version will be record in the importing module's go.mod file. If the repository does not have any valid semver tags, then the repository's version will be recorded with a \"pseudo-version\" such as v0.0.0-20171006230638-a6e239ea1c69 (which includes a timestamp and a commit hash, and which are designed to allow a total ordering across versions recored in go.mod and to make it easier to reason about which recorded versions are \"later\" than another recorded version). For example, if the latest version of package foo is tagged v1.2.3 but foo has not itself opted in to modules, then running go get foo or go get foo@v1.2.3 from inside module M will be recorded in module M's go.mod file as: require foo v1.2.3 The go tool will also use available semver tags for a non-module package in additional workflows (such as go list -u=patch , which upgrades the dependencies of a module to available patch releases, or go list -u -m all , which shows available upgrades, etc.). Please see the next FAQs for additional details related to v2+ packages that have not opted in to modules.","title":"Can a module consume a package that has not opted in to modules?"},{"location":"Modules/#can-a-module-consume-a-v2-package-that-has-not-opted-into-modules-what-does-incompatible-mean","text":"Yes, a module can import a v2+ package that has not opted into modules, and if the imported v2+ package has a valid semver tag, it will be recorded with a +incompatible suffix. Additional Details Please be familiar with the material in the \"Semantic Import Versioning\" section above. It is helpful to first review some core principles that are generally useful but particularly important to keep in mind when thinking about the behavior described in this FAQ. The following core principles are always true when the go tool is operating in module mode (e.g., GO111MODULE=on ): A package's import path defines the identity of the package. Packages with different import paths are treated as different packages. Packages with the same import path are treated as the same package (and this is true even if the VCS tags say the packages have different major versions). An import path without a /vN is treated as a v1 or v0 module (and this is true even if the imported package has not opted in to modules and has VCS tags that say the major version is greater than 1). The module path (such as module foo/v2 ) declared at the start of a module's go.mod file is both: the definitive declaration of that module's identity the definitive declaration of how that module must be imported by consuming code As we will see in the next FAQ, these principles are not always true when the go tool is not in module mode, but these principles are always true when the go tool is in module mode. In short, the +incompatible suffix indicates that principle 2 above is in effect when the following are true: * an imported package has not opted in to modules, and * its VCS tags say the major version is greater than 1, and * principle 2 is overriding the VCS tags \u2013 the import path without a /vN is treated as a v1 or v0 module (even though the VCS tags say otherwise) When the go tool is in module mode, it will assume a non-module v2+ package has no awareness of Semantic Import Versioning and treat it as an (incompatible) extension of the v1 version series of the package (and the +incompatible suffix is an indication that the go tool is doing so). Example Suppose: * oldpackage is a package that predates the introduction of modules * oldpackage has never opted in to modules (and hence does not have a go.mod itself) * oldpackage has a valid semver tag v3.0.1 , which is its latest tag In this case, running for example go get oldpackage@latest from inside module M will record the following in module M's go.mod file: require oldpackage v3.0.1+incompatible Note that there is no /v3 used at the end of oldpackage in the go get command above or in the recorded require directive \u2013 using /vN in module paths and import paths is a feature of Semantic Import Versioning , and oldpackage has not signaled its acceptance and understanding of Semantic Import Versioning given oldpackage has not opted into modules by having a go.mod file within oldpackage itself. In other words, even though oldpackage has a semver tag of v3.0.1 , oldpackage is not granted the rights and responsibilities of Semantic Import Versioning (such as using /vN in import paths) because oldpackage has not yet stated its desire to do so. The +incompatible suffix indicates that the v3.0.1 version of oldpackage has not actively opted in to modules, and hence the v3.0.1 version of oldpackage is assumed to not understand Semantic Import Versioning or how to use major versions in import paths. Therefore, when operating in module mode , the go tool will treat the non-module v3.0.1 version of oldpackage as an (incompatible) extension of the v1 version series of oldpackage and assume that the v3.0.1 version of oldpackage has no awareness of Semantic Import Versioning, and the +incompatible suffix is an indication that the go tool is doing so. The fact that the v3.0.1 version of oldpackage is considered to be part of the v1 release series according to Semantic Import Versioning means for example that versions v1.0.0 , v2.0.0 , and v3.0.1 are all always imported using the same import path: import \"oldpackage\" Note again that there is no /v3 used at the end of oldpackage . In general, packages with different import paths are different packages. In this example, given versions v1.0.0 , v2.0.0 , and v3.0.1 of oldpackage would all be imported using the same import path, they are therefore treated by a build as the same package (again because oldpackage has not yet opted in to Semantic Import Versioning), with a single copy of oldpackage ending up in any given build. (The version used will be the semantically highest of the versions listed in any require directives; see \"Version Selection\" ). If we suppose that later a new v4.0.0 release of oldpackage is created that adopts modules and hence contains a go.mod file, that is the signal that oldpackage now understands the rights and responsibilities of Semantic Import Versioning, and hence a module-based consumer would now import using /v4 in the import path: import \"oldpackage/v4\" and the version would be recorded as: require oldpackage/v4 v4.0.0 oldpackage/v4 is now a different import path than oldpackage , and hence a different package. Two copies (one for each import path) would end up in a module-aware build if some consumers in the build have import \"oldpackage/v4\" while other consumers in the same build have import \"oldpackage\" . This is desirable as part of the strategy to allow gradual adoption of modules. In addition, even after modules are out of their current transitional phase, this behavior is also desirable to allow gradual code evolution over time with different consumers upgrading at different rates to newer versions (e.g., allowing different consumers in a large build to choose to upgrade at different rates from oldpackage/v4 to some future oldpackage/v5 ).","title":"Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean?"},{"location":"Modules/#how-are-v2-modules-treated-in-a-build-if-modules-support-is-not-enabled-how-does-minimal-module-compatibility-work-in-197-1103-and-111","text":"When considering older Go versions or Go code that has not yet opted in to modules, Semantic Import Versioning has significant backwards-compatibility implications related to v2+ modules. As described in the \"Semantic Import Versioning\" section above: * a module that is version v2 or higher must include a /vN in its own module path declared in its go.mod . * a module-based consumer (that is, code that has opted in to modules) must include a /vN in the import path to import a v2+ module. However, the ecosystem is expected to proceed at varying paces of adoption for modules and Semantic Import Versioning. As described in more detail in the \"How to Release a v2+ Module\" section, in the \"Major Subdirectory\" approach, the author of a v2+ module creates subdirectories such as mymodule/v2 or mymodule/v3 and moves or copies the approriate packages underneath those subdirectories. This means the traditional import path logic (even in older Go releases such as Go 1.8 or 1.7) will find the appropriate packages upon seeing an import statement such as import \"mymodule/v2/mypkg\" . Hence, packages residing in a \"Major Subdirectory\" v2+ module will be found and used even if modules support is not enabled (whether that is because you are running Go 1.11 and have not enabled modules, or because you are running a older version like Go 1.7, 1.8, 1.9 or 1.10 that does not have full module support). Please see the \"How to Release a v2+ Module\" section for more details on the \"Major Subdirectory\" approach. The remainder of this FAQ is focused on the \"Major Branch\" approach described in the \"How to Release a v2+ Module\" section. In the \"Major Branch\" approach, no /vN subdirectories are created and instead the module version information is communicated by the go.mod file and by applying semver tags to commits (which often will be on master , but could be on different branches). In order to help during the current transitional period, \"minimal module compatibility\" was introduced to Go 1.11 to provide greater compatibility for Go code that has not yet opted in to modules, and that \"minimal module compatibility\" was also backported to Go 1.9.7 and 1.10.3 (where those versions are effectively always operating with full module mode disabled given those older Go versions do not have full module support). The primary goals of \"minimal module compatibility\" are: Allow older Go versions 1.9.7+ and 1.10.3+ to be able to more easily compile modules that are using Semantic Import Versioning with /vN in import paths, and provide that same behavior when module mode is disabled in Go 1.11. Allow old code to be able to consume a v2+ module without requiring that old consumer code to immediately change to using a new /vN import path when consuming a v2+ module. Do so without relying on the module author to create /vN subdirectories. Additional Details \u2013 \"Minimal Module Compatibility\" \"Minimal module compatibility\" only takes effect when full module mode is disabled for the go tool, such as if you have set GO111MODULE=off in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+. When a v2+ module author has not created /v2 or /vN subdirectories and you are instead relying on the \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11: A package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules. If a package has opted in to modules, but does not include the major version in the import path when importing a v2+ modules, it will not import a v2+ version of that module when the go tool is operating in full module mode. (A package that has opted in to modules is assumed to \"speak\" Semantic Import Versioning. If foo is a module with v2+ versions, then under Semantic Import Versioning saying import \"foo\" means import the v1 Semantic Import Versioning series of foo ). The mechanism used to implement \"minimal module compatibility\" is intentionally very narrow: The entirety of the logic is \u2013 when operating in GOPATH mode, an unresolvable import statement containing a /vN will be tried again after removing the /vN if the import statement is inside code that has opted in to modules (that is, import statements in .go files within a tree with a valid go.mod file). The net effect is that an import statement such as import \"foo/v2\" within code that lives inside of a module will still compile correctly in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11, and it will resolve as if it said import \"foo\" (without the /v2 ), which means it will use the version of foo that resides in your GOPATH without being confused by the extra /v2 . \"Minimal module compatibility\" does not affect anything else, including it does not the affect paths used in the go command line (such as arguments to go get or go list ). This transitional \"minimal module awareness\" mechanism purposefully breaks the rule of \"packages with different import paths are treated as different packages\" in pursuit a very specific backwards-compatibility goal \u2013 to allow old code to compile unmodified when it is consuming a v2+ module. In slightly more detail: It would be a more burdensome for the overall ecosystem if the only way for old code to consume a v2+ module was to first change the old code. If we are not modifying old code, then that old code must work with pre-module import paths for v2+ modules. On the other hand, new or updated code opting in to modules must use the new /vN import for v2+ modules. The new import path is not equal to old import path, yet both are allowed to work in a single build, and therefore we have two different functioning import paths that resolve to the same package. For example, when operating in GOPATH mode, import \"foo/v2\" appearing in module-based code resolves to the same code residing in your GOPATH as import \"foo\" , and the build ends up with one copy of foo \u2013 in particular, whatever version is on disk in GOPATH. This allows module-based code with import \"foo/v2\" to compile even in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11. In contrast, when the go tool is operating in full module mode: There are no exceptions to the rule \"packages with different import paths are different packages\" (including vendoring has been refined in full module mode to also adhere to this rule). For example, if the go tool is in full module mode and foo is a v2+ module, then import \"foo\" is asking for a v1 version of foo vs. import \"foo/v2\" is asking for a v2 version of foo .","title":"How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11?"},{"location":"Modules/#what-happens-if-i-create-a-gomod-but-do-not-apply-semver-tags-to-my-repository","text":"semver is a foundation of the modules system. In order to provide the best experience for consumers, module authors are encouraged to apply semver VCS tags (e.g., v0.1.0 or v1.2.3-rc.1 ), but semver VCS tags are not strictly required: Modules are required to follow the semver specification in order for the go command to behave as documented. This includes following the semver specification regarding how and when breaking changes are allowed. Modules that do not have semver VCS tags are recorded by consumers using a semver version in the form of a pseudo-version . Typically this will be a v0 major version, unless the module author constructed a v2+ module following the \"Major Subdirectory\" approach. Therefore, modules that do not apply semver VCS tags and have not created a \"Major Subdirectory\" are effectively declaring themselves to be in the semver v0 major version series, and a module-based consumer will treat them as having a semver v0 major version.","title":"What happens if I create a go.mod but do not apply semver tags to my repository?"},{"location":"Modules/#can-a-module-depend-on-a-different-version-of-itself","text":"A module can depend on a different major version of itself: by-and-large, this is comparable to depending on a different module. This can be useful for different reasons, including to allow a major version of a module to be implemented as a shim around a different major version. In addition, a module can depend on a different major version of itself in a cycle, just as two completely different modules can depend on each other in a cycle. However, if you are not expecting a module to depend on a different version of itself, it can be a sign of a mistake. For example, .go code intending to import a package from a v3 module might be missing the required /v3 in the import statement. That mistake can manifest as a v3 module depending on the v1 version of itself. If you are surprised to see a module to depend on a different version of itself, it can be worthwhile to review the \"Semantic Import Versioning\" section above along with the FAQ \"What can I check if I am not seeing the expected version of a dependency?\" . It continues to be a constraint that two packages may not depend on each other in a cycle.","title":"Can a module depend on a different version of itself?"},{"location":"Modules/#faqs--multi-module-repositories","text":"","title":"FAQS \u2014 Multi-Module Repositories"},{"location":"Modules/#what-are-multi-module-repositories","text":"A multi-module repository is a repository that contains multiple modules, each with its own go.mod file. Each module starts at the directory containing its go.mod file, and contains all packages from that directory and its subdirectories recursively, excluding any subtree that contains another go.mod file. Each module has its own version information. Version tags for modules below the root of the repository must include the relative directory as a prefix. For example, consider the following repository: my-repo `-- foo `-- rop `-- go.mod The tag for version 1.2.3 of module \"my-repo/foo/rop\" is \"foo/rop/v1.2.3\". Typically, the path for one module in the repository will be a prefix of the others. For example, consider this repository: my-repo |-- bar |-- foo | |-- rop | `-- yut |-- go.mod `-- mig |-- go.mod `-- vub Fig. A top-level module's path is a prefix of another module's path. This repository contains two modules. However, the module \"my-repo\" is a prefix of the path of the module \"my-repo/mig\".","title":"What are multi-module repositories?"},{"location":"Modules/#should-i-have-multiple-modules-in-a-single-repository","text":"Adding modules, removing modules, and versioning modules in such a configuration require considerable care and deliberation, so it is almost always easier and simpler to manage a single-module repository rather than multiple modules in an existing repository. Russ Cox commented in #26664 : For all but power users, you probably want to adopt the usual convention that one repo = one module. It's important for long-term evolution of code storage options that a repo can contain multiple modules, but it's almost certainly not something you want to do by default. Two examples of how multi-modules can be more work: * go test ./... from the repository root will no longer test everything in the repository * you might need to routinely manage the relationship between the modules via replace directives. However, there is additional nuance beyond those two examples. Please read the FAQs in this sub-section carefully if you are considering having multiple modules in a single repository. Two example scenarios where it can make sense to have more than one go.mod in a repository: if you have usage examples where the examples themselves have a complex set of dependencies (e.g., perhaps you have a small package but include an example of using your package with kubernetes). In that case, it can make sense for your repository to have an example or _example directory with its own go.mod , such as shown here . if you have a repository with a complex set of dependencies, but you have a client API with a smaller set of dependencies. In some cases, it might make sense to have an api or clientapi or similar directory with its own go.mod , or to separate out that clientapi into its own repository. However, for both of those cases, if you are considering creating a multi-module repository for performance or download size for a large set of indirect dependencies, you are strongly encouraged to first try with a GOPROXY, which will be enabled by default in Go 1.13. Using a GOPROXY mostly equals any performance benefits or dependency download size benefits that might otherwise come from creating a multi-module repository.","title":"Should I have multiple modules in a single repository?"},{"location":"Modules/#is-it-possible-to-add-a-module-to-a-multi-module-repository","text":"Yes. However, there are two classes of this problem: The first class: the package to which the module is being added to is not in version control yet (a new package). This case is straightforward: add the package and the go.mod in the same commit, tag the commit, and push. The second class: the path at which the module is being added is in version control and contains one or more existing packages. This case requires a considerable amount of care. To illustrate, consider again the following repository (now in a github.com location to simulate the real-world better): github.com/my-repo |-- bar |-- foo | |-- rop | `-- yut |-- go.mod `-- mig `-- vub Consider adding module \"github.com/my-repo/mig\". If one were to follow the same approach as above, the package /my-repo/mig could be provided by two different modules: the old version of \"github.com/my-repo\", and the new, standalone module \"github.com/my-repo/mig. If both modules are active, importing \"github.com/my-repo/mig\" would cause an \u201cambiguous import\u201d error at compile time. The way to get around this is to make the newly-added module depend on the module it was \"carved out\" from, at a version after which it was carved out. Let's step through this with the above repository, assuming that \"github.com/my-repo\" is currently at v1.2.3: Add github.com/my-repo/mig/go.mod: cd path-to/github.com/my-repo/mig go mod init github.com/my-repo/mig # Note: if \"my-repo/mig\" does not actually depend on \"my-repo\", add a blank # import. # Note: version must be at or after the carve-out. go mod edit -require github.com/myrepo@v1.3 git commit git tag v1.3.0 git tag mig/v1.0.0 Next, let's test these. We can't go build or go test naively, since the go commands would try to fetch each dependent module from the module cache. So, we need to use replace rules to cause go commands to use the local copies: cd path-to/github.com/my-repo/mig go mod edit -replace github.com/my-repo@v1.3.0=../ go test ./... go mod edit -dropreplace github.com/my-repo@v1.3.0 git push origin master v1.3.0 mig/v1.0.0 push the commit and both tags Note that in the future golang.org/issue/28835 should make the testing step a more straightforward experience. Note also that code was removed from module \"github.com/my-repo\" between minor versions. It may seem strange to not consider this a major change, but in this instance the transitive dependencies continue to provide compatible implementations of the removed packages at their original import paths.","title":"Is it possible to add a module to a multi-module repository?"},{"location":"Modules/#is-it-possible-to-remove-a-module-from-a-multi-module-repository","text":"Yes, with the same two cases and similar steps as above.","title":"Is it possible to remove a module from a multi-module repository?"},{"location":"Modules/#can-a-module-depend-on-an-internal-in-another","text":"Yes. Packages in one module are allowed to import internal packages from another module as long as they share the same path prefix up to the internal/ path component. For example, consider the following repository: my-repo |-- foo | `-- go.mod |-- go.mod `-- internal Here, package foo can import /my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo\". Similarly, in the following repository: my-repo |-- foo | `-- go.mod `-- internal `-- go.mod Here, package foo can import my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo/internal\". The semantics are the same in both: since my-repo is a shared path prefix between my-repo/internal and my-repo/foo, package foo is allowed to import package internal.","title":"Can a module depend on an internal/ in another?"},{"location":"Modules/#can-an-additional-gomod-exclude-unnecessary-content-do-modules-have-the-equivalent-of-a-gitignore-file","text":"One additional use case for having multiple go.mod files in a single repository is if the repository has files that should be pruned from a module. For example, a repository might have very large files that are not needed for the Go module, or a multi-language repository might have many non-Go files. An empty go.mod in a directory will cause that directory and all of its subdirectories to be excluded from the top-level Go module. If the excluded directory does not contain any .go files, no additional steps are needed beyond placing the empty go.mod file. If the excluded directory does contain .go files, please first carefully review the other FAQs in this multi-module repository section .","title":"Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file?"},{"location":"Modules/#faqs--minimal-version-selection","text":"","title":"FAQs \u2014 Minimal Version Selection"},{"location":"Modules/#wont-minimal-version-selection-keep-developers-from-getting-important-updates","text":"Please see the question \"Won't minimal version selection keep developers from getting important updates?\" in the earlier FAQ from the official proposal discussion .","title":"Won't minimal version selection keep developers from getting important updates?"},{"location":"Modules/#faqs--possible-problems","text":"","title":"FAQs \u2014 Possible Problems"},{"location":"Modules/#what-are-some-general-things-i-can-spot-check-if-i-am-seeing-a-problem","text":"Double-check that modules are enabled by running go env to confirm it does not show an empty value for the read-only GOMOD variable. Note: you never set GOMOD as a variable because it is effectively read-only debug output that go env outputs. If you are setting GO111MODULE=on to enable modules, double-check that it is not accidentally the plural GO111MODULES=on . (People sometimes naturally include the S because the feature is often called \"modules\"). If vendoring is expected to be used, check that the -mod=vendor flag is being passed to go build or similar, or that GOFLAGS=-mod=vendor is set. Modules by default ignore the vendor directory unless you ask the go tool to use vendor . It is frequently helpful to check go list -m all to see the list of actual versions selected for your build go list -m all usually gives you more detail compared to if you were to instead just look a go.mod file. If running go get foo fails in some way, or if go build is failing on a particular package foo , it often can be helpful to check the output from go get -v foo or go get -v -x foo : In general, go get will often provide more a detailed error message than go build . The -v flag to go get asks to print more verbose details, though be mindful that certain \"errors\" such as 404 errors might be expected based on how a remote repository was configured. If the nature of the problem is still not clear, you can also try the more verbose go get -v -x foo , which also shows the git or other VCS commands being issued. (If warranted, you can often execute the same git commands outside of the context of the go tool for troubleshooting purposes). You can check to see if you are using a particularly old git version Older versions of git were a common source of problems for the vgo prototype and Go 1.11 beta, but much less frequently in the GA 1.11. The module cache in Go 1.11 can sometimes cause various errors, primarily if there were previously network issues or multiple go commands executing in parallel (see #26794 , which is addressed for Go 1.12). As a troubleshooting step, you can copy $GOPATH/pkg/mod to a backup directory (in case further investigation is warranted later), run go clean -modcache , and then see whether the original problem persists. If you are using Docker, it can be helpful to check if you can reproduce the behavior outside of Docker (and if the behavior only occurs in Docker, the list of bullets above can be used as a starting point to compare results between inside Docker vs. outside). The error you are currently examining might be a secondary issue caused by not having the expected version of a particular module or package in your build. Therefore, if the cause of a particular error is not obvious, it can be helpful to spot check your versions as described in the next FAQ.","title":"What are some general things I can spot check if I am seeing a problem?"},{"location":"Modules/#what-can-i-check-if-i-am-not-seeing-the-expected-version-of-a-dependency","text":"A good first step is to run go mod tidy . There is some chance this might resolve the issue, but it will also help put your go.mod file into a consistent state with respect to your .go source code, which will help make any subsequent investigation easier. (If go mod tidy itself changes the versions of a dependency in a way you don't expect, first read this FAQ on 'go mod tidy' . If that does not explain it, you can try resetting your go.mod and then run go list -mod=readonly all , which might give a more specific message about whatever was requiring a change to its version). The second step usually should be to check go list -m all to see the list of actual versions selected for your build. go list -m all shows you the final selected versions, including for indirect dependencies and after resolving versions for any shared dependencies. It also shows the outcome of any replace and exclude directives. A good next step can be to examine the output of go mod graph or go mod graph | grep <module-of-interest> . go mod graph prints the module requirement graph (including taking into account replacements). Each line in the output has two fields: the first column is a consuming module, and the second column is one of that module's requirements (including the version required by that consuming module). This can be a quick way to see which modules are requiring a particular dependency, including when your build has a dependency that has different required versions from different consumers in your build (and if that is the case, it is important to be familiar with the behavior described in the \"Version Selection\" section above). go mod why -m <module> can also be useful here, although it is typically more useful for seeing why a dependency is included at all (rather than why a dependency ends up with a particular version). go list provides many more variations of queries that can be useful to interrogate your modules if needed. One example is the following, which will show the exact versions used in your build excluding test-only dependencies: go list -deps -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' ./... | sort -u A more detailed set of commands and examples for interrogating your modules can be seen in a runnable \"Go Modules by Example\" walkthough . One cause of unexpected versions can be due to someone having created an invalid or unexpected go.mod file that was not intended, or a related mistake (for example: a v2.0.1 version of module might have incorrectly declared itself to be module foo in its go.mod without the required /v2 ; an import statement in .go code intended to import a v3 module might be be missing the required /v3 ; a require statement in a go.mod for a v4 module might be be missing the required /v4 ). Therefore, if the cause of a particular issue you are seeing is not obvious, it can be worthwhile to first re-read the material in the \"go.mod\" and \"Semantic Import Versioning\" sections above (given these include important rules that modules must follow) and then take a few minutes to spot check the most relevant go.mod files and import statements.","title":"What can I check if I am not seeing the expected version of a dependency?"},{"location":"Modules/#why-am-i-getting-an-error-cannot-find-module-providing-package-foo","text":"This is a general error message that can occur for several different underlying causes. In some cases, this error is simply due to a mistyped path, so the first step likely should be to double-check for incorrect paths based on the details listed in the error message. If you have not already done so, a good next step is often to try go get -v foo or go get -v -x foo : * In general, go get will often provide more a detailed error message than go build . * See the first troubleshooting FAQ in this section above for more details. Some other possible causes: You might see the error cannot find module providing package foo if you have issued go build or go build . but do not have any .go source files in the current directory. If this is what you are encountering, the solution might be an alternative invocation such as go build ./... (where the ./... expands out to match all the packages within the current module). See #27122 . The module cache in Go 1.11 can cause this error, including in the face of network issues or multiple go commands executing in parallel. This is resolved in Go 1.12. See the first troubleshooting FAQ in this section above for more details and possible corrective steps.","title":"Why am I getting an error 'cannot find module providing package foo'?"},{"location":"Modules/#why-does-go-mod-init-give-the-error-cannot-determine-module-path-for-source-directory","text":"go mod init without any arguments will attempt to guess the proper module path based on different hints such as VCS meta data. However, it is not expected that go mod init will always be able to guess the proper module path. If go mod init gives you this error, those heuristics were not able to guess, and you must supply the module path yourself (such as go mod init github.com/you/hello ).","title":"Why does 'go mod init' give the error 'cannot determine module path for source directory'?"},{"location":"Modules/#i-have-a-problem-with-a-complex-dependency-that-has-not-opted-in-to-modules-can-i-use-information-from-its-current-dependency-manager","text":"Yes. This requires some manual steps, but can be helpful in some more complex cases. When you run go mod init when initializing your own module, it will automatically convert from a prior dependency manager by translating configuration files like Gopkg.lock , glide.lock , or vendor.json into a go.mod file that contains corresponding require directives. The information in a pre-existing Gopkg.lock file for example usually describes version information for all of your direct and indirect dependencies. However, if instead you are adding a new dependency that has not yet opted in to modules itself, there is not a similar automatic conversion process from any prior dependency manager that your new dependency might have been using. If that new dependency itself has non-module dependencies that have had breaking changes, then in some cases that can cause incompatibility problems. In other words, a prior dependency manager of your new dependency is not automatically used, and that can cause problems with your indirect dependencies in some cases. One approach is to run go mod init on your problematic non-module direct dependency to convert from its current dependency manager, and then use the require directives from the resulting temporary go.mod to populate or update the go.mod in your module. For example, if github.com/some/nonmodule is a problematic direct dependency of your module that is currently using another dependency manager, you can do something similar to: $ git clone -b v1.2.3 https://github.com/some/nonmodule /tmp/scratchpad/nonmodule $ cd /tmp/scratchpad/nonmodule $ go mod init $ cat go.mod The resulting require information from the temporary go.mod can be manually moved into the actual go.mod for your module, or you can consider using rogpeppe/gomodmerge , which is a community tool targeting this use case. In addition, you will want to add a require github.com/some/nonmodule v1.2.3 to your actual go.mod to match the version that you manually cloned. A concrete example of following this technique for docker is in this #28489 comment , which illustrates getting a consistent set of versions of docker dependencies to avoid case sensitive issues between github.com/sirupsen/logrus vs. github.com/Sirupsen/logrus .","title":"I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager?"},{"location":"Modules/#how-can-i-resolve-parsing-gomod-unexpected-module-path-and-error-loading-module-requirements-errors-caused-by-a-mismatch-between-import-paths-vs-declared-module-identity","text":"","title":"How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity?"},{"location":"Modules/#why-does-this-error-occur","text":"In general, a module declares its identity in its go.mod via the module directive, such as module example.com/m . This is the \"module path\" for that module, and the go tool enforces consistency between that declared module path and the import paths used by any consumer. If a module's go.mod file reads module example.com/m , then a consumer must import packages from that module using import paths that start with that module path (e.g., import \"example.com/m\" or import \"example.com/m/sub/pkg\" ). The go command reports a parsing go.mod: unexpected module path fatal error if there is a mismatch between an import path used by a consumer vs. the corresponding declared module path. In addition, in some cases the go command will then report a more generic error loading module requirements error afterwards. The most common cause of this error is if there was a name change (e.g., github.com/Sirupsen/logrus to github.com/sirupsen/logrus ), or if a module was sometimes used via two different names prior to modules due to a vanity import path (e.g., github.com/golang/sync vs. the recommended golang.org/x/sync ). This can then cause problems if you have a dependency that is still being imported via an older name (e.g., github.com/Sirupsen/logrus ) or a non-canonical name (e.g., github.com/golang/sync ) but that dependency has subsequently adopted modules and now declares its canonical name in its go.mod . The error here can then trigger during an upgrade when the upgraded version of the module is found declaring a canonical module path that no longer matches the older import path.","title":"Why does this error occur?"},{"location":"Modules/#example-problem-scenario","text":"You are indirectly depending on github.com/Quasilyte/go-consistent . The project adopts modules, and then later changes its name to github.com/quasilyte/go-consistent (changing Q to lowercase q ), which is a breaking change. GitHub forwards from the old name to the new name. You run go get -u , which attempts to upgrade all of your direct and indirect dependencies. github.com/Quasilyte/go-consistent is attempted to be upgraded, but the latest go.mod found now reads module github.com/quasilyte/go-consistent . The overall upgrade operation fails to complete, with error: go: github.com/Quasilyte/go-consistent@v0.0.0-20190521200055-c6f3937de18c: parsing go.mod: unexpected module path \"github.com/quasilyte/go-consistent\" go get: error loading module requirements","title":"Example problem scenario"},{"location":"Modules/#resolving","text":"The most common form of the error is: go: example.com/some/OLD/name@vX.Y.Z: parsing go.mod: unexpected module path \"example.com/some/NEW/name\" If you visit the repository for example.com/some/NEW/name (from the right-side of the error), you can check the go.mod file for the latest release or master to see if it declares itself on the first line of the go.mod as module example.com/some/NEW/name . If so, that is a hint that you are seeing an \"old module name\" vs. \"new module name\" problem. This remainder of this section focuses on resolving the \"old name\" vs. \"new name\" form of this the error by following these steps in sequence: Check your own code to see if you are importing using example.com/some/OLD/name . If so, update your code to import using example.com/some/NEW/name . If you received this error during an upgrade, you should try upgrading using the tip version of Go, which has more targeted upgrade logic ( #26902 ) that can often sidestep this problem and also often has a better error message for this situation. Note that the go get arguments in tip / 1.13 are different than in 1.12. Example of obtaining tip and using it to upgrade your dependencies: go get golang.org/dl/gotip && gotip download gotip get -u all gotip mod tidy Because the problematic old import is often in an indirect dependency, upgrading with tip and then running go mod tidy can frequently upgrade you past the problematic version and then also remove the problematic version from your go.mod as no longer needed, which then puts you into a functioning state when you return to using Go 1.12 or 1.11 for day-to-day use. For example, see that approach work here to upgrade past github.com/golang/lint vs. golang.org/x/lint problems. If you received this error while doing go get -u foo or go get -u foo@latest , try removing the -u . This will give you the set of dependencies used by foo@latest without upgrading the dependencies of foo past the versions that the author of foo likely verified as working when releasing foo . This can be important especially during this transitional time when some of the direct and indirect dependencies of foo might not yet have adopted semver or modules. (A common mistake is thinking go get -u foo solely gets the latest version of foo . In actuality, the -u in go get -u foo or go get -u foo@latest means to also get the latest versions for all of the direct and indirect dependencies of foo ; that might be what you want, but it might not be especially if it is otherwise failing due to deep indirect dependencies). If the steps above have not resolved the error, the next approach is slightly more complicated, but most often should work to resolve an \"old name\" vs. \"new name\" form of this error. This uses just information solely from the error message itself, plus some brief looking at some VCS history. 4.1. Go to the example.com/some/NEW/name repository 4.2. Determine when the go.mod file was introduced there (e.g., by looking at the blame or history view for the go.mod ). 4.3. Pick the release or commit from just before the go.mod file was introduced there. 4.4. In your go.mod file, add a replace statement using the old name on both sides of the replace statement: replace example.com/some/OLD/name => example.com/some/OLD/name <version-just-before-go.mod> Using our prior example where github.com/Quasilyte/go-consistent is the old name and github.com/quasilyte/go-consistent is the new name, we can see that the go.mod was first introduced there in commit 00c5b0cf371a . That repository is not using semver tags, so we will take the immediately prior commit 00dd7fb039e and add it to the replace using the old uppercase Quasilyte name on both sides of the replace : replace github.com/Quasilyte/go-consistent => github.com/Quasilyte/go-consistent 00dd7fb039e This replace statement then enables us to upgrade past the problematic \"old name\" vs. \"new name\" mismatch by effectively preventing the old name from being upgraded to the new name in the presence of a go.mod . Usually, an upgrade via go get -u or similar can now avoid the error. If the upgrade completes, you can check to see if anyone is still importing the old name (e.g., go mod graph | grep github.com/Quasilyte/go-consistent ) and if not, the replace can then be removed. (The reason this often works is because the upgrade itself can otherwise fail if an old problematic import path is used even though it might not be used in the final result if the upgrade had completed, which is tracked in #30831 ). If the above steps have not resolved the problem, it might be because the problematic old import path is still in use by the latest version of one or more of your dependencies. In this case, it is important to identify who is still using the problematic old import path, and find or open an issue asking that the problematic importer change to using the now canonical import path. Using gotip in step 2. above might identify the problematic importer, but it does not do so in all cases, especially for upgrades ( #30661 ). If it is unclear who is importing using the problematic old import path, you can usually find out by creating a clean module cache, performing the operation or operations that trigger the error, and then grepping for the old problematic import path within the module cache. For example: export GOPATH=$(mktemp -d) go get -u foo # peform operation that generates the error of interest cd $GOPATH/pkg/mod grep -R --include=\"*.go\" github.com/Quasilyte/go-consistent If these steps are not sufficient to resolve the issue, or if you are a maintainer of a project that seems unable to remove references to an older problematic import path due to circular references, please see a much more detailed write-up of the problem on a separate wiki page . Finally, the above steps focus on how to resolve an underlying \"old name\" vs. \"new name\" problem. However, the same error message can also appear if a go.mod was placed in the wrong location or simply has the wrong module path. If that is the case, the importing that module should always fail. If you are importing a new module that you just created and has never been successfully imported before, you should check that the go.mod file is located correctly and that it has the proper module path that corresponds to that location. (The most common approach is a single go.mod per repository, with the single go.mod file placed in the repository root, and using the repository name as the module path declared in the module directive). See the \"go.mod\" section for more details.","title":"Resolving"},{"location":"Modules/#why-does-go-build-require-gcc-and-why-are-prebuilt-packages-such-as-nethttp-not-used","text":"In short: Because the pre-built packages are non-module builds and can\u2019t be reused. Sorry. Disable cgo for now or install gcc. This is only an issue when opting in to modules (e.g., via GO111MODULE=on ). See #26988 for additional discussion.","title":"Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used?"},{"location":"Modules/#do-modules-work-with-relative-imports-like-import-subdir","text":"No. See #26645 , which includes: In modules, there finally is a name for the subdirectory. If the parent directory says \"module m\" then the subdirectory is imported as \"m/subdir\", no longer \"./subdir\".","title":"Do modules work with relative imports like import \"./subdir\"?"},{"location":"Modules/#some-needed-files-may-not-be-present-in-populated-vendor-directory","text":"Directories without .go files are not copied inside the vendor directory by go mod vendor . This is by design. In short, setting aside any particular vendoring behavior \u2013 the overall model for go builds is that the files needed to build a package should be in the directory with the .go files. Using the example of cgo \u2013 modifying C source code in other directories will not trigger a rebuild, and instead your build will use stale cache entries. The cgo documentation now includes : Note that changes to files in other directories do not cause the package to be recompiled, so all non-Go source code for the package should be stored in the package directory , not in subdirectories. A community tool goware/modvendor allows you to easily copy a complete set of .c, .h, .s, .proto or other files from a module into the vendor directory. Although this can be helpful, some care must be taken to make sure your go build is being handled properly in general (regardless of vendoring) if you have files needed to build a package that are outside of the directory with the .go files. See additional discussion in #26366 . An alternative approach to traditional vendoring is to check in the module cache. It can end up with similar benefits as traditional vendoring and in some ways ends up with a higher fidelity copy. This approach is explained as a \"Go Modules by Example\" walkthrough .","title":"Some needed files may not be present in populated vendor directory"},{"location":"MultipleGoRoots/","text":"Introduction Tips for hacking on Go and having multiple $GOROOT workspaces\u2026 Sometimes you need to check out multiple copies of the Go tree, perhaps you're working on several core library changes at once and you want to test them independently. Let's say you've checked the trees out as $HOME/go1 , $HOME/go2 , etc. (The specific names are not important.) While you're working in each tree, it's important that you always set GOROOT to the correct tree or unexpected things will happen, like binaries will be built from sources other than the ones you've just edited. Such mistakes can be time-consuming to notice, and it's easy to forget to update GOPATH when you change directories. The following trick may be helpful. Define a script called go , and ensure its directory is on your PATH or define a shell alias go that points to it. In the script, set the GOROOT and (if you like) GOPATH environment variables to appropriate values determined from your current working directory. Then exec the real go command. For example: #!/bin/sh # Set GOROOT to the innermost enclosing directory containing # an AUTHORS file. Set GOPATH to its child called \"got\". dir=$(pwd) while true; do if [ -f \"$dir/AUTHORS\" ]; then export \"GOROOT=$dir\" export \"GOPATH=$GOROOT/got\" echo \"GOROOT=$GOROOT\" >&2 echo \"GOPATH=$GOPATH\" >&2 break fi dir=$(dirname \"$dir\") if [ \"$dir\" = / ]; then echo \"Can't locate GOROOT\". >&2 exit 1 fi done exec \"$GOROOT/bin/go\" \"$@\"","title":"MultipleGoRoots"},{"location":"MultipleGoRoots/#introduction","text":"Tips for hacking on Go and having multiple $GOROOT workspaces\u2026 Sometimes you need to check out multiple copies of the Go tree, perhaps you're working on several core library changes at once and you want to test them independently. Let's say you've checked the trees out as $HOME/go1 , $HOME/go2 , etc. (The specific names are not important.) While you're working in each tree, it's important that you always set GOROOT to the correct tree or unexpected things will happen, like binaries will be built from sources other than the ones you've just edited. Such mistakes can be time-consuming to notice, and it's easy to forget to update GOPATH when you change directories. The following trick may be helpful. Define a script called go , and ensure its directory is on your PATH or define a shell alias go that points to it. In the script, set the GOROOT and (if you like) GOPATH environment variables to appropriate values determined from your current working directory. Then exec the real go command. For example: #!/bin/sh # Set GOROOT to the innermost enclosing directory containing # an AUTHORS file. Set GOPATH to its child called \"got\". dir=$(pwd) while true; do if [ -f \"$dir/AUTHORS\" ]; then export \"GOROOT=$dir\" export \"GOPATH=$GOROOT/got\" echo \"GOROOT=$GOROOT\" >&2 echo \"GOPATH=$GOPATH\" >&2 break fi dir=$(dirname \"$dir\") if [ \"$dir\" = / ]; then echo \"Can't locate GOROOT\". >&2 exit 1 fi done exec \"$GOROOT/bin/go\" \"$@\"","title":"Introduction"},{"location":"MutexOrChannel/","text":"Use a sync.Mutex or a channel? One of Go's mottos is \"Share memory by communicating, don't communicate by sharing memory.\" That said, Go does provide traditional locking mechanisms in the sync package . Most locking issues can be solved using either channels or traditional locks. So which should you use? Use whichever is most expressive and/or most simple. A common Go newbie mistake is to over-use channels and goroutines just because it's possible, and/or because it's fun. Don't be afraid to use a sync.Mutex if that fits your problem best. Go is pragmatic in letting you use the tools that solve your problem best and not forcing you into one style of code. As a general guide, though: Channel Mutex passing ownership of data, distributing units of work, communicating async results caches, state If you ever find your sync.Mutex locking rules are getting too complex, ask yourself whether using channel(s) might be simpler. Wait Group Another important synchronisation primitive is sync.WaitGroup. These allow co-operating goroutines to collectively wait for a threshold event before proceeding independently again. This is useful typically in two cases. Firstly, when 'cleaning up', a sync.WaitGroup can be used to ensure that all goroutines - including the main one - wait before all terminating cleanly. The second more general case is of a cyclic algorithm that involves a set of goroutines that all work independently for a while, then all wait on a barrier, before proceeding independently again. This pattern might be repeated many times. Data might be exchanged at the barrier event. This strategy is the basis of Bulk Synchronous Parallelism (BSP). Channel communication, mutexes and wait-groups are complementary and can be combined. More Info Channels in Effective Go: http://golang.org/doc/effective_go.html#channels The sync package: http://golang.org/pkg/sync/","title":"MutexOrChannel"},{"location":"MutexOrChannel/#use-a-syncmutex-or-a-channel","text":"One of Go's mottos is \"Share memory by communicating, don't communicate by sharing memory.\" That said, Go does provide traditional locking mechanisms in the sync package . Most locking issues can be solved using either channels or traditional locks. So which should you use? Use whichever is most expressive and/or most simple. A common Go newbie mistake is to over-use channels and goroutines just because it's possible, and/or because it's fun. Don't be afraid to use a sync.Mutex if that fits your problem best. Go is pragmatic in letting you use the tools that solve your problem best and not forcing you into one style of code. As a general guide, though: Channel Mutex passing ownership of data, distributing units of work, communicating async results caches, state If you ever find your sync.Mutex locking rules are getting too complex, ask yourself whether using channel(s) might be simpler.","title":"Use a sync.Mutex or a channel?"},{"location":"MutexOrChannel/#wait-group","text":"Another important synchronisation primitive is sync.WaitGroup. These allow co-operating goroutines to collectively wait for a threshold event before proceeding independently again. This is useful typically in two cases. Firstly, when 'cleaning up', a sync.WaitGroup can be used to ensure that all goroutines - including the main one - wait before all terminating cleanly. The second more general case is of a cyclic algorithm that involves a set of goroutines that all work independently for a while, then all wait on a barrier, before proceeding independently again. This pattern might be repeated many times. Data might be exchanged at the barrier event. This strategy is the basis of Bulk Synchronous Parallelism (BSP). Channel communication, mutexes and wait-groups are complementary and can be combined.","title":"Wait Group"},{"location":"MutexOrChannel/#more-info","text":"Channels in Effective Go: http://golang.org/doc/effective_go.html#channels The sync package: http://golang.org/pkg/sync/","title":"More Info"},{"location":"NativeClient/","text":"Note: NaCl support was dropped in Go 1.14 . Go 1.3 includes support for generating x86-32 and x86-64 binaries for Google Native Client (NaCl). NaCl is a collection of related technologies. NaCl defines a collection of binary formats with specific code layout requirements. There are definitions for 32- and 64-bit x86 and 32-bit ARM. NaCl provides a mechanism for running those binaries in a sandboxed execution environment with a restricted syscall-like interface. That syscall-like interface is not guaranteed to be stable from release to release. To abstract away the syscall-like interface, NaCl defines a stable runtime API called the integrated runtime (IRT). Using the IRT, Google Chrome defines an API called Pepper (aka PPAPI) that NaCl-based plugins use to interact with the browser. To abstract away the machine-specific binary formats, NaCl defines an LLVM-based architecture-independent format called PNaCl. NaCl provides translators from PNaCl format to the architecture-specific formats, invoked automatically, so that you can distribute just a PNaCl binary and execute on all three supported platforms. Go 1.3 provides support for generating the architecture-specific binaries and using the raw syscall interface (1 and 2 in the list above), and only for the x86 platforms (not for ARM). There is ongoing work exploring support for the IRT and PPAPI (3 and 4 in the list) but no definite release target. Perhaps they will be in Go 1.4 but perhaps not. There are no concrete plans to support PNaCl (5 and 6 in the list). The Go 1.3-generated NaCl binaries can be run using the NaCl SDK sel_ldr_x86_32 and sel_ldr_x86_64 programs. They cannot be run directly in Google Chrome. As such, the NaCl support in Go 1.3 is useful only for running sandboxed environments like the Go Playground . The file misc/nacl/README in the Go distribution explains how to configure your machine so that you can run and NaCl-sandboxed binaries using the go command.","title":"NativeClient"},{"location":"NetBSD/","text":"Go on NetBSD Go on NetBSD is fairly stable on the architectures below. However, some bugs remain; see the issue tracker for details. Kernel version Architectures Initial support version Final support version 8.0 or above amd64, arm, 386 7.0 through 7.1 amd64, arm, 386 Go 1.3 * 6.0 through 6.1 amd64, arm, 386 Go 1.3 * Go 1.9.7 5.0 through 5.2 (EOL) amd64, 386 Go 1 Go 1.2.2 * Go 1.5 or above is recommended. Support for the arm64 architecture is a work in progress, see https://golang.org/issue/30824 . Go packages in pkgsrc pkgsrc , the NetBSD package collection, contains up-to-date packages for released Go versions. The packages contain the version in the name (e.g. lang/go113 ) so that multiple versions can be installed in parallel. lang/go is a meta-package that always depends on the default go version. Note that the go binary name is also installed with a version suffix. Install the pkgtools/pkg_alternatives package to get a go command symlink in your PATH. There are a number of packages for software written in Go in pkgsrc. At the moment, module-based builds are experimental, and packages are built using a GOPATH layout. Preparing NetBSD for Go install NetBSD (remember to install pkgsrc in the last step) install shells/bash and devel/git (do make package-install clean in /usr/pkgsrc/shells/bash and /usr/pkgsrc/devel/git . Using binary packages: pkgin install bash git","title":"NetBSD"},{"location":"NetBSD/#go-on-netbsd","text":"Go on NetBSD is fairly stable on the architectures below. However, some bugs remain; see the issue tracker for details. Kernel version Architectures Initial support version Final support version 8.0 or above amd64, arm, 386 7.0 through 7.1 amd64, arm, 386 Go 1.3 * 6.0 through 6.1 amd64, arm, 386 Go 1.3 * Go 1.9.7 5.0 through 5.2 (EOL) amd64, 386 Go 1 Go 1.2.2 * Go 1.5 or above is recommended. Support for the arm64 architecture is a work in progress, see https://golang.org/issue/30824 .","title":"Go on NetBSD"},{"location":"NetBSD/#go-packages-in-pkgsrc","text":"pkgsrc , the NetBSD package collection, contains up-to-date packages for released Go versions. The packages contain the version in the name (e.g. lang/go113 ) so that multiple versions can be installed in parallel. lang/go is a meta-package that always depends on the default go version. Note that the go binary name is also installed with a version suffix. Install the pkgtools/pkg_alternatives package to get a go command symlink in your PATH. There are a number of packages for software written in Go in pkgsrc. At the moment, module-based builds are experimental, and packages are built using a GOPATH layout.","title":"Go packages in pkgsrc"},{"location":"NetBSD/#preparing-netbsd-for-go","text":"install NetBSD (remember to install pkgsrc in the last step) install shells/bash and devel/git (do make package-install clean in /usr/pkgsrc/shells/bash and /usr/pkgsrc/devel/git . Using binary packages: pkgin install bash git","title":"Preparing NetBSD for Go"},{"location":"NewSpeakers/","text":"Resources for New Speakers Go needs everyone's help. We want to see more new speakers with new perspectives at Go conferences, especially more women and others underrepresented in the Go community. The process of applying to speak at a tech conference can be a bit opaque and confusing for first-time speakers. In general, please remember that, first and foremost, conferences organizers want to find great talks; there is no single format or recipe for a great talk; and you need not be a Go expert to give a great talk. All that you need to be is excited about sharing something you've observed or learned about using Go. Here are some good blog posts with tips for writing conference talk proposals: \u201c How to write a successful conference proposal \u201d by Dave Cheney \u201c How to write a successful conference proposal \u201d by Karolina Szczur \u201c Is your conference proposal good enough? \u201d by Raquel V\u00e9lez (rockbot) \u201c What your conference proposal is missing \u201d by Sarah Mei Elsewhere on the wiki, we maintain a list of upcoming conferences with links to CFPs. The same page also lists past conferences with links to talk videos. These conferences welcome speakers of all experience levels and backgrounds! Contact Us We, the Go community members listed below, are happy to discuss or review talk proposals and answer other questions about the overall speaking process. Feel free to contact any of us directly. Russ Cox, rsc@golang.org , @_rsc Steve Francia, spf@golang.org , @spf13 William Kennedy, bill@ardanlabs.com , @goinggodotnet Cassandra Salisbury, cassandra@golangbridge.org , @cassandraoid Ashley McNamara, ashmc@microsoft.com , @ashleymcnamara Brian Ketelsen, bjk@microsoft.com , @bketelsen Natalie Pistunovich natalie@golangbridge.org , @nataliepis Erik St. Martin, erikstm@microsoft.com , @erikstmartin Francesc Campoy, campoy@golang.org , @francesc Sameer Ajmani, sameer@google.com , @Sajma Florin P\u0103\u021ban, florinpatan@gmail.com , @dlsniper Aaron Schlesinger, arschles@gmail.com , @arschles Paul Jolly, paul@myitcv.io @_myitcv Alexey Palazhchenko, alexey.palazhchenko@gmail.com @paaleksey (English, Russian) Carmen Andoh, candoh@google.com , @carmatrocity (Experienced speakers, feel free to add your contact information to the list, or email rsc@golang.org if you don't have wiki edit permission.)","title":"NewSpeakers"},{"location":"NewSpeakers/#resources-for-new-speakers","text":"Go needs everyone's help. We want to see more new speakers with new perspectives at Go conferences, especially more women and others underrepresented in the Go community. The process of applying to speak at a tech conference can be a bit opaque and confusing for first-time speakers. In general, please remember that, first and foremost, conferences organizers want to find great talks; there is no single format or recipe for a great talk; and you need not be a Go expert to give a great talk. All that you need to be is excited about sharing something you've observed or learned about using Go. Here are some good blog posts with tips for writing conference talk proposals: \u201c How to write a successful conference proposal \u201d by Dave Cheney \u201c How to write a successful conference proposal \u201d by Karolina Szczur \u201c Is your conference proposal good enough? \u201d by Raquel V\u00e9lez (rockbot) \u201c What your conference proposal is missing \u201d by Sarah Mei Elsewhere on the wiki, we maintain a list of upcoming conferences with links to CFPs. The same page also lists past conferences with links to talk videos. These conferences welcome speakers of all experience levels and backgrounds!","title":"Resources for New Speakers"},{"location":"NewSpeakers/#contact-us","text":"We, the Go community members listed below, are happy to discuss or review talk proposals and answer other questions about the overall speaking process. Feel free to contact any of us directly. Russ Cox, rsc@golang.org , @_rsc Steve Francia, spf@golang.org , @spf13 William Kennedy, bill@ardanlabs.com , @goinggodotnet Cassandra Salisbury, cassandra@golangbridge.org , @cassandraoid Ashley McNamara, ashmc@microsoft.com , @ashleymcnamara Brian Ketelsen, bjk@microsoft.com , @bketelsen Natalie Pistunovich natalie@golangbridge.org , @nataliepis Erik St. Martin, erikstm@microsoft.com , @erikstmartin Francesc Campoy, campoy@golang.org , @francesc Sameer Ajmani, sameer@google.com , @Sajma Florin P\u0103\u021ban, florinpatan@gmail.com , @dlsniper Aaron Schlesinger, arschles@gmail.com , @arschles Paul Jolly, paul@myitcv.io @_myitcv Alexey Palazhchenko, alexey.palazhchenko@gmail.com @paaleksey (English, Russian) Carmen Andoh, candoh@google.com , @carmatrocity (Experienced speakers, feel free to add your contact information to the list, or email rsc@golang.org if you don't have wiki edit permission.)","title":"Contact Us"},{"location":"NoMeToo/","text":"This page has moved to NoPlusOne . See golang/go#25637 for context.","title":"NoMeToo"},{"location":"NoPlusOne/","text":"When contributing to the Go issue tracker, please do not make comments like this: +1 or or Me too. or I too would like to see this issue fixed. or When is this issue going to be fixed? Such comments do not help fix issues. In fact, they make it harder by cluttering the discussion. The project admins will delete such comments as a matter of procedure (please don't be offended if we delete yours). Instead of commenting, you may add a reaction to the comment or issue. Of course, please do comment if your \"me too\" comment includes information that might help resolve the issue. This includes reports like this: This issue also affects me on Windows 10 when running all.bat at revision c0ff33. (Although there's no need to make such a comment if an identical comment already exists.) Thanks!","title":"NoPlusOne"},{"location":"NonEnglish/","text":"Some of this documentation may be out of date. Belarusian - \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f faq-be - Frequently Asked Questions. Brazilian Portuguese - Portugu\u00eas brasileiro A Tour of Go golangbr.org - Go documentation and news. Chinese - \u4e2d\u6587 Go \u8bed\u8a00\u4e4b\u65c5 Go \u7f16\u7a0b\u8bed\u8a00 - Chinese Translation of tip.golang.org Effective Go and (old) Tutorial (Deprecated) Czech - \u010ce\u0161tina Pravidla reflexe - a translation of The Laws of Reflection . French - Fran\u00e7ais golang-france - Go documentation. German - Deutsch Deutschsprachige Go Themenseite - German Go resource page Deutschsprachiges Diskussionsforum - German discussion forum on MeWe ( Invitation link ) (requires free registration on MeWe.com). Indonesia Komunitas Pengguna Go Indonesia Japanese - \u65e5\u672c\u8a9e A Tour of Go CodeReviewComments Korean - \ud55c\uad6d\uc5b4 A Tour of Go golang-kr wiki - Korean Translation of golang.org/doc Russian - \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a Effective Go Contribution Guide Spanish - espa\u00f1ol Video course: Go Course from 0 to 100 Workshop video: Creating a wiki with Go Sitio web: Go con ejemplos Apuntes: Aprender de Go desde Cero Thai - \u0e44\u0e17\u0e22 A Tour of Go Turkish - T\u00fcrk\u00e7e A Tour of Go Vietnamese - Ti\u1ebfng Vi\u1ec7t A Tour of Go Uzbek \u2014 \u040e\u0437\u0431\u0435\u043a\u0447\u0430 A Tour of Go","title":"NonEnglish"},{"location":"NonEnglish/#belarusian---\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f","text":"faq-be - Frequently Asked Questions.","title":"Belarusian - \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f"},{"location":"NonEnglish/#brazilian-portuguese---portugu\u00eas-brasileiro","text":"A Tour of Go golangbr.org - Go documentation and news.","title":"Brazilian Portuguese - Portugu\u00eas brasileiro"},{"location":"NonEnglish/#chinese---\u4e2d\u6587","text":"Go \u8bed\u8a00\u4e4b\u65c5 Go \u7f16\u7a0b\u8bed\u8a00 - Chinese Translation of tip.golang.org Effective Go and (old) Tutorial (Deprecated)","title":"Chinese - \u4e2d\u6587"},{"location":"NonEnglish/#czech---\u010de\u0161tina","text":"Pravidla reflexe - a translation of The Laws of Reflection .","title":"Czech - \u010ce\u0161tina"},{"location":"NonEnglish/#french---fran\u00e7ais","text":"golang-france - Go documentation.","title":"French - Fran\u00e7ais"},{"location":"NonEnglish/#german---deutsch","text":"Deutschsprachige Go Themenseite - German Go resource page Deutschsprachiges Diskussionsforum - German discussion forum on MeWe ( Invitation link ) (requires free registration on MeWe.com).","title":"German - Deutsch"},{"location":"NonEnglish/#indonesia","text":"Komunitas Pengguna Go Indonesia","title":"Indonesia"},{"location":"NonEnglish/#japanese---\u65e5\u672c\u8a9e","text":"A Tour of Go CodeReviewComments","title":"Japanese - \u65e5\u672c\u8a9e"},{"location":"NonEnglish/#korean---\ud55c\uad6d\uc5b4","text":"A Tour of Go golang-kr wiki - Korean Translation of golang.org/doc","title":"Korean - \ud55c\uad6d\uc5b4"},{"location":"NonEnglish/#russian---\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u044f\u0437\u044b\u043a","text":"Effective Go Contribution Guide","title":"Russian - \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a"},{"location":"NonEnglish/#spanish---espa\u00f1ol","text":"Video course: Go Course from 0 to 100 Workshop video: Creating a wiki with Go Sitio web: Go con ejemplos Apuntes: Aprender de Go desde Cero","title":"Spanish - espa\u00f1ol"},{"location":"NonEnglish/#thai---\u0e44\u0e17\u0e22","text":"A Tour of Go","title":"Thai - \u0e44\u0e17\u0e22"},{"location":"NonEnglish/#turkish---t\u00fcrk\u00e7e","text":"A Tour of Go","title":"Turkish - T\u00fcrk\u00e7e"},{"location":"NonEnglish/#vietnamese---ti\u1ebfng-vi\u1ec7t","text":"A Tour of Go","title":"Vietnamese - Ti\u1ebfng Vi\u1ec7t"},{"location":"NonEnglish/#uzbek--\u045e\u0437\u0431\u0435\u043a\u0447\u0430","text":"A Tour of Go","title":"Uzbek \u2014 \u040e\u0437\u0431\u0435\u043a\u0447\u0430"},{"location":"OlderVersions/","text":"Introduction This wiki page collects patches to build older version of Go on newer systems for testing and benchmark purposes. Please note that older Go versions are not supported, so don't use older version in production. Go 1.0.x Go 1.0 diff -ur go/src/cmd/cc/funct.c go1/src/cmd/cc/funct.c --- go/src/cmd/cc/funct.c 2012-03-28 00:49:24.000000000 -0400 +++ go1/src/cmd/cc/funct.c 2014-05-04 00:56:00.971460175 -0400 @@ -269,7 +269,7 @@ goto bad; f = alloc(sizeof(*f)); - for(o=0; o<sizeof(f->sym); o++) + for(o=0; o<nelem(f->sym); o++) f->sym[o] = S; t->funct = f;","title":"OlderVersions"},{"location":"OlderVersions/#introduction","text":"This wiki page collects patches to build older version of Go on newer systems for testing and benchmark purposes. Please note that older Go versions are not supported, so don't use older version in production.","title":"Introduction"},{"location":"OlderVersions/#go-10x","text":"","title":"Go 1.0.x"},{"location":"OlderVersions/#go-10","text":"diff -ur go/src/cmd/cc/funct.c go1/src/cmd/cc/funct.c --- go/src/cmd/cc/funct.c 2012-03-28 00:49:24.000000000 -0400 +++ go1/src/cmd/cc/funct.c 2014-05-04 00:56:00.971460175 -0400 @@ -269,7 +269,7 @@ goto bad; f = alloc(sizeof(*f)); - for(o=0; o<sizeof(f->sym); o++) + for(o=0; o<nelem(f->sym); o++) f->sym[o] = S; t->funct = f;","title":"Go 1.0"},{"location":"OpenBSD/","text":"Go on OpenBSD Go is available within the OpenBSD ports tree collection since OpenBSD 5.2. It is marked as i386- and amd64- only. See ports/lang/go for details. OpenBSD release Go in ports 6.8 (Oct 18, 2020) go-1.15.2 6.7 (May 19, 2020) go-1.13.9 6.6 (Oct 17, 2019) go-1.13.1 6.5 (Apr 4, 2019) go-1.12.1 6.4 (Oct 18, 2018) go-1.11 6.3 (Apr 2, 2018) go-1.10 6.2 (Oct 9, 2017) go-1.9 6.1 (Apr 11, 2017) go-1.8 6.0 (Sep 1, 2016) go-1.6.3 5.9 (Mar 29, 2016) go-1.5.4 5.8 (Oct 18, 2015) go-1.4.2 5.7 (May 1, 2015) go-1.4.1 5.6 (Nov 1, 2014) go-1.3p0 Building from source Kernel version Architectures Initial support version Final support version 6.4 amd64, arm, 386 Go 1.11 6.2 through 6.3 amd64, arm, 386 Go 1.9 Go 1.15.x 6.1 amd64, arm, 386 Go 1.8 Go 1.10.8 6.0 amd64, 386 Go 1.4.1 * Go 1.10.8 6.0 arm Go 1.5 Go 1.10.8 5.9 amd64, 386 Go 1.4.1 * Go 1.8.7 5.9 arm Go 1.5 Go 1.8.7 5.6 through 5.8 amd64, 386 Go 1.4.1 * Go 1.7.6 5.5 amd64, 386 Go 1.3 * Go 1.7.6 5.0 through 5.4 amd64, 386 Go 1 Go 1.2.2 * Go 1.5 or above is recommended. Longterm support Go aims to support the two most recent OpenBSD releases, because OpenBSD officially supports only the two most recent releases, and makes a best-effort attempt to maintain ABI support in consecutive releases. ulimits ( /etc/login.conf ) Edit /etc/login.conf so that the staff class has the proper settings. The following is a working example of the staff class: staff:\\ :datasize-cur=infinity:\\ :datasize-max=infinity:\\ :datasize=infinity:\\ :openfiles-cur=4096:\\ :maxproc-max=512:\\ :maxproc-cur=512:\\ :ignorenologin:\\ :requirehome@:\\ :tc=default: If the database file /etc/login.conf.db exists, you need to rebuild it with: # cap_mkdb /etc/login.conf Ensure that the user you intend to build Go with is in the staff login class: # usermod -L staff your_username_here","title":"OpenBSD"},{"location":"OpenBSD/#go-on-openbsd","text":"Go is available within the OpenBSD ports tree collection since OpenBSD 5.2. It is marked as i386- and amd64- only. See ports/lang/go for details. OpenBSD release Go in ports 6.8 (Oct 18, 2020) go-1.15.2 6.7 (May 19, 2020) go-1.13.9 6.6 (Oct 17, 2019) go-1.13.1 6.5 (Apr 4, 2019) go-1.12.1 6.4 (Oct 18, 2018) go-1.11 6.3 (Apr 2, 2018) go-1.10 6.2 (Oct 9, 2017) go-1.9 6.1 (Apr 11, 2017) go-1.8 6.0 (Sep 1, 2016) go-1.6.3 5.9 (Mar 29, 2016) go-1.5.4 5.8 (Oct 18, 2015) go-1.4.2 5.7 (May 1, 2015) go-1.4.1 5.6 (Nov 1, 2014) go-1.3p0","title":"Go on OpenBSD"},{"location":"OpenBSD/#building-from-source","text":"Kernel version Architectures Initial support version Final support version 6.4 amd64, arm, 386 Go 1.11 6.2 through 6.3 amd64, arm, 386 Go 1.9 Go 1.15.x 6.1 amd64, arm, 386 Go 1.8 Go 1.10.8 6.0 amd64, 386 Go 1.4.1 * Go 1.10.8 6.0 arm Go 1.5 Go 1.10.8 5.9 amd64, 386 Go 1.4.1 * Go 1.8.7 5.9 arm Go 1.5 Go 1.8.7 5.6 through 5.8 amd64, 386 Go 1.4.1 * Go 1.7.6 5.5 amd64, 386 Go 1.3 * Go 1.7.6 5.0 through 5.4 amd64, 386 Go 1 Go 1.2.2 * Go 1.5 or above is recommended.","title":"Building from source"},{"location":"OpenBSD/#longterm-support","text":"Go aims to support the two most recent OpenBSD releases, because OpenBSD officially supports only the two most recent releases, and makes a best-effort attempt to maintain ABI support in consecutive releases.","title":"Longterm support"},{"location":"OpenBSD/#ulimits-etcloginconf","text":"Edit /etc/login.conf so that the staff class has the proper settings. The following is a working example of the staff class: staff:\\ :datasize-cur=infinity:\\ :datasize-max=infinity:\\ :datasize=infinity:\\ :openfiles-cur=4096:\\ :maxproc-max=512:\\ :maxproc-cur=512:\\ :ignorenologin:\\ :requirehome@:\\ :tc=default: If the database file /etc/login.conf.db exists, you need to rebuild it with: # cap_mkdb /etc/login.conf Ensure that the user you intend to build Go with is in the staff login class: # usermod -L staff your_username_here","title":"ulimits (/etc/login.conf)"},{"location":"PackageManagementTools/","text":"This page contains a list of tools for managing Go packages and their dependencies (vendoring). The tools are divided into categories based on their approach to version management. To see popularity of these tools, click here . GO111MODULE See the [[Modules]] page. The official Go proposal is at https://golang.org/issue/24301 , filed on March 20, 2018 and accepted on May 21, 2018. dep tool dep was the \"official experiment.\" The Go toolchain, as of 1.11, has (experimentally) adopted an approach that sharply diverges from dep. See [[Modules]]. GO15VENDOREXPERIMENT As of June 19 th , 2015 , the Go toolchain included an experimental vendoring flag, GO15VENDOREXPERIMENT . This was part of the Go 1.5 release and represented the Go team's recommended approach to vendoring dependencies. You can read more about how this environment variable worked in the Go 1.5 documentation and the original design document . For a more detailed explanation, check out this post by @freeformz or this short explainer from Engineered Web. The Go 1.6 release made this behaviour the default, so you no longer need to have GO15VENDOREXPERIMENT set. Go 1.7 made this a standard feature and removed support for the flag. Tools supporting this feature include: dep manul - Vendor packages using git submodules. Godep Govendor godm vexp gv gvt - Recursively retrieve and vendor packages. govend - Manage dependencies like go get but for /vendor . Glide - Manage packages like composer, npm, bundler, or other languages. Vendetta trash gsv gom Rubigo - Golang vendor utility and package manager Pkg copy, built using GOPATH modification, supports fetching specific version Copy packages locally. When building modify the GOPATH or use the GO 1.5 GO15VENDOREXPERIMENT to reference the local package store. Not only records specific version, but also fetches specific version. gogradle blindpirate/gogradle Title A Full-featured Build Tool for Golang Author Bo Zhang Categories Project-scoped dependencies, Go version management, Vendoring, Version/Commit locking, Transitive dependency, Automatic build. Support All platforms trash rancher/trash Title Minimalistic Go vendored code manager Author Ivan Mikushin, Darren Shepherd Categories Vendoring, Version/Commit locking, Pruning unimported code, Using package forks. Does not support Windows. glide Masterminds/glide Title Lightweight Vendor Package Manager Author Matt Butcher and Matt Farina Categories Retrieve and manage packages in your vendor/ directory using the GO15VENDOREXPERIMENT . gopm gpmgo/gopm Title Package manage and build tool in Go Author Jiahua Chen Categories Revision Locking (git, mercurial, bazaar). Copies into \".vendor/src\". gom mattn/gom Title Go Manager - bundle for go Author Yasuhiro Matsumoto Categories Vendoring/Bundling. Copies into \"_vendor/src\" bunch dkulchenko/bunch Title npm-like tool for managing Go dependencies Author Daniil Kulchenko Categories Vendoring/Bundling/Revision Locking. Copies into \".vendor\". Does NOT fully support windows. goop nitrous-io/goop Title A dependency manager for Go (golang), inspired by Bundler. Author Nitrous.IO Categories Vendoring, Revision Locking. Copies into \".vendor/src\". Does NOT fully support windows. govend govend/govend Title A simple tool to vendor Go package dependencies. It's like go get for vendoring. Author Jack Spirou Categories Vendor and lock revisions of packages recursively into the \"vendor\" directory with go get commands/flags. Supports Go 1.5+ and Windows. Does not alter $GOPATH and works with normal go commands/tooling. Pkg copy, build using GOPATH modification Copy packages locally. When building modify the GOPATH to reference the local package store. godep tools/godep Title Helps build packages reproducibly by fixing their dependencies Author Keith Rarick Categories Vendoring, Version Recording. Copies into \"Godep/_workspace/src\". wgo skelterjohn/wgo Title Managed workspaces on top of the go tool Author John Asmuth Categories local GOPATH can be configured. gb http://getgb.io/ Title Project-based workspaces and dependency management Author Dave Cheney Categories Project-based workspaces, vendoring, version locking. Manages dependencies in /vendor/src goat mediocregopher/goat Title Simple go dependency manager Author Brian Picciano Categories Project-based workspaces and vendoring Revision Locking Package source control versions are recorded. Versions are updated into the GOPATH package tree. Requires switching GOPATH for every project. glock robfig/glock Title Lock dependencies to specific revisions. Author Rob Figueiredo Categories Revision Locking (git, mercurial, bzr, svn) gobs vegansk/gobs Title Build system and package manager for go language Author Anatoly Galiulin Categories Revision Locking (git). Requires bash, no Windows support. godeps rogpeppe/godeps Title Print, fetch and update dependencies with care. In production use by Canonical. The first tool with this name! Author Roger Peppe Categories Revision Locking (git, mercurial, bzr) gopack d2fn/gopack Title Dependency management for go inspired by rebar Author Dietrich Featherston Categories Revision Locking (git) gopin laher/gopin Title Experimental go-get fork with support for tags and alternative repos Author Go Package Manager Categories Revision Locking (git) gigo LyricalSecurity/gigo Title Helps provide go get support for private repositories, pip for golang Author Lyrical Security Categories Vendoring, Revision Locking (git). Does not appear to copy files. gorepoman fullstorydev/gorepoman Title Super powered go get for managing revisions in a monorepo Author FullStory Categories Revision Locking (git). Does not alter $GOPATH and works with normal go commands/tooling. IDE friendly. Easy to reconcile local changes, submit changes upstream. Pkg copy with import path re-write (As of Go 1.5, this is no longer the recommended practice) Vendoring with import path rewriting takes the 3 rd party source code that is referenced in your project and makes a copy of that code inside a new folder within the project. It re-writes the import paths so there is a single copy of all packages. GOPATH is not modified at any time. party mjibson/party Author Matt Jibson Categories Vendoring, Copies into \"_third_party\". Does not analyze dependencies first. No inspection. govendor kardianos/govendor Title Copy, re-write, and list dependent package status. Author Daniel Theophanes Categories Pkg Copy,Import rewrite, record VCS version. Copies into \"internal\" or \"vendor\". vendorize kisielk/vendorize Author Kamil Kisiel Categories Vendoring. Copies into \"3rdparty\". nut jingweno/nut Author Jingwen Owen Ou Categories Pkg Copy & Import rewrite. Copies into \"vendor\". Vendor Utilities Not full vendor tool, but may still provide value. prewrite dmitris/prewrite Author Dmitry Savintsev Categories Import re-writer, add or remove specified prefix git freeze nicerobot/git-freeze Author Robert Nix (nicerobot) Categories Easy Go vendoring via git submodule Import Proxies Import Proxies act as a man in the middle between the Go tool and the VCS. It parses the data stream while the repository is being cloned. gopkg.in https://gopkg.in Title Redirect the go tool onto well defined GitHub repositories. Versioning with tags and branches or the repository name. Author Gustavo Niemeyer Categories Import Proxy (GitHub) Go Version Managers Go Version Managers allow you to have multiple versions of Go installed on your machine. It allows you to switch between those versions. goenv ymotongpoo/goenv Title Go environment manager Author Yoshifumi YAMAGUCHI Categories Go Version Manager Client App Test Packages Here is a list of packages that authors can use to test their tools against. beego-mgo goinggo/beego-mgo Author Bill Kennedy Desc Sample Application For Using the Beego web framework with MGO revel-mgo goinggo/revel-mgo Author Bill Kennedy Desc Sample revel project with mgo support Abandoned Tools coreos/third_party.go http://godoc.org/kylelemons.net/go/rx theplant/pak msiebuhr/git-version-proxy Not Written in Go These tools are recorded for completeness, but it is suggested not to use them as they are platform specific. * rosylilly/gondler * VividCortex/johnny-deps * moovweb/gvm * pote/gpm * brettlangdon/git-vendor * yaa110/rubigo - written in Rust","title":"PackageManagementTools"},{"location":"PackageManagementTools/#go111module","text":"See the [[Modules]] page. The official Go proposal is at https://golang.org/issue/24301 , filed on March 20, 2018 and accepted on May 21, 2018.","title":"GO111MODULE"},{"location":"PackageManagementTools/#dep-tool","text":"dep was the \"official experiment.\" The Go toolchain, as of 1.11, has (experimentally) adopted an approach that sharply diverges from dep. See [[Modules]].","title":"dep tool"},{"location":"PackageManagementTools/#go15vendorexperiment","text":"As of June 19 th , 2015 , the Go toolchain included an experimental vendoring flag, GO15VENDOREXPERIMENT . This was part of the Go 1.5 release and represented the Go team's recommended approach to vendoring dependencies. You can read more about how this environment variable worked in the Go 1.5 documentation and the original design document . For a more detailed explanation, check out this post by @freeformz or this short explainer from Engineered Web. The Go 1.6 release made this behaviour the default, so you no longer need to have GO15VENDOREXPERIMENT set. Go 1.7 made this a standard feature and removed support for the flag. Tools supporting this feature include: dep manul - Vendor packages using git submodules. Godep Govendor godm vexp gv gvt - Recursively retrieve and vendor packages. govend - Manage dependencies like go get but for /vendor . Glide - Manage packages like composer, npm, bundler, or other languages. Vendetta trash gsv gom Rubigo - Golang vendor utility and package manager","title":"GO15VENDOREXPERIMENT"},{"location":"PackageManagementTools/#pkg-copy-built-using-gopath-modification-supports-fetching-specific-version","text":"Copy packages locally. When building modify the GOPATH or use the GO 1.5 GO15VENDOREXPERIMENT to reference the local package store. Not only records specific version, but also fetches specific version. gogradle blindpirate/gogradle Title A Full-featured Build Tool for Golang Author Bo Zhang Categories Project-scoped dependencies, Go version management, Vendoring, Version/Commit locking, Transitive dependency, Automatic build. Support All platforms trash rancher/trash Title Minimalistic Go vendored code manager Author Ivan Mikushin, Darren Shepherd Categories Vendoring, Version/Commit locking, Pruning unimported code, Using package forks. Does not support Windows. glide Masterminds/glide Title Lightweight Vendor Package Manager Author Matt Butcher and Matt Farina Categories Retrieve and manage packages in your vendor/ directory using the GO15VENDOREXPERIMENT . gopm gpmgo/gopm Title Package manage and build tool in Go Author Jiahua Chen Categories Revision Locking (git, mercurial, bazaar). Copies into \".vendor/src\". gom mattn/gom Title Go Manager - bundle for go Author Yasuhiro Matsumoto Categories Vendoring/Bundling. Copies into \"_vendor/src\" bunch dkulchenko/bunch Title npm-like tool for managing Go dependencies Author Daniil Kulchenko Categories Vendoring/Bundling/Revision Locking. Copies into \".vendor\". Does NOT fully support windows. goop nitrous-io/goop Title A dependency manager for Go (golang), inspired by Bundler. Author Nitrous.IO Categories Vendoring, Revision Locking. Copies into \".vendor/src\". Does NOT fully support windows. govend govend/govend Title A simple tool to vendor Go package dependencies. It's like go get for vendoring. Author Jack Spirou Categories Vendor and lock revisions of packages recursively into the \"vendor\" directory with go get commands/flags. Supports Go 1.5+ and Windows. Does not alter $GOPATH and works with normal go commands/tooling.","title":"Pkg copy, built using GOPATH modification, supports fetching specific version"},{"location":"PackageManagementTools/#pkg-copy-build-using-gopath--modification","text":"Copy packages locally. When building modify the GOPATH to reference the local package store. godep tools/godep Title Helps build packages reproducibly by fixing their dependencies Author Keith Rarick Categories Vendoring, Version Recording. Copies into \"Godep/_workspace/src\". wgo skelterjohn/wgo Title Managed workspaces on top of the go tool Author John Asmuth Categories local GOPATH can be configured. gb http://getgb.io/ Title Project-based workspaces and dependency management Author Dave Cheney Categories Project-based workspaces, vendoring, version locking. Manages dependencies in /vendor/src goat mediocregopher/goat Title Simple go dependency manager Author Brian Picciano Categories Project-based workspaces and vendoring","title":"Pkg copy, build using GOPATH  modification"},{"location":"PackageManagementTools/#revision-locking","text":"Package source control versions are recorded. Versions are updated into the GOPATH package tree. Requires switching GOPATH for every project. glock robfig/glock Title Lock dependencies to specific revisions. Author Rob Figueiredo Categories Revision Locking (git, mercurial, bzr, svn) gobs vegansk/gobs Title Build system and package manager for go language Author Anatoly Galiulin Categories Revision Locking (git). Requires bash, no Windows support. godeps rogpeppe/godeps Title Print, fetch and update dependencies with care. In production use by Canonical. The first tool with this name! Author Roger Peppe Categories Revision Locking (git, mercurial, bzr) gopack d2fn/gopack Title Dependency management for go inspired by rebar Author Dietrich Featherston Categories Revision Locking (git) gopin laher/gopin Title Experimental go-get fork with support for tags and alternative repos Author Go Package Manager Categories Revision Locking (git) gigo LyricalSecurity/gigo Title Helps provide go get support for private repositories, pip for golang Author Lyrical Security Categories Vendoring, Revision Locking (git). Does not appear to copy files. gorepoman fullstorydev/gorepoman Title Super powered go get for managing revisions in a monorepo Author FullStory Categories Revision Locking (git). Does not alter $GOPATH and works with normal go commands/tooling. IDE friendly. Easy to reconcile local changes, submit changes upstream.","title":"Revision Locking"},{"location":"PackageManagementTools/#pkg-copy-with-import-path-re-write-as-of-go-15-this-is-no-longer-the-recommended-practice","text":"Vendoring with import path rewriting takes the 3 rd party source code that is referenced in your project and makes a copy of that code inside a new folder within the project. It re-writes the import paths so there is a single copy of all packages. GOPATH is not modified at any time. party mjibson/party Author Matt Jibson Categories Vendoring, Copies into \"_third_party\". Does not analyze dependencies first. No inspection. govendor kardianos/govendor Title Copy, re-write, and list dependent package status. Author Daniel Theophanes Categories Pkg Copy,Import rewrite, record VCS version. Copies into \"internal\" or \"vendor\". vendorize kisielk/vendorize Author Kamil Kisiel Categories Vendoring. Copies into \"3rdparty\". nut jingweno/nut Author Jingwen Owen Ou Categories Pkg Copy & Import rewrite. Copies into \"vendor\".","title":"Pkg copy with import path re-write (As of Go 1.5, this is no longer the recommended practice)"},{"location":"PackageManagementTools/#vendor-utilities","text":"Not full vendor tool, but may still provide value. prewrite dmitris/prewrite Author Dmitry Savintsev Categories Import re-writer, add or remove specified prefix git freeze nicerobot/git-freeze Author Robert Nix (nicerobot) Categories Easy Go vendoring via git submodule","title":"Vendor Utilities"},{"location":"PackageManagementTools/#import-proxies","text":"Import Proxies act as a man in the middle between the Go tool and the VCS. It parses the data stream while the repository is being cloned. gopkg.in https://gopkg.in Title Redirect the go tool onto well defined GitHub repositories. Versioning with tags and branches or the repository name. Author Gustavo Niemeyer Categories Import Proxy (GitHub)","title":"Import Proxies"},{"location":"PackageManagementTools/#go-version-managers","text":"Go Version Managers allow you to have multiple versions of Go installed on your machine. It allows you to switch between those versions. goenv ymotongpoo/goenv Title Go environment manager Author Yoshifumi YAMAGUCHI Categories Go Version Manager","title":"Go Version Managers"},{"location":"PackageManagementTools/#client-app-test-packages","text":"Here is a list of packages that authors can use to test their tools against. beego-mgo goinggo/beego-mgo Author Bill Kennedy Desc Sample Application For Using the Beego web framework with MGO revel-mgo goinggo/revel-mgo Author Bill Kennedy Desc Sample revel project with mgo support","title":"Client App Test Packages"},{"location":"PackageManagementTools/#abandoned-tools","text":"coreos/third_party.go http://godoc.org/kylelemons.net/go/rx theplant/pak msiebuhr/git-version-proxy","title":"Abandoned Tools"},{"location":"PackageManagementTools/#not-written-in-go","text":"These tools are recorded for completeness, but it is suggested not to use them as they are platform specific. * rosylilly/gondler * VividCortex/johnny-deps * moovweb/gvm * pote/gpm * brettlangdon/git-vendor * yaa110/rubigo - written in Rust","title":"Not Written in Go"},{"location":"PackagePublishing/","text":"Introduction Now that you've spent many hours writing your package and debugging it and testing it (you did [[test it|TableDrivenTests]], didn't you?), you want to publish it so other people can go get your package and see it on the dashboard . First, you will need to host it online somewhere. Three major code hosting sites are bitbucket (hg/git), GitHub (git) and launchpad (bzr). I recommend choosing whichever version control system you are familiar with or which your code is versioned locally on your machine. Git (git) is the version control system used by the central Go repository, so it is the closest to a guarantee as you can get that a developer wanting to use your project will have the right software. If you have never used version control before, these websites have some nice HOWTOs and you can find many great tutorials by searching Google for \"{name} tutorial\" where {name} is the name of the version control system you would like to learn. Package Setup Choosing the Import The full import of your package often has something identifying its author (particularly on hosting sites like GitHub, where \"github.com/kylelemons/\u2026\" is the full import), should always have the project name, and should end with the name of the package you've developed if it is different from the project name. For instance, the go-gypsy project provides a yaml package, and is written by Kyle Lemons, and thus has the following import path: import \"github.com/kylelemons/go-gypsy/yaml\" ^ ^ ^ ^ | | | `-- Package name | | `-------- Project name | `------------------- Author's handle `----------------------------- Hosting site Go >= version 1 supports subdirectories of package repositories. Subdirectories Frequently, the name that you use for your package will include the name \"Go\" as a prefix, suffix, or part of its acronym, and you may or may not want this to be a part of the actual command or package name in a go source file. Often, you may have both libraries and commands as a part of your package, and these cannot coexist in the same directory. When these things happen, you will want to structure your repository with subdirectories. For example, consider a project \"Go-PublishingExample\" that provides an \"epub\" package and a \"publish\" command. The directory structure could be: ./epub/ # Package source, all files package \"epub\" ./publish/ # Command source ./doc/ # Documentation which won't be downloaded ./examples/ # Example code which won't be downloaded The import statement for the package would look like: import \"codesite.tld/authorName/Go-PublishingExample/epub\" It is often a good idea to make sure the last directory path (in this case, \"epub\") matches the name of the package used by the source files in the directory. In this case, no go get-able files were included in the base directory because neither the binary nor the package were to be named \"Go-PublishingExample\". Branches and Tags Please note that this section is out of date. The pseudo version numbers below were applicable to Go < version 1; also the Go repository itself uses Git instead of Mercurial now. Maybe we should remove this section. You can get up to date information on go get using \"go help get\" and \"go help importpath\". In general, the Go source tree can exist in three basic states. It can be checked out at a Go Release branch (r60 (on Google Code) at the time of this writing \u2013 this is where most users should be), or it can be checked out at a Go Weekly (a new tag for which is made roughly once per week), or at tip (the Mercurial term for the latest change). The last two are primarily for developers of the Go language itself or developers who need features or fixes which have not been introduced into the latest Release. Due to the lielihood that you might continue collaborating on your project with your team on code that is not ready for general consumption, it is recommended that you utilize the tagging or branching functionality of your version control system. The go get tool understands some special tags and branches, which you may want to use to ensure users get a compatible version of your package: go.r60 -- A \"go.r##\" tag will be checked out if the user has that Go release installed go.weekly.2011-07-19 -- A \"go.weekly.YYYY-MM-DD\" tag will be checked out if the user has that weekly installed Go get will attempt to fall back to the previous tag if the installed one has no matches, and if none are found, will default to installing tip. To create and maintain your release tag in mercurial: # Create or update a release tag hg tag myProj-v0.0 # tag an easy-to-remember version number if you wish hg tag go.r60 # tag this as being go release.r60 compatible To create and maintain a release branch in git: # Create a release branch git tag myProj-v0.0 # Tag an easy-to-remember version number if you wish git checkout -b go.r60 # create a release branch git checkout master # to switch back to your master branch # Update the release branch git checkout go.r60 # switch to the release branch git merge master # merge in changes from the master branch since last release git checkout master # switch back to master branch If you are using other branch names, substitute those names where necessary. It will typically not be necessary to maintain weekly tags or branches, but it can be very useful to maintain the release branch or tag, as this will ensure the widest audience for your project. Commands vs Packages Since go get does not use your project's Makefiles, it is important to understand how it will actually build your project. All files in the same directory should always share the same package name. Any files named with a _test or an _os and/or _arch suffix will be ignored (unless the os/arch match). If the package name is \"main\", go get will build an executable from the source files and name it according to the directory name (using the last path segment only). If the package name is anything else, go get will build it as a package and the import path will be the web-accessible URL for your project's root followed by the subdirectory. See the go get documentation for how to make import paths for code hosting sites other than the main four. Dependencies between packages in the same project are common. In the case where one package or command in your project depends upon another, you must use the full import path in order for go get to recognize the dependency and make sure it is built. Third-party packages which are imported from source files in your project will also be automatically downloaded and installed by go get if it is not already present. To reuse the example above, the file ./publish/main.go may look something like this: package main import ( \"flag\" ) import \"codesite.tld/authorName/Go-PublishingExample/epub\" var dir = flag.String(\"dir\", \".\", \"Directory to publish\") func main() { flag.Parse() epub.Publish(*dir) } A user wishing to install this executable would execute: go get codesite.tld/authorName/Go-PublishingExample/publish which would also install the \".../epub\" package because of the dependency. A developer simply wishing to install the library could execute: go get codesite.tld/authorName/Go-PublishingExample/epub and (if they had not already installed publish ) would only download and install the package. Note that in none of these cases are the examples or documentation downloaded; in most cases these would be available to browse via the code site. Documentation godoc When you are preparing to publish a package, you should make sure that the documentation looks correct by running a local copy of godoc. If your package is installed to the go package tree, you can use the following command: godoc -http=:6060 & Then browse to http://localhost:6060/pkg/ and find your package. Dashboard The Go Dashboard will use the first line of your package-level comment (also using the normal godoc format) as the \"info\" text, so make sure this is set. For instance: // Package epub is an example publishing library. package epub For more information on godoc, see the Documenting Go Code blog post.","title":"PackagePublishing"},{"location":"PackagePublishing/#introduction","text":"Now that you've spent many hours writing your package and debugging it and testing it (you did [[test it|TableDrivenTests]], didn't you?), you want to publish it so other people can go get your package and see it on the dashboard . First, you will need to host it online somewhere. Three major code hosting sites are bitbucket (hg/git), GitHub (git) and launchpad (bzr). I recommend choosing whichever version control system you are familiar with or which your code is versioned locally on your machine. Git (git) is the version control system used by the central Go repository, so it is the closest to a guarantee as you can get that a developer wanting to use your project will have the right software. If you have never used version control before, these websites have some nice HOWTOs and you can find many great tutorials by searching Google for \"{name} tutorial\" where {name} is the name of the version control system you would like to learn.","title":"Introduction"},{"location":"PackagePublishing/#package-setup","text":"","title":"Package Setup"},{"location":"PackagePublishing/#choosing-the-import","text":"The full import of your package often has something identifying its author (particularly on hosting sites like GitHub, where \"github.com/kylelemons/\u2026\" is the full import), should always have the project name, and should end with the name of the package you've developed if it is different from the project name. For instance, the go-gypsy project provides a yaml package, and is written by Kyle Lemons, and thus has the following import path: import \"github.com/kylelemons/go-gypsy/yaml\" ^ ^ ^ ^ | | | `-- Package name | | `-------- Project name | `------------------- Author's handle `----------------------------- Hosting site Go >= version 1 supports subdirectories of package repositories.","title":"Choosing the Import"},{"location":"PackagePublishing/#subdirectories","text":"Frequently, the name that you use for your package will include the name \"Go\" as a prefix, suffix, or part of its acronym, and you may or may not want this to be a part of the actual command or package name in a go source file. Often, you may have both libraries and commands as a part of your package, and these cannot coexist in the same directory. When these things happen, you will want to structure your repository with subdirectories. For example, consider a project \"Go-PublishingExample\" that provides an \"epub\" package and a \"publish\" command. The directory structure could be: ./epub/ # Package source, all files package \"epub\" ./publish/ # Command source ./doc/ # Documentation which won't be downloaded ./examples/ # Example code which won't be downloaded The import statement for the package would look like: import \"codesite.tld/authorName/Go-PublishingExample/epub\" It is often a good idea to make sure the last directory path (in this case, \"epub\") matches the name of the package used by the source files in the directory. In this case, no go get-able files were included in the base directory because neither the binary nor the package were to be named \"Go-PublishingExample\".","title":"Subdirectories"},{"location":"PackagePublishing/#branches-and-tags","text":"Please note that this section is out of date. The pseudo version numbers below were applicable to Go < version 1; also the Go repository itself uses Git instead of Mercurial now. Maybe we should remove this section. You can get up to date information on go get using \"go help get\" and \"go help importpath\". In general, the Go source tree can exist in three basic states. It can be checked out at a Go Release branch (r60 (on Google Code) at the time of this writing \u2013 this is where most users should be), or it can be checked out at a Go Weekly (a new tag for which is made roughly once per week), or at tip (the Mercurial term for the latest change). The last two are primarily for developers of the Go language itself or developers who need features or fixes which have not been introduced into the latest Release. Due to the lielihood that you might continue collaborating on your project with your team on code that is not ready for general consumption, it is recommended that you utilize the tagging or branching functionality of your version control system. The go get tool understands some special tags and branches, which you may want to use to ensure users get a compatible version of your package: go.r60 -- A \"go.r##\" tag will be checked out if the user has that Go release installed go.weekly.2011-07-19 -- A \"go.weekly.YYYY-MM-DD\" tag will be checked out if the user has that weekly installed Go get will attempt to fall back to the previous tag if the installed one has no matches, and if none are found, will default to installing tip. To create and maintain your release tag in mercurial: # Create or update a release tag hg tag myProj-v0.0 # tag an easy-to-remember version number if you wish hg tag go.r60 # tag this as being go release.r60 compatible To create and maintain a release branch in git: # Create a release branch git tag myProj-v0.0 # Tag an easy-to-remember version number if you wish git checkout -b go.r60 # create a release branch git checkout master # to switch back to your master branch # Update the release branch git checkout go.r60 # switch to the release branch git merge master # merge in changes from the master branch since last release git checkout master # switch back to master branch If you are using other branch names, substitute those names where necessary. It will typically not be necessary to maintain weekly tags or branches, but it can be very useful to maintain the release branch or tag, as this will ensure the widest audience for your project.","title":"Branches and Tags"},{"location":"PackagePublishing/#commands-vs-packages","text":"Since go get does not use your project's Makefiles, it is important to understand how it will actually build your project. All files in the same directory should always share the same package name. Any files named with a _test or an _os and/or _arch suffix will be ignored (unless the os/arch match). If the package name is \"main\", go get will build an executable from the source files and name it according to the directory name (using the last path segment only). If the package name is anything else, go get will build it as a package and the import path will be the web-accessible URL for your project's root followed by the subdirectory. See the go get documentation for how to make import paths for code hosting sites other than the main four. Dependencies between packages in the same project are common. In the case where one package or command in your project depends upon another, you must use the full import path in order for go get to recognize the dependency and make sure it is built. Third-party packages which are imported from source files in your project will also be automatically downloaded and installed by go get if it is not already present. To reuse the example above, the file ./publish/main.go may look something like this: package main import ( \"flag\" ) import \"codesite.tld/authorName/Go-PublishingExample/epub\" var dir = flag.String(\"dir\", \".\", \"Directory to publish\") func main() { flag.Parse() epub.Publish(*dir) } A user wishing to install this executable would execute: go get codesite.tld/authorName/Go-PublishingExample/publish which would also install the \".../epub\" package because of the dependency. A developer simply wishing to install the library could execute: go get codesite.tld/authorName/Go-PublishingExample/epub and (if they had not already installed publish ) would only download and install the package. Note that in none of these cases are the examples or documentation downloaded; in most cases these would be available to browse via the code site.","title":"Commands vs Packages"},{"location":"PackagePublishing/#documentation","text":"","title":"Documentation"},{"location":"PackagePublishing/#godoc","text":"When you are preparing to publish a package, you should make sure that the documentation looks correct by running a local copy of godoc. If your package is installed to the go package tree, you can use the following command: godoc -http=:6060 & Then browse to http://localhost:6060/pkg/ and find your package.","title":"godoc"},{"location":"PackagePublishing/#dashboard","text":"The Go Dashboard will use the first line of your package-level comment (also using the normal godoc format) as the \"info\" text, so make sure this is set. For instance: // Package epub is an example publishing library. package epub For more information on godoc, see the Documenting Go Code blog post.","title":"Dashboard"},{"location":"PanicAndRecover/","text":"Table of Contents Panic Usage in a Package References Panic The panic and recover functions behave similarly to exceptions and try/catch in some other languages in that a panic causes the program stack to begin unwinding and recover can stop it. Deferred functions are still executed as the stack unwinds. If recover is called inside such a deferred function, the stack stops unwinding and recover returns the value (as an interface{} ) that was passed to panic . The runtime will also panic in extraordinary circumstances, such as indexing an array or slice out-of-bounds. If a panic causes the stack to unwind outside of any executing goroutine (e.g. main or the top-level function given to go fail to recover from it), the program exits with a stack trace of all executing goroutines. A panic cannot be recover ed by a different goroutine. Usage in a Package By convention, no explicit panic() should be allowed to cross a package boundary. Indicating error conditions to callers should be done by returning error value. Within a package, however, especially if there are deeply nested calls to non-exported functions, it can be useful (and improve readability) to use panic to indicate error conditions which should be translated into error for the calling function. Below is an admittedly contrived example of a way in which a nested function and an exported function may interact via this panic-on-error relationship. // A ParseError indicates an error in converting a word into an integer. type ParseError struct { Index int // The index into the space-separated list of words. Word string // The word that generated the parse error. Error error // The raw error that precipitated this error, if any. } // String returns a human-readable error message. func ( e * ParseError ) String () string { return fmt . Sprintf ( \"pkg: error parsing %q as int\" , e . Word ) } // Parse parses the space-separated words in input as integers. func Parse ( input string ) ( numbers [] int , err error ) { defer func () { if r := recover (); r != nil { var ok bool err , ok = r .( error ) if ! ok { err = fmt . Errorf ( \"pkg: %v\" , r ) } } }() fields := strings . Fields ( input ) numbers = fields2numbers ( fields ) return } func fields2numbers ( fields [] string ) ( numbers [] int ) { if len ( fields ) == 0 { panic ( \"no words to parse\" ) } for idx , field := range fields { num , err := strconv . Atoi ( field ) if err != nil { panic ( & ParseError { idx , field , err }) } numbers = append ( numbers , num ) } return } To demonstrate the behavior, consider the following main function: func main () { var examples = [] string { \"1 2 3 4 5\" , \"100 50 25 12.5 6.25\" , \"2 + 2 = 4\" , \"1st class\" , \"\" , } for _ , ex := range examples { fmt . Printf ( \"Parsing %q:\\n \" , ex ) nums , err := Parse ( ex ) if err != nil { fmt . Println ( err ) continue } fmt . Println ( nums ) } } References Defer, Panic and Recover https://golang.org/ref/spec#Handling_panics https://golang.org/ref/spec#Run_time_panics","title":"PanicAndRecover"},{"location":"PanicAndRecover/#table-of-contents","text":"Panic Usage in a Package References","title":"Table of Contents"},{"location":"PanicAndRecover/#panic","text":"The panic and recover functions behave similarly to exceptions and try/catch in some other languages in that a panic causes the program stack to begin unwinding and recover can stop it. Deferred functions are still executed as the stack unwinds. If recover is called inside such a deferred function, the stack stops unwinding and recover returns the value (as an interface{} ) that was passed to panic . The runtime will also panic in extraordinary circumstances, such as indexing an array or slice out-of-bounds. If a panic causes the stack to unwind outside of any executing goroutine (e.g. main or the top-level function given to go fail to recover from it), the program exits with a stack trace of all executing goroutines. A panic cannot be recover ed by a different goroutine.","title":"Panic"},{"location":"PanicAndRecover/#usage-in-a-package","text":"By convention, no explicit panic() should be allowed to cross a package boundary. Indicating error conditions to callers should be done by returning error value. Within a package, however, especially if there are deeply nested calls to non-exported functions, it can be useful (and improve readability) to use panic to indicate error conditions which should be translated into error for the calling function. Below is an admittedly contrived example of a way in which a nested function and an exported function may interact via this panic-on-error relationship. // A ParseError indicates an error in converting a word into an integer. type ParseError struct { Index int // The index into the space-separated list of words. Word string // The word that generated the parse error. Error error // The raw error that precipitated this error, if any. } // String returns a human-readable error message. func ( e * ParseError ) String () string { return fmt . Sprintf ( \"pkg: error parsing %q as int\" , e . Word ) } // Parse parses the space-separated words in input as integers. func Parse ( input string ) ( numbers [] int , err error ) { defer func () { if r := recover (); r != nil { var ok bool err , ok = r .( error ) if ! ok { err = fmt . Errorf ( \"pkg: %v\" , r ) } } }() fields := strings . Fields ( input ) numbers = fields2numbers ( fields ) return } func fields2numbers ( fields [] string ) ( numbers [] int ) { if len ( fields ) == 0 { panic ( \"no words to parse\" ) } for idx , field := range fields { num , err := strconv . Atoi ( field ) if err != nil { panic ( & ParseError { idx , field , err }) } numbers = append ( numbers , num ) } return } To demonstrate the behavior, consider the following main function: func main () { var examples = [] string { \"1 2 3 4 5\" , \"100 50 25 12.5 6.25\" , \"2 + 2 = 4\" , \"1st class\" , \"\" , } for _ , ex := range examples { fmt . Printf ( \"Parsing %q:\\n \" , ex ) nums , err := Parse ( ex ) if err != nil { fmt . Println ( err ) continue } fmt . Println ( nums ) } }","title":"Usage in a Package"},{"location":"PanicAndRecover/#references","text":"Defer, Panic and Recover https://golang.org/ref/spec#Handling_panics https://golang.org/ref/spec#Run_time_panics","title":"References"},{"location":"PerfDashboard/","text":"The perf dashboard is unmaintained and currently not active Introduction Performance Dashboard does continuous monitoring of performance characteristics of the Go implementation. It notifies codereview threads about any significant changes caused by the commit, allows to see performance changes caused by recent commits , allows to investigate changes in detail . Builders The dashboard uses two builders: linux-amd64 running Ubuntu 14.04 and windows-amd64 running Windows 8.1. Both builders has the same hardware: 2 x Intel Xeon E5620 @ 2.4GHz, 8 HT cores, 12GB RAM. Benchmarks The builders run benchmarks from the x/benchmarks repo: * json : marshals and unmarshals large json object, in several goroutines independently. * http : http client and server serving \"hello world\", uses persistent connections and read/write timeouts. * garbage : parses net package using go/parser, in a loop in several goroutines; half of packages are instantly discarded, the other half is preserved indefinitely; this creates significant pressure on the garbage collector. * build : does 'go build -a std'. Metrics Metrics collected are: * allocated : amount of memory allocated, per iteration, in bytes * allocs : number of memory allocations, per iteration * cputime : total CPU time (user+sys from time Unix utility output), can be larger than time when GOMAXPROCS>1, per iteration, in ns * gc-pause-one : duration of a single garbage collector pause, in ns * gc-pause-total : total duration of garbage collector pauses, per iteration, ns * latency-50/95/99 : request latency percentile, in ns * rss : max memory consumption as reported by OS, in bytes * sys-gc : memory consumed by garbage collector metadata ( MemStats.GCSys ), in bytes * sys-heap : memory consumed by heap ( MemStats.HeapSys ), in bytes * sys-other : unclassified memory consumption ( MemStats.OtherSys ), in bytes * sys-stack : memory consumed by stacks ( MemStats.StackSys ), in bytes * sys-total : total memory allocated from OS ( MemStats.Sys ), in bytes * time : real time (essentially the same as std Go benchmarks output), per iteration, in ns * virtual-mem : virtual memory consumption as reported by OS, in bytes And for build benchmark: * binary-size : size of the go command, in bytes * build-cputime : CPU time spent on the build, in ns * build-rss : max memory consumption of the build process as reported by OS, in bytes * build-time : real time of the build, in ns Profiles The dashboard also collects a set of profiles for every commit, they are available from the details page . For usual benchmarks CPU and memory profiles are collected. For build benchmark - perf profile , per-process split of CPU time and per-section size . Perf Changes View The view allows to see aggregate information about significant performance changes caused by recent commits. Rows: * The first row shows difference between the latest release and tip. * The rest of the rows show deltas caused by individual commits. Columns: * The first column is commit hash. * Second - number of benchmarks that were executed for the commit to far. * Third - metric name, or the special 'failure' metric for build/runtime crashes. * Fourth - negative deltas. * Fifth - positive deltas. * The rest describe commit. You can click on any positive/negative delta to see details about the change.","title":"PerfDashboard"},{"location":"PerfDashboard/#introduction","text":"Performance Dashboard does continuous monitoring of performance characteristics of the Go implementation. It notifies codereview threads about any significant changes caused by the commit, allows to see performance changes caused by recent commits , allows to investigate changes in detail .","title":"Introduction"},{"location":"PerfDashboard/#builders","text":"The dashboard uses two builders: linux-amd64 running Ubuntu 14.04 and windows-amd64 running Windows 8.1. Both builders has the same hardware: 2 x Intel Xeon E5620 @ 2.4GHz, 8 HT cores, 12GB RAM.","title":"Builders"},{"location":"PerfDashboard/#benchmarks","text":"The builders run benchmarks from the x/benchmarks repo: * json : marshals and unmarshals large json object, in several goroutines independently. * http : http client and server serving \"hello world\", uses persistent connections and read/write timeouts. * garbage : parses net package using go/parser, in a loop in several goroutines; half of packages are instantly discarded, the other half is preserved indefinitely; this creates significant pressure on the garbage collector. * build : does 'go build -a std'.","title":"Benchmarks"},{"location":"PerfDashboard/#metrics","text":"Metrics collected are: * allocated : amount of memory allocated, per iteration, in bytes * allocs : number of memory allocations, per iteration * cputime : total CPU time (user+sys from time Unix utility output), can be larger than time when GOMAXPROCS>1, per iteration, in ns * gc-pause-one : duration of a single garbage collector pause, in ns * gc-pause-total : total duration of garbage collector pauses, per iteration, ns * latency-50/95/99 : request latency percentile, in ns * rss : max memory consumption as reported by OS, in bytes * sys-gc : memory consumed by garbage collector metadata ( MemStats.GCSys ), in bytes * sys-heap : memory consumed by heap ( MemStats.HeapSys ), in bytes * sys-other : unclassified memory consumption ( MemStats.OtherSys ), in bytes * sys-stack : memory consumed by stacks ( MemStats.StackSys ), in bytes * sys-total : total memory allocated from OS ( MemStats.Sys ), in bytes * time : real time (essentially the same as std Go benchmarks output), per iteration, in ns * virtual-mem : virtual memory consumption as reported by OS, in bytes And for build benchmark: * binary-size : size of the go command, in bytes * build-cputime : CPU time spent on the build, in ns * build-rss : max memory consumption of the build process as reported by OS, in bytes * build-time : real time of the build, in ns","title":"Metrics"},{"location":"PerfDashboard/#profiles","text":"The dashboard also collects a set of profiles for every commit, they are available from the details page . For usual benchmarks CPU and memory profiles are collected. For build benchmark - perf profile , per-process split of CPU time and per-section size .","title":"Profiles"},{"location":"PerfDashboard/#perf-changes-view","text":"The view allows to see aggregate information about significant performance changes caused by recent commits. Rows: * The first row shows difference between the latest release and tip. * The rest of the rows show deltas caused by individual commits. Columns: * The first column is commit hash. * Second - number of benchmarks that were executed for the commit to far. * Third - metric name, or the special 'failure' metric for build/runtime crashes. * Fourth - negative deltas. * Fifth - positive deltas. * The rest describe commit. You can click on any positive/negative delta to see details about the change.","title":"Perf Changes View"},{"location":"Performance/","text":"Debugging performance issues in Go programs \u2013 originally written by Dmitry Vyukov Let's assume you have a Go program and want to improve its performance. There are several tools available that can help with this task. These tools can help you to identify various types of hotspots (CPU, IO, memory), hotspots are the places that you need to concentrate on in order to significantly improve performance. However, another outcome is possible \u2013 the tools can help you identify obvious performance defects in the program. For example, you prepare an SQL statement before each query while you could prepare it once at program startup. Another example is if an O(N^2) algorithm somehow slipped into where an obvious O(N) exists and is expected. In order to identify such cases you need to sanity check what you see in profiles. For example for the first case significant time spent in SQL statement preparation would be the red flag. It's also important to understand various bounding factors for performance. For example, if the program communicates via 100 Mbps network link and it is already utilizes >90Mbps, there is not much you can do with the program to improve its performance. There are similar bounding factors for disk IO, memory consumption and computational tasks. With that in mind we can look at the available tools. Note: The tools can interfere with each other. For example, precise memory profiling skews CPU profiles, goroutine blocking profiling affects scheduler trace, etc. Use tools in isolation to get more precise info. CPU Profiler Go runtime contains built-in CPU profiler, which shows what functions consume what percent of CPU time. There are 3 ways you can get access to it: The simplest one is -cpuprofile flag of 'go test' ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ) command. For example, the following command: $ go test -run = none -bench = ClientServerParallel4 -cpuprofile = cprof net/http will profile the given benchmark and write CPU profile into 'cprof' file. Then: $ go tool pprof --text http.test cprof will print a list of the hottest functions. There are several output types available, the most useful ones are: --text , --web and --list . Run go tool pprof to get the complete list. The obvious drawback of this option is that it works only for tests. net/http/pprof : This is the ideal solution for network servers. You merely need to import net/http/pprof , and collect profiles with: $ go tool pprof --text mybin http://myserver:6060:/debug/pprof/profile Manual profile collection. You need to import runtime/pprof and add the following code to main function: if * flagCpuprofile != \"\" { f , err : = os . Create ( * flagCpuprofile ) if err != nil { log . Fatal ( err ) } pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () } The profile will be written to the specified file, visualize it the same way as in the first option. Here is an example of a profile visualized with --web option: [cpu_profile.png] You can investigate a single function with --list=funcname option. For example, the following profile shows that the time was spent in the append function: . . 93 : func ( bp * buffer ) WriteRune ( r rune ) error { . . 94 : if r < utf8 . RuneSelf { 5 5 95 : * bp = append ( * bp , byte ( r )) . . 96 : return nil . . 97 : } . . 98 : . . 99 : b : = * bp . . 100 : n : = len ( b ) . . 101 : for n + utf8 . UTFMax > cap ( b ) { . . 102 : b = append ( b , 0 ) . . 103 : } . . 104 : w : = utf8 . EncodeRune ( b [ n : n + utf8 . UTFMax ], r ) . . 105 : * bp = b [: n + w ] . . 106 : return nil . . 107 : } There are also 3 special entries that the profiler uses when it can't unwind stack: GC, System and ExternalCode. GC means time spent during garbage collection, see Memory Profiler and Garbage Collector Trace sections below for optimization suggestions. System means time spent in goroutine scheduler, stack management code and other auxiliary runtime code. ExternalCode means time spent in native dynamic libraries. Here are some hints with respect to how to interpret what you see in the profile. If you see lots of time spent in runtime.mallocgc function, the program potentially makes excessive amount of small memory allocations. The profile will tell you where the allocations are coming from. See the memory profiler section for suggestions on how to optimize this case. If lots of time is spent in channel operations, sync.Mutex code and other synchronization primitives or System component, the program probably suffers from contention. Consider to restructure program to eliminate frequently accessed shared resources. Common techniques for this include sharding/partitioning, local buffering/batching and copy-on-write technique. If lots of time is spent in syscall.Read/Write , the program potentially makes excessive amount of small reads and writes. Bufio wrappers around os.File or net.Conn can help in this case. If lots of time is spent in GC component, the program either allocates too many transient objects or heap size is very small so garbage collections happen too frequently. See Garbage Collector Tracer and Memory Profiler sections for optimization suggestions. Note: For darwin CPU profiler currently only works on El Capitan or newer . Note: On windows you need to install Cygwin, Perl and Graphviz to generate svg/web profiles. Memory Profiler Memory profiler shows what functions allocate heap memory. You can collect it in similar ways as CPU profile: with go test --memprofile ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ), with net/http/pprof via http://myserver:6060:/debug/pprof/heap or by calling runtime/pprof.WriteHeapProfile . You can visualize only allocations live at the time of profile collection ( --inuse_space flag to pprof , default), or all allocations happened since program start ( --alloc_space flag to pprof ). The former is useful for profiles collected with net/http/pprof on live applications, the latter is useful for profiles collected at program end (otherwise you will see almost empty profile). Note: the memory profiler is sampling, that is, it collects information only about some subset of memory allocations. Probability of sampling an object is proportional to its size. You can change the sampling rate with go test --memprofilerate flag, or by setting runtime.MemProfileRate variable at program startup. The rate of 1 will lead to collection of information about all allocations, but it can slow down execution. The default sampling rate is 1 sample per 512KB of allocated memory. You can also visualize number of bytes allocated or number of objects allocated ( --inuse/alloc_space and --inuse/alloc_objects flags, respectively). The profiler tends to sample larger objects during profiling more. But it's important to understand that large objects affect memory consumption and GC time, while large number of tiny allocations affects execution speed (and GC time to some degree as well). So it may be useful to look at both. Objects can be persistent or transient. If you have several large persistent objects allocated at program start, they will be most likely sampled by the profiler (because they are large). Such objects do affect memory consumption and GC time, but they do not affect normal execution speed (no memory management operations happen on them). On the other hand if you have large number of objects with very short life durations, they can be barely represented in the profile (if you use the default --inuse_space mode ). But they do significantly affect execution speed, because they are constantly allocated and freed. So, once again, it may be useful to look at both types of objects. So, generally, if you want to reduce memory consumption, you need to look at --inuse_space profile collected during normal program operation. If you want to improve execution speed, look at --alloc_objects profile collected after significant running time or at program end. There are several flags that control reporting granularity. --functions makes pprof report on function level (default). --lines makes pprof report on source line level, which is useful if hot functions allocate on different lines. And there are also --addresses and --files for exact instruction address and file level, respectively. There is a useful option for the memory profile \u2013 you can look at it right in the browser (provided that you imported net/http/pprof ). If you open http://myserver:6060/debug/pprof/heap?debug=1 you must see the heap profile along the lines of: heap profile : 4 : 266528 [ 123: 11284472 ] @ heap / 1048576 1 : 262144 [ 4: 376832 ] @ 0x28d9f 0x2a201 0x2a28a 0x2624d 0x26188 0x94ca3 0x94a0b 0x17add6 0x17ae9f 0x1069d3 0xfe911 0xf0a3e 0xf0d22 0x21a70 # 0x2a201 cnew + 0xc1 runtime / malloc . goc : 718 # 0x2a28a runtime . cnewarray + 0x3a runtime / malloc . goc : 731 # 0x2624d makeslice1 + 0x4d runtime / slice . c : 57 # 0x26188 runtime . makeslice + 0x98 runtime / slice . c : 38 # 0x94ca3 bytes . makeSlice + 0x63 bytes / buffer . go : 191 # 0x94a0b bytes .( * Buffer ). ReadFrom + 0xcb bytes / buffer . go : 163 # 0x17add6 io / ioutil . readAll + 0x156 io / ioutil / ioutil . go : 32 # 0x17ae9f io / ioutil . ReadAll + 0x3f io / ioutil / ioutil . go : 41 # 0x1069d3 godoc / vfs . ReadFile + 0x133 godoc / vfs / vfs . go : 44 # 0xfe911 godoc . func \u00b7 023 + 0x471 godoc / meta . go : 80 # 0xf0a3e godoc .( * Corpus ). updateMetadata + 0x9e godoc / meta . go : 101 # 0xf0d22 godoc .( * Corpus ). refreshMetadataLoop + 0x42 godoc / meta . go : 141 2 : 4096 [ 2: 4096 ] @ 0x28d9f 0x29059 0x1d252 0x1d450 0x106993 0xf1225 0xe1489 0xfbcad 0x21a70 # 0x1d252 newdefer + 0x112 runtime / panic . c : 49 # 0x1d450 runtime . deferproc + 0x10 runtime / panic . c : 132 # 0x106993 godoc / vfs . ReadFile + 0xf3 godoc / vfs / vfs . go : 43 # 0xf1225 godoc .( * Corpus ). parseFile + 0x75 godoc / parser . go : 20 # 0xe1489 godoc .( * treeBuilder ). newDirTree + 0x8e9 godoc / dirtrees . go : 108 # 0xfbcad godoc . func \u00b7 002 + 0x15d godoc / dirtrees . go : 100 The numbers in the beginning of each entry (\"1: 262144 [4: 376832]\") represent number of currently live objects, amount of memory occupied by live objects, total number of allocations and amount of memory occupied by all allocations, respectively. Optimizations are usually application-specific, but here are some common suggestions. Combine objects into larger objects. For example, replace *bytes.Buffer struct member with bytes.Buffer (you can preallocate buffer for writing by calling bytes.Buffer.Grow later). This will reduce number of memory allocations (faster) and also reduce pressure on garbage collector (faster garbage collections). Local variables that escape from their declaration scope get promoted into heap allocations. Compiler generally can't prove that several variables have the same life time, so it allocates each such variable separately. So you can use the above advise for local variables as well. For example, replace: for k , v : = range m { k , v : = k , v // copy for capturing by the goroutine go func () { // use k and v } () } with: for k , v : = range m { x : = struct { k , v string }{ k , v } // copy for capturing by the goroutine go func () { // use x . k and x . v } () } This replaces two memory allocations with a single allocation. However, this optimization usually negatively affects code readability, so use it reasonably. A special case of allocation combining is slice array preallocation. If you know a typical size of the slice, you can preallocate a backing array for it as follows: type X struct { buf [] byte bufArray [ 16 ] byte // Buf usually does not grow beyond 16 bytes . } func MakeX () * X { x : = & X {} // Preinitialize buf with the backing array . x . buf = x . bufArray [: 0 ] return x } If possible use smaller data types. For example, use int8 instead of int . Objects that do not contain any pointers (note that strings, slices, maps and chans contain implicit pointers), are not scanned by garbage collector. For example, a 1GB byte slice virtually does not affect garbage collection time. So if you remove pointers from actively used objects, it can positively impact garbage collection time. Some possibilities are: replace pointers with indices, split object into two parts one of which does not contain pointers. Use freelists to reuse transient objects and reduce number of allocations. Standard library contains sync.Pool type that allows to reuse the same object several times in between garbage collections. However, be aware that, as any manual memory management scheme, incorrect use of sync.Pool can lead to use-after-free bugs. You can also use the Garbage Collector Trace (see below) to get some insights into memory issues. TODO(dvyukov): mention that stats are updated in a deferred way: \"Memprof stats are updated in a deferred way. This is required in order to present a consistent picture in the situation when allocs are coming continuously and frees are coming in batches afterwards. Several consecutive GCs push the update pipeline forward. That's what you observe. So if you profile a live server then any sample will give you a consistent snapshot. However, if the program completes some activity and you want to collect the snapshot after this activity, then you need to execute 2 or 3 GCs before the collection.\" Blocking Profiler The blocking profiler shows where goroutine block waiting on synchronization primitives (including timer channels). You can collect it in similar ways as CPU profile: with go test --blockprofile ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ), with net/http/pprof via http://myserver:6060:/debug/pprof/block or by calling runtime/pprof.Lookup(\"block\").WriteTo . But there is significant caveat \u2013 the blocking profiler is not enabled by default. go test --blockprofile will enable it for you automatically. However, if you use net/http/pprof or runtime/pprof , you need to enable it manually (otherwise the profile will be empty). To enable the blocking profiler call runtime.SetBlockProfileRate . SetBlockProfileRate controls the fraction of goroutine blocking events that are reported in the blocking profile. The profiler aims to sample an average of one blocking event per the specified amount of nanoseconds spent blocked. To include every blocking event in the profile, set the rate to 1. If a function contains several blocking operations and it's not obvious which one leads to blocking, use --lines flag to pprof. Note that not all blocking is bad. When a goroutine blocks, the underlying worker thread simply switches to another goroutine. So blocking in the cooperative Go environment is very different from blocking on a mutex in a non-cooperative systems (e.g. typical C++ or Java threading libraries, where blocking leads to thread idling and expensive thread context switches). To give you some feeling, let's consider some examples. Blocking on a time.Ticker is usually OK. If a goroutine blocks on a Ticker for 10 seconds, you will see 10 seconds of blocking in the profile, which is perfectly fine. Blocking on sync.WaitGroup is frequently OK. For example, is a task takes 10 seconds, the goroutine waiting on a WaitGroup for completion will account for 10 seconds of blocking in the profile. Blocking on sync.Cond may or may not be OK, depending on the situation. Consumer blocking on a channel suggests slow producers or lack of work. Producer blocking on a channel suggests that consumers are slower, but this is frequently OK. Blocking on a channel-based semaphore shows how much goroutines are gated on the semaphore. Blocking on a sync.Mutex or sync.RWMutex is usually bad. You can use --ignore flag to pprof to exclude known uninteresting blocking from a profile during visualization. Blocking of goroutines can lead to two negative consequences: Program does not scale with processors due to lack of work. Scheduler Trace can help to identify this case. Excessive goroutine blocking/unblocking consumes CPU time. CPU Profiler can help to identify this case (look at the System component). Here are some common suggestions that can help to reduce goroutine blocking: Use sufficiently buffered channels in producer-consumer scenarios. Unbuffered channels substantially limit available parallelism in the program. Use sync.RWMutex instead of sync.Mutex for read-mostly workloads. Readers never block other readers in sync.RWMutex , even on implementation level. In some cases it's possible to remove mutexes entirely by using copy-on-write technique. If the protected data structure is modified infrequently and it's feasible to make copies of it, then it can be updated as follows: type Config struct { Routes map [ string ] net . Addr Backends [] net . Addr } var config atomic . Value // actual type is * Config // Worker goroutines use this function to obtain the current config . // UpdateConfig must be called at least once before this func . func CurrentConfig () * Config { return config . Load () . ( * Config ) } // Background goroutine periodically creates a new Config object // as sets it as current using this function . func UpdateConfig ( cfg * Config ) { config . Store ( cfg ) } This pattern prevents the writer from blocking readers during update. Partitioning is another general technique for reducing contention/blocking on shared mutable data structures. Below is an example of how to partition a hashmap: type Partition struct { sync . RWMutex m map [ string ] string } const partCount = 64 var m [ partCount ] Partition func Find ( k string ) string { idx : = hash ( k ) % partCount part : = & m [ idx ] part . RLock () v : = part . m [ k ] part . RUnlock () return v } Local caching and batching of updates can help to reduce contention on un-partitionable data structures. Below you can see how to batch sends to a channel: const CacheSize = 16 type Cache struct { buf [ CacheSize ] int pos int } func Send ( c chan [ CacheSize ] int , cache * Cache , value int ) { cache . buf [ cache . pos ] = value cache . pos ++ if cache . pos == CacheSize { c <- cache . buf cache . pos = 0 } } This technique is not limited to channels. It can be used to batch updates to a map, batch allocations, etc. Use sync.Pool for freelists instead of chan-based or mutex-protected freelists. sync.Pool uses smart techniques internally to reduce blocking. Goroutine Profiler The goroutine profiler simply gives you current stacks of all live goroutines in the process. It can be handy to debug load balancing issues (see Scheduler Trace section below), or to debug deadlocks. The profile makes sense only for a running app, so go test does not expose it. You can collect the profile with net/http/pprof via http://myserver:6060:/debug/pprof/goroutine , and visualize it to svg/pdf or by calling runtime/pprof.Lookup(\"goroutine\").WriteTo . But the most useful way is to type http://myserver:6060:/debug/pprof/goroutine?debug=2 in your browser, which will give you symbolized stacks similar to what you see when a program crashes. Note that goroutines in \"syscall\" state consume an OS thread, other goroutines do not (except for goroutines that called runtime.LockOSThread, which is, unfortunately, not visible in the profile). Note that goroutines in \"IO wait\" state also do not consume threads, they are parked on non-blocking network poller (which uses epoll/kqueue/GetQueuedCompletionStatus to unpark goroutines later). Garbage Collector Trace Aside from the profiling tools, there is another kind of tools available \u2013 tracers. They allow to trace garbage collections, memory allocator and goroutine scheduler state. To enable the garbage collector (GC) trace, run the program with GODEBUG=gctrace=1 environment variable: $ GODEBUG = gctrace = 1 ./myserver Then the program will print output similar to the following during execution: gc9 ( 2 ) : 12 + 1 + 744 + 8 us , 2 -> 10 MB , 108615 ( 593983 - 485368 ) objects , 4825 / 3620 / 0 sweeps , 0 ( 0 ) handoff , 6 ( 91 ) steal , 16 / 1 / 0 yields gc10 ( 2 ) : 12 + 6769 + 767 + 3 us , 1 -> 1 MB , 4222 ( 593983 - 589761 ) objects , 4825 / 0 / 1898 sweeps , 0 ( 0 ) handoff , 6 ( 93 ) steal , 16 / 10 / 2 yields gc11 ( 2 ) : 799 + 3 + 2050 + 3 us , 1 -> 69 MB , 831819 ( 1484009 - 652190 ) objects , 4825 / 691 / 0 sweeps , 0 ( 0 ) handoff , 5 ( 105 ) steal , 16 / 1 / 0 yields Let's consider the meaning of these numbers. One line per GC is printed. The first number (\"gc9\") is the number of GC (this is the 9-th GC since program start). The number in parens (\"(2)\") is the number of worker threads participated in the GC. The next 4 numbers (\"12+1+744+8 us\") mean stop-the-world, sweeping, marking and waiting for worker threads to finish, in microseconds, respectively. The next 2 numbers (\"2 -> 10 MB\") mean size of live heap after the previous GC and full heap size (including garbage) before the current GC. The next 3 numbers (\"108615 (593983-485368) objects\") are total number of objects in heap (including garbage) and total number of memory allocation and free operations. The next 3 numbers (\"4825/3620/0 sweeps\") characterize sweep phase (of the previous GC): there were total 4825 memory spans, 3620 were swept on demand or in background, 0 were swept during stop-the-world phase (the rest were unused spans). The next 4 numbers (\"0(0) handoff, 6(91) steal\") characterize load balancing during parallel mark phase: there were 0 object handoff operations (0 objects were handoff), and 6 steal operations (91 objects were stolen). The last 3 numbers (\"16/1/0 yields\") characterize effectiveness of parallel mark phase: there were total of 17 yield operations during waiting for another thread. The GC is mark-and-sweep type . Total GC can be expressed as: Tgc = Tseq + Tmark + Tsweep where Tseq is time to stop user goroutines and some preparation activities (usually small); Tmark is heap marking time, marking happens when all user goroutines are stopped, and thus can significantly affect latency of processing; Tsweep is heap sweeping time, sweeping generally happens concurrently with normal program execution, and so is not so critical for latency. Marking time can be approximately expressed as: Tmark = C1*Nlive + C2*MEMlive_ptr + C3*Nlive_ptr where Nlive is the number of live objects in the heap during GC, MEMlive_ptr is the amount of memory occupied by live objects with pointers, Nlive_ptr is the number of pointers in live objects. Sweeping time can be approximately expressed as: Tsweep = C4*MEMtotal + C5*MEMgarbage where MEMtotal is the total amount of heap memory, MEMgarbage is the amount of garbage in the heap. Next GC happens after the program has allocated an extra amount of memory proportional to the amount already in use. The proportion is controlled by GOGC environment variable (100 by default). If GOGC=100 and the program is using 4M of heap memory, runtime will trigger GC again when the program gets to 8M. This keeps the GC cost in linear proportion to the allocation cost. Adjusting GOGC changes the linear constant and also the amount of extra memory used. Only sweeping depends on total size of the heap, and sweeping happens concurrently with normal program execution. So it can make sense to set GOGC to a higher value (200, 300, 500, etc) if you can afford extra memory consumption. For example, GOGC=300 can reduce garbage collection overhead by up to 2 times while keeping latencies the same (at the cost of 2 times larger heap). GC is parallel and generally scales well with hardware parallelism. So it can make sense to set GOMAXPROCS to higher value even for sequential programs just to speed up garbage collections. However, note that number of garbage collector threads is currently bounded by 8. Memory Allocator Trace Memory allocator traces simply dumps all memory allocation and free operations onto console. It's enabled with GODEBUG=allocfreetrace=1 environment variable. The output looks along the lines of: tracealloc ( 0xc208062500 , 0x100 , array of parse . Node ) goroutine 16 [ running ] : runtime . mallocgc ( 0x100 , 0x3eb7c1 , 0x0 ) runtime / malloc . goc : 190 + 0x145 fp = 0xc2080b39f8 runtime . growslice ( 0x31f840 , 0xc208060700 , 0x8 , 0x8 , 0x1 , 0x0 , 0x0 , 0x0 ) runtime / slice . goc : 76 + 0xbb fp = 0xc2080b3a90 text / template / parse .( * Tree ). parse ( 0xc2080820e0 , 0xc208023620 , 0x0 , 0x0 ) text / template / parse / parse . go : 289 + 0x549 fp = 0xc2080b3c50 ... tracefree ( 0xc208002d80 , 0x120 ) goroutine 16 [ running ] : runtime . MSpan_Sweep ( 0x73b080 ) runtime / mgc0 . c : 1880 + 0x514 fp = 0xc20804b8f0 runtime . MCentral_CacheSpan ( 0x69c858 ) runtime / mcentral . c : 48 + 0x2b5 fp = 0xc20804b920 runtime . MCache_Refill ( 0x737000 , 0xc200000012 ) runtime / mcache . c : 78 + 0x119 fp = 0xc20804b950 ... The trace contains address of the memory block, size, type, goroutine id and the stack trace. It's probably more useful for debugging, but can give very fine-grained info for allocation optimizations as well. Scheduler Trace Scheduler trace can provide insights into dynamic behavior of the goroutine scheduler and allow to debug load balancing and scalability issues. To enable the scheduler trace trace, run the program with GODEBUG=schedtrace=1000 environment variable (the value means period of output, in ms, in this case it's once per second): $ GODEBUG = schedtrace = 1000 ./myserver Then the program will print output similar to the following during execution: SCHED 1004ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=8 [0 1 0 3] SCHED 2005ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=5 runqueue=6 [1 5 4 0] SCHED 3008ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=10 [2 2 2 1] The first number (\"1004ms\") is time since program start. Gomaxprocs is the current value of GOMAXPROCS. Idleprocs is the number of idling processors (the rest are executing Go code). Threads is the total number of worker threads created by the scheduler (threads can be in 3 states: execute Go code (gomaxprocs-idleprocs), execute syscalls/cgocalls or idle). Idlethreads is the number of idling worker threads. Runqueue is the length of global queue with runnable goroutines. The numbers in square brackets (\"[0 1 0 3]\") are lengths of per-processor queues with runnable goroutines. Sum of lengths of global and local queues represents the total number of goroutines available for execution. Note: You can combine any of the tracers as GODEBUG=gctrace=1,allocfreetrace=1,schedtrace=1000. Note: There is also detailed scheduler trace, which you can enable with GODEBUG=schedtrace=1000,scheddetail=1. It prints detailed info about every goroutine, worker thread and processor. We won't describe its format here as it's mainly useful for scheduler developers; but you can find details in src/pkg/runtime/proc.c . The scheduler trace is useful when a program does not scale linearly with GOMAXPROCS and/or does not consume 100% of CPU time. The ideal situation is when all processors are busy executing Go code, number of threads is reasonable, there is plenty of work in all queues and the work is reasonably evenly distributed: gomaxprocs=8 idleprocs=0 threads=40 idlethreads=5 runqueue=10 [20 20 20 20 20 20 20 20] A bad situation is when something of the above does not hold. For example the following sample demonstrates shortage of work to keep all processors busy: gomaxprocs=8 idleprocs=6 threads=40 idlethreads=30 runqueue=0 [0 2 0 0 0 1 0 0] Note: use OS-provided means to measure actual CPU utilization as the ultimate characteristic. On Unix family of operating system it is top command; on Windows it is Task Manager. You can use the goroutine profiler to understand where goroutines block in the case of work shortage. Note that load imbalance is not ultimately bad as long as all processors are busy, it will just cause some moderate load balancing overheads. Memory Statistics Go runtime exposes coarse-grained memory statistics via runtime.ReadMemStats function. The statistics are also exposed via net/http/pprof at the bottom of http://myserver:6060/debug/pprof/heap?debug=1 . The statistics are described here . Some of the interesting fields are: HeapAlloc - current heap size. HeapSys - total heap size. HeapObjects - total number of objects in the heap. HeapReleased - amount of memory released to the OS; runtime releases to the OS memory unused for 5 minutes, you can force this process with runtime/debug.FreeOSMemory. Sys - total amount of memory allocated from OS. Sys-HeapReleased - effective memory consumption of the program. StackSys - memory consumed for goroutine stacks (note that some stacks are allocated from heap and are not accounted here, unfortunately there is no way to get total size of stacks ( https://code.google.com/p/go/issues/detail?id=7468 )). MSpanSys/MCacheSys/BuckHashSys/GCSys/OtherSys - amount of memory allocated by runtime for various auxiliary purposes; they are generally not interesting, unless they are too high. PauseNs - durations of last garbage collections. Heap Dumper The last available tool is heap dumper, it can write state of the whole heap into a file for future exploration. It can be useful for identifying memory leaks and getting insights into program memory consumption. First, you need to write the dump using runtime/debug.WriteHeapDump function: f , err : = os . Create ( \" heapdump \" ) if err != nil { ... } debug . WriteHeapDump ( f . Fd ()) Then you can either render it to a dot file with graphical representation of the heap or convert it to hprof format. To render it to a dot file: $ go get github.com/randall77/hprof/dumptodot $ dumptodot heapdump mybinary > heap.dot and open heap.dot with Graphviz. To convert it to hprof format: $ go get github.com/randall77/hprof/dumptohprof $ dumptohprof heapdump heap.hprof $ jhat heap.hprof and navigate your browser to http://myserver:7000 . Concluding Remarks Optimization is an open problem, there are simple recipes that you can use to improve performance. Sometimes optimization requires complete re-architecture of the program. But we hope that the tools will be a valuable addition to your toolbox, that you can use to at least analyze and understand what happens. Profiling Go Programs is a good tutorial on usage of CPU and memory profilers to optimize a simple program.","title":"Performance"},{"location":"Performance/#debugging-performance-issues-in-go-programs","text":"\u2013 originally written by Dmitry Vyukov Let's assume you have a Go program and want to improve its performance. There are several tools available that can help with this task. These tools can help you to identify various types of hotspots (CPU, IO, memory), hotspots are the places that you need to concentrate on in order to significantly improve performance. However, another outcome is possible \u2013 the tools can help you identify obvious performance defects in the program. For example, you prepare an SQL statement before each query while you could prepare it once at program startup. Another example is if an O(N^2) algorithm somehow slipped into where an obvious O(N) exists and is expected. In order to identify such cases you need to sanity check what you see in profiles. For example for the first case significant time spent in SQL statement preparation would be the red flag. It's also important to understand various bounding factors for performance. For example, if the program communicates via 100 Mbps network link and it is already utilizes >90Mbps, there is not much you can do with the program to improve its performance. There are similar bounding factors for disk IO, memory consumption and computational tasks. With that in mind we can look at the available tools. Note: The tools can interfere with each other. For example, precise memory profiling skews CPU profiles, goroutine blocking profiling affects scheduler trace, etc. Use tools in isolation to get more precise info.","title":"Debugging performance issues in Go programs"},{"location":"Performance/#cpu-profiler","text":"Go runtime contains built-in CPU profiler, which shows what functions consume what percent of CPU time. There are 3 ways you can get access to it: The simplest one is -cpuprofile flag of 'go test' ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ) command. For example, the following command: $ go test -run = none -bench = ClientServerParallel4 -cpuprofile = cprof net/http will profile the given benchmark and write CPU profile into 'cprof' file. Then: $ go tool pprof --text http.test cprof will print a list of the hottest functions. There are several output types available, the most useful ones are: --text , --web and --list . Run go tool pprof to get the complete list. The obvious drawback of this option is that it works only for tests. net/http/pprof : This is the ideal solution for network servers. You merely need to import net/http/pprof , and collect profiles with: $ go tool pprof --text mybin http://myserver:6060:/debug/pprof/profile Manual profile collection. You need to import runtime/pprof and add the following code to main function: if * flagCpuprofile != \"\" { f , err : = os . Create ( * flagCpuprofile ) if err != nil { log . Fatal ( err ) } pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () } The profile will be written to the specified file, visualize it the same way as in the first option. Here is an example of a profile visualized with --web option: [cpu_profile.png] You can investigate a single function with --list=funcname option. For example, the following profile shows that the time was spent in the append function: . . 93 : func ( bp * buffer ) WriteRune ( r rune ) error { . . 94 : if r < utf8 . RuneSelf { 5 5 95 : * bp = append ( * bp , byte ( r )) . . 96 : return nil . . 97 : } . . 98 : . . 99 : b : = * bp . . 100 : n : = len ( b ) . . 101 : for n + utf8 . UTFMax > cap ( b ) { . . 102 : b = append ( b , 0 ) . . 103 : } . . 104 : w : = utf8 . EncodeRune ( b [ n : n + utf8 . UTFMax ], r ) . . 105 : * bp = b [: n + w ] . . 106 : return nil . . 107 : } There are also 3 special entries that the profiler uses when it can't unwind stack: GC, System and ExternalCode. GC means time spent during garbage collection, see Memory Profiler and Garbage Collector Trace sections below for optimization suggestions. System means time spent in goroutine scheduler, stack management code and other auxiliary runtime code. ExternalCode means time spent in native dynamic libraries. Here are some hints with respect to how to interpret what you see in the profile. If you see lots of time spent in runtime.mallocgc function, the program potentially makes excessive amount of small memory allocations. The profile will tell you where the allocations are coming from. See the memory profiler section for suggestions on how to optimize this case. If lots of time is spent in channel operations, sync.Mutex code and other synchronization primitives or System component, the program probably suffers from contention. Consider to restructure program to eliminate frequently accessed shared resources. Common techniques for this include sharding/partitioning, local buffering/batching and copy-on-write technique. If lots of time is spent in syscall.Read/Write , the program potentially makes excessive amount of small reads and writes. Bufio wrappers around os.File or net.Conn can help in this case. If lots of time is spent in GC component, the program either allocates too many transient objects or heap size is very small so garbage collections happen too frequently. See Garbage Collector Tracer and Memory Profiler sections for optimization suggestions. Note: For darwin CPU profiler currently only works on El Capitan or newer . Note: On windows you need to install Cygwin, Perl and Graphviz to generate svg/web profiles.","title":"CPU Profiler"},{"location":"Performance/#memory-profiler","text":"Memory profiler shows what functions allocate heap memory. You can collect it in similar ways as CPU profile: with go test --memprofile ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ), with net/http/pprof via http://myserver:6060:/debug/pprof/heap or by calling runtime/pprof.WriteHeapProfile . You can visualize only allocations live at the time of profile collection ( --inuse_space flag to pprof , default), or all allocations happened since program start ( --alloc_space flag to pprof ). The former is useful for profiles collected with net/http/pprof on live applications, the latter is useful for profiles collected at program end (otherwise you will see almost empty profile). Note: the memory profiler is sampling, that is, it collects information only about some subset of memory allocations. Probability of sampling an object is proportional to its size. You can change the sampling rate with go test --memprofilerate flag, or by setting runtime.MemProfileRate variable at program startup. The rate of 1 will lead to collection of information about all allocations, but it can slow down execution. The default sampling rate is 1 sample per 512KB of allocated memory. You can also visualize number of bytes allocated or number of objects allocated ( --inuse/alloc_space and --inuse/alloc_objects flags, respectively). The profiler tends to sample larger objects during profiling more. But it's important to understand that large objects affect memory consumption and GC time, while large number of tiny allocations affects execution speed (and GC time to some degree as well). So it may be useful to look at both. Objects can be persistent or transient. If you have several large persistent objects allocated at program start, they will be most likely sampled by the profiler (because they are large). Such objects do affect memory consumption and GC time, but they do not affect normal execution speed (no memory management operations happen on them). On the other hand if you have large number of objects with very short life durations, they can be barely represented in the profile (if you use the default --inuse_space mode ). But they do significantly affect execution speed, because they are constantly allocated and freed. So, once again, it may be useful to look at both types of objects. So, generally, if you want to reduce memory consumption, you need to look at --inuse_space profile collected during normal program operation. If you want to improve execution speed, look at --alloc_objects profile collected after significant running time or at program end. There are several flags that control reporting granularity. --functions makes pprof report on function level (default). --lines makes pprof report on source line level, which is useful if hot functions allocate on different lines. And there are also --addresses and --files for exact instruction address and file level, respectively. There is a useful option for the memory profile \u2013 you can look at it right in the browser (provided that you imported net/http/pprof ). If you open http://myserver:6060/debug/pprof/heap?debug=1 you must see the heap profile along the lines of: heap profile : 4 : 266528 [ 123: 11284472 ] @ heap / 1048576 1 : 262144 [ 4: 376832 ] @ 0x28d9f 0x2a201 0x2a28a 0x2624d 0x26188 0x94ca3 0x94a0b 0x17add6 0x17ae9f 0x1069d3 0xfe911 0xf0a3e 0xf0d22 0x21a70 # 0x2a201 cnew + 0xc1 runtime / malloc . goc : 718 # 0x2a28a runtime . cnewarray + 0x3a runtime / malloc . goc : 731 # 0x2624d makeslice1 + 0x4d runtime / slice . c : 57 # 0x26188 runtime . makeslice + 0x98 runtime / slice . c : 38 # 0x94ca3 bytes . makeSlice + 0x63 bytes / buffer . go : 191 # 0x94a0b bytes .( * Buffer ). ReadFrom + 0xcb bytes / buffer . go : 163 # 0x17add6 io / ioutil . readAll + 0x156 io / ioutil / ioutil . go : 32 # 0x17ae9f io / ioutil . ReadAll + 0x3f io / ioutil / ioutil . go : 41 # 0x1069d3 godoc / vfs . ReadFile + 0x133 godoc / vfs / vfs . go : 44 # 0xfe911 godoc . func \u00b7 023 + 0x471 godoc / meta . go : 80 # 0xf0a3e godoc .( * Corpus ). updateMetadata + 0x9e godoc / meta . go : 101 # 0xf0d22 godoc .( * Corpus ). refreshMetadataLoop + 0x42 godoc / meta . go : 141 2 : 4096 [ 2: 4096 ] @ 0x28d9f 0x29059 0x1d252 0x1d450 0x106993 0xf1225 0xe1489 0xfbcad 0x21a70 # 0x1d252 newdefer + 0x112 runtime / panic . c : 49 # 0x1d450 runtime . deferproc + 0x10 runtime / panic . c : 132 # 0x106993 godoc / vfs . ReadFile + 0xf3 godoc / vfs / vfs . go : 43 # 0xf1225 godoc .( * Corpus ). parseFile + 0x75 godoc / parser . go : 20 # 0xe1489 godoc .( * treeBuilder ). newDirTree + 0x8e9 godoc / dirtrees . go : 108 # 0xfbcad godoc . func \u00b7 002 + 0x15d godoc / dirtrees . go : 100 The numbers in the beginning of each entry (\"1: 262144 [4: 376832]\") represent number of currently live objects, amount of memory occupied by live objects, total number of allocations and amount of memory occupied by all allocations, respectively. Optimizations are usually application-specific, but here are some common suggestions. Combine objects into larger objects. For example, replace *bytes.Buffer struct member with bytes.Buffer (you can preallocate buffer for writing by calling bytes.Buffer.Grow later). This will reduce number of memory allocations (faster) and also reduce pressure on garbage collector (faster garbage collections). Local variables that escape from their declaration scope get promoted into heap allocations. Compiler generally can't prove that several variables have the same life time, so it allocates each such variable separately. So you can use the above advise for local variables as well. For example, replace: for k , v : = range m { k , v : = k , v // copy for capturing by the goroutine go func () { // use k and v } () } with: for k , v : = range m { x : = struct { k , v string }{ k , v } // copy for capturing by the goroutine go func () { // use x . k and x . v } () } This replaces two memory allocations with a single allocation. However, this optimization usually negatively affects code readability, so use it reasonably. A special case of allocation combining is slice array preallocation. If you know a typical size of the slice, you can preallocate a backing array for it as follows: type X struct { buf [] byte bufArray [ 16 ] byte // Buf usually does not grow beyond 16 bytes . } func MakeX () * X { x : = & X {} // Preinitialize buf with the backing array . x . buf = x . bufArray [: 0 ] return x } If possible use smaller data types. For example, use int8 instead of int . Objects that do not contain any pointers (note that strings, slices, maps and chans contain implicit pointers), are not scanned by garbage collector. For example, a 1GB byte slice virtually does not affect garbage collection time. So if you remove pointers from actively used objects, it can positively impact garbage collection time. Some possibilities are: replace pointers with indices, split object into two parts one of which does not contain pointers. Use freelists to reuse transient objects and reduce number of allocations. Standard library contains sync.Pool type that allows to reuse the same object several times in between garbage collections. However, be aware that, as any manual memory management scheme, incorrect use of sync.Pool can lead to use-after-free bugs. You can also use the Garbage Collector Trace (see below) to get some insights into memory issues. TODO(dvyukov): mention that stats are updated in a deferred way: \"Memprof stats are updated in a deferred way. This is required in order to present a consistent picture in the situation when allocs are coming continuously and frees are coming in batches afterwards. Several consecutive GCs push the update pipeline forward. That's what you observe. So if you profile a live server then any sample will give you a consistent snapshot. However, if the program completes some activity and you want to collect the snapshot after this activity, then you need to execute 2 or 3 GCs before the collection.\"","title":"Memory Profiler"},{"location":"Performance/#blocking-profiler","text":"The blocking profiler shows where goroutine block waiting on synchronization primitives (including timer channels). You can collect it in similar ways as CPU profile: with go test --blockprofile ( http://golang.org/cmd/go/#hdr-Description_of_testing_flags ), with net/http/pprof via http://myserver:6060:/debug/pprof/block or by calling runtime/pprof.Lookup(\"block\").WriteTo . But there is significant caveat \u2013 the blocking profiler is not enabled by default. go test --blockprofile will enable it for you automatically. However, if you use net/http/pprof or runtime/pprof , you need to enable it manually (otherwise the profile will be empty). To enable the blocking profiler call runtime.SetBlockProfileRate . SetBlockProfileRate controls the fraction of goroutine blocking events that are reported in the blocking profile. The profiler aims to sample an average of one blocking event per the specified amount of nanoseconds spent blocked. To include every blocking event in the profile, set the rate to 1. If a function contains several blocking operations and it's not obvious which one leads to blocking, use --lines flag to pprof. Note that not all blocking is bad. When a goroutine blocks, the underlying worker thread simply switches to another goroutine. So blocking in the cooperative Go environment is very different from blocking on a mutex in a non-cooperative systems (e.g. typical C++ or Java threading libraries, where blocking leads to thread idling and expensive thread context switches). To give you some feeling, let's consider some examples. Blocking on a time.Ticker is usually OK. If a goroutine blocks on a Ticker for 10 seconds, you will see 10 seconds of blocking in the profile, which is perfectly fine. Blocking on sync.WaitGroup is frequently OK. For example, is a task takes 10 seconds, the goroutine waiting on a WaitGroup for completion will account for 10 seconds of blocking in the profile. Blocking on sync.Cond may or may not be OK, depending on the situation. Consumer blocking on a channel suggests slow producers or lack of work. Producer blocking on a channel suggests that consumers are slower, but this is frequently OK. Blocking on a channel-based semaphore shows how much goroutines are gated on the semaphore. Blocking on a sync.Mutex or sync.RWMutex is usually bad. You can use --ignore flag to pprof to exclude known uninteresting blocking from a profile during visualization. Blocking of goroutines can lead to two negative consequences: Program does not scale with processors due to lack of work. Scheduler Trace can help to identify this case. Excessive goroutine blocking/unblocking consumes CPU time. CPU Profiler can help to identify this case (look at the System component). Here are some common suggestions that can help to reduce goroutine blocking: Use sufficiently buffered channels in producer-consumer scenarios. Unbuffered channels substantially limit available parallelism in the program. Use sync.RWMutex instead of sync.Mutex for read-mostly workloads. Readers never block other readers in sync.RWMutex , even on implementation level. In some cases it's possible to remove mutexes entirely by using copy-on-write technique. If the protected data structure is modified infrequently and it's feasible to make copies of it, then it can be updated as follows: type Config struct { Routes map [ string ] net . Addr Backends [] net . Addr } var config atomic . Value // actual type is * Config // Worker goroutines use this function to obtain the current config . // UpdateConfig must be called at least once before this func . func CurrentConfig () * Config { return config . Load () . ( * Config ) } // Background goroutine periodically creates a new Config object // as sets it as current using this function . func UpdateConfig ( cfg * Config ) { config . Store ( cfg ) } This pattern prevents the writer from blocking readers during update. Partitioning is another general technique for reducing contention/blocking on shared mutable data structures. Below is an example of how to partition a hashmap: type Partition struct { sync . RWMutex m map [ string ] string } const partCount = 64 var m [ partCount ] Partition func Find ( k string ) string { idx : = hash ( k ) % partCount part : = & m [ idx ] part . RLock () v : = part . m [ k ] part . RUnlock () return v } Local caching and batching of updates can help to reduce contention on un-partitionable data structures. Below you can see how to batch sends to a channel: const CacheSize = 16 type Cache struct { buf [ CacheSize ] int pos int } func Send ( c chan [ CacheSize ] int , cache * Cache , value int ) { cache . buf [ cache . pos ] = value cache . pos ++ if cache . pos == CacheSize { c <- cache . buf cache . pos = 0 } } This technique is not limited to channels. It can be used to batch updates to a map, batch allocations, etc. Use sync.Pool for freelists instead of chan-based or mutex-protected freelists. sync.Pool uses smart techniques internally to reduce blocking.","title":"Blocking Profiler"},{"location":"Performance/#goroutine-profiler","text":"The goroutine profiler simply gives you current stacks of all live goroutines in the process. It can be handy to debug load balancing issues (see Scheduler Trace section below), or to debug deadlocks. The profile makes sense only for a running app, so go test does not expose it. You can collect the profile with net/http/pprof via http://myserver:6060:/debug/pprof/goroutine , and visualize it to svg/pdf or by calling runtime/pprof.Lookup(\"goroutine\").WriteTo . But the most useful way is to type http://myserver:6060:/debug/pprof/goroutine?debug=2 in your browser, which will give you symbolized stacks similar to what you see when a program crashes. Note that goroutines in \"syscall\" state consume an OS thread, other goroutines do not (except for goroutines that called runtime.LockOSThread, which is, unfortunately, not visible in the profile). Note that goroutines in \"IO wait\" state also do not consume threads, they are parked on non-blocking network poller (which uses epoll/kqueue/GetQueuedCompletionStatus to unpark goroutines later).","title":"Goroutine Profiler"},{"location":"Performance/#garbage-collector-trace","text":"Aside from the profiling tools, there is another kind of tools available \u2013 tracers. They allow to trace garbage collections, memory allocator and goroutine scheduler state. To enable the garbage collector (GC) trace, run the program with GODEBUG=gctrace=1 environment variable: $ GODEBUG = gctrace = 1 ./myserver Then the program will print output similar to the following during execution: gc9 ( 2 ) : 12 + 1 + 744 + 8 us , 2 -> 10 MB , 108615 ( 593983 - 485368 ) objects , 4825 / 3620 / 0 sweeps , 0 ( 0 ) handoff , 6 ( 91 ) steal , 16 / 1 / 0 yields gc10 ( 2 ) : 12 + 6769 + 767 + 3 us , 1 -> 1 MB , 4222 ( 593983 - 589761 ) objects , 4825 / 0 / 1898 sweeps , 0 ( 0 ) handoff , 6 ( 93 ) steal , 16 / 10 / 2 yields gc11 ( 2 ) : 799 + 3 + 2050 + 3 us , 1 -> 69 MB , 831819 ( 1484009 - 652190 ) objects , 4825 / 691 / 0 sweeps , 0 ( 0 ) handoff , 5 ( 105 ) steal , 16 / 1 / 0 yields Let's consider the meaning of these numbers. One line per GC is printed. The first number (\"gc9\") is the number of GC (this is the 9-th GC since program start). The number in parens (\"(2)\") is the number of worker threads participated in the GC. The next 4 numbers (\"12+1+744+8 us\") mean stop-the-world, sweeping, marking and waiting for worker threads to finish, in microseconds, respectively. The next 2 numbers (\"2 -> 10 MB\") mean size of live heap after the previous GC and full heap size (including garbage) before the current GC. The next 3 numbers (\"108615 (593983-485368) objects\") are total number of objects in heap (including garbage) and total number of memory allocation and free operations. The next 3 numbers (\"4825/3620/0 sweeps\") characterize sweep phase (of the previous GC): there were total 4825 memory spans, 3620 were swept on demand or in background, 0 were swept during stop-the-world phase (the rest were unused spans). The next 4 numbers (\"0(0) handoff, 6(91) steal\") characterize load balancing during parallel mark phase: there were 0 object handoff operations (0 objects were handoff), and 6 steal operations (91 objects were stolen). The last 3 numbers (\"16/1/0 yields\") characterize effectiveness of parallel mark phase: there were total of 17 yield operations during waiting for another thread. The GC is mark-and-sweep type . Total GC can be expressed as: Tgc = Tseq + Tmark + Tsweep where Tseq is time to stop user goroutines and some preparation activities (usually small); Tmark is heap marking time, marking happens when all user goroutines are stopped, and thus can significantly affect latency of processing; Tsweep is heap sweeping time, sweeping generally happens concurrently with normal program execution, and so is not so critical for latency. Marking time can be approximately expressed as: Tmark = C1*Nlive + C2*MEMlive_ptr + C3*Nlive_ptr where Nlive is the number of live objects in the heap during GC, MEMlive_ptr is the amount of memory occupied by live objects with pointers, Nlive_ptr is the number of pointers in live objects. Sweeping time can be approximately expressed as: Tsweep = C4*MEMtotal + C5*MEMgarbage where MEMtotal is the total amount of heap memory, MEMgarbage is the amount of garbage in the heap. Next GC happens after the program has allocated an extra amount of memory proportional to the amount already in use. The proportion is controlled by GOGC environment variable (100 by default). If GOGC=100 and the program is using 4M of heap memory, runtime will trigger GC again when the program gets to 8M. This keeps the GC cost in linear proportion to the allocation cost. Adjusting GOGC changes the linear constant and also the amount of extra memory used. Only sweeping depends on total size of the heap, and sweeping happens concurrently with normal program execution. So it can make sense to set GOGC to a higher value (200, 300, 500, etc) if you can afford extra memory consumption. For example, GOGC=300 can reduce garbage collection overhead by up to 2 times while keeping latencies the same (at the cost of 2 times larger heap). GC is parallel and generally scales well with hardware parallelism. So it can make sense to set GOMAXPROCS to higher value even for sequential programs just to speed up garbage collections. However, note that number of garbage collector threads is currently bounded by 8.","title":"Garbage Collector Trace"},{"location":"Performance/#memory-allocator-trace","text":"Memory allocator traces simply dumps all memory allocation and free operations onto console. It's enabled with GODEBUG=allocfreetrace=1 environment variable. The output looks along the lines of: tracealloc ( 0xc208062500 , 0x100 , array of parse . Node ) goroutine 16 [ running ] : runtime . mallocgc ( 0x100 , 0x3eb7c1 , 0x0 ) runtime / malloc . goc : 190 + 0x145 fp = 0xc2080b39f8 runtime . growslice ( 0x31f840 , 0xc208060700 , 0x8 , 0x8 , 0x1 , 0x0 , 0x0 , 0x0 ) runtime / slice . goc : 76 + 0xbb fp = 0xc2080b3a90 text / template / parse .( * Tree ). parse ( 0xc2080820e0 , 0xc208023620 , 0x0 , 0x0 ) text / template / parse / parse . go : 289 + 0x549 fp = 0xc2080b3c50 ... tracefree ( 0xc208002d80 , 0x120 ) goroutine 16 [ running ] : runtime . MSpan_Sweep ( 0x73b080 ) runtime / mgc0 . c : 1880 + 0x514 fp = 0xc20804b8f0 runtime . MCentral_CacheSpan ( 0x69c858 ) runtime / mcentral . c : 48 + 0x2b5 fp = 0xc20804b920 runtime . MCache_Refill ( 0x737000 , 0xc200000012 ) runtime / mcache . c : 78 + 0x119 fp = 0xc20804b950 ... The trace contains address of the memory block, size, type, goroutine id and the stack trace. It's probably more useful for debugging, but can give very fine-grained info for allocation optimizations as well.","title":"Memory Allocator Trace"},{"location":"Performance/#scheduler-trace","text":"Scheduler trace can provide insights into dynamic behavior of the goroutine scheduler and allow to debug load balancing and scalability issues. To enable the scheduler trace trace, run the program with GODEBUG=schedtrace=1000 environment variable (the value means period of output, in ms, in this case it's once per second): $ GODEBUG = schedtrace = 1000 ./myserver Then the program will print output similar to the following during execution: SCHED 1004ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=8 [0 1 0 3] SCHED 2005ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=5 runqueue=6 [1 5 4 0] SCHED 3008ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=10 [2 2 2 1] The first number (\"1004ms\") is time since program start. Gomaxprocs is the current value of GOMAXPROCS. Idleprocs is the number of idling processors (the rest are executing Go code). Threads is the total number of worker threads created by the scheduler (threads can be in 3 states: execute Go code (gomaxprocs-idleprocs), execute syscalls/cgocalls or idle). Idlethreads is the number of idling worker threads. Runqueue is the length of global queue with runnable goroutines. The numbers in square brackets (\"[0 1 0 3]\") are lengths of per-processor queues with runnable goroutines. Sum of lengths of global and local queues represents the total number of goroutines available for execution. Note: You can combine any of the tracers as GODEBUG=gctrace=1,allocfreetrace=1,schedtrace=1000. Note: There is also detailed scheduler trace, which you can enable with GODEBUG=schedtrace=1000,scheddetail=1. It prints detailed info about every goroutine, worker thread and processor. We won't describe its format here as it's mainly useful for scheduler developers; but you can find details in src/pkg/runtime/proc.c . The scheduler trace is useful when a program does not scale linearly with GOMAXPROCS and/or does not consume 100% of CPU time. The ideal situation is when all processors are busy executing Go code, number of threads is reasonable, there is plenty of work in all queues and the work is reasonably evenly distributed: gomaxprocs=8 idleprocs=0 threads=40 idlethreads=5 runqueue=10 [20 20 20 20 20 20 20 20] A bad situation is when something of the above does not hold. For example the following sample demonstrates shortage of work to keep all processors busy: gomaxprocs=8 idleprocs=6 threads=40 idlethreads=30 runqueue=0 [0 2 0 0 0 1 0 0] Note: use OS-provided means to measure actual CPU utilization as the ultimate characteristic. On Unix family of operating system it is top command; on Windows it is Task Manager. You can use the goroutine profiler to understand where goroutines block in the case of work shortage. Note that load imbalance is not ultimately bad as long as all processors are busy, it will just cause some moderate load balancing overheads.","title":"Scheduler Trace"},{"location":"Performance/#memory-statistics","text":"Go runtime exposes coarse-grained memory statistics via runtime.ReadMemStats function. The statistics are also exposed via net/http/pprof at the bottom of http://myserver:6060/debug/pprof/heap?debug=1 . The statistics are described here . Some of the interesting fields are: HeapAlloc - current heap size. HeapSys - total heap size. HeapObjects - total number of objects in the heap. HeapReleased - amount of memory released to the OS; runtime releases to the OS memory unused for 5 minutes, you can force this process with runtime/debug.FreeOSMemory. Sys - total amount of memory allocated from OS. Sys-HeapReleased - effective memory consumption of the program. StackSys - memory consumed for goroutine stacks (note that some stacks are allocated from heap and are not accounted here, unfortunately there is no way to get total size of stacks ( https://code.google.com/p/go/issues/detail?id=7468 )). MSpanSys/MCacheSys/BuckHashSys/GCSys/OtherSys - amount of memory allocated by runtime for various auxiliary purposes; they are generally not interesting, unless they are too high. PauseNs - durations of last garbage collections.","title":"Memory Statistics"},{"location":"Performance/#heap-dumper","text":"The last available tool is heap dumper, it can write state of the whole heap into a file for future exploration. It can be useful for identifying memory leaks and getting insights into program memory consumption. First, you need to write the dump using runtime/debug.WriteHeapDump function: f , err : = os . Create ( \" heapdump \" ) if err != nil { ... } debug . WriteHeapDump ( f . Fd ()) Then you can either render it to a dot file with graphical representation of the heap or convert it to hprof format. To render it to a dot file: $ go get github.com/randall77/hprof/dumptodot $ dumptodot heapdump mybinary > heap.dot and open heap.dot with Graphviz. To convert it to hprof format: $ go get github.com/randall77/hprof/dumptohprof $ dumptohprof heapdump heap.hprof $ jhat heap.hprof and navigate your browser to http://myserver:7000 .","title":"Heap Dumper"},{"location":"Performance/#concluding-remarks","text":"Optimization is an open problem, there are simple recipes that you can use to improve performance. Sometimes optimization requires complete re-architecture of the program. But we hope that the tools will be a valuable addition to your toolbox, that you can use to at least analyze and understand what happens. Profiling Go Programs is a good tutorial on usage of CPU and memory profilers to optimize a simple program.","title":"Concluding Remarks"},{"location":"Plan9/","text":"Introduction An experimental port of Go is available for the Plan 9 from Bell Labs operating system. Supported architectures The Plan 9 port of Go is available for the following architectures: 386 amd64 arm Supported kernels The current Go distribution has been tested successfully on: Plan 9 from Bell Labs (386 and arm) kernel 9front amd64 kernel Bell Labs 9k (amd64) kernel Requirements Go on Plan 9 requires a kernel providing the following system calls: tsemacquire (available since 2012-06-30 ) nsec (available since 2014-05-15 ) A fix to the pread system call is required, so pread will not update the channel offset when reading a file: 9-pread-offset The TCP connection control file must handle the \"close\" message to be able close a TCP connection gracefully, while waking up the readers: 9-tcp-close A fix to Fossil is required to increment Qid.vers after a wstat, so a truncate followed by a read will return the content of the new file instead of the cached content. fossil-wstat-qid You will need support for SHA-2 signatures in X.509 certificates, so you could download sources from repositories hosted on GoogleSource, GitHub and so on. libsec-x509-sha2 If you're running Plan 9 on Raspberry Pi, you'll require the latest bcm kernel from Richard Miller. CA certificates for crypto/x509 package needs to be installed at /sys/lib/tls/ca.pem . You can download it from https://curl.haxx.se/ca/cacert.pem or copy from another system. For 9front, you may need to configure loopback addresses for standard library tests: ip/ipconfig -P loopback /dev/null 127.1 ip/ipconfig -P loopback /dev/null ::1 Installation Since Go is written in Go, you may want to bootstrap Go with Go 1.4.3, which is the latest release of Go written in C. However, since the Go 1.4 runtime wasn't mature enough on Plan 9, we recommend you to bootstrap from a more recent version of Go, using another operating system. Bootstrapping from Plan 9 First, install Go 1.4: cd /tmp git clone -b go1.4.3 https://go.googlesource.com/go go1.4 cd go1.4/src hget http://9legacy.org/go/patch/syscall-exec.diff | ape/patch -p2 make.rc The syscall-exec patch is required if you're running a machine with SMP enabled. Then, set the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/go1.4 Finally, install the latest version of Go: cd /tmp git clone https://go.googlesource.com/go cd go/src all.rc bind -a /tmp/go/bin /bin Go is now ready to use. Bootstrapping from another operating system First, you must have installed Go on this operating system, following the Go installation instructions . Then, you can cross-compile a Go toolchain for Plan 9: cd $GOROOT/src GOOS=plan9 GOARCH=386 ./bootstrap.bash Then, the bootstrap toolchain will be available in ../../go-plan9-386-bootstrap.tbz . Finally, you can extract this archive to your Plan 9 machine. For example: cd /tmp tar xzf go-plan9-386-bootstrap.tbz bind -a /tmp/go-plan9-386-bootstrap/bin /bin Go is now ready to use. You'll be able to use this installation of Go to bootstrap future Go releases, by setting the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/go-plan9-386-bootstrap Bootstraping from binaries A binary package for plan9/386 is available. This binary package is used to bootstrap Go on the plan9/386 builder. cd /tmp hget -o gobootstrap-plan9-386.tar.gz https://storage.googleapis.com/go-builder-data/gobootstrap-plan9-386.tar.gz mkdir gobootstrap-plan9-386 cd gobootstrap-plan9-386 tar xzf ../gobootstrap-plan9-386.tar.gz You'll be able to use this binary package of Go to bootstrap Go, by setting the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/gobootstrap-plan9-386 Other binary packages are available here and here . Git Git is not available on Plan 9. However a Git wrapper is available as a simple rc script. It includes everything you need to use the go tool. Builders Three Plan 9 builders are currently running and reporting the results to the Go Dashboard : plan9-386 is running Plan 9 from Bell Labs (386 kernel) on a virtual machine plan9-amd64-9front is running Plan 9 from Bell Labs (amd64 kernel) on a virtual machine plan9-arm is running Plan 9 from Bell Labs (arm kernel) on a Raspberry Pi 3 Status The Plan 9 port of Go is considered experimental and is still a work-in-progress. There is a number of known issues available on the Go issue tracker . Issues Many issues are currently open on the Go issue tracker with the OS-Plan9 label. Help The Plan 9 port of Go is a community-driven port. Any help to improve the Go port on Plan 9 would be highly appreciated. Maintainer Many people have contributed to the Plan 9 port of Go. Since December 2013, the Plan 9 port of Go is maintained by David du Colombier .","title":"Plan9"},{"location":"Plan9/#introduction","text":"An experimental port of Go is available for the Plan 9 from Bell Labs operating system.","title":"Introduction"},{"location":"Plan9/#supported-architectures","text":"The Plan 9 port of Go is available for the following architectures: 386 amd64 arm","title":"Supported architectures"},{"location":"Plan9/#supported-kernels","text":"The current Go distribution has been tested successfully on: Plan 9 from Bell Labs (386 and arm) kernel 9front amd64 kernel Bell Labs 9k (amd64) kernel","title":"Supported kernels"},{"location":"Plan9/#requirements","text":"Go on Plan 9 requires a kernel providing the following system calls: tsemacquire (available since 2012-06-30 ) nsec (available since 2014-05-15 ) A fix to the pread system call is required, so pread will not update the channel offset when reading a file: 9-pread-offset The TCP connection control file must handle the \"close\" message to be able close a TCP connection gracefully, while waking up the readers: 9-tcp-close A fix to Fossil is required to increment Qid.vers after a wstat, so a truncate followed by a read will return the content of the new file instead of the cached content. fossil-wstat-qid You will need support for SHA-2 signatures in X.509 certificates, so you could download sources from repositories hosted on GoogleSource, GitHub and so on. libsec-x509-sha2 If you're running Plan 9 on Raspberry Pi, you'll require the latest bcm kernel from Richard Miller. CA certificates for crypto/x509 package needs to be installed at /sys/lib/tls/ca.pem . You can download it from https://curl.haxx.se/ca/cacert.pem or copy from another system. For 9front, you may need to configure loopback addresses for standard library tests: ip/ipconfig -P loopback /dev/null 127.1 ip/ipconfig -P loopback /dev/null ::1","title":"Requirements"},{"location":"Plan9/#installation","text":"Since Go is written in Go, you may want to bootstrap Go with Go 1.4.3, which is the latest release of Go written in C. However, since the Go 1.4 runtime wasn't mature enough on Plan 9, we recommend you to bootstrap from a more recent version of Go, using another operating system.","title":"Installation"},{"location":"Plan9/#bootstrapping-from-plan-9","text":"First, install Go 1.4: cd /tmp git clone -b go1.4.3 https://go.googlesource.com/go go1.4 cd go1.4/src hget http://9legacy.org/go/patch/syscall-exec.diff | ape/patch -p2 make.rc The syscall-exec patch is required if you're running a machine with SMP enabled. Then, set the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/go1.4 Finally, install the latest version of Go: cd /tmp git clone https://go.googlesource.com/go cd go/src all.rc bind -a /tmp/go/bin /bin Go is now ready to use.","title":"Bootstrapping from Plan 9"},{"location":"Plan9/#bootstrapping-from-another-operating-system","text":"First, you must have installed Go on this operating system, following the Go installation instructions . Then, you can cross-compile a Go toolchain for Plan 9: cd $GOROOT/src GOOS=plan9 GOARCH=386 ./bootstrap.bash Then, the bootstrap toolchain will be available in ../../go-plan9-386-bootstrap.tbz . Finally, you can extract this archive to your Plan 9 machine. For example: cd /tmp tar xzf go-plan9-386-bootstrap.tbz bind -a /tmp/go-plan9-386-bootstrap/bin /bin Go is now ready to use. You'll be able to use this installation of Go to bootstrap future Go releases, by setting the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/go-plan9-386-bootstrap","title":"Bootstrapping from another operating system"},{"location":"Plan9/#bootstraping-from-binaries","text":"A binary package for plan9/386 is available. This binary package is used to bootstrap Go on the plan9/386 builder. cd /tmp hget -o gobootstrap-plan9-386.tar.gz https://storage.googleapis.com/go-builder-data/gobootstrap-plan9-386.tar.gz mkdir gobootstrap-plan9-386 cd gobootstrap-plan9-386 tar xzf ../gobootstrap-plan9-386.tar.gz You'll be able to use this binary package of Go to bootstrap Go, by setting the GOROOT_BOOTSTRAP environment variable: GOROOT_BOOTSTRAP=/tmp/gobootstrap-plan9-386 Other binary packages are available here and here .","title":"Bootstraping from binaries"},{"location":"Plan9/#git","text":"Git is not available on Plan 9. However a Git wrapper is available as a simple rc script. It includes everything you need to use the go tool.","title":"Git"},{"location":"Plan9/#builders","text":"Three Plan 9 builders are currently running and reporting the results to the Go Dashboard : plan9-386 is running Plan 9 from Bell Labs (386 kernel) on a virtual machine plan9-amd64-9front is running Plan 9 from Bell Labs (amd64 kernel) on a virtual machine plan9-arm is running Plan 9 from Bell Labs (arm kernel) on a Raspberry Pi 3","title":"Builders"},{"location":"Plan9/#status","text":"The Plan 9 port of Go is considered experimental and is still a work-in-progress. There is a number of known issues available on the Go issue tracker .","title":"Status"},{"location":"Plan9/#issues","text":"Many issues are currently open on the Go issue tracker with the OS-Plan9 label.","title":"Issues"},{"location":"Plan9/#help","text":"The Plan 9 port of Go is a community-driven port. Any help to improve the Go port on Plan 9 would be highly appreciated.","title":"Help"},{"location":"Plan9/#maintainer","text":"Many people have contributed to the Plan 9 port of Go. Since December 2013, the Plan 9 port of Go is maintained by David du Colombier .","title":"Maintainer"},{"location":"Podcasts/","text":"Active podcast shows Go Time - Erik St. Martin, Carlisia Campos, Brian Ketelsen, recorded weekly and streamed live at 3PM EST at http://changelog.com/live GoFr \u2013 by Arnaud Assad, Sebastien Friess, Thomas Perez, Lucille Tachet in French. Inactive podcast shows GolangShow \u2013 Weekly podcast since June 2015, in English and Russian languages. Go Gab - A podcast about everything Go. Episodes are short: about 3 minutes each. Podcast episodes A collection of podcast episodes that cover Go programming. Please keep items in reverse chronological order (most recent first) * Working in the Go ecosystem - Dot Tech by Form3 2021-02-19 * Making an Open Source Go project a full time job - Dot Tech by Form3 2020-11-25 * How and why you should move to Go - Dot Tech by Form3 2020-11-03 * The Go Language - Hipsters #67 ( in portuguese ) 2017-10-24 * The Go Programming Language 2 - Cast\u00e1lio Podcast #87 ( in portuguese ) 2017-02-13 * The Go Programming Language 1 - Cast\u00e1lio Podcast #86 ( in portuguese ) 2017-02-06 * Little chat about Go Lang ( in portuguese ) 2016-03-27 * Programming in Go with Michael Van Sickle 2015-10-13 * Go on the Web 2015-08-05 * Fatherhood with Andrew Gerrand 2015-05-15 * Talking with Go Developers at GopherCon India 2015 2015-04-01 * Interview with CC4CS talking about Security in Go 2015-03-06 * Golang Best Practices 2014-09-08 * An Introduction to the Go Programming Language with Andrew Gerrand 2014-03-28 * FLOSS Weekly #284: The Go Language 2014-02-19 * Series: The Go Language - GrokPodcast ( in portuguese ) 2013-07-17","title":"Podcasts"},{"location":"Podcasts/#active-podcast-shows","text":"Go Time - Erik St. Martin, Carlisia Campos, Brian Ketelsen, recorded weekly and streamed live at 3PM EST at http://changelog.com/live GoFr \u2013 by Arnaud Assad, Sebastien Friess, Thomas Perez, Lucille Tachet in French.","title":"Active podcast shows"},{"location":"Podcasts/#inactive-podcast-shows","text":"GolangShow \u2013 Weekly podcast since June 2015, in English and Russian languages. Go Gab - A podcast about everything Go. Episodes are short: about 3 minutes each.","title":"Inactive podcast shows"},{"location":"Podcasts/#podcast-episodes","text":"A collection of podcast episodes that cover Go programming. Please keep items in reverse chronological order (most recent first) * Working in the Go ecosystem - Dot Tech by Form3 2021-02-19 * Making an Open Source Go project a full time job - Dot Tech by Form3 2020-11-25 * How and why you should move to Go - Dot Tech by Form3 2020-11-03 * The Go Language - Hipsters #67 ( in portuguese ) 2017-10-24 * The Go Programming Language 2 - Cast\u00e1lio Podcast #87 ( in portuguese ) 2017-02-13 * The Go Programming Language 1 - Cast\u00e1lio Podcast #86 ( in portuguese ) 2017-02-06 * Little chat about Go Lang ( in portuguese ) 2016-03-27 * Programming in Go with Michael Van Sickle 2015-10-13 * Go on the Web 2015-08-05 * Fatherhood with Andrew Gerrand 2015-05-15 * Talking with Go Developers at GopherCon India 2015 2015-04-01 * Interview with CC4CS talking about Security in Go 2015-03-06 * Golang Best Practices 2014-09-08 * An Introduction to the Go Programming Language with Andrew Gerrand 2014-03-28 * FLOSS Weekly #284: The Go Language 2014-02-19 * Series: The Go Language - GrokPodcast ( in portuguese ) 2013-07-17","title":"Podcast episodes"},{"location":"PortingPolicy/","text":"Introduction This document is about the policy for adding a new port to the main Go repository. By port we mean an operating system + architecture combination, such as linux/386. The goal of this policy is to avoid the accumulation of incomplete or broken ports. Requirements for a new port Before any code relating to a port can be added to the main Go repository, the following must all be done: A proposal must be filed and accepted in which the Go team accepts overall responsibility for having the new port in the core Go tree. In general, each new port carries an upkeep cost separate from the direct maintenance. That cost varies by port, depending on how similar a new port is to existing ones. The cost must be balanced by an overall benefit in the form of potential new users or use cases for Go. At least one developer must be named (and agree) to maintain the port, by making required updates in a timely manner as architecture or operating system requirements change. A developer must be named (and agree) to maintain the builder, the machine trying each git revision and providing data for https://build.golang.org . The builder must already be running (and failing, because the code is not yet in the main repository). All CLs necessary to run all.bash successfully must have been sent for review. Typically this will be a handful of CLs split by the part of the tree they change. Once those conditions are satisfied, the Go team can accept the port and begin to merge the CLs. Once the CLs are all submitted, all.bash must pass, so that the builder reports \"ok\" in the dashboard. Any port started during a release cycle must be finished (all.bash passing, builder reporting \"ok\") before the corresponding release freeze, or else the code will be removed at the freeze. Other repositories Although it is not part of the core repository, the x/sys repository should add support for the new port before the release happens because it is the official place to add new system calls. First class ports Some ports are considered \"first class\". The distinction is mostly about releases and distribution. A first class port has these properties: Broken builds block releases All contributors are effectively responsible for these ports (You break it, you fix it, or find someone who can.) Official binaries are provided Requires Google's Go team to own the builder machine Installation is documented at https://golang.org/doc/install Graduating a port to \"first class\" is at the discretion of the Go team at Google. The current first class ports are: darwin/amd64 darwin/arm64 linux/386 linux/amd64 linux/arm linux/arm64 windows/386 windows/amd64 We distribute binaries for other GOOS/GOARCH pairs (other \"ports\"), but they are not \"first class\" by this definition. Removing a port If a builder for a particular port starts failing, the code should be corrected as soon as possible; otherwise future regressions cannot be detected, and the amount of work required to bring the builder back to \"ok\" compounds. Ultimately the job of making the port work again falls to the developer maintaining the port, although simple cases (such as +build lines in new code) can and should be fixed by others. If a builder fails for more than two weeks, it is time to start looking for a more active maintainer for the port. If a builder fails for more than four weeks or is failing at the time of a release freeze, and a new maintainer cannot be found, the port will be removed from the tree. Due to backwards compatibility concerns, removing a formerly working port should be a last resort. Finding a new maintainer is always preferable. Getting started See https://groups.google.com/forum/#!topic/golang-dev/SRUK7yJVA0c for some discussion on how to go about writing a new port. Comments and Questions Comments or questions about the policy should be sent to golang-dev.","title":"PortingPolicy"},{"location":"PortingPolicy/#introduction","text":"This document is about the policy for adding a new port to the main Go repository. By port we mean an operating system + architecture combination, such as linux/386. The goal of this policy is to avoid the accumulation of incomplete or broken ports.","title":"Introduction"},{"location":"PortingPolicy/#requirements-for-a-new-port","text":"Before any code relating to a port can be added to the main Go repository, the following must all be done: A proposal must be filed and accepted in which the Go team accepts overall responsibility for having the new port in the core Go tree. In general, each new port carries an upkeep cost separate from the direct maintenance. That cost varies by port, depending on how similar a new port is to existing ones. The cost must be balanced by an overall benefit in the form of potential new users or use cases for Go. At least one developer must be named (and agree) to maintain the port, by making required updates in a timely manner as architecture or operating system requirements change. A developer must be named (and agree) to maintain the builder, the machine trying each git revision and providing data for https://build.golang.org . The builder must already be running (and failing, because the code is not yet in the main repository). All CLs necessary to run all.bash successfully must have been sent for review. Typically this will be a handful of CLs split by the part of the tree they change. Once those conditions are satisfied, the Go team can accept the port and begin to merge the CLs. Once the CLs are all submitted, all.bash must pass, so that the builder reports \"ok\" in the dashboard. Any port started during a release cycle must be finished (all.bash passing, builder reporting \"ok\") before the corresponding release freeze, or else the code will be removed at the freeze.","title":"Requirements for a new port"},{"location":"PortingPolicy/#other-repositories","text":"Although it is not part of the core repository, the x/sys repository should add support for the new port before the release happens because it is the official place to add new system calls.","title":"Other repositories"},{"location":"PortingPolicy/#first-class-ports","text":"Some ports are considered \"first class\". The distinction is mostly about releases and distribution. A first class port has these properties: Broken builds block releases All contributors are effectively responsible for these ports (You break it, you fix it, or find someone who can.) Official binaries are provided Requires Google's Go team to own the builder machine Installation is documented at https://golang.org/doc/install Graduating a port to \"first class\" is at the discretion of the Go team at Google. The current first class ports are: darwin/amd64 darwin/arm64 linux/386 linux/amd64 linux/arm linux/arm64 windows/386 windows/amd64 We distribute binaries for other GOOS/GOARCH pairs (other \"ports\"), but they are not \"first class\" by this definition.","title":"First class ports"},{"location":"PortingPolicy/#removing-a-port","text":"If a builder for a particular port starts failing, the code should be corrected as soon as possible; otherwise future regressions cannot be detected, and the amount of work required to bring the builder back to \"ok\" compounds. Ultimately the job of making the port work again falls to the developer maintaining the port, although simple cases (such as +build lines in new code) can and should be fixed by others. If a builder fails for more than two weeks, it is time to start looking for a more active maintainer for the port. If a builder fails for more than four weeks or is failing at the time of a release freeze, and a new maintainer cannot be found, the port will be removed from the tree. Due to backwards compatibility concerns, removing a formerly working port should be a last resort. Finding a new maintainer is always preferable.","title":"Removing a port"},{"location":"PortingPolicy/#getting-started","text":"See https://groups.google.com/forum/#!topic/golang-dev/SRUK7yJVA0c for some discussion on how to go about writing a new port.","title":"Getting started"},{"location":"PortingPolicy/#comments-and-questions","text":"Comments or questions about the policy should be sent to golang-dev.","title":"Comments and Questions"},{"location":"PriorDiscussion/","text":"Prior Discussion Background This page links to prior discussion on various topics. The page complements the official FAQ . While the official FAQ contains things which are frequently asked and contains answers, this page contains things that have been repeatedly asked, but maybe not frequently, and only needs to link to one or more previous threads. Over time, these entries may graduate to entries in the official FAQ. Editors: When editing this page, please don't change the titles of sections, as that breaks the #anchors in URLs. You can rearrange, though. Feel free to add entries at will. There is no requirement for code or English review here. Asked Questions & Prior Discussion Panics on sends or closes of closed channel See https://github.com/golang/go/issues/11344#issuecomment-117862884 Thread-local, Goroutine-local storage TODO Add explicit int-to-bool conversions Rejected, see https://github.com/golang/go/issues/9367#issuecomment-143128337 Add mechanism to silence vet warnings Rejected, see discussion in golang/go#17058 Add vet warning for unused function arguments Rejected, see https://github.com/golang/go/issues/7892#issuecomment-66094282 Make go get more verbose / add a progress bar Rejected, see golang/go#17959 https://github.com/golang/go/issues/18388#issuecomment-268315634 Shorten error handling / return sugar Rejected, see golang/go#16225 Support symlinks in go toolchain / environment variables Rejected, see golang/go#15507 Make unused imports/variables a warning, not an error Rejected. Add warnings to the Go compiler Experience in large projects has shown that warnings pile up until people ignore all warnings, so warnings only add noise and no value (or are actively harmful in that they hide bugs). See https://golang.org/doc/faq#unused_variables_and_imports Weak references Unlikely to be added. See discussion at https://groups.google.com/forum/#!topic/golang-nuts/PYWxjT2v6ps , and https://groups.google.com/forum/?pli=1#!topic/golang-nuts/MMWXRANh0-g which points out that sync.Pool is a specific form of weak reference.","title":"PriorDiscussion"},{"location":"PriorDiscussion/#prior-discussion","text":"","title":"Prior Discussion"},{"location":"PriorDiscussion/#background","text":"This page links to prior discussion on various topics. The page complements the official FAQ . While the official FAQ contains things which are frequently asked and contains answers, this page contains things that have been repeatedly asked, but maybe not frequently, and only needs to link to one or more previous threads. Over time, these entries may graduate to entries in the official FAQ. Editors: When editing this page, please don't change the titles of sections, as that breaks the #anchors in URLs. You can rearrange, though. Feel free to add entries at will. There is no requirement for code or English review here.","title":"Background"},{"location":"PriorDiscussion/#asked-questions--prior-discussion","text":"","title":"Asked Questions &amp; Prior Discussion"},{"location":"PriorDiscussion/#panics-on-sends-or-closes-of-closed-channel","text":"See https://github.com/golang/go/issues/11344#issuecomment-117862884","title":"Panics on sends or closes of closed channel"},{"location":"PriorDiscussion/#thread-local-goroutine-local-storage","text":"TODO","title":"Thread-local, Goroutine-local storage"},{"location":"PriorDiscussion/#add-explicit-int-to-bool-conversions","text":"Rejected, see https://github.com/golang/go/issues/9367#issuecomment-143128337","title":"Add explicit int-to-bool conversions"},{"location":"PriorDiscussion/#add-mechanism-to-silence-vet-warnings","text":"Rejected, see discussion in golang/go#17058","title":"Add mechanism to silence vet warnings"},{"location":"PriorDiscussion/#add-vet-warning-for-unused-function-arguments","text":"Rejected, see https://github.com/golang/go/issues/7892#issuecomment-66094282","title":"Add vet warning for unused function arguments"},{"location":"PriorDiscussion/#make-go-get-more-verbose--add-a-progress-bar","text":"Rejected, see golang/go#17959 https://github.com/golang/go/issues/18388#issuecomment-268315634","title":"Make go get more verbose / add a progress bar"},{"location":"PriorDiscussion/#shorten-error-handling--return-sugar","text":"Rejected, see golang/go#16225","title":"Shorten error handling / return sugar"},{"location":"PriorDiscussion/#support-symlinks-in-go-toolchain--environment-variables","text":"Rejected, see golang/go#15507","title":"Support symlinks in go toolchain / environment variables"},{"location":"PriorDiscussion/#make-unused-importsvariables-a-warning-not-an-error","text":"Rejected.","title":"Make unused imports/variables a warning, not an error"},{"location":"PriorDiscussion/#add-warnings-to-the-go-compiler","text":"Experience in large projects has shown that warnings pile up until people ignore all warnings, so warnings only add noise and no value (or are actively harmful in that they hide bugs). See https://golang.org/doc/faq#unused_variables_and_imports","title":"Add warnings to the Go compiler"},{"location":"PriorDiscussion/#weak-references","text":"Unlikely to be added. See discussion at https://groups.google.com/forum/#!topic/golang-nuts/PYWxjT2v6ps , and https://groups.google.com/forum/?pli=1#!topic/golang-nuts/MMWXRANh0-g which points out that sync.Pool is a specific form of weak reference.","title":"Weak references"},{"location":"Projects/","text":"Indexes and search engines These sites provide indexes and search engines for Go packages: Awesome Go @LibHunt - Your go-to Go Toolbox. godoc.org - A documentation browser for any Go open source package. go-hardware - Curated list of resources for using Go on non-standard hardware. go-patterns - Commonly used patterns and idioms for Go. go-search - Search engine dedicated to Go projects and source. gowalker - API documentation generator and search. Go Report Card - Code quality summaries for any Go project. Sourcegraph - Source indexing, analysis and search. Codeseek.com - Custom search engine with a wealth of Go blogs. Dead projects If you find a project in this list that is dead or broken, please either mark it as such or mention it in the #go-nuts IRC channel. Table of Contents API Services and Tools Astronomy Build Tools Caching Cloud Computing Command-line Option Parsers Command-line Tools Compression Concurrency and Goroutines Configuration File Parsers Console User Interface Continuous Integration Cryptocurrency Cryptography Databases Data Processing Data Structures Date Development Tools Distributed/Grid Computing Documentation Editors Email Encodings and Character Sets Error handling File Systems Games GIS Go Implementations Graphics and Audio GUIs and Widget Toolkits Hardware Language and Linguistics Logging & Monitoring Machine Learning & AI Mathematics Microservices Miscellaneous Music Networking DNS FTP HTTP IMAP Instant Messaging NNTP Protocol Buffers rsync Telnet VNC Websockets ZeroMQ Misc Networking Operating System Interfaces Other Random Toys, Experiments and Example Code P2P and File Sharing Programming Resource Embedding RPC Scanner and Parser Generators Security Simulation Modeling Sorting Source Code Management Storage Strings and Text Testing Transpiler Unix Unsorted Validation Version Control Virtual Machines and Languages Web Applications Web Libraries Windows API Services and Tools GraphQL GraphJin - Instant GraphQL API for Postgres. No code needed, compiles GraphQL to SQL. MTProto MTProto - Full-native implementation of Telegram API written on pure Go. Astronomy go-fits - FITS (Flexible Image Transport System) format image and data reader astrogo/fitsio - Pure Go FITS (Flexible Image Transport System) format image and data reader/writer cosmo - Cosmological distance and time calculations for common cosmologies (Friedmann-Lema\u00eetre-Robertson-Walker metric). gonova - A wrapper for libnova \u2013 Celestial Mechanics, Astrometry and Astrodynamics Library meeus - Implementation of \"Astronomical Algorithms\" by Jean Meeus novas - Interface to the Naval Observatory Vector Astrometry Software (NOVAS) utdfgo - Spacecraft UTDF Packet Reader and Decoder Build Tools beku - A library and program to manage packages in user's environment (GOPATH or vendor directory) colorgo - Colorize go build output dogo - Monitoring changes in the source file and automatically compile and run (restart) fileembed-go - This is a command-line utility to take a number of source files, and embed them into a Go package gb - A(nother) build tool for go, with an emphasis on multi-package projects gg - A tiny multi golang projects env/make management tool. GG - A build tool for Go in Go godag - A frontend to the Go compiler collection goenv - goenv provides Go version and Go workspace management tools gopei - Simple Go compiler and LiteIDE installer for Unix/Linux that adds many features like github support and presenter. go-pkg-config - lightweight clone of pkg-config goscons - Another set of SCons builders for Go go-server - Agile server framework. gotgo - An experimental preprocessor to implement 'generics' gows - Go workspace manager goxc - A build tool with a focus on cross-compiling, packaging, versioning and distribution GVM - GVM provides an interface to manage Go versions Realize - A Go build system with file watchers, output streams and live reload. Run, build and watch file changes with custom paths. SCons Go Tools - A collection of builders that makes it easy to compile Go projects in SCons Task - A task runner / simple alternative to Make Caching cache2go - Concurrency-safe caching library with expiration capabilities and access counters cache - LevelDB style LRU cache for Go, support non GC object cache. go-cache - An in-memory key:value store/cache (similar to Memcached) library for Go, suitable for single-machine applications golibs/cache - A tiny cache package gomemcached - A memcached server in go gomemcache - a memcached client go-slab - Slab allocator for go. groupcache - Caching and cache-filling library, intended as a replacement for memcached in many cases libmemcache - Fast client and server libraries speaking memcache protocol memcached-bench - Benchmark tool for memcache servers memcached - Fast memcache server, which supports persistence and cache sizes exceeding available RAM memcache - go memcached client, forked from YouTube Vitess rend - A memcached proxy that manages data chunking and L1/L2 caches YBC bindings - Bindings for YBC library providing API for fast in-process blob cache g2cache -A coordinated local and external two-level caching scheme Cloud Computing aws-sdk-go - AWS SDK for the Go programming language. Docker - The Linux container runtime. Developed by dotCloud. Enduro/X ASG Application Server for Go. Provides application server and middleware facilities for distributed transaction processing. Supports microservices based application architecture. Developed by ATR Baltic. flamingo - A Lightweight Cloud Instance Contextualizer. gocircuit - A distributed operating system that sits on top of the traditional OS on multiple machines in a datacenter deployment. It provides a clean and uniform abstraction for treating an entire hardware cluster as a single, monolithic compute resource. Developed by Tumblr. gosync - A package for syncing data to and from S3. juju - Orchestration tool (deployment, configuration and lifecycle management), developed by Canonical. Kubernetes - Container Cluster Manager from Google. LXD Daemon based on liblxc offering a REST API to manage containers mgmt - Next Generation Configuration Management tool (parallel, event driven, distributed system) developed by @purpleidea , (a Red Hat employee) and the mgmt community. rclone - \"rsync for cloud storage\" - Google Drive, Amazon Drive, S3, Dropbox, Backblaze B2, One Drive, Swift, Hubic, Cloudfiles, Google Cloud Storage, Yandex Files ShipBuilder - ShipBuilder is a minimalist open source platform as a service, developed by Jay Taylor. swift - Go language interface to Swift / Openstack Object Storage / Rackspace cloud files Tsuru - Tsuru is an open source polyglot cloud computing platform as a service (PaaS), developed by Globo.com. Command-line Option Parsers argcfg - Use reflection to populate fields in a struct from command line arguments autoflags - Populate go command line app flags from config struct cobra - A commander for modern go CLI interactions supporting commands & POSIX/GNU flags cli - A Go library for implementing command-line interfaces. cmdline - A simple parser with support for short and long options, default values, arguments and subcommands. command - Add subcommands to your CLI, provides help and usage guide. docopt.go - An implementation of docopt in the Go programming language. flaq - Command-line options parsing library, POSIX/GNU compliant, supports struct tags as well as the Go's flag approach. getopt - full featured traditional (BSD/POSIX getopt) option parsing in Go style getopt - Yet Another getopt Library for Go. This one is like Python's. gnuflag - GNU-compatible flag parsing; substantially compatible with flag. go-commander - Simplify the creation of command line interfaces for Go, with commands and sub-commands, with argument checks and contextual usage help. Forked from the \"go\" tool code. go-flags - command line option parser for go go-getoptions - Go option parser inspired on the flexibility of Perl s GetOpt::Long. goopt - a getopt clone to parse command-line flags go-options - A command line parsing library for Go mellium.im/cli A library for parsing modern CLI apps including subcommands that may have their own flags and a built in help system. Designed to use a minimal API. options - Self documenting CLI options parser opts.go - lightweight POSIX- and GNU- style option parsing pflag - Drop-in replacement for Go's flag package, implementing POSIX/GNU-style \u2013flags. subcommands - A concurrent, unit tested, subcommand library uggo - Yet another option parser offering gnu-like option parsing. This one wraps (embeds) flagset. It also offers rudimentary pipe-detection (commands like ls behave differently when being piped to). writ - A flexible option parser with thorough test coverage. It's meant to \"just work\" and stay out of the way. Command-line Tools amqp-message-remover - Removes unwanted messages by regexp pattern from AMQP queue Arduino-cli - Arduino CLI is an all-in-one solution that provides builder, boards/library manager, uploader, discovery and many other tools needed to use any Arduino compatible board and platforms. awless - A Mighty command-line interface for Amazon Web Services (AWS). boilr - A blazing fast CLI tool for creating projects from boilerplate templates. box-cli-maker - Make highly customized Boxes for your CLI. comb-go - A CLI tool implemented by Golang to manage CloudComb resources. coshell - A drop-in replacement for GNU 'parallel'. dasel - Query and update data structures using selectors from the command line. Comparable to jq / yq but supports JSON, YAML, TOML and XML with zero runtime dependencies. DevTodo2 - A small command-line per-project task list manager. dsio - Command line tool for Google Cloud Datastore. efs2 - A dead-simple configuration management tool that is powered by stupid shell scripts. enumeration - Easy enumeration code generation. fzf - A command-line fuzzy finder gich - A cross platform which utility written in Go gister - Manage your github gists from the command-line git-time-metric - Simple, seamless, lightweight time tracking for Git gmail2go - Simple gmail multiple accounts cli mail checker go-amqp-sniffer - Listens from AMQP exchange and streams messages to standard output in mongoimport compatible JSON gocreate - Command line utility that create files from templates. godocdoc - Start godoc and open it in your browser to the project in the current directory. gojson - Command-line tool for manipulating JSON for use in developing Go code. GoNote - Command line SimpleNote client. gopass - Command line password manager with git syncing capabilities GoPasswordCreator - A small tool, which creates random passwords Grozilla - File downloader utility with resume capability. JayDiff - A JSON diff utility written in Go. jsonpp - A fast command line JSON pretty printer. lsp - A human-friendlier alternative to ls ltst - View the latest news of your choosing right in your terminal passhash - Command-line utility to create secure password hashes passman - A command-line password manager pdfcpu - PDF processor. pjs - Pretty print and search through JSON data structures fast. project - Very simple CLI tool to setup new projects from boilerplate templates. redis-view - A tree like tool help you explore data structures in your redis server remote-torrent - A simple tool for downloading Torrent remotely and retrieving files back over HTTP at full speed without ISP Torrent limitation restic - A fast, efficient and secure backup program runtemplate - A very simple command-line tool for executing Go templates, useful for use with go generate . runtemplate - A simple tool for executing Go templates to support generating Go code for your types. sift - A fast and powerful open source alternative to grep tecla - Command-line editing library Terracognita - Reads from existing Cloud Providers (reverse Terraform) and generates your infrastructure as code on Terraform configuration. wlog - A simple logging interface that supports cross-platform color and concurrency. wmenu - An easy to use menu structure for cli applications that prompts users to make choices. mani - CLI tool to help you manage multiple repositories Compression brotli - go bindings for Brotli algorithm. compress - Faster drop in replacements for gzip, zip, zlib, deflate. dgolzo - LZO bindings. go-lzo - Pure-Go LZO compressor/decompression, faithful translation of the C codebase. dictzip - A reader and writer for files in the random access dictzip format. fast-archiver - Alternative archiving tool with fast performance for huge numbers of small files. gbacomp - A Go library to (de)compress data compatible with GBA BIOS. go-lz4 - Port of LZ4 lossless compression algorithm to Go. go-lzss - Implementation of LZSS compression algorithm in Go. go-sevenzip - Package sevenzip implements access to 7-zip archives (wraps C interface of LZMA SDK). go-zip - A wrapper around C library libzip, providing ability to modify existing ZIP archives. lz4 - High performance, concurrent LZ4 implementation. lzma - compress/lzma package for Go. pgzip - Multicore gzip, compatible with the standard library. ppmd-go - Golang bindings for the LZMA SDK library. (Only binded PPMD) s2 - High throughput Snappy extension. snappy-go - Google's Snappy compression algorithm in Go. yenc - yenc decoder package. zappy - Package zappy implements the zappy block-based compression format. It aims for a combination of good speed and reasonable compression. zstd - Pure Go Zstandard compression/decompression. Concurrency and Goroutines grpool - Lightweight Goroutine pool. pool - Go consumer goroutine pool for easy goroutine handling + time saving. tunny - A goroutine pool. worker - An easy and lightweight concurrent job framework. Configuration File Parsers awsenv - a small binary that loads Amazon (AWS) environment variables for a profile code.soquee.net/env \u2014 Load environment variables from .env or similar files, or from any io.Reader and populate the local environment. confl - nginx config syntax, lenient, encode/decode, custom marshaling configor - Golang Configuration tool that support YAML, JSON, TOML, Shell Environment fig - Tiny library for reading configuration from a file and from environment variables (with validation & defaults). flagfile - Adds parsing and serialization support to the standard library flag package (adds a \u2013flagfile option) gcfg - read INI-style configuration files into Go structs; supports user-defined types and subsections globalconf - Effortlessly persist to and read flag values from an ini config file goconf - a configuration file parser goconfig - Configuration based on struct introspection, supports environment vars, command line args, and more. hjson - Human JSON, a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments. hocon - Configuration library for working with the HOCON(a human-friendly JSON superset) format, supports features like environment variables, referencing other values, comments and multiple files. jsonconfig - a JSON configuration file parser with comments support koanf - Light weight, extensible library for reading config in Go applications. Built in support for JSON, TOML, YAML, env, command line. properties - Library for reading and writing properties files scribeconf - Facebook Scribe server configuration file parser toml : go-toml-config - TOML-based config for Go go-toml - Go library for the TOML language gp-config - Subset of TOML syntax with basic and reflection APIs toml-go - An easy-to-use Go parser for the Toml format toml - TOML parser for Go with reflection tom-toml - TOML parser for Go, support comments/formatter/apply. uConfig - an unopinionated, extendable and plugable configuration management. Supports YAML, TOML, JSON, Env vars, K8s DAPI, et al. viper - a complete configuration solution supporting YAML, TOML & JSON and integration with command line flags yaml: yaml - YAML support for the Go language, by Canonical goyaml - A port of LibYAML to Go go-yaml - YAML support for the Go language Console User Interface ansi - Easily create ansi escape code strings and closures to format, color console output ansiterm - pkg to drive text-only consoles that respond to ANSI escape sequences cons - A simple package for building interactive console tools. gnureadline - GNU Readline bindings go-ansiout - Another ANSI escape code sequence tool for use with command-line applications. gockel - a Twitter client for text terminals gocui - Minimalist library aimed at creating Console User Interfaces gocurse - Go bindings for NCurses gocurses - NCurses wrapper go-ibgetkey - \"hot key\" type user input package for use in processing keystrokes in command-line applications. go.linenoise - Linenoise bindings (simple and easy readline with prompt, optional history, optional tab completion) goncurses - An ncurses library, including the form, menu and panel extensions gopass - Allows typing of passwords without echoing to screen go-pullbarz - Fancy \"light bar\" menus like in Lotus 123 from the DOS days. Dependent on go-ibgetkey and go-ansiout. go.sgr - Terminal/console colors and text decoration (bold,underlined,etc). go-stfl - a thin wrapper around STFL, an ncurses-based widget toolkit goterminal - A go library that lets you write and then re-write the text on terminal, to update progress. It works on Windows too! go-web-shell - Remote web shell, implements a net/http server. igo - A simple interactive Go interpreter built on exp/eval with some readline refinements oh - A Unix shell written in Go pty - obtain pseudo-terminal devices readline - A pure go implementation for GNU-Readline kind library tcell - Tcell is an alternate terminal package, similar in some ways to termbox, but better in others. termbox-go - A minimalist alternative to ncurses to build terminal-based user interfaces termios - Terminal support termon - Easy terminal-control-interface for Go. uilive - uilive is a go library for updating terminal output in realtime. uiprogress - A library to render progress bars in terminal applications. uitable - A library to improve readability in terminal apps using tabular data. yandex-weather-cli - Command line interface for Yandex weather service Continuous Integration goveralls - Go integration for Coveralls.io continuous code coverage tracking system. overalls - Multi-Package go project coverprofile for tools like goveralls Cryptocurrency Skycoin - Skycoin is a next-generation cryptocurrency written in Go. Skycoin is not designed to add features to Bitcoin, but rather improves Bitcoin by increasing simplicity, security and stripping out everything non-essential. Cryptography BLAKE2b - Go implementation of BLAKE2b hash function cryptogo - some useful cryptography-related functions, including paddings (PKCS7, X.923), PBE with random salt and IV cryptoPadding - Block padding schemes implemented in Go dkeyczar - Go port of Google'e Keyczar cryptography library dkrcrypt - Korean block ciphers: SEED and HIGHT dskipjack - Go implementation of the SKIPJACK encryption algorithm go-cs - concurrent ssh client. go-ed25519 - CGO bindings for Floodberry's ed25519-donna. Fast batch verification. go-hc128 - Go implementation of HC-128, an eSTREAM stream cipher go-jose - Go implementation of the JOSE standards go-lioness - Lioness wide-block cipher using Chacha20 and Blake2b go-minilock - Go implementation of the minilock file encryption system. GoSkein - Implementation of Skein hash and Threefisch crypto for Go go-sphinxmixcrypto - Sphinx mix network cryptographic packet format operations keccak - A keccak (SHA-3) implementation ketama.go - libketama-style consistent hashing kindi - encryption command line tool openssl - openssl bindings for go otrcat - a general purpose command-line tool for communicating using the Off-The-Record protocol scrypt - Go implementation of Colin Percival's scrypt key derivation function secureio - An easy-to-use XChaCha20-encryption wrapper for io.ReadWriteCloser using ECDH key exchange algorithm, ED25519 signatures and Blake3+Poly1305 checksums/message-authentication. Also a multiplexer. simpleaes - AES encryption made easy siphash - SipHash: a fast short-input pseudorandom function SRP - SRP: Secure Remote Password - Implementation in go ssh-vault - encrypt/decrypt using ssh keys themis - Multi-platform high-level cryptographic library for protecting sensitive data: secure messaging with forward secrecy, secure data storage (AES256GCM); suits for building end-to-end encrypted applications tiger - Tiger cryptographic hashing algorithm whirlpool - whirlpool cryptographic hashing algorithm Data Processing automi - Compose process and integration flows on Go channels Gleam - Fast, efficient, and scalable distributed map/reduce system, DAG execution, in memory or on disk, runs standalone or distributedly. Glow - Glow is an easy-to-use distributed computation system, similar to Hadoop Map Reduce, Spark, Flink, Storm. gostatsd - Statsd server and library. Heka - Real time data and log file processing engine. Kapacitor - Framework for processing, monitoring and alerting on timeseries data. parapipe - FIFO Pipeline which parallels execution on each stage while maintaining the order of messages and results pipe - Several functional programming supporting in golang (Map/Reduce/Filter) proto - Map/Reduce/Filter etc. for Go using channels as result streams. ratchet - A library for performing data pipeline / ETL tasks in Go. regommend - Recommendation engine. rrd - Bindings for rrdtool. XConv - Convert any value between types (base type, struct, array, slice, map, etc.) Data Structures Collections collections - Several common data structures data-structures - A collection of data-structures (ArrayList, SortedList, Set, AVL Tree, Immutable AVL Tree, B+Tree, Ternary Search Trie, Hash Table (Separate Chaining), Linear Hash Table) ps - Persistent data structures Tideland golib - A collections library Hashtables bimap - A simple bidirectional map implementation gohash - A simple linked-list hashtable that implements sets and maps go-maps - Go maps generalized to interfaces Lists fs2/mmlist - A memory mapped list. GoArrayList - GoArrayList is a Go language substitute for the Java class ArrayList, with very nearly all features. goskiplist - A skip list implementation in Go. itreap - An immutable ordered list, internally a treap. ListDict - Python List and Dict for Go skip - A fast position-addressable ordered map and multimap. Skiplist - A fast indexable ordered multimap. skiplist - A skip list implementation. Highly customizable and easy to use. skiplist - Skiplist data structure ported from Redis's Sorted Sets. stackgo - A fast slice-based stack implementation. Queues fifo_queue - Simple FIFO queue figo - A simple fifo queue with an optional thread-safe version. go.fifo - Simple auto-resizing thread-safe fifo queue. gopqueue - Priority queue at top of container/heap go-priority-queue - An easy to use heap implementation with a conventional priority queue interface. golibs/stack - A LIFO and ringbuffer package gringo - A minimalist queue implemented using a stripped-down lock-free ringbuffer heap - A general heap package without converting elements to interface{} and back. queued - A simple network queue daemon queue - A queue manager on top of Redis Graphs graph - Library of basic graph algorithms graphs - Implementation of various tree, graph and network algorithms groph - A pure Go library of graphs and algorithms Sets disjoint - Disjoint sets (union-find algorithm with path compression) golang-set - A full thread-safe and unsafe set implementation for Go. goset - A simple, thread safe Set implementation set - Set data structure for Go Trees b - Package b implements B+trees with delayed page split/concat and O(1) enumeration. Easy production of source code for B+trees specialized for user defined key and value types is supported by a simple text replace. btree - Package btree implements persistent B-trees with fixed size keys, http://en.wikipedia.org/wiki/Btree btree - In-memory (not persistent) B-tree implementation, similar API to GoLLRB go-avltree - AVL tree (Adel'son-Vel'skii & Landis) with indexing added go-btree - Simple balance tree implementation go-darts - Double-ARray Trie System for Go GoLLRB - A Left-Leaning Red-Black (LLRB) implementation of 2-3 balanced binary search trees in Google Go go-merkle - Merkle-ized binary (search) trees with proofs. go-radix , go-radix-immutable - Radix tree implementations. go-stree - A segment tree implementation for range queries on intervals gtreap - Persistent treap implementation. prefixmap - Simple trie-based prefix-map for string-based keys rbtree - A high performance red-black tree with an API similar to C++ STL's for set, map, multiset, multimap. rbtree - Yet another red-black tree implementation, with a C++ STL-like API rtreego - an R-Tree library triego - Simple trie implementation for storing words Other aurora - Cross-platform Beanstalk queue server console. bigendian - binary parsing and printing deepcopy - Make deep copies of data structures dgobloom - A Bloom Filter implementation epochdate - Compact dates stored as days since the Unix epoch etree - Parse and generate XML easily excelize - Golang library for reading and writing Microsoft Excel (XLSX) files. fsm - Minimalistic state machine for use instead of booleans go-algs/ed - Generalized edit-distance implementation go-algs/maxflow - An energy minimization tool using max-flow algorithm. gocrud - Framework for working with arbitrary depth data structures. go-extractor - Go wrapper for GNU libextractor Gokogiri - A lightweight libxml wrapper library GoNetCDF - A wrapper for the NetCDF file format library goop - Dynamic object-oriented programming support for Go gopart - Type-agnostic partitioning for anything that can be indexed in Go. gotoc - A protocol buffer compiler written in Go govalid - Data validation library goxlsxwriter - Golang bindings for libxlsxwriter for writing XLSX (Excel) files goxml - A thin wrapper around libxml2 hyperloglog - An implementation of the HyperLogLog and HyperLogLog++ algorithms for estimating cardinality of sets using constant memory. itertools - Provides generic iterable generator function along with functionality similar to the itertools python package. jsonv - A JSON validator libgob - A low level library for generating gobs from other languages mxj - Marshal/Unmarshal XML doc from/to map[string]interface{} or JSON ofxgo - A library for querying OFX servers and/or parsing the responses (and example command-line client). Picugen - A general-purpose hash/checksum digest generator. simple-sstable - A simple, no-frills SSTable format and implementation in Go. tribool - Ternary (tree-valued) logic for Go Tuple - Tuple is a go type that will hold mixed types / values vcard - Reading and writing vcard file in go. Implementation of RFC 2425 (A MIME Content-Type for Directory Information) and RFC 2426 (vCard MIME Directory Profile). weightedrandom - A library for efficient weighted random picking xlsx - A library to help with extracting data from Microsoft Office Excel XLSX files. Databases See also [[SQLDrivers page|SQLDrivers]]. CockroachDB cockroachdb - A Scalable, Survivable, Strongly-Consistent SQL Database Hazelcast IMDG Hazelcast IMDG Go Client - The official Go client implementation for Hazelcast IMDG , the open source in-memory data grid. MongoDB mgo - Rich MongoDB driver for Go Mongo Driver - Official MongoDB Go driver rocks-stata - MongoDB Backup Utility MySQL Go-MySQL-Driver - A lightweight and fast MySQL-Driver for Go's database/sql package MyMySQL - MySQL Client API written entirely in Go. mysqlsuperdump - Generate partial and filtered dumps of MySQL databases TiDB - MySQL compatible distributed database modeled after Google's F1 design. vitess - Scaling MySQL databases for the web ODBC go-odbc - ODBC Driver for Go odbc3-go - This package is wrapper around ODBC (version 3). PostgreSQL code.soquee.net/migrate A library for generating, applying, and listing PostgreSQL database migrations using a mechanism that's compatible with Rust's Diesel. go-libpq - cgo-based Postgres driver for Go's database/sql package go-pgsql - A PostgreSQL client library for Go kallax - PostgreSQL typesafe ORM pgsql.go - PostgreSQL high-level client library wrapper pgx - Go PostgreSQL driver that is compatible with database/sql and has native interface for more performance and features pq - Pure Go PostgreSQL driver for database/sql yoke - Postgres high-availability cluster with auto-failover and automated cluster recovery QL ql - A pure Go embedded (S)QL database. Redis godis - Simple client for Redis Go-Redis - Client and Connectors for Redis key-value store go-redis - Redis client built on the skeleton of gomemcache Redigo - Go client for Redis. redis - Redis client for Go RethinkDB GoRethink - RethinkDB Driver for Go SQLite gosqlite3 - Go Interface for SQLite3 gosqlite (forked) - A fork of gosqlite gosqlite - a trivial SQLite binding for Go. go-sqlite - A database/sql driver and standalone sqlite3 interface go-sqlite-lite - A simple SQLite package for Go. mattn's go-sqlite3 - sqlite3 driver conforming to the built-in database/sql interface Vertica vertica-sql-go - A pure Go driver for Vertica database. ORM beedb - beedb is an ORM for Go. It lets you map Go structs to tables in a database ent - An entity framework for Go FilterXorm - Build conditions for xorm project. go-modeldb - A simple wrapper around sql.DB for struct support. gorm - An ORM library for Go, aims for developer friendly gorp - SQL mapper for Go go-firestorm - Simple Go ORM for Cloud Firestore go-store - Data-store library for Go that provides a set of platform-independent interfaces to persist and retrieve key-value data. hood - Database agnostic ORM for Go. Supports Postgres and MySQL. lore - Simple and lightweight pseudo-ORM/pseudo-struct-mapping environment for Go. qbs - Query By Struct. Supports MySQL, PostgreSQL and SQLite3. sqlboiler - Database-first ORM via code generation. sqlgen - Go code generation for SQL interaction. structable - Struct-to-table database mapper. xorm - Simple and Powerful ORM for Go. reform - A better ORM for Go, based on non-empty interfaces and code generation. go-queryset - 100% type-safe ORM for Go with code generation and MySQL, PostgreSQL, Sqlite3, SQL Server support. Key-Value-Stores bolt - Persistent key/value store inspired by LMDB. dbm - Package dbm (WIP) implements a simple database engine, a hybrid of a hierarchical and/or a key-value one. fs2/bptree - A memory mapped B+Tree with duplicate key support. Appropriate for large amounts of data (aka +100 GB). Supports both anonymous and file backed memory maps. Diskv - Home-grown, disk-backed key-value store etcd - Highly-available key value store for shared configuration and service discovery olric Distributed cache and in-memory key/value data store. It can be used both as an embedded Go library and as a language-independent service. gkvlite - Pure go, simple, ordered, atomic key-value persistence based on append-only file format. gocask - Key-value store inspired by Riak Bitcask. Can be used as pure go implementation of dbm and other kv-stores. goleveldb - Another implementation of LevelDB key/value in pure Go. kv - Yet another key/value persistent store. Atomic operations, two phase commit, automatic crash recovery, \u2026 leveldb-go - This is an implementation of the LevelDB key/value database. levigo - levigo provides the ability to create and access LevelDB databases. persival - Programatic, persistent, pseudo key-value storage Graph Databases cayley - 100% Go graph database, inspired by Freebase and the Google Knowledge Graph. Dgraph - Fast, Distributed Graph DB with a GraphQL-like API. go-gremlin - A Go client for the Apache TinkerTop Graph analytics framework (Gremlin server). NoSQL couchgo - The most feature complete CouchDB Adapter for Go. Modeled after couch.js. influxdb - Scalable datastore for metrics, events, and real-time analytics Kivik - Kivik provides a common Go and GopherJS client library for CouchDB, PouchDB, and similar databases. ledisdb - A high performance NoSQL like Redis. nodb - A pure Go embed Nosql database with kv, list, hash, zset, bitmap, set. tiedot - A NoSQL document database engine using JSON for documents and queries; it can be embedded into your program, or run a stand-alone server using HTTP for an API. Other cabinet - Kyoto Cabinet bindings for go camlistore - Personal distributed storage system for life. cdb.go - Create and read cdb (\"constant database\") files CodeSearch - Index and perform regex searches over large bodies of source code dbxml - A basic interface to Oracle Berkeley DB XML drive - A Google drive command line client Event Horizon - Toolkit for Command Query Responsibility Segregation and Event Sourcing (CQRS/ES) go-batcher - Simply create and use batch handler in Go go-clickhouse - Connector to Yandex Clickhouse (column-oriented database) go-db-oracle - GO interface to Oracle DB gographite - statsd server in go (for feeding data to graphite) gokabinet - Go bindings for Kyoto Cabinet DBM implementation go-model - Robust & Easy to use struct mapper and utility methods for Go go-notify - GO bindings for the libnotify goprotodb - A binding to Berkeley DB storing records encoded as Protocol Buffers. go-rexster-client - Go client for the Rexster graph server (part of the TinkerPop suite of graph DB tools) goriak - Database driver for riak database (project homepage is now on bitbucket.org) goriakpbc - Riak driver using Riak's protobuf interface gotyrant - A Go wrapper for tokyo tyrant go-wikiparse - mediawiki dump parser for working with wikipedia data hdfs - go bindings for libhdfs JGDB - JGDB stands for Json Git Database mig - Simple SQL-based database migrations mongofixtures - A Go quick and dirty utility for cleaning MongoDB collections and loading fixtures into them. Neo4j-GO - Neo4j REST Client in Go neoism - Neo4j graph database client, including Cypher and Transactions support. null - Package for handling null values in SQL Optimus Cache Prime - Smart cache preloader for websites with XML sitemaps. piladb - Lightweight RESTful database engine based on stack data structures. pravasan - Simple Migration Tool (like rake db:migrate with more flexibility) remapper - library to convert/map data from one type to another riako - High level utility methods for interacting with Riak databases sqlbuilder - SQL query builder with row mapping sqlf - Create parameterized SQL statements in Go, sprintf style squirrel - Fluent SQL generation for Go Sublevel - Separate sections of the same LevelDB Weed File System - fast distributed key-file store whisper-go - library for working with whisper databases xo - CLI to generate idiomatic Go code for databases Date date - A package for working with dates. date - For dates, date ranges, time spans, periods, and time-of-day. goment - Go time library inspired by Moment.js gostrftime - strftime(3) like formatting for time.Time hijri - A small helper library to convert a Hijri date to a Gregorian date according to Ummul Qura calendar. now - Now is a time toolkit for golang. tai64 - tai64 and tai64n parsing and formatting Tideland golib - Timex extensions tuesday - A Strftime implementation that's compatible with Ruby's Time.strftime Development Tools cwrap - Go wrapper (binding) generator for C libraries. demand - Download, build, cache and run a Go app easily. glib - Bindings for GLib type system go-callvis - Visualize call graph of your Go program using dot format. gocog - A code generator that can generate code using any language godepgraph - Create a dependency graph for a go package godev - Recompiles and runs your Go code on source change. Also watches all your imports for changes. godiff - diff file comparison tool with colour html output gonew - A tool to create new Go projects go-play - A HTML5 web interface for experimenting with Go code. Like http://golang.org/doc/play but runs on your computer gore - A Go REPL. Featured with line editing, code completion, and more gorun - Enables Go source files to be used as scripts. go-spew - Implements a deep pretty printer for Go data structures to aid in debugging goven - Easily copy code from another project into yours gowatcher - Reload a specified go program automatically by monitoring a directory. GoWatch - GoWatch watches your dev folder for modified files, and if a file changes it restarts the process. goweb - Literate programming tools for Go based on CWEB by Donald Knuth and Silvio Levy. goyaccfmt - Auto reformat Goyacc source files. hopwatch - simple debugger for Go hsandbox - Tool for quick experimentation with Go snippets Inject - Library for dependency injection in Golang (from Facebook) liccor - A tool for updating license headers in Go source files liteide - An go auto build tools and qt-based ide for Go Livedev - Livedev is a development proxy server that enables live code reloading. Martian - HTTP proxy designed for use in E2E testing. nvm-windows - Node.js version manager for Windows prettybenchcmp - Store and compare benchmarks history locally. rerun - Rerun watches your binary and all its dependencies so it can rebuild and relaunch when the source changes. sling - Network traffic simulator and test automation tool to send file requests through the HTTP or TCP protocol, control rate frequency, number of concurrent connections, delays, timeouts, and collect the response time statistics, mean, and percentiles. syntaxhighlighter - language-independent code syntax highlighting library toggle - A feature toggle library with built in support for environment variable backed toggling. pluggable backing engine support. trace - A simple debug tracing Emacs Tags egotags - ETags generator tago1 - etags generator for go that builds with go 1 tago - Emacs TAGS generator for Go source Distributed/Grid Computing celeriac - A library for adding support for interacting and monitoring Celery workers, tasks and events in Go donut - A library for building clustered services in Go libchan - Go-like channels over the network locker - A distributed lock service built on top of etcd . dlock - A native Go distributed lock manager (client and server) using gRPC. mangos - An implementation of the Scalable Protocols based on nanomsg redsync - Redis-based distributed mutual exclusion lock implementation Skynet - Skynet is distributed mesh of processes designed for highly scalable API type service provision. Tideland golib - Includes a map/reduce library Documentation examplgen - Insert code from .go files to documents (examples to project's readme, for instance). godocdown - Format package documentation (godoc) as GitHub friendly Markdown GoDoc.org - GoDoc.org generates documentation on the fly from source on Bitbucket, Github, Google Project Hosting and Launchpad. golangdoc - Godoc for Golang, support translate. Mango - Automatically generate unix man pages from Go sources redoc - Commands documentation for Redis sphinxcontrib-golangdomain - Sphinx domain for Go test2doc - Generate documentation for your go units from your unit tests. Editors A - A graphical text and binary editor based on Acme Conception - Conception is an experimental research project, meant to become a modern IDE/Language package. demo video de - A modal graphical editor with Acme and vi features Gide - Go IDE built in the go-native GoGi GUI Go-bbpackage - BBEdit package for Go development goclipse - An Eclipse-based IDE for Go. Go conTEXT - Highlighter plugin godev - Web-based IDE for the Go language godit - A microemacs-like text editor written in Go. gofinder - (code) search tool for acme go-gedit - Google Go language plugin for gedit golab - go local application builder - a web-based Go ide Google Go for Idea - Google Go language plugin for Intellij IDEA micro - A modern and intuitive terminal-based text editor. tabby - Source code editor T - An Acme/Sam like text editor ViGo - A vim-like text editor. Wide - A Web-based IDE for Teams using Golang. Email chasquid - SMTP server written in Go. gmail - Simple library for sending emails from a Gmail account, for people not interested in dealing with protocol details. Gomail - A simple and efficient package to send emails. go-mail - Email utilities including RFC822 messages and Google Mail defaults. go-ses - Amazon AWS Simple Email Service (SES) API client go-simple-mail - \"Golang package for send email. Support keep alive connection, TLS and SSL. Easy for bulk SMTP.\" Hectane - Lightweight SMTP client including a built-in mail queue backed by on-disk storage. Inbucket - Inbucket is an email testing service; it will accept messages for any email address and make them available to view via a web interface. mail.go - Parse email messages MailHog - Email testing service, inspired by MailCatcher. MailSlurper - A handy SMTP mail server useful for local and team application development. Slurp mail into oblivion! Error handling code.soquee.net/problem Package problem implements errors for HTTP APIs similar to the ones described by RFC7807 . errgo - Error tracing and annotation. errors - errors augments and error with a file and line number. errors - The juju/errors package provides an easy way to annotate errors without losing the original error context, and get a stack trace back out of the error for the locations that were recorded. goerr - Allows to make a separate(modular) and reusable error handlers. Exception-like panic() recover() mechanism using Return(error) and catching err := OR1(..) hierr - Nesting errors in hierarchy. panicparse - Parse panics with style. Space Monkey errors - Go's missing errors library - stack capture, error hierarchies, error tags Tideland golib - Detailed error values Encodings and Character Sets base58 - Human input-friendly base58 encoding bencode-go - Encoding and decoding the bencode format used by the BitTorrent peer-to-peer file sharing protocol bsonrpc - BSON codec for net/rpc chardet - Charset detection library ported from ICU charmap - Character encodings in Go codec-msgpack-binc High Performance and Feature-Rich Idiomatic Go Library providing encode/decode support for multiple binary serialization formats: msgpack colfer - high-performance binary codec gobson - BSON (de)serializer go-charset - Conversion between character sets. Native Go. go.enmime - MIME email parser library for Go (native) go-msgpack - Comprehensive MsgPack library for Go, with pack/unpack and net/rpc codec support (DEPRECATED in favor of codec ) gopack - Bit-packing for Go go-simplejson - a Go package to interact with arbitrary JSON go-wire - Binary and JSON codec for structures and more go-xdr - Pure Go implementation of the data representation portion of the External Data Representation (XDR) standard protocol as specified in RFC 4506 (obsoletes RFC 1832 and RFC 1014). iconv-go - iconv wrapper with Reader and Writer magicmime \u2013 Mime-type detection with Go bindings for libmagic Mahonia - Character-set conversion library in Go mimemagic - Detect mime-types automatically based on file contents with no external dependencies mimemagic - A pure-Go MIME sniffing library/tool based on the FreeDesktop.org spec msgpack - Msgpack format implementation for Go msgpack-json - Command-line utilities to convert between msgpack and json nnz - String and Int primitives that serialize to JSON and SQL null storable - Write perl storable data TNetstring - tnetstrings (tagged Netstrings) File Systems afero - A File Sytem abstraction system for Go go.fs - A virtual file system abstraction layer. poller - Package poller is a file-descriptor multiplexer. It allows concurent Read and Write operations from and to multiple file-descriptors. vfsgen - Generates a vfsdata.go file that statically implements the given virtual filesystem. Games Bampf - Arcade style game based on the Vu 3D engine. bloxorz - Solver for bloxorz basic levels ChessBuddy - Play chess with Go, HTML5, WebSockets and random strangers! Fergulator - An NES emulator, using SDL and OpenGL FlappyBird - A simple flappy bird clone written in golang. godoku - Go Sudoku Solver - example of \"share by communicating\" Gongo - A program written in Go that plays Go gospeccy - A ZX Spectrum 48k Emulator Ludo Game - Ludo Board game powered by Go on Appengine pinkman - command line based chess interface to UCI compatible chess engines Pong - A simple Pong clone written in golang pong-command - Joke command,ping-like pong. Steven - A Minecraft client in Go ukodus - Sudoku solver in Go WolfenGo - A Wolfenstein3D clone in Go, using OpenGL 2.1 GoChess - Play chess with friends on terminal GIS geojson - Go package to quick and easy create json data in geojson format. description go-geom - Efficient Open Geo Consortium-style geometries with native Go GeoJSON and WKB encoding and decoding (work-in-progress) go.geo - Geometry/geography library targeted at online mapping (deprecated by author in favor of his new gis library orb .) go.geojson - Marshalling and Unmarshalling of GeoJSON objects gogeos - Go library for spatial data operations and geometric algorithms go-proj-4 - An interface to the Cartographic Projections Library PROJ.4 go-kml - Google Earth KML generation go-polyline - Google Maps polyline encoding and decoding orb - 2d geometry manipulation (length, area, polygon contains, etc.) with geojson, wkb, mvt support osm - General purpose library for reading, writing and working with OpenStreetMap data UTM - Bidirectional UTM-WGS84 converter gdal - Provides a go wrapper for GDAL Go Implementations llgo - LLVM-based Go compiler, written in Go Graphics and Audio AnsiGo - Simple ANSi to PNG converter written in pure Go Arclight - Arclight is a tool for rendering images bild - A collection of image processing algorithms in pure Go bimg - Small Go library for fast image resize and transformation using libvips blend - Image processing library and rendering toolkit for Go. bpg - BPG decoder for Go. chart - Library to generate common chart (pie, bar, strip, scatter, histogram) in different output formats. draw2d - This package provide an API to draw 2d geometrical form on images. This library is largely inspired by postscript, cairo, HTML5 canvas. ebiten - A cross platform open-source game library with which you can develop 2D games with simple API for multi platforms. Cgo/c compiler setup not needed. egl - egl bindings es2 - es2 bindings fastgallery - A fast static image and video web gallery generator fourcc - Go implementation of FOURCC (four character code) (4CC) identifiers for a video codecs, compression formats, colors, and pixel format used in media files. freetype-go - a Go implementation of FreeType glfw 3 - Go bindings for GLFW 3 library glfw - bindings to the multi-platform library for opening a window, creating an OpenGL context and managing input glh - OpenGL helper functions to manage text, textures, framebuffers and more gl - OpenGL bindings using glew gltf - library for marshaling and unmarshaling glTF glu - bindings to the OpenGL Utility Library glui - Wrapper for glfw to simplify displaying an image gmask - Go adaptation of the Cmask utility for Csound goalsa - Go bindings for ALSA capture and playback go-cairo - Go wrapper for the cairo graphics library gocl - Go OpenCL (gocl) binding, support OpenCL 1.1/1.2/2.0 on Mac/Linux/Windows/Android go-colorful - Color spaces conversions and other color-space operations go-csnd6 - Go binding to the Csound6 API go-csperfthread - Go binding to the CsoundPerformanceThread helper class of the Csound6 API goexif - Retrieve EXIF metadata from image files gofb - Go framebuffer library for drawing pixel by pixel goflac - Go bindings for decoding and encoding FLAC audio with libFLAC go-gd - Go bingings for GD GoGL - OpenGL binding generator go-gnuplot - go bindings for Gnuplot go-gtk3 - gtk3 bindings for go go-heatmap - A toolkit for making heatmaps GoHM - H.265/HEVC HM Video Codec in Go goHorde - Go Bindings for the Horde3d Rendering engine. GoMacDraw - A mac implementation of go.wde go-openal - Experimental OpenAL bindings for Go go-opencl - A go wrapper to the OpenCL heterogeneous parallel programming library go-opencv - Go bindings for OpenCV / 2.x API in gocv / 1.x API in opencv Go-OpenGL - Go bindings for OpenGL Goop - Audio synthesizer engine goray - Raytracer written in Go, based on Yafaray gosc - Pure Go OSC (Open Sound Control) library go-taglib - Go wrapper for TagLib, an audio meta-data parser go-tmx - A Go library that reads Tiled's TMX files govips - A lightning fast Go image processing and resizing library GoVisa - H265/HEVC Bitstream Analyzer in Go go-vlc - Go bindings for libVLC go.wde - A windowing/drawing/event interface goxscr - Go rewrites of xscreensaver ports graphics2d - Path and path transform based 2D graphics package gst - Go bindings for GStreamer gumble - Client library for the Mumble VoIP protocol hgui - Gui toolkit based on http and gtk-webkit. hsvimage - Support for HSV color models and images imaginary - Simple and fast HTTP microservice for image resizing and manipulation imaging - Package imaging provides basic image manipulation functions (resize, rotate, flip, crop, etc.) as well as simplified image loading and saving. imgproxy - Fast and secure standalone server for resizing and converting remote images libvlc-go - Go bindings for libVLC 2.X/3.X/4.X used by the VLC media player merlin - Automatic video encoder netpbm - Read and write Netpbm images from Go programs opencv - Go bindings for OpenCV osmesa - Go bindings for osmesa. phono - DSP pipeline. Plotinum - An API for creating plots portaudio - A Go binding to PortAudio pulsego - Go binding for PulseAudio pulse-simple - Go bindings for PulseAudio's Simple API, for easy audio capture and playback. rasterx - SVG-standard rendering, rasterization library. resize - Image resizing with different interpolations. RiGO - RenderMan Interface implementation in Go. smartcrop - Content aware image cropping starfish - A simple Go graphics and user input library, built on SDL stl - library for reading, writing, and manipulating Stereolithography (.stl) files used in 3D printing svgo - a library for creating and outputting SVG tag - a library for reading tag metadata and creating metadata-invariant checksums for audio files: FLAC, all IDv3 variants, and MP4 (ACC, ALAC) tga - TARGA image format encoding/decoding library tiff - Rich TIFF/BigTIFF/GeoTIFF decoder/encoder for Go. twilio-go - Go client for the Twilio API. videoinput - Go bindings for VideoInput (Windows). vu - Virtual Universe. A skeleton 3D engine. vulkan - Golang Bindings for Vulkan API. webp - WebP decoder and encoder for Go. wg - Web Graphics, display real time go graphics in browser, with user input. window - Optimized moving window for real-time data xmorph - Warp and morph images GUIs and Widget Toolkits fyne - Cross platform native GUI toolkit based on Material Design gio - Portable (iOS/tvOS, Android, Linux (Wayland/X11), macOS, Windows, FreeBSD, OpenBSD, WASM) immediate mode GUI go-fltk - FLTK2 GUI toolkit bindings for Go GoGi - Fully native cross-platform GUI toolkit go-gtk - Bindings for GTK go-qt5 - QT5 bindings for go gothic - Tcl/Tk Go bindings gotk3 - Go bindings for GTK3, requires GTK version 3.8 go.uik - A UI kit for Go, in Go. (project is closed) go-webkit2 - Go bindings for the WebKitGTK+ v2 API (w/headless browser & JavaScript support) Gowut - Gowut (Go Web UI Toolkit) is a full-featured, easy to use, platform independent Web UI Toolkit written in pure Go, no platform dependent native code is linked or called. GXUI - A Go cross platform UI library. iup - Bindings for IUP lorca - A small library for building cross-platform HTML5 GUI apps in Go, uses Chrome/Chromium as a UI layer. mdtwm - Tiling window manager for X qml - QML support for the Go language ui - Platform-native GUI library for Go webview - Tiny cross-platform web UI library. Uses WebKit (Gtk/Cocoa) and MSHTML (Windows) wingo - A fully-featured window manager written in Go. Winhello - An example Windows GUI hello world application wxGo - Go Wrapper for the wxWidgets GUI xgb - A fork of the x-go-binding featuring support for thread safety and all X extensions. xgbutil - A utility library to make use of the X Go Binding easier. (Implements EWMH and ICCCM specs, key binding support, etc.) x-go-binding - bindings for the X windowing system Hardware gobot - Golang framework for robotics, drones, and the Internet of Things (IoT). go.hid - Provides communication with USB Human Interface Devices. gortlsdr - A librtlsdr wrapper, which turns certain USB DVB-T dongles into a low-cost, general purpose software-defined radio receiver. hwio - Hardware I/O library for SoC boards including BeagleBone Black and Raspberry Pi. stressdisk - Stress test your disks / memory cards / USB sticks before trusting your valuable data to them Language and Linguistics alpinocorpus-go - A reader and a writer for Alpino corpora. go-aspell - GNU Aspell spell checking library bindings for Go. go-edlib - Go string comparison and edit distance algorithms library (Levenshtein, LCS, Hamming, Damerau levenshtein, Jaro-Winkler, etc.) compatible with Unicode. go-l10n - localization for humans go-language - A simple language detector using letter frequency data. goling - String Similarity(Cosine Similarity, Levenshtein Distance), Spell Check, Segmentation go-ngram - An n-gram is a contiguous sequence of n items from a given sequence of text or speech. go.stringmetrics - String distance metrics implemented in Go go-tokenizer - A Text Tokenizer library for Golang inflect - Word inflection library (similar to Ruby ActiveSupport::Inflector). Singularize(), Pluralize(), Underscore() etc. libtextcat - A Go wrapper for libtextcat. nlp - Go Natural Language Processing library supporting LSA (Latent Semantic Analysis). sego - Chinese language segmenter. snowball - Snowball stemmers for multiple languages textcat - N-gram based text categorization, with support for utf-8 and raw text Logging and Monitoring colog - CoLog is a prefix-based leveled execution log for Go cue - Fast and flexible contextual logger. Supports output to file, syslog, structured syslog, stdout/stderr, socket, Loggly, Honeybadger, Opbeat, Rollbar, and Sentry. epazote - Automated Microservices Supervisor. factorlog - Really fast, featureful logging infrastructure (supports colors, verbosity, and many formats) glog - Leveled execution logs for Go go-logging - Supports different logging backends like syslog, file and memory. Multiple backends can be utilized with different log levels per backend and logger. gomol - A multi-output logging library designed for outputs that support additional metadata with log messages. gosrvmon - Self-hosted uptime monitoring system. graylog-golang - graylog-golang is a full implementation for sending messages in GELF (Graylog Extended Log Format) from Google Go (Golang) to Graylog haminer - Library and program to parse and forward HAProxy logs immortal - A *nix cross-platform (OS agnostic) supervisor jWalterWeatherman - Seamless terminal printing and file logging that s as easy to use as fmt.Println kemba - A tiny debug logging tool inspired by debug , great for CLI tools and applications. log4go - Go logging package akin to log4j logger - Go logging with buffered output and multiple writers logrus - Structured, pluggable logging for Go with built-in hooks for third-party loggers: Airbrake, Papertrail, Loggly, Sentry\u2026 MailJet Live Event Dashboard - API monitoring in real time. monkit - A flexible process data collection, metrics, monitoring, instrumentation, and tracing library for Go Prometheus - Monitoring system and time-series database. rfw - Rotating file writer - a 'logrotate'-aware file output for use with loggers sd - Writes to the systemd journal, supports user defined systemd journal fields seelog - Flexible dispatching, filtering, and formatting snap - Telemetry framework spacelog - Hierarchical, leveled, and structured logging library for Go statsgod - A rewrite of StatsD in Go. syslog - With this package you can create your own syslog server with your own handlers for different kind of syslog messages Tideland golib - Flexible logging timber - Configurable Logger for Go ul - Provides macOS Sierra/OSX Unified Loggging functionality via cgo vlog - Leveled log on std log for Go Machine Learning Anna - Artificial Neural Network Aspiration, aims to be self-learning and self-improving software. bayesian - A naive bayes classifier. ctw - Context Tree Weighting and Rissanen-Langdon Arithmetic Coding Dialex - Dialex is a smart pipe that unscrambles text and makes it machine-readable. evo - a framework for implementing evolutionary algorithms in Go. go-algs/maxflow Maxflow (graph-cuts) energy minimization library. go-galib - Genetic algorithms. golinear - Linear SVM and logistic regression. go-mind - A neural network library built in Go go_ml - Linear Regression, Logistic Regression, Neural Networks, Collaborative Filtering, Gaussian Multivariate Distribution. gonet - Neural Network for Go. go-porterstemmer - An efficient native Go clean room implementation of the Porter Stemming algorithm. go-pr - Gaussian classifier. gorgonia - Neural network primitives library (like Theano or Tensorflow but for Go) mlwebservicego - Serving machine learning models with Golang, Echo, and Firebase. ntm - Neural Turing Machines implementation paicehusk - Go implementation of the Paice/Husk Stemmer tfgo - Tensorflow + Go, the gopher way. Mathematics bayesian - Naive Bayesian Classification for Go blas - Go implementation of BLAS (Basic Linear Algebra Subprograms) cartconvert - cartography functions for the Go programming language choose - Produce all combinations of M out of N items clp - Go bindings for the COIN-OR Linear Programming (CLP) library Cvx - Convex optimization package, port of CVXOPT python package decimal - A high-performance arbitrary-precision decimal floating-point arithmetic package dice - Dice rolling library evaler - A simple floating point arithmetic expression evaluator fixed - A fixed point (Q32.32 format) math library geom - 2d geometry gini - SAT Solver/Boolean Logic Tools gochipmunk - Go bindings to the Chipmunk Physics library gocomplex - a complex number library godec - multi-precision decimal arithmetic gofd - concurrent finite domain constraint solver. go-fftw - Go bindings for FFTW - The Fastest Fourier Transform in the West go-fn - Special functions that would not fit in \"math\" pkg gographviz - Graphviz DOT language parser for Go go-gt - Graph theory algorithms go-humanize - Formatting numbers for humans. golibs/xmath - a collection of math functions (mostly mean algorithms) go-lm - Linear models in Go. Provides WLS and regression with t residuals via a cgo -> BLAS/LAPACK interface. go.mahalanobis - Naive implementation of the Mahalanobis distance using go.matrix gomat - lightweight FAST matrix and vector math go_matrix_cuda - GPU-Accelerated Linear Algebra Libraries based in CUDA go.matrix - a linear algebra package gonum - Scientific packages (linear algebra, BLAS, LAPACK, differentiation, plots, linear programming, statistics, \u2026) go-symexpr - Symbolic math as an AST with derivatives, simplification, and non-linear regression gsl - GNU Scientific Library bindings humanize - formats large numbers into human readable small numbers interval - Package interval handles sets of ordered values laying between two, possibly infinite, bounds. mathutil - Package mathutil provides utilities supplementing the standard 'math' and 'rand' packages. mt19937_64 - Mersenne Twister int64 random source permutation - Package permutation generates permutations of the indices of a slice polyclip.go - Go implementation of algorithm for Boolean operations on 2D polygons primegen.go - Sieve of Atkin prime number generator prime - Go version of Segmented Sieve and non Segmented sieve to produce prime numbers primes - Simple functionality for working with prime numbers. pso-go - A library of PSO (Particle Swarm Optimization) for Go. rand - 64-bit version of the math/rand package with Mersenne twister support. roger - A Go client for the RServer, allowing you to invoke R programs from Go. sparse - Go Sparse matrix formats for linear algebra supporting scientific and machine learning applications, compatible with gonum matrix libraries. statistics - GNU GSL Statistics (GPLv3) stats - A statistics package with common functions missing from the Golang standard library. Tideland golib - Numerics package for statistcal analysis Units - Implements types, units, converter functions and some mathematics for some common physical types. lib vector - A small vector lib. Microservices car_registration - API wrapper for worldwide car registration data gokit - The Go Kit microservice framework (and author interview ). go-micro - Go Micro is a microservices library which provides the fundamental building blocks for writing fault tolerant distributed systems at scale. kite - RPC server and client framework. Miscellaneous atexit - Simple atexit library b\u00edogo - Basic bioinformatics functions for the Go language. Breaker - Breaker enables graceful degraded mode operations by means of wrapping unreliable interservice interface points with circuit breaker primitives. btcrpcclient - A Websocket-enabled Bitcoin JSON-RPC client. cast - Safe and easy casting from one type to another in Go CGRates - Rating system designed to be used in telecom carriers world cpu - A Go package that reports processor topology cron - A library for running jobs (funcs) on a cron-formatted schedule daemonigo - A simple library to daemonize Go applications. dbus-go - D-Bus Go library desktop - Open file/uri with default application (cross platform) devboard - Kanban board application based on Simple-Khanban dioder-api - An API to IKEA dioder LED-strips doublejump - A revamped Google's jump consistent hash dump - An utility that dumps Go variables, similar to PHP's var_dump elPrep - A high-performance tool for preparing sequence alignment/map files in DNA sequencing pipelines env - Easily pull environment variables with defaults epub - Bindings for libepub to read epub content. EventBus - Lightweight event bus with async compatibility for Go . faker - Generate fake data, names, text, addresses, etc. fasturl - High performance URL parsing library using a Ragel state machine. fsnotify - File system notifications for Go functional - Functional programming library including a lazy list implementation and some of the most usual functions. GCSE - Go code search engine. source generate - runs go generate recursively on a specified path or environment variable and can filter by regex. go-amiando - Wrapper for the Amiando event management API go-bit - An efficient and comprehensive bitset implementation with utility bit functions. go-bitops - common bit operations for 32/64 bit integer go-business-creditcard - Validate/generate credit card checksums/names. gochem - A computational chemistry/biochemistry library. gocsv - Library for CSV parsing and emitting go.dbus - Native Go library for D-Bus go-ean - A minimal utility library for validating EAN-8 and EAN-13 and calculating checksums. go-eco - Functions for use in ecology go-erx - Extended error reporting library go-eventsocket - An event socket client/server library for the FreeSWITCH telephony platform. GoFakeIt - Fake Data Generator. 65+ different variations and examples for each go-fann - Go bindings for FANN, library for artificial neural networks GoFlow - Flow-based and dataflow programming library for Go goga - A genetic algorithm framework gogobject - GObject-introspection based bindings generator go-idn - a project to bring IDN support to Go, feature compatible with libidn GoLCS - Solve Longest Common Sequence problem in go golibs/as - Converting data types golife - Implementation of Game of Life for command line go-magic - A Go wrapper for libmagic go-magic - Simple interface to libmagic for Go Programming Language go-metrics - Go port of Coda Hale's Metrics library gommap - gommap enables Go programs to directly work with memory mapped files and devices in a very efficient way gomusicbrainz - MusicBrainz WS2 client library goneuro - Go driver for NeuroSky devices. goNI488 - A Go wrapper around National Instruments NI488.2 General Purpose Interface Bus (GPIB) driver. go-osx-plist - CoreFoundation Property List support for Go go-papi - Go interface to the PAPI performance API go.pcsclite - Go wrapper for pcsc-lite Go-PhysicsFS - Go bindings for the PhysicsFS archive-access abstraction library. go.pipeline - Library that emulates Unix pipelines go-pkg-mpd - A library to access the MPD music daemon go-pkg-xmlx - Extension to the standard Go XML package. Maintains a node tree that allows forward/backwards browser and exposes some simpel single/multi-node search functions goplan9 - libraries for interacting with Plan 9 goPromise - Scheme-like delayed evaluation for Go go-qrand - Go client for quantum random bit generator service at random.irb.hr goraphing - A tool to generate a simple graph data structures from JSON data files go-selenium - Selenium WebDriver client for Go go-semvar - Semantic versions (see http:/semver.org) go-serial - Go binding to libserialport for serial port functionality (cgo). goST - A steam properties (steam table) library written for Go. This was designed as a native go equivalent to XSteam. go-taskstats - Go interface for Linux taskstats gotenv - Loads environment variables from .env file Gotgo - A Go preprocessor that provides an implementation of generics go-translate - Google Language Translate library go-uuid - Universal Unique IDentifier generator and parser gouuid - Pure Go UUID v3, 4 and 5 generator compatible with RFC4122 go-villa - Some miscellaneous wrapper and small algorithms.(wrappers to slices, priority queues, path related apis, a string set type) go-wkhtmltopdf - wkhtmltopdf Go bindings and high level interface for HTML to PDF conversion. Hranoprovod - Command-line calorie tracking lineup - A minimalistic message queue server mitigation - Package mitigation provides the possibility to prevent damage caused by bugs or exploits. nject - type safe dependency injection nma.go - A NotifyMyAndroid client for go. notify - File system event notification library with API similar to os/signal. pargo - A library for parallel programming in Go. passwd - A parser for the /etc/passwd file pool - A generic worker pool procfile - A Procfile parser Prometheus Instrumentation/Metrics Client - This is a whitebox instrumentation framework for servers written in Go. It exposes programmatically-generated metrics automatically for use in the Prometheus time series collection and post-processing environment. randat - Devel tool for generating random bytestrings and encoding files in code-friendly forms recycler - A more flexible object recycling system than sync.Pool. Provides constructors and destructors for the objects as well as control over the length the free. replaykit - A library for replaying time series data. serial - Serial ports API (pure Go) sio - Package sio lets you access old serial junk. It's a go-gettable fork and modification of dustin's rs232 package. stats - Monitors Go MemStats + System stats such as Memory, Swap and CPU and sends via UDP anywhere you want for logging etc\u2026 symutils - Various tools and libraries to handle symbolic links toktok - Creates and resolves unique, typo & error-resilient, human-readable tokens twitterfetcher - A tool to make Twitter API requests using the Application-only authentication udis86 - Go bindings for libudis86 ugo - underscore.js like toolbox for Go Vboxgo - user-like access to VirtualBox VMs from Go. vk - unofficial vk.com API wrapper (vk.com russian social network) WUID - An extremely fast unique number generator, 10-135 times faster than UUID. Wukong - A highly extensible full-text search engine written in Go. xdg - Go implementation of the XDG Base Directory Specification and XDG user directories. xplor - Files tree browser for p9p acme yubigo - Yubikey OTP validation and auhtentication API client. Music gmask - Go adaptation of the Cmask utility for Csound go-csnd6 - Go binding to the Csound6 API go-csperfthread - Go binding to the CsoundPerformanceThread helper class of the Csound6 API go-libshout - Go bindings for libshout gompd - A client interface for the MPD (Music Player Daemon) launchpad - A Go client for Novation Launchpad portmidi - Go bindings for libportmidi Networking DNS bitz - BitMessage client node and library dingo - A DNS client in Go that supports Google DNS over HTTPS dns - client and server implementations in Go dns - A DNS library in Go dnsimple - an interface to the DNSimple API dnss - DNS secure proxy, supports DNS over HTTPS and GRPC domainerator - Command line tool to combine wordlist and suffixes/TLDs into domain names and check if they are registered or not. dyndnscd - a configurable dyndns client GeoDNS - geo-aware authoritative DNS server grong - Small authoritative DNS name server hostsfile - /etc/hostsfile reverse lookup IP => names lib/dns - The DNS library for client or server with support UDP, TCP, and DNS over HTTPS mdns - Multicast DNS library for Go rescached - DNS resolver cache daemon FTP ftp4go - An FTP client for Go, started as a port of the standard Python FTP client library ftp - Package ftp provides a minimal FTP client as defined in RFC 959 ftps - An implementation of the FTPS protocol goftp - A FTP client library HTTP apiproxy - proxy for HTTP/REST APIs with configurable cache timeouts boom - HTTP(s) benchmarking tool, Apache Benchmark replacement eventsource - Server-sent events for net/http server. fasthttp - Fast HTTP package for Go gbench - HTTP(s) Load Testing And Benchmarking Tool inspired by Apache Benchmark and Siege. gobench - HTTP/HTTPS load test and benchmark tool go-curl - libcurl bingding that supports go func callbacks goproxy - a programmable HTTP proxy. gostax - A Streaming API for XML (StAX) in go handlers - Collection of useful HTTP middlewares. HTTPLab - HTTPLabs let you inspect HTTP requests and forge responses. httpmock - Easy mocking of HTTP responses from external resources httptail - tools push stdout/stderr to http chunked sling - A Go HTTP client library for creating and sending API requests. stress - Replacement of ApacheBench(ab), support for transactional requests, support for command line and package references to HTTP stress testing tool. IMAP go-imap - An IMAP library for clients and servers. go-imap - IMAP client library go-imap - Implementation of IMAP4rev1 client, as described in RFC 3501 Instant Messaging gobir - Extensible IRC bot with channel administration, seen support, and go documentation querying goexmpp - XMPP client implementation goirc - event-based stateful IRC client framework go-irc - Simple IRC client library gorobot - a modular IRC bot go-xmpp - XMPP client library hanu - Framework for writing Slack bots ircflu - IRC bot with support for commands, scripting and web-hooks irc.go - Go IRC bot framework mellium.im/xmpp a low-level XMPP client and server library focusing on good documentation and a clean, usable API sirius - [link is broken] A fast and ultra-lightweight chat server written in Go xmpp-client - an XMPP client with OTR (off-the-record) support NNTP go-nntp - An NNTP client and server library for go Protocol Buffers gogoprotobuf - another Go implementation of Protocol Buffers, but with extensions and code generation plugins. golang_protobuf_extensions - Protocol Buffer extensions to support streaming message encoding and decoding. goprotobuf - the Go implementation of Google's Protocol Buffers protorpc - Google Protocol Buffers RPC for Go and C++ rsync replican-sync - An rsync algorithm implementation in Go Rsync - Rsync algorithm as a Go library Telnet telnet - Package telnet provides TELNET and TELNETS client and server implementations, for the Go programming language, in a style similar to the \"net/http\" library (that is part of the Go standard library) including support for \"middleware\"; TELNETS is secure TELNET, with the TELNET protocol over a secured TLS (or SSL) connection. telnet - A simple interface for interacting with Telnet connection telnets - A client for the TELNETS (secure TELNET) protocol. VNC glibvnc - Go wrapper using CGO for the libvnc library. Websockets Gorilla WebSocket - WebSocket protocol implementation lib/websocket - A library for writing websocket client and server (using epoll) websocketd - HTTP server that converts STDIN/STDOUT program into WebSockets service. Also handles HTML and CGI. ws-cli - WebSocket command line client wst - A dead simple WebSocket tester ZeroMQ goczmq - Wrapper for the CZMQv3 interface - blog post gozmq - Go Bindings for 0mq (zeromq/zmq) zmq2 - A Go interface to ZeroMQ (zmq, 0MQ) version 2. zmq3 - A Go interface to ZeroMQ (zmq, 0MQ) version 3. zmq4 - A Go interface to ZeroMQ (zmq, 0MQ) version 4. Misc Networking betwixt - Betwixt implements the OMA Lightweight M2M (LWM2M) protocol for Device Management and Monitoring canopus - CoAP Client/Server implementation (RFC 7252) chunkedreader - A light weight library for reading continuous fixed sized messages from TCP streams. circle - Go interface to the libcircle distributed-queue API createsend-go - API client for Monitor http://www.campaignmonitor.com (email campaign service) cwmp-proxy - Reverse cwmp proxy dmrgo - Library for with Hadoop Streaming map/reduce doozerconfig - Go package for managing json-encoded configuration in Doozer doozerd - A consistent distributed data store endless Zero downtime restarts for go servers (Drop in replacement for http.ListenAndServe/TLS) gearman-go - A native implementation for Gearman API with Go. Glue - Robust Go and Javascript Socket Library (Alternative to Socket.io) goagain - zero-downtime restarts in Go Go Ajax - Go Ajax is a JSON-RPC implementation designed to create AJAX powered websites. gobeanstalk - Go Beanstalkd client library go-camo - Go http image proxy (camo clone) to route images through SSL go-dbus - A library to connect to the D-bus messaging system go-diameter - Diameter stack and Base Protocol (RFC 6733) go-flowrate - Data transfer rate control (monitoring and limiting) gogammu - Library for sending and receiving SMS go-icap - ICAP (Internet Content Adaptation Protocol) server library Gollum - A n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations. go-nat-pmp - A client for the NAT-PMP protocol used in Apple and open-source routers gonetbench - Simple TCP benchmarking tool gonetcheck - package for checking general internet access goodhosts - Simple hosts file (/etc/hosts) management in Go gopacket - Packet encoding/decoding, pcap/pfring/afpacket support, TCP assembly, and more! gopcap - A simple wrapper around libpcap goq - A persistent message queue written in Go. goradius - A Radius client written in Go go-rpcgen - ProtoBuf RPC binding generator for net/rpc and AppEngine gorpc - RPC optimized for high load GoRTP - RTP / RTCP stack implementation for Go GoSIPs - SIP (Session Initiation Protocol) Stack in Go go-smpp - SMPP 3.4 protocol implementation gosndfile - Go binding for libsndfile gosnmp - an SNMP library written in GoLang. go-socket.io - A Socket.IO backend implementation written in Go gosocks - A SOCKS (SOCKS4, SOCKS4A and SOCKS5) proxy client library in Go. go-sslterminator - SSL terminator proxy go-statsd-client - Go statsd client library Grumble - Mumble (VoIP) server implementation handlersocket-go - Go native library to connect to HandlerSocket interface of InnoDB tables HomeControl - an implementation of Apple's HomeKit Accessory Protocol (HAP) Hprose - Hprose is a High Performance Remote Object Service Engine. httpfstream - streaming append and follow of HTTP resources (using WebSockets) humanize-bytes - Command-line utilities to convert \"MiB\" etc to raw numbers, and back ipaddress - Convenient ip address functions: ip -> int, int -> ip, and IPNet broadcast address iris-go - Go binding for the Iris decentralized messaging framework. iris - Peer-to-peer messaging for back-end decentralization. kafka.go - Producer & Consumer for the Kafka messaging system lcvpn - Decentralized VPN implementation ldap - Basic LDAP v3 functionality for the GO programming language. mbxchan - An easy communication between distributed Go applications using standard Go channels and remote procedure calls. mqtt - MQTT stack in Go nagiosplugin - package for writing Nagios/monitoring plugins NATS - NATS distributed messaging system client for Go netsnail - A low-bandwidth simulator netstat-nat - Display NAT entries on Linux systems netutils - Simple interface for turning TCP Sockets into channels. norm - reliable UDP using multicast and unicast sockets npipe - a pure Go wrapper for Windows named pipes opendap - Go wrapper for Openldap pusher-http-go - Go library for interacting with the Pusher Realtime API QRP - QRP is a simple packet-based RPC protocol designed as a simple alternative to Go's rpc, that can run over UDP remotize - A remotize package and command that helps remotizing methods without having to chaneg their signatures for rpc Resgate - A Realtime + REST API Gateway for NATS to create web APIs with live data rs232 - Serial interface for those of us who still have modems (or arduinos) rss - RSS parsing library. seamless - Reverse TCP Proxy with HTTP management API shell2http - Executing shell commands via simple http server sockjs-go - Implements server side counterpart for the SockJS-client browser library. SOCKS5 Server - Scalable SOCKS5 server with Access Control Lists spark - Emergency web server (for static files) spdy - SPDY library, wired into net/http, currently supporting servers only. statsd-go - Statsd implementation in Go, forked from gographite, which submits to Ganglia stompngo_examples - Examples for stompngo. stompngo - A Stomp 1.1 Compliant Client tcp_fallback - A TCP proxy implementing a simple fallback mechanism. tcpmeter - A TCP throughput measuring tool toxiproxy - Framework for simulating network conditions. traceroute - A traceroute implementation traefik - Modern, reverse proxy in Go Uniqush - A free and open source software which provides a unified push service for server-side notification to apps on mobile devices. uritemplates - A level 4 implementation of URI Templates (RFC 6570) VDED - Vector Delta Engine Daemon - track deltas in ever-increasing values (written in Go) zero-downtime-daemon - Configurable zero downtime daemon (Hot Update) framework for any kind of TCP,HTTP,FCGI services zeroupgrade - Upgrades network servers with zero downtime Operating System Interfaces Go FUSE file system library - From-scratch implementation of the kernel-userspace communication protocol based on Russ Cox'. Go-fuse - Library to write FUSE filesystems in Go go-nbd - Library to write block devices for Linux in Go. go-osx-xattr - Package xattr wraps OS X functions to manipulate the extended attributes of a file, directory and symbolic link. inspect/os - Metrics library for operating system measurements (Linux/MacOSX) service - Service will install / un-install, start / stop, and run a program as a service (daemon) on Windows/Linux and OSX. Other Random Toys, Experiments and Example Code goconc - A collection of useful concurrency idioms and functions for Go, compiled go-crazy - An experimental source-to-source compiler for go go-gtk-demo - A demonstration of how to use GTK+ with Go. go-hashmap - A hash table in pure go as an experiment in Go performance golang-examples - A bunch of golang examples GolangSortingVisualization - A visualization of various sorting algorithms in Go golibs - A collection of tiny go packages (and also a test repo for various CI and coverage services) goplay - A bunch of random small programs in Go lifegame-on-golang - Game of Life in Go linear - Playing around with the linear algebra pl0 - PL/0 front end, compiler and VM. . project euler in go - Solutions to Project Euler in Go also shadergo - shader test using Go travisci-golang-example - Travis-CI example for Go P2P and File Sharing DHT - Kademlia DHT node used by Taipei-Torrent, compatible with BitTorrent DHT - BitTorrent DHT Protocol && DHT Spider. ed2kcrawler - eDonkey2000 link crawler gop2p - A simple p2p app to learn Go go-p2p - P2P module for blockchains and more GoTella - A Go implementation of the Gnutella Protocol Rain - BitTorrent client and library Taipei-Torrent - A BitTorrent client Tendermint - P2P Byzantine-Fault-Tolerant consensus & blockchain stack wgo - A simple BitTorrent client based in part on the Taipei-Torrent and gobit code Programming go-clang - cgo bindings to the C-API of libclang godeferred - port of jsdeferred: http://cho45.stfuawsc.com/jsdeferred/ go-galib - a library of Genetic Algorithms go-intset - a library to work with bounded sets of integers, including multiple alternative implementations go-parse - a Parsec-like parsing library go-slices - Helper functions for manipulating slices in Go just like the official \"strings\" package provides sh - a shell/bash parser and formatter Shuffle - Implementation of the Fisher Yates shuffle (or Knuth shuffle) in Go. Resource Embedding fileb0x - Simple tool to embed files in go with focus on \"customization\" and ease to use. go-bindata - Package that converts any file into managable Go source code. go-resources - Unfancy resources embedding with Go. go.rice - go.rice is a Go package that makes working with resources such as html,js,css,images and templates very easy. implant - implant allows embedding static resources, from a series of directories (recursively). statics - Embeds static resources into go files for single binary compilation + works with http.FileSystem + symlinks. RPC gowsdl - WSDL code generation gRPC - Google's multi-language RPC framework with Go support Scanner and Parser Generators ebnf2y - Utility for converting EBNF grammars into yacc compatible skeleton .y files. flexgo - A version of flex that can produce Go code. fsm - FSM (NFA, DFA) utilities. gocc - Go Compiler Compiler golex - Lex/flex like fast (DFA) scanners generator. gopp - Go Parser Parser goyacc - Goyacc is a version of yacc generating Go parsers. lexmachine - Lexical Analysis Framework for Golang Ragel - State Machine Compiler y - Package y converts .y (yacc) source files to data suitable for a parser generator. yy - yacc to yacc compiler. Security acme - ACME certificate acquisition tool acra - SQL database protection suite: strong selective encryption, SQL injections prevention, intrusion detection system casbin - An authorization library that supports access control models like MAC, RBAC, ABAC docker-slim - Container security and optimization gryffin - A large scale security scanner by Yahoo! hyperfox - a security tool for proxying and recording HTTP and HTTPs communications on a LAN lego - Let's Encrypt client and ACME library webseclab - a sample set of web security test cases and a toolkit to construct new ones Simulation Modeling godes - Library for building discrete event simulation models Sorting bubble-sort - minimal implementation of the bubble-sort algorithm cocktail-shaker-sort - minimal implementation of the cocktail-shaker-sort algorithm funnelsort - Lazy funnel sort \u2013 a cache-oblivious sorting algorithm Sortutil - Nested, case-insensitive, and reverse sorting for Go. sortutil - Utilities supplemental to the Go standard \"sort\" package tarjan - Graph loop detection function based on Tarjan's algorithm timsort - Fast, stable sort, uses external comparator or sort.Interface Source Code Management Gitfile - A lightweight package manager for installing git repos go-deps - Analyzes and recursively installs Go package deps (library functionality similar to go get ) go-diff - A diff command for go languange showing semantic differences of two go source files. gogitver - Embeds a git tag (version string) into your application go-many-git - Manage and run commands across multiple git repositories go-pkgs - Finds all matching packages in all of the GOPATH trees (library functionality similar to go list all ) go-vcs - clone and check out revs of VCS repositories (git and hg support) go-vcsurl - Lenient VCS repository URL parsing library hggofmt - A Mercurial/hg extension with a hook to nut - Nut is a tool to manage versioned Go source code packages, called \"nuts\". vcstool - VCS abstraction tool Storage libStorage - an open source, platform agnostic, storage provisioning and orchestration framework, model, and API Minio - Object Storage compatible with Amazon S3 API OpenEBS - Containerized, Open source block storage for your containers,integrated tightly into K8S and other environments and based on distributed block storage and containerization of storage control storage - An application-oriented unified storage layer for Golang Strings and Text allot - Placeholder and wildcard text parsing for CLI tools and bots asciidoctor-go - Native Go module for parsing and converting asciidoc markup language. awk - Easy AWK-style text processing in Go binarydist - Binary diff and patch Black Friday - A markdown processor codename-generator - A codename generator meant for naming software releases columnize - format slice or array into aligned columns csvplus - Extends the standard Go encoding/csv package with fluent interface, lazy stream operations, indices and joins. csvutil - A heavy duty CSV reading and writing library. dgohash - Collection of string hashing functions, including Murmur3 and others douceur - A simple CSS parser and inliner in Go. dsv - A library for working with delimited separated value (DSV). flux - Fluent Regular Expressions in golang frontmatter - Go library for detecting and decoding various content front matter formats. genex - Expansion of Regular Expressions gettext-go - GNU's gettext support, written in pure Go gettext - Golang bindings for gettext; Feature complete, cgo goagrep - fast fuzzy string matching using precomputation go-colortext - Change the color of the text and background in the console, working both in Windows and other systems. go-guess - Go wrapper for libguess goini - A go library to parse INI files golorem - lorem ipsum generator go-migemo - migemo extension for go (Japanese incremental text search) go-ngram N-gram index for Go goregen - A Go library for generating random strings from regular expressions. goskirt - Upskirt markdown library bindings for Go gosphinx - A Go client interface to the Sphinx standalone full-text search engine govalidator - Package of string validators and sanitizers gpKMP - String-matching in Go using the Knuth Morris Pratt algorithm hangul - Handy tools to manipulate Korean character html2text - Golang HTML to text conversion library intern - Map strings to symbols for constant-time comparisons kasia.go - Templating system for HTML and other text documents kview - Simple wrapper for kasia.go templates. It helps to modularize content of a website liquid - A complete implementation of Shopify Liquid templates logparse - Parser for most common log formats NTemplate - Nested Templates parse - PEG parser that uses reflection to define grammar peg - Parsing Expression Grammer Parser pigeon - Parsing Expression Grammar (PEG) Parser generator for Go plural - No-fuss plurals for formatting both countable and continuous ranges of values. polyglot - String translation utilities for Go pretty.go - Pretty-printing for go values raymond - A complete handlebars implementation in Go. rubex - A simple regular expression library that supports Ruby's regex syntax. It is faster than Regexp. sanitize - Package sanitize provides functions for sanitizing html and text. scanner - A text scanner that parses primitive types, analogous to Java's segment - An implementation of Norvig's recursive word segmentation algorithm sprig - Template functions for Go templates. strftime - strftime implementation strit - Package strit introduces a new type of string iterator, as well as a number of iterator constructors, wrappers and combinators. strogonoff - Stenography with Go strutil - Golang metrics for calculating string similarity and other string utility functions. strutil - Package strutil collects utils supplemental to the standard strings package. text - Text paragraph wrapping and formatting Tideland golib - Stringex package for statistcal analysis TySug - Alternative suggestions with respect to keyboard layouts. useragent - User agent string parser xurls - Extract urls from text Testing assert - Assert for go test. assert - Handy assert package. assert - Basic Assertion Library used along side native go testing, with building blocks for custom assertions assert - JUnit-like asserts with excellent error messages biff - Bifurcation testing framework, BDD compatible. charlatan - Tool to generate fake interface implementations for tests. code.soquee.net/testlog A log.Logger that proxies to the Log function on a testing.T so that logging only shows up on tests that failed, grouped under the test. conex - Docker containers for integration tests counterfeiter - Tool for generating self-contained and type-safe mocks. downtest - Automatically run tests for all known downstream consumers of a Go package. ginkgo - BDD Testing Framework for Go. go2xunit - Convert \"go test -v\" output to xunit XML output go-assert - Testing utils for Go. goautotest - Automatically run unit tests when code changes are made goblin - Minimal and Beautiful Go testing framework Gocheck - Rich test framework with suites, fixtures, assertions, good error reporting, etc GoConvey - Browser-based reporting, uses go test , supports traditional Go tests, clean DSL gocov - Code coverage testing/analysis tool gomega - Ginkgo's Preferred Matcher Library. gomock - a mocking framework for Go. GoSpec - a BDD framework gospecify - another BDD framework go-stat - performant instrumentation/profiling for Go go-tap - TAP (Test Anything Protocol) parser in Go go-testdeep - Extremely flexible deep comparison, extends the testing package go-test-report - Captures go test output and parses it into a single self-contained HTML file. gotestsum - a test runner with customizable and colored output gotest.tools - a collection of packages for writing readable tests gounit - xunit for Go GSpec - Expressive, reliable, concurrent and extensible Go test framework that makes it productive to organize and verify the mind model of software. httpexpect - Concise, declarative, and easy to use end-to-end HTTP and REST API testing make.go.mock - Generates type-safe mocks for Go interfaces and functions. mspec - BDD framework that frees you to Stub and Spec your code first with natural BDD language. muxy - Simulating real-world distributed system failures. Nitro - A quick and simple profiler For Go Pegomock - a mocking framework based on golang/mock , but uses a DSL closely related to Mockito . rapid - property-based testing library with integrated shrinking terst - A terse, easy-to-use testing library for Go test2doc - Generate documentation for your go units from your unit tests. testfixtures - Rails' like test fixtures for testing database driven apps. testflight - Painless http testing in Go Testify - A set of packages that provide many tools for testifying that your code will behave as you intend. ut - Awesome mocks without magic. Transpiler c4go - Transpiling C code to Go code. f4go - Transpiling Fortran code to Go code. Validation validator - Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving validation - Simple independent struct/key-value validation Version Control gitea - Git with a cup of tea, painless self-hosted git service git (in go) - Minimal working git client in Go gogs - Self-hosting Git Server in Go semver - Semantic Versioning (SemVer) library Virtual Machines and Languages agora - A dynamically typed, garbage collected, embeddable programming language built with Go anko - Scriptable interpreter written in golang evalfilter - Embedded evaluation engine for filtering objects. expr - Expression evaluator with static typing forego - Forth virtual machine Gelo - Extensible, embeddable interpreter Gentee - Embeddable scripting programming language GoAwk - An implementation of awk in golang. GoBASIC - An embeddable BASIC interpreter written in golang. GoEmPHP - This package is built for Embedding PHP into Go goenv - Create an isolated environment where you install Go packages, binaries, or even C libraries. Very similar to virtualenv for Python. GoForth - A simple Forth parser Goja - ECMAScript 5.1(+) implementation written in Go (otto fork with byte code compiler) golem - A general purpose, interpreted scripting language. golemon - A port of the Lemon parser-generator GoLightly - A flexible and lightweight virtual machine with runtime-configurable instruction set goll1e - An LL(1) parser generator for the Go programming language. Golog - Prolog interpreter in Go golua - A fork of GoLua that works on current releases of Go go-lua - Shopify's lua interpreter gomruby - mruby (mini Ruby) bindings for Go gopher-lua - A Lua 5.1 VM and compiler written in Go go-php - PHP bindings for Go go-python - go bindings for CPython C-API gotcl - Tcl interpreter in Go go-v8 - V8 JavaScript engine bindings for Go go.vm - Simple virtual machine which interprets bytecode. Hivemind - Process manager for Procfile-based applications LispEx - A dialect of Lisp extended to support for concurrent programming, written in Go. Minima - A language implemented in Go ngaro - A ngaro virtual machine to run retroForth images otto - A JavaScript parser and interpreter written natively in Go Overmind - Process manager for Procfile-based applications and tmux py4go - Python 3 bindings for Go RubyGoLightly - An experimental port of TinyRb to Go v8 - V8 JavaScript engine bindings for Go (supports V8 builds at least up to 5.8.244) Yaegi - A complete Go interpreter in Go Web Applications Caddy - A fast, capable, general-purpose HTTP/2 web server that's easy to use Dataflowkit - Web scraping Service to turn websites into structured data. Digestw - A Web Application - Twitter's Timeline Digest fabio - A fast zero-conf load balancing HTTP router for microservices. Filestash - A web client for SFTP, S3, FTP, WebDAV, Git, Minio, LDAP, Caldav, Carddav, Mysql, Backblaze, \u2026 fourohfourfound - A fallback HTTP server that may redirect requests with runtime configurable redirections Fragmenta - A CMS built in Go freegeoip - IP geolocation web service (web server of freegeoip.net) Freyr - Server for storing and serving readings from plant environment sensors. Integrates Golang API with ReactJS web app; uses Docker for testing/deployment. goals-calendar - A web-based Seinfeld calendar implemented in Go goblog - A static blog engine gocrawl - A polite, slim and concurrent web crawler. goflash - Flash player implementation in Go language gogallery - simple web server with an emphasis on easily browsing images gojekyll - A golang clone of the Jekyll static site generator goof - A simple http server to exchange files over http (upload/download) gopages - A php-like web framework that allows embedding Go code in web pages go_spider - A flexible ,modularization and concurrent web crawler framework. GoURLShortener - A frontend for the http://is.gd/ URL shortener gowall - A website and user system grabbit - A lightweight transactional message bus on top of RabbitMQ httpfolder - A http server to exchange files over http with basic authentication (upload/download) Hugo - A fast and flexible static site generator implemented in Go J\u00e1 Vai Tarde - Unfollows monitoring for Twitter kurz.go - a url shortener based on web.go and redis Monsti - Resource friendly flat file CMS for private and small business sites. now.go - A simple HTTP-based to-do queue. Peach - A web server for multi-language, real-time synced and searchable documentation. Presento - The simplest possible cross-platform remote control for the presentations rabbitmq-http - REST API for RabbitMQ Rickover - Job queue with a HTTP API, backed by Postgres serve-files - Far-future and gzip wrapper around the standard net/http server. sf_server - a tiny send file server and client SuperSaaS API Client - HTTP client library for the supersaas.com scheduling/bookings/appointments API Tideland golib - Web package for REST request handling Vantaa - A modular blogging API engine written in Go, Neo4j and Polymer. websiteskeleton - Simple net/http website skeleton webtf - Web app to graphical visualization of twitter timelines using the HTML5 Wikifeat - Extensible wiki system using CouchDB written in Golang jweb - A Symfony( https://symfony.com/ ) inspired framework, written in Go Web Libraries Authentication authcookie - Package authcookie implements creation and verification of signed authentication cookies. code.soquee.net/otp A library for generating one-time passwords using HOTP (RFC-4226), and TOTP (RFC-6238). Includes less commonly used profiles, and custom time functions for flexible windows. dgoogauth - Go port of Google's Authenticator library for one-time passwords goauth - A library for header-based OAuth over HTTP or HTTPS. GOAuth - OAuth Consumer goha - Basic and Digest HTTP Authentication for Go http client go-http-auth - HTTP Basic and HTTP Digest authentication Go-OAuth - OAuth 1.0 client go-otp - Package go-otp implements one-time-password generators used in 2-factor authentication systems like RSA-tokens. Currently this supports both HOTP (RFC-4226), TOTP (RFC-6238) and Base32 encoding (RFC-3548) for Google Authenticator compatibility goth - Package goth provides a simple, clean, and idiomatic way to write authentication packages for Go web applications hero - OAuth server implementation - be an OAuth provider with Go httpauth-go - Package httpauth provides utilities to support HTTP authentication policies. Support for both the basic authentication scheme and the digest authentication scheme are provided. httpauth - HTTP session (cookie) based authentication and authorization oauth1a - OAuth 1.0 client library OAuth Consumer - OAuth 1.0 consumer implementation otp - HOTP and TOTP library with command line replacement for Google Authenticator securecookie - Encode and Decode secure cookies totp - Time-Based One-Time Password Algorithm, specified in RFC 6238, works with Google Authenticator DOM handling Cascadia - CSS selector library GoQuery - jQuery-like DOM manipulation library, using Go's experimental HTML package. goq - jQuery-like declarative struct tag scraping and unmarshaling based on GoQuery. html-query - A fluent and functional approach to querying HTML. HTML Transform - A CSS selector based html scraping and transformation library Frameworks and Toolkits aah - A scalable, performant, rapid development Web framework for Go. Aero - Fast and secure web server for Go. Air - An ideal RESTful web framework for Go. alien - A lightweight and fast http router app.go - Web framework for google app engine arasu - A Lightning Fast Web Framework written in Go & Dart Beego - Beego is an open source version of the scalable, non-blocking web framework. browserspeak - Generate HTML templates, CSS or SVG without writing < or > eudore - Eudore is the core of a golang lightweight web framework. falcore - Modular HTTP server framework fcgi_client - Go fastcgi client with fcgi params support Flamingo Framework - Framework for building pluggable production ready web projects. florest - High-performance workflow based REST API framework in Go forgery - A clone of the superb Node.js web framework Express. Gin Web Framework - Martini-like API and httprouter gives it good performance. Goal - A toolkit for high productivity web development in Go language built around the concept of code generation. Go-Blog - Blog framework written in Go go-fastweb - aims to be a simple, small and clean MVC framework for go goku - a Web Mvc Framework for Go, mostly like ASP.NET MVC. Golanger - Golanger Web Framework is a lightweight framework for writing web applications in Go. Goldorak.Go - a web miniframework built using mustache.go, web.go and Go-Redis go-restful - lean package for building REST-style Web Services GoRest - An extensive configuration(tags) based RESTful style web-services framework. go-rest - A small and evil REST framework for Go gorilla - Gorilla web toolkit GoSrv - A Go HTTP server that provides simple command line functionality, config loading, request logging, graceful connection shutdown, and daemonization. go-start - A high level web-framework for Go go-urlshortener - interface to google's urlshorten API goweb - Lightweight RESTful web framework for Go providing Ruby on Rails style routing go-webproject - Modular web application framework and app server Gowut - Go Web UI Toolkit is a full-featured, easy to use, platform independent Web UI Toolkit written in pure Go. Goyave - An elegant, full-featured web application framework gramework - The truly fastest web framework for Go. Battle tested, highly effective baseline for your web apps. httpcoala - Library for request coalescing - handy for reverse proxies. HttpRouter - A high performance HTTP request router that scales well limiter - Simple rate limter middleware for Go Macaron - Modular web framework in Go mango - Mango is a modular web-application framework for Go, inspired by Rack, and PEP333. Martini deprecated - Martini is a popular, lightweight, extensible package for writing modular web apps/services in Go Negroni - Idiomatic middleware for Go restclient - Client library for interacting with RESTful APIs. resty - REST client library inspired by Ruby rest-client. Revel - High productivity web framework modeled on Play! Framework Ringo - Lighweight MVC web framework inspired by Rails, Gin. sawsij - Provides a small, opinionated web framework. Tango - Micro-kernel & pluggable web framework for Go Tiger Tonic - framework for building JSON web services inspired by Dropwizard trinity - MVC framework uAdmin - Web framework with a back end GUI similar to Django. Utron - MVC Framework Violetear - HTTP router web.go - a simple framework to write webapps wfdr - Simple web framework designed for and written in go. Works with other languages as well, but not as well. xweb - A web framework for Go. Just like Struts for Java. HTML forms form - Complete bidirectional HTML form encoder & decoder (x-www-form-urlencoded) for arbitrary data (package encoding compatible) gforms - HTML forms for Go Go-FORM-it - Go library for easy and highly-customizable forms creation and template rendering. GoForms - Form data validation, cleaning and error reporting - a la django.forms htmlfiller - Fills in html forms with default values and errors a la Ian Bicking's htmlfill for Python MonstiForm - HTML form generator and validator library revel-csrf - Cross-Site Request Forgery (CSRF) attacks prevention for the Revel framework xsrftoken - A package for generating and validating tokens used in preventing XSRF attacks Public API Wrappers adn - Interface to the App.net API anaconda - Client library for the Twitter 1.1 API cloudcomb-go-sdk - Go client library for CloudComb ddg - DuckDuckGo API interface facebook - Up-to-date facebook graph API client. Handy and flexible filepicker-go - Go library for the Filepicker's REST API firebase - Client library for the Firebase REST API gh - Scriptable server and net/http middleware for GitHub Webhooks API github - Go library for accessing the GitHub REST API v3 githubql - Go library for accessing the GitHub GraphQL API v4 gobo - Client library for Sina Weibo gocaptcha - gocaptcha provides easy access to the reCaptcha API in go go-dealmap - Go library for accessing TheDealMap's API go-dropbox - API library for dropbox go-flickr - A wrapper for Flickr's API go-get-youtube - A simple library+client for fetching meta data of, and downloading Youtube videos go-gravatar - Wrapper for the Gravatar API go-hummingbird - Go library for accessing the Hummingbird.me API go-libGeoIP - GO Lib GeoIP API for Maxmind gominatim - Go library to access nominatim geocoding services gomojo - Instamojo API wrapper gomwapi - Access mediawiki contents like wikipedia, wiktionary in golang go-myanimelist - Go library for accessing the MyAnimeList API googtrans - unofficial go bindings for Google Translate API v2 go-recaptcha - Handles reCaptcha form submissions in Go gorecurly - A Client app to use with Recurly's api go.strava - Official client library for the Strava V3 API go.stripe - a simple credit card processing library for Go using the Stripe API Gotank - Searchify's Go client for the IndexTank full-text search API go-tripit - Go API library for the TripIt web services GoTwilio - Twilio library for Go (golang). Very basic at the moment gravatar - Gravatar image/profile API library jsonapi - Generate JSON API from Go structs postmark - Access postmark API from Go reddit.go - Client library for Reddit API shorturl - Generic implementation for interacting with various URL shortening services SocialSharesCount - Wrapper API on multiple social websites to get URL share statistics Stack on Go - Go wrapper for Stack Exchange API stripe - Official Stripe client library twilio - Simple Twilio API wrapper twittergo - Client library for Twitter's API vksdk - Golang module for working with VK API Other adhoc-http - Quick & dirty HTTP static file server aop - Aspect Oriented Programming For Go. assets - Helps prepares CSS and JS files for development and production of Go web apps. bwl - a set of libraries to help build web sites captcha - Image and audio captcha generator and server gaerecords - Lightweight wrapper around appengine/datastore providing Active Record and DBO style management of data gcd - provides helpful functions to work with Google Cloud DataStore. get2ch-go - a library to access the 2channel Japanese web bulletin board gofeed - Parse RSS and Atom feeds in Go go-gzip-file-server - A net.http.Handler similar to FileServer that serves gzipped content gohaml - An implementation of the popular XHTML Abstraction Markup Language using the Go language. go-httpclient - a Go HTTP client with timeouts gojwt - Json Web Tokens for Go go-pkg-rss - a packages that reads RSS and Atom feeds gorefit - A library for theming existing websites goreman - foreman clone GoRequest - Simplified HTTP client with rich features such as proxy, timeout, and etc. ( inspired by nodejs SuperAgent ) goroute - A very simple URL router based on named submatches of regular expression that works well with http.Handler . gorouter - Simple router for go to process url variables go-rss - Simple RSS parser and generator go-rss - Simple RSS parser, tested with Wordpress feeds. goscribble - An MPD Audioscrobble go-twitter - another Twitter client go-twitter-oauth - a simple Twitter client (supports OAuth) grender - Go static site generator halgo - HAL -compliant API client and serialisation library. http-gonsole - Speak HTTP like a local. (the simple, intuitive HTTP console, golang version) httprpc - HTTP RPC codecs (json2, soap, rest) HypeCMS - A flexible CMS built with Go and MongoDb. Kontl - A client for kon.tl's URL shortening service mustache.go - an implementation of the Mustache template language muxer - Simple muxer for a Go app without regexp Optimus Sitemap Generator - A universal XML sitemap generator passwordreset - Creation and verification of secure tokens useful for implementation of \"reset forgotten password\" feature in web applications. pat - A Sinatra style pattern muxer persona - remote verification API for persona plex - simple, small, light, regexp http muxer with chaining podcast - iTunes and RSS 2.0 Podcast Generator in Golang purell - tiny Go library to normalize URLs pusher.go - HTTP Server Push module for the standard http package rest2go - Based on rest.go, forked for improvements and REST consistency rest.go (forked) - forked rest.go for improvements and REST consistency resty - Simple HTTP and REST client for Go inspired by Ruby rest-client. robotstxt - The robots.txt exclusion protocol implementation. Allows to parse and query robots.txt file. scs - A HTTP session manager using server-side sessions stores. seshcookie - A web session library inspired by Beaker soy - A Go implementation for Soy templates (Google Closure templates). High performance and i18n. user_agent - An HTTP User-Agent parser webtestutil - Web and HTTP functional testing utilities. Includes Gorilla testing support. yt2pod - Daemon that monitors YouTube channels and publishes audio podcasts of them Windows gform - An easy to use Windows GUI toolkit for Go go-ole - win32 ole implementation for golang go-Windows-begin - for the absolute Windows-Go beginner w32 - Windows API wrapper for Go. walk - \"Windows Application Library Kit\" for the Go Programming Language Windows Command Line Shutdown - A tool to shutdown Windows Computer from Command Prompt Unix inspect - Linux and MacOSX systems monitoring and diagnostics unixsums - Legacy Unix checksums: cksum, sum Unsorted; please help! The following entries have not been filed. Please help by putting these in relevant categories. consistent - Consistent hashing with bounded loads. dotviz-server - WebBased DOT language visualization tool written in go ebml-go - EBML decoder go-bindata - Converts any file into manageable Go source code for embedding binary data into a Go program. GoBot - PoC Go HTTP Botnet goconsistenthash - Consistent hashing library (based on http://www.lexemetech.com/2007/11/consistent-hashing.html ) go-cron - A small cron job system to handle scheduled tasks, such as optimizing databases or kicking idle users from chat. The cron.go project was renamed to this for go get compatibility. godebiancontrol - Golang debian control file parser godotviz - Rendering graphics files from \"DOT language\". Written in golang go-gmetric - Ganglia gmetric protocol support gographviz - Graphviz DOT language parser for golang golor - golor is a command line tool for golang source code coloring gopcapreader - Presents realtime pcap data as io.Reader objects go.psl - Go regdom-libs/public suffix list goseq - command line tool, written in Go, for creating sequence diagrams using a text-based description language. go-webfinger - Simple Client Implementation of WebFinger img-LinuxFr.org - A reverse-proxy cache for external images used on LinuxFr.org one-file-pdf - A minimalist Go PDF writer in <2K lines and 1 file seed - Easily seed PRNGs with some entropy spellabc - Package spellabc implements spelling alphabet code word encoding. Tasks - A simplistic todo list manager written in Go Twackup - Backs up your tweets into local files al-Go-rithms - Collection of algorithms on arrays, runes, strings for reference purpose.","title":"Projects"},{"location":"Projects/#indexes-and-search-engines","text":"These sites provide indexes and search engines for Go packages: Awesome Go @LibHunt - Your go-to Go Toolbox. godoc.org - A documentation browser for any Go open source package. go-hardware - Curated list of resources for using Go on non-standard hardware. go-patterns - Commonly used patterns and idioms for Go. go-search - Search engine dedicated to Go projects and source. gowalker - API documentation generator and search. Go Report Card - Code quality summaries for any Go project. Sourcegraph - Source indexing, analysis and search. Codeseek.com - Custom search engine with a wealth of Go blogs.","title":"Indexes and search engines"},{"location":"Projects/#dead-projects","text":"If you find a project in this list that is dead or broken, please either mark it as such or mention it in the #go-nuts IRC channel.","title":"Dead projects"},{"location":"Projects/#table-of-contents","text":"API Services and Tools Astronomy Build Tools Caching Cloud Computing Command-line Option Parsers Command-line Tools Compression Concurrency and Goroutines Configuration File Parsers Console User Interface Continuous Integration Cryptocurrency Cryptography Databases Data Processing Data Structures Date Development Tools Distributed/Grid Computing Documentation Editors Email Encodings and Character Sets Error handling File Systems Games GIS Go Implementations Graphics and Audio GUIs and Widget Toolkits Hardware Language and Linguistics Logging & Monitoring Machine Learning & AI Mathematics Microservices Miscellaneous Music Networking DNS FTP HTTP IMAP Instant Messaging NNTP Protocol Buffers rsync Telnet VNC Websockets ZeroMQ Misc Networking Operating System Interfaces Other Random Toys, Experiments and Example Code P2P and File Sharing Programming Resource Embedding RPC Scanner and Parser Generators Security Simulation Modeling Sorting Source Code Management Storage Strings and Text Testing Transpiler Unix Unsorted Validation Version Control Virtual Machines and Languages Web Applications Web Libraries Windows","title":"Table of Contents"},{"location":"Projects/#api-services-and-tools","text":"","title":"API Services and Tools"},{"location":"Projects/#graphql","text":"GraphJin - Instant GraphQL API for Postgres. No code needed, compiles GraphQL to SQL.","title":"GraphQL"},{"location":"Projects/#mtproto","text":"MTProto - Full-native implementation of Telegram API written on pure Go.","title":"MTProto"},{"location":"Projects/#astronomy","text":"go-fits - FITS (Flexible Image Transport System) format image and data reader astrogo/fitsio - Pure Go FITS (Flexible Image Transport System) format image and data reader/writer cosmo - Cosmological distance and time calculations for common cosmologies (Friedmann-Lema\u00eetre-Robertson-Walker metric). gonova - A wrapper for libnova \u2013 Celestial Mechanics, Astrometry and Astrodynamics Library meeus - Implementation of \"Astronomical Algorithms\" by Jean Meeus novas - Interface to the Naval Observatory Vector Astrometry Software (NOVAS) utdfgo - Spacecraft UTDF Packet Reader and Decoder","title":"Astronomy"},{"location":"Projects/#build-tools","text":"beku - A library and program to manage packages in user's environment (GOPATH or vendor directory) colorgo - Colorize go build output dogo - Monitoring changes in the source file and automatically compile and run (restart) fileembed-go - This is a command-line utility to take a number of source files, and embed them into a Go package gb - A(nother) build tool for go, with an emphasis on multi-package projects gg - A tiny multi golang projects env/make management tool. GG - A build tool for Go in Go godag - A frontend to the Go compiler collection goenv - goenv provides Go version and Go workspace management tools gopei - Simple Go compiler and LiteIDE installer for Unix/Linux that adds many features like github support and presenter. go-pkg-config - lightweight clone of pkg-config goscons - Another set of SCons builders for Go go-server - Agile server framework. gotgo - An experimental preprocessor to implement 'generics' gows - Go workspace manager goxc - A build tool with a focus on cross-compiling, packaging, versioning and distribution GVM - GVM provides an interface to manage Go versions Realize - A Go build system with file watchers, output streams and live reload. Run, build and watch file changes with custom paths. SCons Go Tools - A collection of builders that makes it easy to compile Go projects in SCons Task - A task runner / simple alternative to Make","title":"Build Tools"},{"location":"Projects/#caching","text":"cache2go - Concurrency-safe caching library with expiration capabilities and access counters cache - LevelDB style LRU cache for Go, support non GC object cache. go-cache - An in-memory key:value store/cache (similar to Memcached) library for Go, suitable for single-machine applications golibs/cache - A tiny cache package gomemcached - A memcached server in go gomemcache - a memcached client go-slab - Slab allocator for go. groupcache - Caching and cache-filling library, intended as a replacement for memcached in many cases libmemcache - Fast client and server libraries speaking memcache protocol memcached-bench - Benchmark tool for memcache servers memcached - Fast memcache server, which supports persistence and cache sizes exceeding available RAM memcache - go memcached client, forked from YouTube Vitess rend - A memcached proxy that manages data chunking and L1/L2 caches YBC bindings - Bindings for YBC library providing API for fast in-process blob cache g2cache -A coordinated local and external two-level caching scheme","title":"Caching"},{"location":"Projects/#cloud-computing","text":"aws-sdk-go - AWS SDK for the Go programming language. Docker - The Linux container runtime. Developed by dotCloud. Enduro/X ASG Application Server for Go. Provides application server and middleware facilities for distributed transaction processing. Supports microservices based application architecture. Developed by ATR Baltic. flamingo - A Lightweight Cloud Instance Contextualizer. gocircuit - A distributed operating system that sits on top of the traditional OS on multiple machines in a datacenter deployment. It provides a clean and uniform abstraction for treating an entire hardware cluster as a single, monolithic compute resource. Developed by Tumblr. gosync - A package for syncing data to and from S3. juju - Orchestration tool (deployment, configuration and lifecycle management), developed by Canonical. Kubernetes - Container Cluster Manager from Google. LXD Daemon based on liblxc offering a REST API to manage containers mgmt - Next Generation Configuration Management tool (parallel, event driven, distributed system) developed by @purpleidea , (a Red Hat employee) and the mgmt community. rclone - \"rsync for cloud storage\" - Google Drive, Amazon Drive, S3, Dropbox, Backblaze B2, One Drive, Swift, Hubic, Cloudfiles, Google Cloud Storage, Yandex Files ShipBuilder - ShipBuilder is a minimalist open source platform as a service, developed by Jay Taylor. swift - Go language interface to Swift / Openstack Object Storage / Rackspace cloud files Tsuru - Tsuru is an open source polyglot cloud computing platform as a service (PaaS), developed by Globo.com.","title":"Cloud Computing"},{"location":"Projects/#command-line-option-parsers","text":"argcfg - Use reflection to populate fields in a struct from command line arguments autoflags - Populate go command line app flags from config struct cobra - A commander for modern go CLI interactions supporting commands & POSIX/GNU flags cli - A Go library for implementing command-line interfaces. cmdline - A simple parser with support for short and long options, default values, arguments and subcommands. command - Add subcommands to your CLI, provides help and usage guide. docopt.go - An implementation of docopt in the Go programming language. flaq - Command-line options parsing library, POSIX/GNU compliant, supports struct tags as well as the Go's flag approach. getopt - full featured traditional (BSD/POSIX getopt) option parsing in Go style getopt - Yet Another getopt Library for Go. This one is like Python's. gnuflag - GNU-compatible flag parsing; substantially compatible with flag. go-commander - Simplify the creation of command line interfaces for Go, with commands and sub-commands, with argument checks and contextual usage help. Forked from the \"go\" tool code. go-flags - command line option parser for go go-getoptions - Go option parser inspired on the flexibility of Perl s GetOpt::Long. goopt - a getopt clone to parse command-line flags go-options - A command line parsing library for Go mellium.im/cli A library for parsing modern CLI apps including subcommands that may have their own flags and a built in help system. Designed to use a minimal API. options - Self documenting CLI options parser opts.go - lightweight POSIX- and GNU- style option parsing pflag - Drop-in replacement for Go's flag package, implementing POSIX/GNU-style \u2013flags. subcommands - A concurrent, unit tested, subcommand library uggo - Yet another option parser offering gnu-like option parsing. This one wraps (embeds) flagset. It also offers rudimentary pipe-detection (commands like ls behave differently when being piped to). writ - A flexible option parser with thorough test coverage. It's meant to \"just work\" and stay out of the way.","title":"Command-line Option Parsers"},{"location":"Projects/#command-line-tools","text":"amqp-message-remover - Removes unwanted messages by regexp pattern from AMQP queue Arduino-cli - Arduino CLI is an all-in-one solution that provides builder, boards/library manager, uploader, discovery and many other tools needed to use any Arduino compatible board and platforms. awless - A Mighty command-line interface for Amazon Web Services (AWS). boilr - A blazing fast CLI tool for creating projects from boilerplate templates. box-cli-maker - Make highly customized Boxes for your CLI. comb-go - A CLI tool implemented by Golang to manage CloudComb resources. coshell - A drop-in replacement for GNU 'parallel'. dasel - Query and update data structures using selectors from the command line. Comparable to jq / yq but supports JSON, YAML, TOML and XML with zero runtime dependencies. DevTodo2 - A small command-line per-project task list manager. dsio - Command line tool for Google Cloud Datastore. efs2 - A dead-simple configuration management tool that is powered by stupid shell scripts. enumeration - Easy enumeration code generation. fzf - A command-line fuzzy finder gich - A cross platform which utility written in Go gister - Manage your github gists from the command-line git-time-metric - Simple, seamless, lightweight time tracking for Git gmail2go - Simple gmail multiple accounts cli mail checker go-amqp-sniffer - Listens from AMQP exchange and streams messages to standard output in mongoimport compatible JSON gocreate - Command line utility that create files from templates. godocdoc - Start godoc and open it in your browser to the project in the current directory. gojson - Command-line tool for manipulating JSON for use in developing Go code. GoNote - Command line SimpleNote client. gopass - Command line password manager with git syncing capabilities GoPasswordCreator - A small tool, which creates random passwords Grozilla - File downloader utility with resume capability. JayDiff - A JSON diff utility written in Go. jsonpp - A fast command line JSON pretty printer. lsp - A human-friendlier alternative to ls ltst - View the latest news of your choosing right in your terminal passhash - Command-line utility to create secure password hashes passman - A command-line password manager pdfcpu - PDF processor. pjs - Pretty print and search through JSON data structures fast. project - Very simple CLI tool to setup new projects from boilerplate templates. redis-view - A tree like tool help you explore data structures in your redis server remote-torrent - A simple tool for downloading Torrent remotely and retrieving files back over HTTP at full speed without ISP Torrent limitation restic - A fast, efficient and secure backup program runtemplate - A very simple command-line tool for executing Go templates, useful for use with go generate . runtemplate - A simple tool for executing Go templates to support generating Go code for your types. sift - A fast and powerful open source alternative to grep tecla - Command-line editing library Terracognita - Reads from existing Cloud Providers (reverse Terraform) and generates your infrastructure as code on Terraform configuration. wlog - A simple logging interface that supports cross-platform color and concurrency. wmenu - An easy to use menu structure for cli applications that prompts users to make choices. mani - CLI tool to help you manage multiple repositories","title":"Command-line Tools"},{"location":"Projects/#compression","text":"brotli - go bindings for Brotli algorithm. compress - Faster drop in replacements for gzip, zip, zlib, deflate. dgolzo - LZO bindings. go-lzo - Pure-Go LZO compressor/decompression, faithful translation of the C codebase. dictzip - A reader and writer for files in the random access dictzip format. fast-archiver - Alternative archiving tool with fast performance for huge numbers of small files. gbacomp - A Go library to (de)compress data compatible with GBA BIOS. go-lz4 - Port of LZ4 lossless compression algorithm to Go. go-lzss - Implementation of LZSS compression algorithm in Go. go-sevenzip - Package sevenzip implements access to 7-zip archives (wraps C interface of LZMA SDK). go-zip - A wrapper around C library libzip, providing ability to modify existing ZIP archives. lz4 - High performance, concurrent LZ4 implementation. lzma - compress/lzma package for Go. pgzip - Multicore gzip, compatible with the standard library. ppmd-go - Golang bindings for the LZMA SDK library. (Only binded PPMD) s2 - High throughput Snappy extension. snappy-go - Google's Snappy compression algorithm in Go. yenc - yenc decoder package. zappy - Package zappy implements the zappy block-based compression format. It aims for a combination of good speed and reasonable compression. zstd - Pure Go Zstandard compression/decompression.","title":"Compression"},{"location":"Projects/#concurrency-and-goroutines","text":"grpool - Lightweight Goroutine pool. pool - Go consumer goroutine pool for easy goroutine handling + time saving. tunny - A goroutine pool. worker - An easy and lightweight concurrent job framework.","title":"Concurrency and Goroutines"},{"location":"Projects/#configuration-file-parsers","text":"awsenv - a small binary that loads Amazon (AWS) environment variables for a profile code.soquee.net/env \u2014 Load environment variables from .env or similar files, or from any io.Reader and populate the local environment. confl - nginx config syntax, lenient, encode/decode, custom marshaling configor - Golang Configuration tool that support YAML, JSON, TOML, Shell Environment fig - Tiny library for reading configuration from a file and from environment variables (with validation & defaults). flagfile - Adds parsing and serialization support to the standard library flag package (adds a \u2013flagfile option) gcfg - read INI-style configuration files into Go structs; supports user-defined types and subsections globalconf - Effortlessly persist to and read flag values from an ini config file goconf - a configuration file parser goconfig - Configuration based on struct introspection, supports environment vars, command line args, and more. hjson - Human JSON, a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments. hocon - Configuration library for working with the HOCON(a human-friendly JSON superset) format, supports features like environment variables, referencing other values, comments and multiple files. jsonconfig - a JSON configuration file parser with comments support koanf - Light weight, extensible library for reading config in Go applications. Built in support for JSON, TOML, YAML, env, command line. properties - Library for reading and writing properties files scribeconf - Facebook Scribe server configuration file parser toml : go-toml-config - TOML-based config for Go go-toml - Go library for the TOML language gp-config - Subset of TOML syntax with basic and reflection APIs toml-go - An easy-to-use Go parser for the Toml format toml - TOML parser for Go with reflection tom-toml - TOML parser for Go, support comments/formatter/apply. uConfig - an unopinionated, extendable and plugable configuration management. Supports YAML, TOML, JSON, Env vars, K8s DAPI, et al. viper - a complete configuration solution supporting YAML, TOML & JSON and integration with command line flags yaml: yaml - YAML support for the Go language, by Canonical goyaml - A port of LibYAML to Go go-yaml - YAML support for the Go language","title":"Configuration File Parsers"},{"location":"Projects/#console-user-interface","text":"ansi - Easily create ansi escape code strings and closures to format, color console output ansiterm - pkg to drive text-only consoles that respond to ANSI escape sequences cons - A simple package for building interactive console tools. gnureadline - GNU Readline bindings go-ansiout - Another ANSI escape code sequence tool for use with command-line applications. gockel - a Twitter client for text terminals gocui - Minimalist library aimed at creating Console User Interfaces gocurse - Go bindings for NCurses gocurses - NCurses wrapper go-ibgetkey - \"hot key\" type user input package for use in processing keystrokes in command-line applications. go.linenoise - Linenoise bindings (simple and easy readline with prompt, optional history, optional tab completion) goncurses - An ncurses library, including the form, menu and panel extensions gopass - Allows typing of passwords without echoing to screen go-pullbarz - Fancy \"light bar\" menus like in Lotus 123 from the DOS days. Dependent on go-ibgetkey and go-ansiout. go.sgr - Terminal/console colors and text decoration (bold,underlined,etc). go-stfl - a thin wrapper around STFL, an ncurses-based widget toolkit goterminal - A go library that lets you write and then re-write the text on terminal, to update progress. It works on Windows too! go-web-shell - Remote web shell, implements a net/http server. igo - A simple interactive Go interpreter built on exp/eval with some readline refinements oh - A Unix shell written in Go pty - obtain pseudo-terminal devices readline - A pure go implementation for GNU-Readline kind library tcell - Tcell is an alternate terminal package, similar in some ways to termbox, but better in others. termbox-go - A minimalist alternative to ncurses to build terminal-based user interfaces termios - Terminal support termon - Easy terminal-control-interface for Go. uilive - uilive is a go library for updating terminal output in realtime. uiprogress - A library to render progress bars in terminal applications. uitable - A library to improve readability in terminal apps using tabular data. yandex-weather-cli - Command line interface for Yandex weather service","title":"Console User Interface"},{"location":"Projects/#continuous-integration","text":"goveralls - Go integration for Coveralls.io continuous code coverage tracking system. overalls - Multi-Package go project coverprofile for tools like goveralls","title":"Continuous Integration"},{"location":"Projects/#cryptocurrency","text":"Skycoin - Skycoin is a next-generation cryptocurrency written in Go. Skycoin is not designed to add features to Bitcoin, but rather improves Bitcoin by increasing simplicity, security and stripping out everything non-essential.","title":"Cryptocurrency"},{"location":"Projects/#cryptography","text":"BLAKE2b - Go implementation of BLAKE2b hash function cryptogo - some useful cryptography-related functions, including paddings (PKCS7, X.923), PBE with random salt and IV cryptoPadding - Block padding schemes implemented in Go dkeyczar - Go port of Google'e Keyczar cryptography library dkrcrypt - Korean block ciphers: SEED and HIGHT dskipjack - Go implementation of the SKIPJACK encryption algorithm go-cs - concurrent ssh client. go-ed25519 - CGO bindings for Floodberry's ed25519-donna. Fast batch verification. go-hc128 - Go implementation of HC-128, an eSTREAM stream cipher go-jose - Go implementation of the JOSE standards go-lioness - Lioness wide-block cipher using Chacha20 and Blake2b go-minilock - Go implementation of the minilock file encryption system. GoSkein - Implementation of Skein hash and Threefisch crypto for Go go-sphinxmixcrypto - Sphinx mix network cryptographic packet format operations keccak - A keccak (SHA-3) implementation ketama.go - libketama-style consistent hashing kindi - encryption command line tool openssl - openssl bindings for go otrcat - a general purpose command-line tool for communicating using the Off-The-Record protocol scrypt - Go implementation of Colin Percival's scrypt key derivation function secureio - An easy-to-use XChaCha20-encryption wrapper for io.ReadWriteCloser using ECDH key exchange algorithm, ED25519 signatures and Blake3+Poly1305 checksums/message-authentication. Also a multiplexer. simpleaes - AES encryption made easy siphash - SipHash: a fast short-input pseudorandom function SRP - SRP: Secure Remote Password - Implementation in go ssh-vault - encrypt/decrypt using ssh keys themis - Multi-platform high-level cryptographic library for protecting sensitive data: secure messaging with forward secrecy, secure data storage (AES256GCM); suits for building end-to-end encrypted applications tiger - Tiger cryptographic hashing algorithm whirlpool - whirlpool cryptographic hashing algorithm","title":"Cryptography"},{"location":"Projects/#data-processing","text":"automi - Compose process and integration flows on Go channels Gleam - Fast, efficient, and scalable distributed map/reduce system, DAG execution, in memory or on disk, runs standalone or distributedly. Glow - Glow is an easy-to-use distributed computation system, similar to Hadoop Map Reduce, Spark, Flink, Storm. gostatsd - Statsd server and library. Heka - Real time data and log file processing engine. Kapacitor - Framework for processing, monitoring and alerting on timeseries data. parapipe - FIFO Pipeline which parallels execution on each stage while maintaining the order of messages and results pipe - Several functional programming supporting in golang (Map/Reduce/Filter) proto - Map/Reduce/Filter etc. for Go using channels as result streams. ratchet - A library for performing data pipeline / ETL tasks in Go. regommend - Recommendation engine. rrd - Bindings for rrdtool. XConv - Convert any value between types (base type, struct, array, slice, map, etc.)","title":"Data Processing"},{"location":"Projects/#data-structures","text":"","title":"Data Structures"},{"location":"Projects/#collections","text":"collections - Several common data structures data-structures - A collection of data-structures (ArrayList, SortedList, Set, AVL Tree, Immutable AVL Tree, B+Tree, Ternary Search Trie, Hash Table (Separate Chaining), Linear Hash Table) ps - Persistent data structures Tideland golib - A collections library","title":"Collections"},{"location":"Projects/#hashtables","text":"bimap - A simple bidirectional map implementation gohash - A simple linked-list hashtable that implements sets and maps go-maps - Go maps generalized to interfaces","title":"Hashtables"},{"location":"Projects/#lists","text":"fs2/mmlist - A memory mapped list. GoArrayList - GoArrayList is a Go language substitute for the Java class ArrayList, with very nearly all features. goskiplist - A skip list implementation in Go. itreap - An immutable ordered list, internally a treap. ListDict - Python List and Dict for Go skip - A fast position-addressable ordered map and multimap. Skiplist - A fast indexable ordered multimap. skiplist - A skip list implementation. Highly customizable and easy to use. skiplist - Skiplist data structure ported from Redis's Sorted Sets. stackgo - A fast slice-based stack implementation.","title":"Lists"},{"location":"Projects/#queues","text":"fifo_queue - Simple FIFO queue figo - A simple fifo queue with an optional thread-safe version. go.fifo - Simple auto-resizing thread-safe fifo queue. gopqueue - Priority queue at top of container/heap go-priority-queue - An easy to use heap implementation with a conventional priority queue interface. golibs/stack - A LIFO and ringbuffer package gringo - A minimalist queue implemented using a stripped-down lock-free ringbuffer heap - A general heap package without converting elements to interface{} and back. queued - A simple network queue daemon queue - A queue manager on top of Redis","title":"Queues"},{"location":"Projects/#graphs","text":"graph - Library of basic graph algorithms graphs - Implementation of various tree, graph and network algorithms groph - A pure Go library of graphs and algorithms","title":"Graphs"},{"location":"Projects/#sets","text":"disjoint - Disjoint sets (union-find algorithm with path compression) golang-set - A full thread-safe and unsafe set implementation for Go. goset - A simple, thread safe Set implementation set - Set data structure for Go","title":"Sets"},{"location":"Projects/#trees","text":"b - Package b implements B+trees with delayed page split/concat and O(1) enumeration. Easy production of source code for B+trees specialized for user defined key and value types is supported by a simple text replace. btree - Package btree implements persistent B-trees with fixed size keys, http://en.wikipedia.org/wiki/Btree btree - In-memory (not persistent) B-tree implementation, similar API to GoLLRB go-avltree - AVL tree (Adel'son-Vel'skii & Landis) with indexing added go-btree - Simple balance tree implementation go-darts - Double-ARray Trie System for Go GoLLRB - A Left-Leaning Red-Black (LLRB) implementation of 2-3 balanced binary search trees in Google Go go-merkle - Merkle-ized binary (search) trees with proofs. go-radix , go-radix-immutable - Radix tree implementations. go-stree - A segment tree implementation for range queries on intervals gtreap - Persistent treap implementation. prefixmap - Simple trie-based prefix-map for string-based keys rbtree - A high performance red-black tree with an API similar to C++ STL's for set, map, multiset, multimap. rbtree - Yet another red-black tree implementation, with a C++ STL-like API rtreego - an R-Tree library triego - Simple trie implementation for storing words","title":"Trees"},{"location":"Projects/#other","text":"aurora - Cross-platform Beanstalk queue server console. bigendian - binary parsing and printing deepcopy - Make deep copies of data structures dgobloom - A Bloom Filter implementation epochdate - Compact dates stored as days since the Unix epoch etree - Parse and generate XML easily excelize - Golang library for reading and writing Microsoft Excel (XLSX) files. fsm - Minimalistic state machine for use instead of booleans go-algs/ed - Generalized edit-distance implementation go-algs/maxflow - An energy minimization tool using max-flow algorithm. gocrud - Framework for working with arbitrary depth data structures. go-extractor - Go wrapper for GNU libextractor Gokogiri - A lightweight libxml wrapper library GoNetCDF - A wrapper for the NetCDF file format library goop - Dynamic object-oriented programming support for Go gopart - Type-agnostic partitioning for anything that can be indexed in Go. gotoc - A protocol buffer compiler written in Go govalid - Data validation library goxlsxwriter - Golang bindings for libxlsxwriter for writing XLSX (Excel) files goxml - A thin wrapper around libxml2 hyperloglog - An implementation of the HyperLogLog and HyperLogLog++ algorithms for estimating cardinality of sets using constant memory. itertools - Provides generic iterable generator function along with functionality similar to the itertools python package. jsonv - A JSON validator libgob - A low level library for generating gobs from other languages mxj - Marshal/Unmarshal XML doc from/to map[string]interface{} or JSON ofxgo - A library for querying OFX servers and/or parsing the responses (and example command-line client). Picugen - A general-purpose hash/checksum digest generator. simple-sstable - A simple, no-frills SSTable format and implementation in Go. tribool - Ternary (tree-valued) logic for Go Tuple - Tuple is a go type that will hold mixed types / values vcard - Reading and writing vcard file in go. Implementation of RFC 2425 (A MIME Content-Type for Directory Information) and RFC 2426 (vCard MIME Directory Profile). weightedrandom - A library for efficient weighted random picking xlsx - A library to help with extracting data from Microsoft Office Excel XLSX files.","title":"Other"},{"location":"Projects/#databases","text":"See also [[SQLDrivers page|SQLDrivers]].","title":"Databases"},{"location":"Projects/#cockroachdb","text":"cockroachdb - A Scalable, Survivable, Strongly-Consistent SQL Database","title":"CockroachDB"},{"location":"Projects/#hazelcast-imdg","text":"Hazelcast IMDG Go Client - The official Go client implementation for Hazelcast IMDG , the open source in-memory data grid.","title":"Hazelcast IMDG"},{"location":"Projects/#mongodb","text":"mgo - Rich MongoDB driver for Go Mongo Driver - Official MongoDB Go driver rocks-stata - MongoDB Backup Utility","title":"MongoDB"},{"location":"Projects/#mysql","text":"Go-MySQL-Driver - A lightweight and fast MySQL-Driver for Go's database/sql package MyMySQL - MySQL Client API written entirely in Go. mysqlsuperdump - Generate partial and filtered dumps of MySQL databases TiDB - MySQL compatible distributed database modeled after Google's F1 design. vitess - Scaling MySQL databases for the web","title":"MySQL"},{"location":"Projects/#odbc","text":"go-odbc - ODBC Driver for Go odbc3-go - This package is wrapper around ODBC (version 3).","title":"ODBC"},{"location":"Projects/#postgresql","text":"code.soquee.net/migrate A library for generating, applying, and listing PostgreSQL database migrations using a mechanism that's compatible with Rust's Diesel. go-libpq - cgo-based Postgres driver for Go's database/sql package go-pgsql - A PostgreSQL client library for Go kallax - PostgreSQL typesafe ORM pgsql.go - PostgreSQL high-level client library wrapper pgx - Go PostgreSQL driver that is compatible with database/sql and has native interface for more performance and features pq - Pure Go PostgreSQL driver for database/sql yoke - Postgres high-availability cluster with auto-failover and automated cluster recovery","title":"PostgreSQL"},{"location":"Projects/#ql","text":"ql - A pure Go embedded (S)QL database.","title":"QL"},{"location":"Projects/#redis","text":"godis - Simple client for Redis Go-Redis - Client and Connectors for Redis key-value store go-redis - Redis client built on the skeleton of gomemcache Redigo - Go client for Redis. redis - Redis client for Go","title":"Redis"},{"location":"Projects/#rethinkdb","text":"GoRethink - RethinkDB Driver for Go","title":"RethinkDB"},{"location":"Projects/#sqlite","text":"gosqlite3 - Go Interface for SQLite3 gosqlite (forked) - A fork of gosqlite gosqlite - a trivial SQLite binding for Go. go-sqlite - A database/sql driver and standalone sqlite3 interface go-sqlite-lite - A simple SQLite package for Go. mattn's go-sqlite3 - sqlite3 driver conforming to the built-in database/sql interface","title":"SQLite"},{"location":"Projects/#vertica","text":"vertica-sql-go - A pure Go driver for Vertica database.","title":"Vertica"},{"location":"Projects/#orm","text":"beedb - beedb is an ORM for Go. It lets you map Go structs to tables in a database ent - An entity framework for Go FilterXorm - Build conditions for xorm project. go-modeldb - A simple wrapper around sql.DB for struct support. gorm - An ORM library for Go, aims for developer friendly gorp - SQL mapper for Go go-firestorm - Simple Go ORM for Cloud Firestore go-store - Data-store library for Go that provides a set of platform-independent interfaces to persist and retrieve key-value data. hood - Database agnostic ORM for Go. Supports Postgres and MySQL. lore - Simple and lightweight pseudo-ORM/pseudo-struct-mapping environment for Go. qbs - Query By Struct. Supports MySQL, PostgreSQL and SQLite3. sqlboiler - Database-first ORM via code generation. sqlgen - Go code generation for SQL interaction. structable - Struct-to-table database mapper. xorm - Simple and Powerful ORM for Go. reform - A better ORM for Go, based on non-empty interfaces and code generation. go-queryset - 100% type-safe ORM for Go with code generation and MySQL, PostgreSQL, Sqlite3, SQL Server support.","title":"ORM"},{"location":"Projects/#key-value-stores","text":"bolt - Persistent key/value store inspired by LMDB. dbm - Package dbm (WIP) implements a simple database engine, a hybrid of a hierarchical and/or a key-value one. fs2/bptree - A memory mapped B+Tree with duplicate key support. Appropriate for large amounts of data (aka +100 GB). Supports both anonymous and file backed memory maps. Diskv - Home-grown, disk-backed key-value store etcd - Highly-available key value store for shared configuration and service discovery olric Distributed cache and in-memory key/value data store. It can be used both as an embedded Go library and as a language-independent service. gkvlite - Pure go, simple, ordered, atomic key-value persistence based on append-only file format. gocask - Key-value store inspired by Riak Bitcask. Can be used as pure go implementation of dbm and other kv-stores. goleveldb - Another implementation of LevelDB key/value in pure Go. kv - Yet another key/value persistent store. Atomic operations, two phase commit, automatic crash recovery, \u2026 leveldb-go - This is an implementation of the LevelDB key/value database. levigo - levigo provides the ability to create and access LevelDB databases. persival - Programatic, persistent, pseudo key-value storage","title":"Key-Value-Stores"},{"location":"Projects/#graph-databases","text":"cayley - 100% Go graph database, inspired by Freebase and the Google Knowledge Graph. Dgraph - Fast, Distributed Graph DB with a GraphQL-like API. go-gremlin - A Go client for the Apache TinkerTop Graph analytics framework (Gremlin server).","title":"Graph Databases"},{"location":"Projects/#nosql","text":"couchgo - The most feature complete CouchDB Adapter for Go. Modeled after couch.js. influxdb - Scalable datastore for metrics, events, and real-time analytics Kivik - Kivik provides a common Go and GopherJS client library for CouchDB, PouchDB, and similar databases. ledisdb - A high performance NoSQL like Redis. nodb - A pure Go embed Nosql database with kv, list, hash, zset, bitmap, set. tiedot - A NoSQL document database engine using JSON for documents and queries; it can be embedded into your program, or run a stand-alone server using HTTP for an API.","title":"NoSQL"},{"location":"Projects/#other_1","text":"cabinet - Kyoto Cabinet bindings for go camlistore - Personal distributed storage system for life. cdb.go - Create and read cdb (\"constant database\") files CodeSearch - Index and perform regex searches over large bodies of source code dbxml - A basic interface to Oracle Berkeley DB XML drive - A Google drive command line client Event Horizon - Toolkit for Command Query Responsibility Segregation and Event Sourcing (CQRS/ES) go-batcher - Simply create and use batch handler in Go go-clickhouse - Connector to Yandex Clickhouse (column-oriented database) go-db-oracle - GO interface to Oracle DB gographite - statsd server in go (for feeding data to graphite) gokabinet - Go bindings for Kyoto Cabinet DBM implementation go-model - Robust & Easy to use struct mapper and utility methods for Go go-notify - GO bindings for the libnotify goprotodb - A binding to Berkeley DB storing records encoded as Protocol Buffers. go-rexster-client - Go client for the Rexster graph server (part of the TinkerPop suite of graph DB tools) goriak - Database driver for riak database (project homepage is now on bitbucket.org) goriakpbc - Riak driver using Riak's protobuf interface gotyrant - A Go wrapper for tokyo tyrant go-wikiparse - mediawiki dump parser for working with wikipedia data hdfs - go bindings for libhdfs JGDB - JGDB stands for Json Git Database mig - Simple SQL-based database migrations mongofixtures - A Go quick and dirty utility for cleaning MongoDB collections and loading fixtures into them. Neo4j-GO - Neo4j REST Client in Go neoism - Neo4j graph database client, including Cypher and Transactions support. null - Package for handling null values in SQL Optimus Cache Prime - Smart cache preloader for websites with XML sitemaps. piladb - Lightweight RESTful database engine based on stack data structures. pravasan - Simple Migration Tool (like rake db:migrate with more flexibility) remapper - library to convert/map data from one type to another riako - High level utility methods for interacting with Riak databases sqlbuilder - SQL query builder with row mapping sqlf - Create parameterized SQL statements in Go, sprintf style squirrel - Fluent SQL generation for Go Sublevel - Separate sections of the same LevelDB Weed File System - fast distributed key-file store whisper-go - library for working with whisper databases xo - CLI to generate idiomatic Go code for databases","title":"Other"},{"location":"Projects/#date","text":"date - A package for working with dates. date - For dates, date ranges, time spans, periods, and time-of-day. goment - Go time library inspired by Moment.js gostrftime - strftime(3) like formatting for time.Time hijri - A small helper library to convert a Hijri date to a Gregorian date according to Ummul Qura calendar. now - Now is a time toolkit for golang. tai64 - tai64 and tai64n parsing and formatting Tideland golib - Timex extensions tuesday - A Strftime implementation that's compatible with Ruby's Time.strftime","title":"Date"},{"location":"Projects/#development-tools","text":"cwrap - Go wrapper (binding) generator for C libraries. demand - Download, build, cache and run a Go app easily. glib - Bindings for GLib type system go-callvis - Visualize call graph of your Go program using dot format. gocog - A code generator that can generate code using any language godepgraph - Create a dependency graph for a go package godev - Recompiles and runs your Go code on source change. Also watches all your imports for changes. godiff - diff file comparison tool with colour html output gonew - A tool to create new Go projects go-play - A HTML5 web interface for experimenting with Go code. Like http://golang.org/doc/play but runs on your computer gore - A Go REPL. Featured with line editing, code completion, and more gorun - Enables Go source files to be used as scripts. go-spew - Implements a deep pretty printer for Go data structures to aid in debugging goven - Easily copy code from another project into yours gowatcher - Reload a specified go program automatically by monitoring a directory. GoWatch - GoWatch watches your dev folder for modified files, and if a file changes it restarts the process. goweb - Literate programming tools for Go based on CWEB by Donald Knuth and Silvio Levy. goyaccfmt - Auto reformat Goyacc source files. hopwatch - simple debugger for Go hsandbox - Tool for quick experimentation with Go snippets Inject - Library for dependency injection in Golang (from Facebook) liccor - A tool for updating license headers in Go source files liteide - An go auto build tools and qt-based ide for Go Livedev - Livedev is a development proxy server that enables live code reloading. Martian - HTTP proxy designed for use in E2E testing. nvm-windows - Node.js version manager for Windows prettybenchcmp - Store and compare benchmarks history locally. rerun - Rerun watches your binary and all its dependencies so it can rebuild and relaunch when the source changes. sling - Network traffic simulator and test automation tool to send file requests through the HTTP or TCP protocol, control rate frequency, number of concurrent connections, delays, timeouts, and collect the response time statistics, mean, and percentiles. syntaxhighlighter - language-independent code syntax highlighting library toggle - A feature toggle library with built in support for environment variable backed toggling. pluggable backing engine support. trace - A simple debug tracing","title":"Development Tools"},{"location":"Projects/#emacs-tags","text":"egotags - ETags generator tago1 - etags generator for go that builds with go 1 tago - Emacs TAGS generator for Go source","title":"Emacs Tags"},{"location":"Projects/#distributedgrid-computing","text":"celeriac - A library for adding support for interacting and monitoring Celery workers, tasks and events in Go donut - A library for building clustered services in Go libchan - Go-like channels over the network locker - A distributed lock service built on top of etcd . dlock - A native Go distributed lock manager (client and server) using gRPC. mangos - An implementation of the Scalable Protocols based on nanomsg redsync - Redis-based distributed mutual exclusion lock implementation Skynet - Skynet is distributed mesh of processes designed for highly scalable API type service provision. Tideland golib - Includes a map/reduce library","title":"Distributed/Grid Computing"},{"location":"Projects/#documentation","text":"examplgen - Insert code from .go files to documents (examples to project's readme, for instance). godocdown - Format package documentation (godoc) as GitHub friendly Markdown GoDoc.org - GoDoc.org generates documentation on the fly from source on Bitbucket, Github, Google Project Hosting and Launchpad. golangdoc - Godoc for Golang, support translate. Mango - Automatically generate unix man pages from Go sources redoc - Commands documentation for Redis sphinxcontrib-golangdomain - Sphinx domain for Go test2doc - Generate documentation for your go units from your unit tests.","title":"Documentation"},{"location":"Projects/#editors","text":"A - A graphical text and binary editor based on Acme Conception - Conception is an experimental research project, meant to become a modern IDE/Language package. demo video de - A modal graphical editor with Acme and vi features Gide - Go IDE built in the go-native GoGi GUI Go-bbpackage - BBEdit package for Go development goclipse - An Eclipse-based IDE for Go. Go conTEXT - Highlighter plugin godev - Web-based IDE for the Go language godit - A microemacs-like text editor written in Go. gofinder - (code) search tool for acme go-gedit - Google Go language plugin for gedit golab - go local application builder - a web-based Go ide Google Go for Idea - Google Go language plugin for Intellij IDEA micro - A modern and intuitive terminal-based text editor. tabby - Source code editor T - An Acme/Sam like text editor ViGo - A vim-like text editor. Wide - A Web-based IDE for Teams using Golang.","title":"Editors"},{"location":"Projects/#email","text":"chasquid - SMTP server written in Go. gmail - Simple library for sending emails from a Gmail account, for people not interested in dealing with protocol details. Gomail - A simple and efficient package to send emails. go-mail - Email utilities including RFC822 messages and Google Mail defaults. go-ses - Amazon AWS Simple Email Service (SES) API client go-simple-mail - \"Golang package for send email. Support keep alive connection, TLS and SSL. Easy for bulk SMTP.\" Hectane - Lightweight SMTP client including a built-in mail queue backed by on-disk storage. Inbucket - Inbucket is an email testing service; it will accept messages for any email address and make them available to view via a web interface. mail.go - Parse email messages MailHog - Email testing service, inspired by MailCatcher. MailSlurper - A handy SMTP mail server useful for local and team application development. Slurp mail into oblivion!","title":"Email"},{"location":"Projects/#error-handling","text":"code.soquee.net/problem Package problem implements errors for HTTP APIs similar to the ones described by RFC7807 . errgo - Error tracing and annotation. errors - errors augments and error with a file and line number. errors - The juju/errors package provides an easy way to annotate errors without losing the original error context, and get a stack trace back out of the error for the locations that were recorded. goerr - Allows to make a separate(modular) and reusable error handlers. Exception-like panic() recover() mechanism using Return(error) and catching err := OR1(..) hierr - Nesting errors in hierarchy. panicparse - Parse panics with style. Space Monkey errors - Go's missing errors library - stack capture, error hierarchies, error tags Tideland golib - Detailed error values","title":"Error handling"},{"location":"Projects/#encodings-and-character-sets","text":"base58 - Human input-friendly base58 encoding bencode-go - Encoding and decoding the bencode format used by the BitTorrent peer-to-peer file sharing protocol bsonrpc - BSON codec for net/rpc chardet - Charset detection library ported from ICU charmap - Character encodings in Go codec-msgpack-binc High Performance and Feature-Rich Idiomatic Go Library providing encode/decode support for multiple binary serialization formats: msgpack colfer - high-performance binary codec gobson - BSON (de)serializer go-charset - Conversion between character sets. Native Go. go.enmime - MIME email parser library for Go (native) go-msgpack - Comprehensive MsgPack library for Go, with pack/unpack and net/rpc codec support (DEPRECATED in favor of codec ) gopack - Bit-packing for Go go-simplejson - a Go package to interact with arbitrary JSON go-wire - Binary and JSON codec for structures and more go-xdr - Pure Go implementation of the data representation portion of the External Data Representation (XDR) standard protocol as specified in RFC 4506 (obsoletes RFC 1832 and RFC 1014). iconv-go - iconv wrapper with Reader and Writer magicmime \u2013 Mime-type detection with Go bindings for libmagic Mahonia - Character-set conversion library in Go mimemagic - Detect mime-types automatically based on file contents with no external dependencies mimemagic - A pure-Go MIME sniffing library/tool based on the FreeDesktop.org spec msgpack - Msgpack format implementation for Go msgpack-json - Command-line utilities to convert between msgpack and json nnz - String and Int primitives that serialize to JSON and SQL null storable - Write perl storable data TNetstring - tnetstrings (tagged Netstrings)","title":"Encodings and Character Sets"},{"location":"Projects/#file-systems","text":"afero - A File Sytem abstraction system for Go go.fs - A virtual file system abstraction layer. poller - Package poller is a file-descriptor multiplexer. It allows concurent Read and Write operations from and to multiple file-descriptors. vfsgen - Generates a vfsdata.go file that statically implements the given virtual filesystem.","title":"File Systems"},{"location":"Projects/#games","text":"Bampf - Arcade style game based on the Vu 3D engine. bloxorz - Solver for bloxorz basic levels ChessBuddy - Play chess with Go, HTML5, WebSockets and random strangers! Fergulator - An NES emulator, using SDL and OpenGL FlappyBird - A simple flappy bird clone written in golang. godoku - Go Sudoku Solver - example of \"share by communicating\" Gongo - A program written in Go that plays Go gospeccy - A ZX Spectrum 48k Emulator Ludo Game - Ludo Board game powered by Go on Appengine pinkman - command line based chess interface to UCI compatible chess engines Pong - A simple Pong clone written in golang pong-command - Joke command,ping-like pong. Steven - A Minecraft client in Go ukodus - Sudoku solver in Go WolfenGo - A Wolfenstein3D clone in Go, using OpenGL 2.1 GoChess - Play chess with friends on terminal","title":"Games"},{"location":"Projects/#gis","text":"geojson - Go package to quick and easy create json data in geojson format. description go-geom - Efficient Open Geo Consortium-style geometries with native Go GeoJSON and WKB encoding and decoding (work-in-progress) go.geo - Geometry/geography library targeted at online mapping (deprecated by author in favor of his new gis library orb .) go.geojson - Marshalling and Unmarshalling of GeoJSON objects gogeos - Go library for spatial data operations and geometric algorithms go-proj-4 - An interface to the Cartographic Projections Library PROJ.4 go-kml - Google Earth KML generation go-polyline - Google Maps polyline encoding and decoding orb - 2d geometry manipulation (length, area, polygon contains, etc.) with geojson, wkb, mvt support osm - General purpose library for reading, writing and working with OpenStreetMap data UTM - Bidirectional UTM-WGS84 converter gdal - Provides a go wrapper for GDAL","title":"GIS"},{"location":"Projects/#go-implementations","text":"llgo - LLVM-based Go compiler, written in Go","title":"Go Implementations"},{"location":"Projects/#graphics-and-audio","text":"AnsiGo - Simple ANSi to PNG converter written in pure Go Arclight - Arclight is a tool for rendering images bild - A collection of image processing algorithms in pure Go bimg - Small Go library for fast image resize and transformation using libvips blend - Image processing library and rendering toolkit for Go. bpg - BPG decoder for Go. chart - Library to generate common chart (pie, bar, strip, scatter, histogram) in different output formats. draw2d - This package provide an API to draw 2d geometrical form on images. This library is largely inspired by postscript, cairo, HTML5 canvas. ebiten - A cross platform open-source game library with which you can develop 2D games with simple API for multi platforms. Cgo/c compiler setup not needed. egl - egl bindings es2 - es2 bindings fastgallery - A fast static image and video web gallery generator fourcc - Go implementation of FOURCC (four character code) (4CC) identifiers for a video codecs, compression formats, colors, and pixel format used in media files. freetype-go - a Go implementation of FreeType glfw 3 - Go bindings for GLFW 3 library glfw - bindings to the multi-platform library for opening a window, creating an OpenGL context and managing input glh - OpenGL helper functions to manage text, textures, framebuffers and more gl - OpenGL bindings using glew gltf - library for marshaling and unmarshaling glTF glu - bindings to the OpenGL Utility Library glui - Wrapper for glfw to simplify displaying an image gmask - Go adaptation of the Cmask utility for Csound goalsa - Go bindings for ALSA capture and playback go-cairo - Go wrapper for the cairo graphics library gocl - Go OpenCL (gocl) binding, support OpenCL 1.1/1.2/2.0 on Mac/Linux/Windows/Android go-colorful - Color spaces conversions and other color-space operations go-csnd6 - Go binding to the Csound6 API go-csperfthread - Go binding to the CsoundPerformanceThread helper class of the Csound6 API goexif - Retrieve EXIF metadata from image files gofb - Go framebuffer library for drawing pixel by pixel goflac - Go bindings for decoding and encoding FLAC audio with libFLAC go-gd - Go bingings for GD GoGL - OpenGL binding generator go-gnuplot - go bindings for Gnuplot go-gtk3 - gtk3 bindings for go go-heatmap - A toolkit for making heatmaps GoHM - H.265/HEVC HM Video Codec in Go goHorde - Go Bindings for the Horde3d Rendering engine. GoMacDraw - A mac implementation of go.wde go-openal - Experimental OpenAL bindings for Go go-opencl - A go wrapper to the OpenCL heterogeneous parallel programming library go-opencv - Go bindings for OpenCV / 2.x API in gocv / 1.x API in opencv Go-OpenGL - Go bindings for OpenGL Goop - Audio synthesizer engine goray - Raytracer written in Go, based on Yafaray gosc - Pure Go OSC (Open Sound Control) library go-taglib - Go wrapper for TagLib, an audio meta-data parser go-tmx - A Go library that reads Tiled's TMX files govips - A lightning fast Go image processing and resizing library GoVisa - H265/HEVC Bitstream Analyzer in Go go-vlc - Go bindings for libVLC go.wde - A windowing/drawing/event interface goxscr - Go rewrites of xscreensaver ports graphics2d - Path and path transform based 2D graphics package gst - Go bindings for GStreamer gumble - Client library for the Mumble VoIP protocol hgui - Gui toolkit based on http and gtk-webkit. hsvimage - Support for HSV color models and images imaginary - Simple and fast HTTP microservice for image resizing and manipulation imaging - Package imaging provides basic image manipulation functions (resize, rotate, flip, crop, etc.) as well as simplified image loading and saving. imgproxy - Fast and secure standalone server for resizing and converting remote images libvlc-go - Go bindings for libVLC 2.X/3.X/4.X used by the VLC media player merlin - Automatic video encoder netpbm - Read and write Netpbm images from Go programs opencv - Go bindings for OpenCV osmesa - Go bindings for osmesa. phono - DSP pipeline. Plotinum - An API for creating plots portaudio - A Go binding to PortAudio pulsego - Go binding for PulseAudio pulse-simple - Go bindings for PulseAudio's Simple API, for easy audio capture and playback. rasterx - SVG-standard rendering, rasterization library. resize - Image resizing with different interpolations. RiGO - RenderMan Interface implementation in Go. smartcrop - Content aware image cropping starfish - A simple Go graphics and user input library, built on SDL stl - library for reading, writing, and manipulating Stereolithography (.stl) files used in 3D printing svgo - a library for creating and outputting SVG tag - a library for reading tag metadata and creating metadata-invariant checksums for audio files: FLAC, all IDv3 variants, and MP4 (ACC, ALAC) tga - TARGA image format encoding/decoding library tiff - Rich TIFF/BigTIFF/GeoTIFF decoder/encoder for Go. twilio-go - Go client for the Twilio API. videoinput - Go bindings for VideoInput (Windows). vu - Virtual Universe. A skeleton 3D engine. vulkan - Golang Bindings for Vulkan API. webp - WebP decoder and encoder for Go. wg - Web Graphics, display real time go graphics in browser, with user input. window - Optimized moving window for real-time data xmorph - Warp and morph images","title":"Graphics and Audio"},{"location":"Projects/#guis-and-widget-toolkits","text":"fyne - Cross platform native GUI toolkit based on Material Design gio - Portable (iOS/tvOS, Android, Linux (Wayland/X11), macOS, Windows, FreeBSD, OpenBSD, WASM) immediate mode GUI go-fltk - FLTK2 GUI toolkit bindings for Go GoGi - Fully native cross-platform GUI toolkit go-gtk - Bindings for GTK go-qt5 - QT5 bindings for go gothic - Tcl/Tk Go bindings gotk3 - Go bindings for GTK3, requires GTK version 3.8 go.uik - A UI kit for Go, in Go. (project is closed) go-webkit2 - Go bindings for the WebKitGTK+ v2 API (w/headless browser & JavaScript support) Gowut - Gowut (Go Web UI Toolkit) is a full-featured, easy to use, platform independent Web UI Toolkit written in pure Go, no platform dependent native code is linked or called. GXUI - A Go cross platform UI library. iup - Bindings for IUP lorca - A small library for building cross-platform HTML5 GUI apps in Go, uses Chrome/Chromium as a UI layer. mdtwm - Tiling window manager for X qml - QML support for the Go language ui - Platform-native GUI library for Go webview - Tiny cross-platform web UI library. Uses WebKit (Gtk/Cocoa) and MSHTML (Windows) wingo - A fully-featured window manager written in Go. Winhello - An example Windows GUI hello world application wxGo - Go Wrapper for the wxWidgets GUI xgb - A fork of the x-go-binding featuring support for thread safety and all X extensions. xgbutil - A utility library to make use of the X Go Binding easier. (Implements EWMH and ICCCM specs, key binding support, etc.) x-go-binding - bindings for the X windowing system","title":"GUIs and Widget Toolkits"},{"location":"Projects/#hardware","text":"gobot - Golang framework for robotics, drones, and the Internet of Things (IoT). go.hid - Provides communication with USB Human Interface Devices. gortlsdr - A librtlsdr wrapper, which turns certain USB DVB-T dongles into a low-cost, general purpose software-defined radio receiver. hwio - Hardware I/O library for SoC boards including BeagleBone Black and Raspberry Pi. stressdisk - Stress test your disks / memory cards / USB sticks before trusting your valuable data to them","title":"Hardware"},{"location":"Projects/#language-and-linguistics","text":"alpinocorpus-go - A reader and a writer for Alpino corpora. go-aspell - GNU Aspell spell checking library bindings for Go. go-edlib - Go string comparison and edit distance algorithms library (Levenshtein, LCS, Hamming, Damerau levenshtein, Jaro-Winkler, etc.) compatible with Unicode. go-l10n - localization for humans go-language - A simple language detector using letter frequency data. goling - String Similarity(Cosine Similarity, Levenshtein Distance), Spell Check, Segmentation go-ngram - An n-gram is a contiguous sequence of n items from a given sequence of text or speech. go.stringmetrics - String distance metrics implemented in Go go-tokenizer - A Text Tokenizer library for Golang inflect - Word inflection library (similar to Ruby ActiveSupport::Inflector). Singularize(), Pluralize(), Underscore() etc. libtextcat - A Go wrapper for libtextcat. nlp - Go Natural Language Processing library supporting LSA (Latent Semantic Analysis). sego - Chinese language segmenter. snowball - Snowball stemmers for multiple languages textcat - N-gram based text categorization, with support for utf-8 and raw text","title":"Language and Linguistics"},{"location":"Projects/#logging-and-monitoring","text":"colog - CoLog is a prefix-based leveled execution log for Go cue - Fast and flexible contextual logger. Supports output to file, syslog, structured syslog, stdout/stderr, socket, Loggly, Honeybadger, Opbeat, Rollbar, and Sentry. epazote - Automated Microservices Supervisor. factorlog - Really fast, featureful logging infrastructure (supports colors, verbosity, and many formats) glog - Leveled execution logs for Go go-logging - Supports different logging backends like syslog, file and memory. Multiple backends can be utilized with different log levels per backend and logger. gomol - A multi-output logging library designed for outputs that support additional metadata with log messages. gosrvmon - Self-hosted uptime monitoring system. graylog-golang - graylog-golang is a full implementation for sending messages in GELF (Graylog Extended Log Format) from Google Go (Golang) to Graylog haminer - Library and program to parse and forward HAProxy logs immortal - A *nix cross-platform (OS agnostic) supervisor jWalterWeatherman - Seamless terminal printing and file logging that s as easy to use as fmt.Println kemba - A tiny debug logging tool inspired by debug , great for CLI tools and applications. log4go - Go logging package akin to log4j logger - Go logging with buffered output and multiple writers logrus - Structured, pluggable logging for Go with built-in hooks for third-party loggers: Airbrake, Papertrail, Loggly, Sentry\u2026 MailJet Live Event Dashboard - API monitoring in real time. monkit - A flexible process data collection, metrics, monitoring, instrumentation, and tracing library for Go Prometheus - Monitoring system and time-series database. rfw - Rotating file writer - a 'logrotate'-aware file output for use with loggers sd - Writes to the systemd journal, supports user defined systemd journal fields seelog - Flexible dispatching, filtering, and formatting snap - Telemetry framework spacelog - Hierarchical, leveled, and structured logging library for Go statsgod - A rewrite of StatsD in Go. syslog - With this package you can create your own syslog server with your own handlers for different kind of syslog messages Tideland golib - Flexible logging timber - Configurable Logger for Go ul - Provides macOS Sierra/OSX Unified Loggging functionality via cgo vlog - Leveled log on std log for Go","title":"Logging and Monitoring"},{"location":"Projects/#machine-learning","text":"Anna - Artificial Neural Network Aspiration, aims to be self-learning and self-improving software. bayesian - A naive bayes classifier. ctw - Context Tree Weighting and Rissanen-Langdon Arithmetic Coding Dialex - Dialex is a smart pipe that unscrambles text and makes it machine-readable. evo - a framework for implementing evolutionary algorithms in Go. go-algs/maxflow Maxflow (graph-cuts) energy minimization library. go-galib - Genetic algorithms. golinear - Linear SVM and logistic regression. go-mind - A neural network library built in Go go_ml - Linear Regression, Logistic Regression, Neural Networks, Collaborative Filtering, Gaussian Multivariate Distribution. gonet - Neural Network for Go. go-porterstemmer - An efficient native Go clean room implementation of the Porter Stemming algorithm. go-pr - Gaussian classifier. gorgonia - Neural network primitives library (like Theano or Tensorflow but for Go) mlwebservicego - Serving machine learning models with Golang, Echo, and Firebase. ntm - Neural Turing Machines implementation paicehusk - Go implementation of the Paice/Husk Stemmer tfgo - Tensorflow + Go, the gopher way.","title":"Machine Learning"},{"location":"Projects/#mathematics","text":"bayesian - Naive Bayesian Classification for Go blas - Go implementation of BLAS (Basic Linear Algebra Subprograms) cartconvert - cartography functions for the Go programming language choose - Produce all combinations of M out of N items clp - Go bindings for the COIN-OR Linear Programming (CLP) library Cvx - Convex optimization package, port of CVXOPT python package decimal - A high-performance arbitrary-precision decimal floating-point arithmetic package dice - Dice rolling library evaler - A simple floating point arithmetic expression evaluator fixed - A fixed point (Q32.32 format) math library geom - 2d geometry gini - SAT Solver/Boolean Logic Tools gochipmunk - Go bindings to the Chipmunk Physics library gocomplex - a complex number library godec - multi-precision decimal arithmetic gofd - concurrent finite domain constraint solver. go-fftw - Go bindings for FFTW - The Fastest Fourier Transform in the West go-fn - Special functions that would not fit in \"math\" pkg gographviz - Graphviz DOT language parser for Go go-gt - Graph theory algorithms go-humanize - Formatting numbers for humans. golibs/xmath - a collection of math functions (mostly mean algorithms) go-lm - Linear models in Go. Provides WLS and regression with t residuals via a cgo -> BLAS/LAPACK interface. go.mahalanobis - Naive implementation of the Mahalanobis distance using go.matrix gomat - lightweight FAST matrix and vector math go_matrix_cuda - GPU-Accelerated Linear Algebra Libraries based in CUDA go.matrix - a linear algebra package gonum - Scientific packages (linear algebra, BLAS, LAPACK, differentiation, plots, linear programming, statistics, \u2026) go-symexpr - Symbolic math as an AST with derivatives, simplification, and non-linear regression gsl - GNU Scientific Library bindings humanize - formats large numbers into human readable small numbers interval - Package interval handles sets of ordered values laying between two, possibly infinite, bounds. mathutil - Package mathutil provides utilities supplementing the standard 'math' and 'rand' packages. mt19937_64 - Mersenne Twister int64 random source permutation - Package permutation generates permutations of the indices of a slice polyclip.go - Go implementation of algorithm for Boolean operations on 2D polygons primegen.go - Sieve of Atkin prime number generator prime - Go version of Segmented Sieve and non Segmented sieve to produce prime numbers primes - Simple functionality for working with prime numbers. pso-go - A library of PSO (Particle Swarm Optimization) for Go. rand - 64-bit version of the math/rand package with Mersenne twister support. roger - A Go client for the RServer, allowing you to invoke R programs from Go. sparse - Go Sparse matrix formats for linear algebra supporting scientific and machine learning applications, compatible with gonum matrix libraries. statistics - GNU GSL Statistics (GPLv3) stats - A statistics package with common functions missing from the Golang standard library. Tideland golib - Numerics package for statistcal analysis Units - Implements types, units, converter functions and some mathematics for some common physical types. lib vector - A small vector lib.","title":"Mathematics"},{"location":"Projects/#microservices","text":"car_registration - API wrapper for worldwide car registration data gokit - The Go Kit microservice framework (and author interview ). go-micro - Go Micro is a microservices library which provides the fundamental building blocks for writing fault tolerant distributed systems at scale. kite - RPC server and client framework.","title":"Microservices"},{"location":"Projects/#miscellaneous","text":"atexit - Simple atexit library b\u00edogo - Basic bioinformatics functions for the Go language. Breaker - Breaker enables graceful degraded mode operations by means of wrapping unreliable interservice interface points with circuit breaker primitives. btcrpcclient - A Websocket-enabled Bitcoin JSON-RPC client. cast - Safe and easy casting from one type to another in Go CGRates - Rating system designed to be used in telecom carriers world cpu - A Go package that reports processor topology cron - A library for running jobs (funcs) on a cron-formatted schedule daemonigo - A simple library to daemonize Go applications. dbus-go - D-Bus Go library desktop - Open file/uri with default application (cross platform) devboard - Kanban board application based on Simple-Khanban dioder-api - An API to IKEA dioder LED-strips doublejump - A revamped Google's jump consistent hash dump - An utility that dumps Go variables, similar to PHP's var_dump elPrep - A high-performance tool for preparing sequence alignment/map files in DNA sequencing pipelines env - Easily pull environment variables with defaults epub - Bindings for libepub to read epub content. EventBus - Lightweight event bus with async compatibility for Go . faker - Generate fake data, names, text, addresses, etc. fasturl - High performance URL parsing library using a Ragel state machine. fsnotify - File system notifications for Go functional - Functional programming library including a lazy list implementation and some of the most usual functions. GCSE - Go code search engine. source generate - runs go generate recursively on a specified path or environment variable and can filter by regex. go-amiando - Wrapper for the Amiando event management API go-bit - An efficient and comprehensive bitset implementation with utility bit functions. go-bitops - common bit operations for 32/64 bit integer go-business-creditcard - Validate/generate credit card checksums/names. gochem - A computational chemistry/biochemistry library. gocsv - Library for CSV parsing and emitting go.dbus - Native Go library for D-Bus go-ean - A minimal utility library for validating EAN-8 and EAN-13 and calculating checksums. go-eco - Functions for use in ecology go-erx - Extended error reporting library go-eventsocket - An event socket client/server library for the FreeSWITCH telephony platform. GoFakeIt - Fake Data Generator. 65+ different variations and examples for each go-fann - Go bindings for FANN, library for artificial neural networks GoFlow - Flow-based and dataflow programming library for Go goga - A genetic algorithm framework gogobject - GObject-introspection based bindings generator go-idn - a project to bring IDN support to Go, feature compatible with libidn GoLCS - Solve Longest Common Sequence problem in go golibs/as - Converting data types golife - Implementation of Game of Life for command line go-magic - A Go wrapper for libmagic go-magic - Simple interface to libmagic for Go Programming Language go-metrics - Go port of Coda Hale's Metrics library gommap - gommap enables Go programs to directly work with memory mapped files and devices in a very efficient way gomusicbrainz - MusicBrainz WS2 client library goneuro - Go driver for NeuroSky devices. goNI488 - A Go wrapper around National Instruments NI488.2 General Purpose Interface Bus (GPIB) driver. go-osx-plist - CoreFoundation Property List support for Go go-papi - Go interface to the PAPI performance API go.pcsclite - Go wrapper for pcsc-lite Go-PhysicsFS - Go bindings for the PhysicsFS archive-access abstraction library. go.pipeline - Library that emulates Unix pipelines go-pkg-mpd - A library to access the MPD music daemon go-pkg-xmlx - Extension to the standard Go XML package. Maintains a node tree that allows forward/backwards browser and exposes some simpel single/multi-node search functions goplan9 - libraries for interacting with Plan 9 goPromise - Scheme-like delayed evaluation for Go go-qrand - Go client for quantum random bit generator service at random.irb.hr goraphing - A tool to generate a simple graph data structures from JSON data files go-selenium - Selenium WebDriver client for Go go-semvar - Semantic versions (see http:/semver.org) go-serial - Go binding to libserialport for serial port functionality (cgo). goST - A steam properties (steam table) library written for Go. This was designed as a native go equivalent to XSteam. go-taskstats - Go interface for Linux taskstats gotenv - Loads environment variables from .env file Gotgo - A Go preprocessor that provides an implementation of generics go-translate - Google Language Translate library go-uuid - Universal Unique IDentifier generator and parser gouuid - Pure Go UUID v3, 4 and 5 generator compatible with RFC4122 go-villa - Some miscellaneous wrapper and small algorithms.(wrappers to slices, priority queues, path related apis, a string set type) go-wkhtmltopdf - wkhtmltopdf Go bindings and high level interface for HTML to PDF conversion. Hranoprovod - Command-line calorie tracking lineup - A minimalistic message queue server mitigation - Package mitigation provides the possibility to prevent damage caused by bugs or exploits. nject - type safe dependency injection nma.go - A NotifyMyAndroid client for go. notify - File system event notification library with API similar to os/signal. pargo - A library for parallel programming in Go. passwd - A parser for the /etc/passwd file pool - A generic worker pool procfile - A Procfile parser Prometheus Instrumentation/Metrics Client - This is a whitebox instrumentation framework for servers written in Go. It exposes programmatically-generated metrics automatically for use in the Prometheus time series collection and post-processing environment. randat - Devel tool for generating random bytestrings and encoding files in code-friendly forms recycler - A more flexible object recycling system than sync.Pool. Provides constructors and destructors for the objects as well as control over the length the free. replaykit - A library for replaying time series data. serial - Serial ports API (pure Go) sio - Package sio lets you access old serial junk. It's a go-gettable fork and modification of dustin's rs232 package. stats - Monitors Go MemStats + System stats such as Memory, Swap and CPU and sends via UDP anywhere you want for logging etc\u2026 symutils - Various tools and libraries to handle symbolic links toktok - Creates and resolves unique, typo & error-resilient, human-readable tokens twitterfetcher - A tool to make Twitter API requests using the Application-only authentication udis86 - Go bindings for libudis86 ugo - underscore.js like toolbox for Go Vboxgo - user-like access to VirtualBox VMs from Go. vk - unofficial vk.com API wrapper (vk.com russian social network) WUID - An extremely fast unique number generator, 10-135 times faster than UUID. Wukong - A highly extensible full-text search engine written in Go. xdg - Go implementation of the XDG Base Directory Specification and XDG user directories. xplor - Files tree browser for p9p acme yubigo - Yubikey OTP validation and auhtentication API client.","title":"Miscellaneous"},{"location":"Projects/#music","text":"gmask - Go adaptation of the Cmask utility for Csound go-csnd6 - Go binding to the Csound6 API go-csperfthread - Go binding to the CsoundPerformanceThread helper class of the Csound6 API go-libshout - Go bindings for libshout gompd - A client interface for the MPD (Music Player Daemon) launchpad - A Go client for Novation Launchpad portmidi - Go bindings for libportmidi","title":"Music"},{"location":"Projects/#networking","text":"","title":"Networking"},{"location":"Projects/#dns","text":"bitz - BitMessage client node and library dingo - A DNS client in Go that supports Google DNS over HTTPS dns - client and server implementations in Go dns - A DNS library in Go dnsimple - an interface to the DNSimple API dnss - DNS secure proxy, supports DNS over HTTPS and GRPC domainerator - Command line tool to combine wordlist and suffixes/TLDs into domain names and check if they are registered or not. dyndnscd - a configurable dyndns client GeoDNS - geo-aware authoritative DNS server grong - Small authoritative DNS name server hostsfile - /etc/hostsfile reverse lookup IP => names lib/dns - The DNS library for client or server with support UDP, TCP, and DNS over HTTPS mdns - Multicast DNS library for Go rescached - DNS resolver cache daemon","title":"DNS"},{"location":"Projects/#ftp","text":"ftp4go - An FTP client for Go, started as a port of the standard Python FTP client library ftp - Package ftp provides a minimal FTP client as defined in RFC 959 ftps - An implementation of the FTPS protocol goftp - A FTP client library","title":"FTP"},{"location":"Projects/#http","text":"apiproxy - proxy for HTTP/REST APIs with configurable cache timeouts boom - HTTP(s) benchmarking tool, Apache Benchmark replacement eventsource - Server-sent events for net/http server. fasthttp - Fast HTTP package for Go gbench - HTTP(s) Load Testing And Benchmarking Tool inspired by Apache Benchmark and Siege. gobench - HTTP/HTTPS load test and benchmark tool go-curl - libcurl bingding that supports go func callbacks goproxy - a programmable HTTP proxy. gostax - A Streaming API for XML (StAX) in go handlers - Collection of useful HTTP middlewares. HTTPLab - HTTPLabs let you inspect HTTP requests and forge responses. httpmock - Easy mocking of HTTP responses from external resources httptail - tools push stdout/stderr to http chunked sling - A Go HTTP client library for creating and sending API requests. stress - Replacement of ApacheBench(ab), support for transactional requests, support for command line and package references to HTTP stress testing tool.","title":"HTTP"},{"location":"Projects/#imap","text":"go-imap - An IMAP library for clients and servers. go-imap - IMAP client library go-imap - Implementation of IMAP4rev1 client, as described in RFC 3501","title":"IMAP"},{"location":"Projects/#instant-messaging","text":"gobir - Extensible IRC bot with channel administration, seen support, and go documentation querying goexmpp - XMPP client implementation goirc - event-based stateful IRC client framework go-irc - Simple IRC client library gorobot - a modular IRC bot go-xmpp - XMPP client library hanu - Framework for writing Slack bots ircflu - IRC bot with support for commands, scripting and web-hooks irc.go - Go IRC bot framework mellium.im/xmpp a low-level XMPP client and server library focusing on good documentation and a clean, usable API sirius - [link is broken] A fast and ultra-lightweight chat server written in Go xmpp-client - an XMPP client with OTR (off-the-record) support","title":"Instant Messaging"},{"location":"Projects/#nntp","text":"go-nntp - An NNTP client and server library for go","title":"NNTP"},{"location":"Projects/#protocol-buffers","text":"gogoprotobuf - another Go implementation of Protocol Buffers, but with extensions and code generation plugins. golang_protobuf_extensions - Protocol Buffer extensions to support streaming message encoding and decoding. goprotobuf - the Go implementation of Google's Protocol Buffers protorpc - Google Protocol Buffers RPC for Go and C++","title":"Protocol Buffers"},{"location":"Projects/#rsync","text":"replican-sync - An rsync algorithm implementation in Go Rsync - Rsync algorithm as a Go library","title":"rsync"},{"location":"Projects/#telnet","text":"telnet - Package telnet provides TELNET and TELNETS client and server implementations, for the Go programming language, in a style similar to the \"net/http\" library (that is part of the Go standard library) including support for \"middleware\"; TELNETS is secure TELNET, with the TELNET protocol over a secured TLS (or SSL) connection. telnet - A simple interface for interacting with Telnet connection telnets - A client for the TELNETS (secure TELNET) protocol.","title":"Telnet"},{"location":"Projects/#vnc","text":"glibvnc - Go wrapper using CGO for the libvnc library.","title":"VNC"},{"location":"Projects/#websockets","text":"Gorilla WebSocket - WebSocket protocol implementation lib/websocket - A library for writing websocket client and server (using epoll) websocketd - HTTP server that converts STDIN/STDOUT program into WebSockets service. Also handles HTML and CGI. ws-cli - WebSocket command line client wst - A dead simple WebSocket tester","title":"Websockets"},{"location":"Projects/#zeromq","text":"goczmq - Wrapper for the CZMQv3 interface - blog post gozmq - Go Bindings for 0mq (zeromq/zmq) zmq2 - A Go interface to ZeroMQ (zmq, 0MQ) version 2. zmq3 - A Go interface to ZeroMQ (zmq, 0MQ) version 3. zmq4 - A Go interface to ZeroMQ (zmq, 0MQ) version 4.","title":"ZeroMQ"},{"location":"Projects/#misc-networking","text":"betwixt - Betwixt implements the OMA Lightweight M2M (LWM2M) protocol for Device Management and Monitoring canopus - CoAP Client/Server implementation (RFC 7252) chunkedreader - A light weight library for reading continuous fixed sized messages from TCP streams. circle - Go interface to the libcircle distributed-queue API createsend-go - API client for Monitor http://www.campaignmonitor.com (email campaign service) cwmp-proxy - Reverse cwmp proxy dmrgo - Library for with Hadoop Streaming map/reduce doozerconfig - Go package for managing json-encoded configuration in Doozer doozerd - A consistent distributed data store endless Zero downtime restarts for go servers (Drop in replacement for http.ListenAndServe/TLS) gearman-go - A native implementation for Gearman API with Go. Glue - Robust Go and Javascript Socket Library (Alternative to Socket.io) goagain - zero-downtime restarts in Go Go Ajax - Go Ajax is a JSON-RPC implementation designed to create AJAX powered websites. gobeanstalk - Go Beanstalkd client library go-camo - Go http image proxy (camo clone) to route images through SSL go-dbus - A library to connect to the D-bus messaging system go-diameter - Diameter stack and Base Protocol (RFC 6733) go-flowrate - Data transfer rate control (monitoring and limiting) gogammu - Library for sending and receiving SMS go-icap - ICAP (Internet Content Adaptation Protocol) server library Gollum - A n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations. go-nat-pmp - A client for the NAT-PMP protocol used in Apple and open-source routers gonetbench - Simple TCP benchmarking tool gonetcheck - package for checking general internet access goodhosts - Simple hosts file (/etc/hosts) management in Go gopacket - Packet encoding/decoding, pcap/pfring/afpacket support, TCP assembly, and more! gopcap - A simple wrapper around libpcap goq - A persistent message queue written in Go. goradius - A Radius client written in Go go-rpcgen - ProtoBuf RPC binding generator for net/rpc and AppEngine gorpc - RPC optimized for high load GoRTP - RTP / RTCP stack implementation for Go GoSIPs - SIP (Session Initiation Protocol) Stack in Go go-smpp - SMPP 3.4 protocol implementation gosndfile - Go binding for libsndfile gosnmp - an SNMP library written in GoLang. go-socket.io - A Socket.IO backend implementation written in Go gosocks - A SOCKS (SOCKS4, SOCKS4A and SOCKS5) proxy client library in Go. go-sslterminator - SSL terminator proxy go-statsd-client - Go statsd client library Grumble - Mumble (VoIP) server implementation handlersocket-go - Go native library to connect to HandlerSocket interface of InnoDB tables HomeControl - an implementation of Apple's HomeKit Accessory Protocol (HAP) Hprose - Hprose is a High Performance Remote Object Service Engine. httpfstream - streaming append and follow of HTTP resources (using WebSockets) humanize-bytes - Command-line utilities to convert \"MiB\" etc to raw numbers, and back ipaddress - Convenient ip address functions: ip -> int, int -> ip, and IPNet broadcast address iris-go - Go binding for the Iris decentralized messaging framework. iris - Peer-to-peer messaging for back-end decentralization. kafka.go - Producer & Consumer for the Kafka messaging system lcvpn - Decentralized VPN implementation ldap - Basic LDAP v3 functionality for the GO programming language. mbxchan - An easy communication between distributed Go applications using standard Go channels and remote procedure calls. mqtt - MQTT stack in Go nagiosplugin - package for writing Nagios/monitoring plugins NATS - NATS distributed messaging system client for Go netsnail - A low-bandwidth simulator netstat-nat - Display NAT entries on Linux systems netutils - Simple interface for turning TCP Sockets into channels. norm - reliable UDP using multicast and unicast sockets npipe - a pure Go wrapper for Windows named pipes opendap - Go wrapper for Openldap pusher-http-go - Go library for interacting with the Pusher Realtime API QRP - QRP is a simple packet-based RPC protocol designed as a simple alternative to Go's rpc, that can run over UDP remotize - A remotize package and command that helps remotizing methods without having to chaneg their signatures for rpc Resgate - A Realtime + REST API Gateway for NATS to create web APIs with live data rs232 - Serial interface for those of us who still have modems (or arduinos) rss - RSS parsing library. seamless - Reverse TCP Proxy with HTTP management API shell2http - Executing shell commands via simple http server sockjs-go - Implements server side counterpart for the SockJS-client browser library. SOCKS5 Server - Scalable SOCKS5 server with Access Control Lists spark - Emergency web server (for static files) spdy - SPDY library, wired into net/http, currently supporting servers only. statsd-go - Statsd implementation in Go, forked from gographite, which submits to Ganglia stompngo_examples - Examples for stompngo. stompngo - A Stomp 1.1 Compliant Client tcp_fallback - A TCP proxy implementing a simple fallback mechanism. tcpmeter - A TCP throughput measuring tool toxiproxy - Framework for simulating network conditions. traceroute - A traceroute implementation traefik - Modern, reverse proxy in Go Uniqush - A free and open source software which provides a unified push service for server-side notification to apps on mobile devices. uritemplates - A level 4 implementation of URI Templates (RFC 6570) VDED - Vector Delta Engine Daemon - track deltas in ever-increasing values (written in Go) zero-downtime-daemon - Configurable zero downtime daemon (Hot Update) framework for any kind of TCP,HTTP,FCGI services zeroupgrade - Upgrades network servers with zero downtime","title":"Misc Networking"},{"location":"Projects/#operating-system-interfaces","text":"Go FUSE file system library - From-scratch implementation of the kernel-userspace communication protocol based on Russ Cox'. Go-fuse - Library to write FUSE filesystems in Go go-nbd - Library to write block devices for Linux in Go. go-osx-xattr - Package xattr wraps OS X functions to manipulate the extended attributes of a file, directory and symbolic link. inspect/os - Metrics library for operating system measurements (Linux/MacOSX) service - Service will install / un-install, start / stop, and run a program as a service (daemon) on Windows/Linux and OSX.","title":"Operating System Interfaces"},{"location":"Projects/#other-random-toys-experiments-and-example-code","text":"goconc - A collection of useful concurrency idioms and functions for Go, compiled go-crazy - An experimental source-to-source compiler for go go-gtk-demo - A demonstration of how to use GTK+ with Go. go-hashmap - A hash table in pure go as an experiment in Go performance golang-examples - A bunch of golang examples GolangSortingVisualization - A visualization of various sorting algorithms in Go golibs - A collection of tiny go packages (and also a test repo for various CI and coverage services) goplay - A bunch of random small programs in Go lifegame-on-golang - Game of Life in Go linear - Playing around with the linear algebra pl0 - PL/0 front end, compiler and VM. . project euler in go - Solutions to Project Euler in Go also shadergo - shader test using Go travisci-golang-example - Travis-CI example for Go","title":"Other Random Toys, Experiments and Example Code"},{"location":"Projects/#p2p-and-file-sharing","text":"DHT - Kademlia DHT node used by Taipei-Torrent, compatible with BitTorrent DHT - BitTorrent DHT Protocol && DHT Spider. ed2kcrawler - eDonkey2000 link crawler gop2p - A simple p2p app to learn Go go-p2p - P2P module for blockchains and more GoTella - A Go implementation of the Gnutella Protocol Rain - BitTorrent client and library Taipei-Torrent - A BitTorrent client Tendermint - P2P Byzantine-Fault-Tolerant consensus & blockchain stack wgo - A simple BitTorrent client based in part on the Taipei-Torrent and gobit code","title":"P2P and File Sharing"},{"location":"Projects/#programming","text":"go-clang - cgo bindings to the C-API of libclang godeferred - port of jsdeferred: http://cho45.stfuawsc.com/jsdeferred/ go-galib - a library of Genetic Algorithms go-intset - a library to work with bounded sets of integers, including multiple alternative implementations go-parse - a Parsec-like parsing library go-slices - Helper functions for manipulating slices in Go just like the official \"strings\" package provides sh - a shell/bash parser and formatter Shuffle - Implementation of the Fisher Yates shuffle (or Knuth shuffle) in Go.","title":"Programming"},{"location":"Projects/#resource-embedding","text":"fileb0x - Simple tool to embed files in go with focus on \"customization\" and ease to use. go-bindata - Package that converts any file into managable Go source code. go-resources - Unfancy resources embedding with Go. go.rice - go.rice is a Go package that makes working with resources such as html,js,css,images and templates very easy. implant - implant allows embedding static resources, from a series of directories (recursively). statics - Embeds static resources into go files for single binary compilation + works with http.FileSystem + symlinks.","title":"Resource Embedding"},{"location":"Projects/#rpc","text":"gowsdl - WSDL code generation gRPC - Google's multi-language RPC framework with Go support","title":"RPC"},{"location":"Projects/#scanner-and-parser-generators","text":"ebnf2y - Utility for converting EBNF grammars into yacc compatible skeleton .y files. flexgo - A version of flex that can produce Go code. fsm - FSM (NFA, DFA) utilities. gocc - Go Compiler Compiler golex - Lex/flex like fast (DFA) scanners generator. gopp - Go Parser Parser goyacc - Goyacc is a version of yacc generating Go parsers. lexmachine - Lexical Analysis Framework for Golang Ragel - State Machine Compiler y - Package y converts .y (yacc) source files to data suitable for a parser generator. yy - yacc to yacc compiler.","title":"Scanner and Parser Generators"},{"location":"Projects/#security","text":"acme - ACME certificate acquisition tool acra - SQL database protection suite: strong selective encryption, SQL injections prevention, intrusion detection system casbin - An authorization library that supports access control models like MAC, RBAC, ABAC docker-slim - Container security and optimization gryffin - A large scale security scanner by Yahoo! hyperfox - a security tool for proxying and recording HTTP and HTTPs communications on a LAN lego - Let's Encrypt client and ACME library webseclab - a sample set of web security test cases and a toolkit to construct new ones","title":"Security"},{"location":"Projects/#simulation-modeling","text":"godes - Library for building discrete event simulation models","title":"Simulation Modeling"},{"location":"Projects/#sorting","text":"bubble-sort - minimal implementation of the bubble-sort algorithm cocktail-shaker-sort - minimal implementation of the cocktail-shaker-sort algorithm funnelsort - Lazy funnel sort \u2013 a cache-oblivious sorting algorithm Sortutil - Nested, case-insensitive, and reverse sorting for Go. sortutil - Utilities supplemental to the Go standard \"sort\" package tarjan - Graph loop detection function based on Tarjan's algorithm timsort - Fast, stable sort, uses external comparator or sort.Interface","title":"Sorting"},{"location":"Projects/#source-code-management","text":"Gitfile - A lightweight package manager for installing git repos go-deps - Analyzes and recursively installs Go package deps (library functionality similar to go get ) go-diff - A diff command for go languange showing semantic differences of two go source files. gogitver - Embeds a git tag (version string) into your application go-many-git - Manage and run commands across multiple git repositories go-pkgs - Finds all matching packages in all of the GOPATH trees (library functionality similar to go list all ) go-vcs - clone and check out revs of VCS repositories (git and hg support) go-vcsurl - Lenient VCS repository URL parsing library hggofmt - A Mercurial/hg extension with a hook to nut - Nut is a tool to manage versioned Go source code packages, called \"nuts\". vcstool - VCS abstraction tool","title":"Source Code Management"},{"location":"Projects/#storage","text":"libStorage - an open source, platform agnostic, storage provisioning and orchestration framework, model, and API Minio - Object Storage compatible with Amazon S3 API OpenEBS - Containerized, Open source block storage for your containers,integrated tightly into K8S and other environments and based on distributed block storage and containerization of storage control storage - An application-oriented unified storage layer for Golang","title":"Storage"},{"location":"Projects/#strings-and-text","text":"allot - Placeholder and wildcard text parsing for CLI tools and bots asciidoctor-go - Native Go module for parsing and converting asciidoc markup language. awk - Easy AWK-style text processing in Go binarydist - Binary diff and patch Black Friday - A markdown processor codename-generator - A codename generator meant for naming software releases columnize - format slice or array into aligned columns csvplus - Extends the standard Go encoding/csv package with fluent interface, lazy stream operations, indices and joins. csvutil - A heavy duty CSV reading and writing library. dgohash - Collection of string hashing functions, including Murmur3 and others douceur - A simple CSS parser and inliner in Go. dsv - A library for working with delimited separated value (DSV). flux - Fluent Regular Expressions in golang frontmatter - Go library for detecting and decoding various content front matter formats. genex - Expansion of Regular Expressions gettext-go - GNU's gettext support, written in pure Go gettext - Golang bindings for gettext; Feature complete, cgo goagrep - fast fuzzy string matching using precomputation go-colortext - Change the color of the text and background in the console, working both in Windows and other systems. go-guess - Go wrapper for libguess goini - A go library to parse INI files golorem - lorem ipsum generator go-migemo - migemo extension for go (Japanese incremental text search) go-ngram N-gram index for Go goregen - A Go library for generating random strings from regular expressions. goskirt - Upskirt markdown library bindings for Go gosphinx - A Go client interface to the Sphinx standalone full-text search engine govalidator - Package of string validators and sanitizers gpKMP - String-matching in Go using the Knuth Morris Pratt algorithm hangul - Handy tools to manipulate Korean character html2text - Golang HTML to text conversion library intern - Map strings to symbols for constant-time comparisons kasia.go - Templating system for HTML and other text documents kview - Simple wrapper for kasia.go templates. It helps to modularize content of a website liquid - A complete implementation of Shopify Liquid templates logparse - Parser for most common log formats NTemplate - Nested Templates parse - PEG parser that uses reflection to define grammar peg - Parsing Expression Grammer Parser pigeon - Parsing Expression Grammar (PEG) Parser generator for Go plural - No-fuss plurals for formatting both countable and continuous ranges of values. polyglot - String translation utilities for Go pretty.go - Pretty-printing for go values raymond - A complete handlebars implementation in Go. rubex - A simple regular expression library that supports Ruby's regex syntax. It is faster than Regexp. sanitize - Package sanitize provides functions for sanitizing html and text. scanner - A text scanner that parses primitive types, analogous to Java's segment - An implementation of Norvig's recursive word segmentation algorithm sprig - Template functions for Go templates. strftime - strftime implementation strit - Package strit introduces a new type of string iterator, as well as a number of iterator constructors, wrappers and combinators. strogonoff - Stenography with Go strutil - Golang metrics for calculating string similarity and other string utility functions. strutil - Package strutil collects utils supplemental to the standard strings package. text - Text paragraph wrapping and formatting Tideland golib - Stringex package for statistcal analysis TySug - Alternative suggestions with respect to keyboard layouts. useragent - User agent string parser xurls - Extract urls from text","title":"Strings and Text"},{"location":"Projects/#testing","text":"assert - Assert for go test. assert - Handy assert package. assert - Basic Assertion Library used along side native go testing, with building blocks for custom assertions assert - JUnit-like asserts with excellent error messages biff - Bifurcation testing framework, BDD compatible. charlatan - Tool to generate fake interface implementations for tests. code.soquee.net/testlog A log.Logger that proxies to the Log function on a testing.T so that logging only shows up on tests that failed, grouped under the test. conex - Docker containers for integration tests counterfeiter - Tool for generating self-contained and type-safe mocks. downtest - Automatically run tests for all known downstream consumers of a Go package. ginkgo - BDD Testing Framework for Go. go2xunit - Convert \"go test -v\" output to xunit XML output go-assert - Testing utils for Go. goautotest - Automatically run unit tests when code changes are made goblin - Minimal and Beautiful Go testing framework Gocheck - Rich test framework with suites, fixtures, assertions, good error reporting, etc GoConvey - Browser-based reporting, uses go test , supports traditional Go tests, clean DSL gocov - Code coverage testing/analysis tool gomega - Ginkgo's Preferred Matcher Library. gomock - a mocking framework for Go. GoSpec - a BDD framework gospecify - another BDD framework go-stat - performant instrumentation/profiling for Go go-tap - TAP (Test Anything Protocol) parser in Go go-testdeep - Extremely flexible deep comparison, extends the testing package go-test-report - Captures go test output and parses it into a single self-contained HTML file. gotestsum - a test runner with customizable and colored output gotest.tools - a collection of packages for writing readable tests gounit - xunit for Go GSpec - Expressive, reliable, concurrent and extensible Go test framework that makes it productive to organize and verify the mind model of software. httpexpect - Concise, declarative, and easy to use end-to-end HTTP and REST API testing make.go.mock - Generates type-safe mocks for Go interfaces and functions. mspec - BDD framework that frees you to Stub and Spec your code first with natural BDD language. muxy - Simulating real-world distributed system failures. Nitro - A quick and simple profiler For Go Pegomock - a mocking framework based on golang/mock , but uses a DSL closely related to Mockito . rapid - property-based testing library with integrated shrinking terst - A terse, easy-to-use testing library for Go test2doc - Generate documentation for your go units from your unit tests. testfixtures - Rails' like test fixtures for testing database driven apps. testflight - Painless http testing in Go Testify - A set of packages that provide many tools for testifying that your code will behave as you intend. ut - Awesome mocks without magic.","title":"Testing"},{"location":"Projects/#transpiler","text":"c4go - Transpiling C code to Go code. f4go - Transpiling Fortran code to Go code.","title":"Transpiler"},{"location":"Projects/#validation","text":"validator - Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving validation - Simple independent struct/key-value validation","title":"Validation"},{"location":"Projects/#version-control","text":"gitea - Git with a cup of tea, painless self-hosted git service git (in go) - Minimal working git client in Go gogs - Self-hosting Git Server in Go semver - Semantic Versioning (SemVer) library","title":"Version Control"},{"location":"Projects/#virtual-machines-and-languages","text":"agora - A dynamically typed, garbage collected, embeddable programming language built with Go anko - Scriptable interpreter written in golang evalfilter - Embedded evaluation engine for filtering objects. expr - Expression evaluator with static typing forego - Forth virtual machine Gelo - Extensible, embeddable interpreter Gentee - Embeddable scripting programming language GoAwk - An implementation of awk in golang. GoBASIC - An embeddable BASIC interpreter written in golang. GoEmPHP - This package is built for Embedding PHP into Go goenv - Create an isolated environment where you install Go packages, binaries, or even C libraries. Very similar to virtualenv for Python. GoForth - A simple Forth parser Goja - ECMAScript 5.1(+) implementation written in Go (otto fork with byte code compiler) golem - A general purpose, interpreted scripting language. golemon - A port of the Lemon parser-generator GoLightly - A flexible and lightweight virtual machine with runtime-configurable instruction set goll1e - An LL(1) parser generator for the Go programming language. Golog - Prolog interpreter in Go golua - A fork of GoLua that works on current releases of Go go-lua - Shopify's lua interpreter gomruby - mruby (mini Ruby) bindings for Go gopher-lua - A Lua 5.1 VM and compiler written in Go go-php - PHP bindings for Go go-python - go bindings for CPython C-API gotcl - Tcl interpreter in Go go-v8 - V8 JavaScript engine bindings for Go go.vm - Simple virtual machine which interprets bytecode. Hivemind - Process manager for Procfile-based applications LispEx - A dialect of Lisp extended to support for concurrent programming, written in Go. Minima - A language implemented in Go ngaro - A ngaro virtual machine to run retroForth images otto - A JavaScript parser and interpreter written natively in Go Overmind - Process manager for Procfile-based applications and tmux py4go - Python 3 bindings for Go RubyGoLightly - An experimental port of TinyRb to Go v8 - V8 JavaScript engine bindings for Go (supports V8 builds at least up to 5.8.244) Yaegi - A complete Go interpreter in Go","title":"Virtual Machines and Languages"},{"location":"Projects/#web-applications","text":"Caddy - A fast, capable, general-purpose HTTP/2 web server that's easy to use Dataflowkit - Web scraping Service to turn websites into structured data. Digestw - A Web Application - Twitter's Timeline Digest fabio - A fast zero-conf load balancing HTTP router for microservices. Filestash - A web client for SFTP, S3, FTP, WebDAV, Git, Minio, LDAP, Caldav, Carddav, Mysql, Backblaze, \u2026 fourohfourfound - A fallback HTTP server that may redirect requests with runtime configurable redirections Fragmenta - A CMS built in Go freegeoip - IP geolocation web service (web server of freegeoip.net) Freyr - Server for storing and serving readings from plant environment sensors. Integrates Golang API with ReactJS web app; uses Docker for testing/deployment. goals-calendar - A web-based Seinfeld calendar implemented in Go goblog - A static blog engine gocrawl - A polite, slim and concurrent web crawler. goflash - Flash player implementation in Go language gogallery - simple web server with an emphasis on easily browsing images gojekyll - A golang clone of the Jekyll static site generator goof - A simple http server to exchange files over http (upload/download) gopages - A php-like web framework that allows embedding Go code in web pages go_spider - A flexible ,modularization and concurrent web crawler framework. GoURLShortener - A frontend for the http://is.gd/ URL shortener gowall - A website and user system grabbit - A lightweight transactional message bus on top of RabbitMQ httpfolder - A http server to exchange files over http with basic authentication (upload/download) Hugo - A fast and flexible static site generator implemented in Go J\u00e1 Vai Tarde - Unfollows monitoring for Twitter kurz.go - a url shortener based on web.go and redis Monsti - Resource friendly flat file CMS for private and small business sites. now.go - A simple HTTP-based to-do queue. Peach - A web server for multi-language, real-time synced and searchable documentation. Presento - The simplest possible cross-platform remote control for the presentations rabbitmq-http - REST API for RabbitMQ Rickover - Job queue with a HTTP API, backed by Postgres serve-files - Far-future and gzip wrapper around the standard net/http server. sf_server - a tiny send file server and client SuperSaaS API Client - HTTP client library for the supersaas.com scheduling/bookings/appointments API Tideland golib - Web package for REST request handling Vantaa - A modular blogging API engine written in Go, Neo4j and Polymer. websiteskeleton - Simple net/http website skeleton webtf - Web app to graphical visualization of twitter timelines using the HTML5 Wikifeat - Extensible wiki system using CouchDB written in Golang jweb - A Symfony( https://symfony.com/ ) inspired framework, written in Go","title":"Web Applications"},{"location":"Projects/#web-libraries","text":"","title":"Web Libraries"},{"location":"Projects/#authentication","text":"authcookie - Package authcookie implements creation and verification of signed authentication cookies. code.soquee.net/otp A library for generating one-time passwords using HOTP (RFC-4226), and TOTP (RFC-6238). Includes less commonly used profiles, and custom time functions for flexible windows. dgoogauth - Go port of Google's Authenticator library for one-time passwords goauth - A library for header-based OAuth over HTTP or HTTPS. GOAuth - OAuth Consumer goha - Basic and Digest HTTP Authentication for Go http client go-http-auth - HTTP Basic and HTTP Digest authentication Go-OAuth - OAuth 1.0 client go-otp - Package go-otp implements one-time-password generators used in 2-factor authentication systems like RSA-tokens. Currently this supports both HOTP (RFC-4226), TOTP (RFC-6238) and Base32 encoding (RFC-3548) for Google Authenticator compatibility goth - Package goth provides a simple, clean, and idiomatic way to write authentication packages for Go web applications hero - OAuth server implementation - be an OAuth provider with Go httpauth-go - Package httpauth provides utilities to support HTTP authentication policies. Support for both the basic authentication scheme and the digest authentication scheme are provided. httpauth - HTTP session (cookie) based authentication and authorization oauth1a - OAuth 1.0 client library OAuth Consumer - OAuth 1.0 consumer implementation otp - HOTP and TOTP library with command line replacement for Google Authenticator securecookie - Encode and Decode secure cookies totp - Time-Based One-Time Password Algorithm, specified in RFC 6238, works with Google Authenticator","title":"Authentication"},{"location":"Projects/#dom-handling","text":"Cascadia - CSS selector library GoQuery - jQuery-like DOM manipulation library, using Go's experimental HTML package. goq - jQuery-like declarative struct tag scraping and unmarshaling based on GoQuery. html-query - A fluent and functional approach to querying HTML. HTML Transform - A CSS selector based html scraping and transformation library","title":"DOM handling"},{"location":"Projects/#frameworks-and-toolkits","text":"aah - A scalable, performant, rapid development Web framework for Go. Aero - Fast and secure web server for Go. Air - An ideal RESTful web framework for Go. alien - A lightweight and fast http router app.go - Web framework for google app engine arasu - A Lightning Fast Web Framework written in Go & Dart Beego - Beego is an open source version of the scalable, non-blocking web framework. browserspeak - Generate HTML templates, CSS or SVG without writing < or > eudore - Eudore is the core of a golang lightweight web framework. falcore - Modular HTTP server framework fcgi_client - Go fastcgi client with fcgi params support Flamingo Framework - Framework for building pluggable production ready web projects. florest - High-performance workflow based REST API framework in Go forgery - A clone of the superb Node.js web framework Express. Gin Web Framework - Martini-like API and httprouter gives it good performance. Goal - A toolkit for high productivity web development in Go language built around the concept of code generation. Go-Blog - Blog framework written in Go go-fastweb - aims to be a simple, small and clean MVC framework for go goku - a Web Mvc Framework for Go, mostly like ASP.NET MVC. Golanger - Golanger Web Framework is a lightweight framework for writing web applications in Go. Goldorak.Go - a web miniframework built using mustache.go, web.go and Go-Redis go-restful - lean package for building REST-style Web Services GoRest - An extensive configuration(tags) based RESTful style web-services framework. go-rest - A small and evil REST framework for Go gorilla - Gorilla web toolkit GoSrv - A Go HTTP server that provides simple command line functionality, config loading, request logging, graceful connection shutdown, and daemonization. go-start - A high level web-framework for Go go-urlshortener - interface to google's urlshorten API goweb - Lightweight RESTful web framework for Go providing Ruby on Rails style routing go-webproject - Modular web application framework and app server Gowut - Go Web UI Toolkit is a full-featured, easy to use, platform independent Web UI Toolkit written in pure Go. Goyave - An elegant, full-featured web application framework gramework - The truly fastest web framework for Go. Battle tested, highly effective baseline for your web apps. httpcoala - Library for request coalescing - handy for reverse proxies. HttpRouter - A high performance HTTP request router that scales well limiter - Simple rate limter middleware for Go Macaron - Modular web framework in Go mango - Mango is a modular web-application framework for Go, inspired by Rack, and PEP333. Martini deprecated - Martini is a popular, lightweight, extensible package for writing modular web apps/services in Go Negroni - Idiomatic middleware for Go restclient - Client library for interacting with RESTful APIs. resty - REST client library inspired by Ruby rest-client. Revel - High productivity web framework modeled on Play! Framework Ringo - Lighweight MVC web framework inspired by Rails, Gin. sawsij - Provides a small, opinionated web framework. Tango - Micro-kernel & pluggable web framework for Go Tiger Tonic - framework for building JSON web services inspired by Dropwizard trinity - MVC framework uAdmin - Web framework with a back end GUI similar to Django. Utron - MVC Framework Violetear - HTTP router web.go - a simple framework to write webapps wfdr - Simple web framework designed for and written in go. Works with other languages as well, but not as well. xweb - A web framework for Go. Just like Struts for Java.","title":"Frameworks and Toolkits"},{"location":"Projects/#html-forms","text":"form - Complete bidirectional HTML form encoder & decoder (x-www-form-urlencoded) for arbitrary data (package encoding compatible) gforms - HTML forms for Go Go-FORM-it - Go library for easy and highly-customizable forms creation and template rendering. GoForms - Form data validation, cleaning and error reporting - a la django.forms htmlfiller - Fills in html forms with default values and errors a la Ian Bicking's htmlfill for Python MonstiForm - HTML form generator and validator library revel-csrf - Cross-Site Request Forgery (CSRF) attacks prevention for the Revel framework xsrftoken - A package for generating and validating tokens used in preventing XSRF attacks","title":"HTML forms"},{"location":"Projects/#public-api-wrappers","text":"adn - Interface to the App.net API anaconda - Client library for the Twitter 1.1 API cloudcomb-go-sdk - Go client library for CloudComb ddg - DuckDuckGo API interface facebook - Up-to-date facebook graph API client. Handy and flexible filepicker-go - Go library for the Filepicker's REST API firebase - Client library for the Firebase REST API gh - Scriptable server and net/http middleware for GitHub Webhooks API github - Go library for accessing the GitHub REST API v3 githubql - Go library for accessing the GitHub GraphQL API v4 gobo - Client library for Sina Weibo gocaptcha - gocaptcha provides easy access to the reCaptcha API in go go-dealmap - Go library for accessing TheDealMap's API go-dropbox - API library for dropbox go-flickr - A wrapper for Flickr's API go-get-youtube - A simple library+client for fetching meta data of, and downloading Youtube videos go-gravatar - Wrapper for the Gravatar API go-hummingbird - Go library for accessing the Hummingbird.me API go-libGeoIP - GO Lib GeoIP API for Maxmind gominatim - Go library to access nominatim geocoding services gomojo - Instamojo API wrapper gomwapi - Access mediawiki contents like wikipedia, wiktionary in golang go-myanimelist - Go library for accessing the MyAnimeList API googtrans - unofficial go bindings for Google Translate API v2 go-recaptcha - Handles reCaptcha form submissions in Go gorecurly - A Client app to use with Recurly's api go.strava - Official client library for the Strava V3 API go.stripe - a simple credit card processing library for Go using the Stripe API Gotank - Searchify's Go client for the IndexTank full-text search API go-tripit - Go API library for the TripIt web services GoTwilio - Twilio library for Go (golang). Very basic at the moment gravatar - Gravatar image/profile API library jsonapi - Generate JSON API from Go structs postmark - Access postmark API from Go reddit.go - Client library for Reddit API shorturl - Generic implementation for interacting with various URL shortening services SocialSharesCount - Wrapper API on multiple social websites to get URL share statistics Stack on Go - Go wrapper for Stack Exchange API stripe - Official Stripe client library twilio - Simple Twilio API wrapper twittergo - Client library for Twitter's API vksdk - Golang module for working with VK API","title":"Public API Wrappers"},{"location":"Projects/#other_2","text":"adhoc-http - Quick & dirty HTTP static file server aop - Aspect Oriented Programming For Go. assets - Helps prepares CSS and JS files for development and production of Go web apps. bwl - a set of libraries to help build web sites captcha - Image and audio captcha generator and server gaerecords - Lightweight wrapper around appengine/datastore providing Active Record and DBO style management of data gcd - provides helpful functions to work with Google Cloud DataStore. get2ch-go - a library to access the 2channel Japanese web bulletin board gofeed - Parse RSS and Atom feeds in Go go-gzip-file-server - A net.http.Handler similar to FileServer that serves gzipped content gohaml - An implementation of the popular XHTML Abstraction Markup Language using the Go language. go-httpclient - a Go HTTP client with timeouts gojwt - Json Web Tokens for Go go-pkg-rss - a packages that reads RSS and Atom feeds gorefit - A library for theming existing websites goreman - foreman clone GoRequest - Simplified HTTP client with rich features such as proxy, timeout, and etc. ( inspired by nodejs SuperAgent ) goroute - A very simple URL router based on named submatches of regular expression that works well with http.Handler . gorouter - Simple router for go to process url variables go-rss - Simple RSS parser and generator go-rss - Simple RSS parser, tested with Wordpress feeds. goscribble - An MPD Audioscrobble go-twitter - another Twitter client go-twitter-oauth - a simple Twitter client (supports OAuth) grender - Go static site generator halgo - HAL -compliant API client and serialisation library. http-gonsole - Speak HTTP like a local. (the simple, intuitive HTTP console, golang version) httprpc - HTTP RPC codecs (json2, soap, rest) HypeCMS - A flexible CMS built with Go and MongoDb. Kontl - A client for kon.tl's URL shortening service mustache.go - an implementation of the Mustache template language muxer - Simple muxer for a Go app without regexp Optimus Sitemap Generator - A universal XML sitemap generator passwordreset - Creation and verification of secure tokens useful for implementation of \"reset forgotten password\" feature in web applications. pat - A Sinatra style pattern muxer persona - remote verification API for persona plex - simple, small, light, regexp http muxer with chaining podcast - iTunes and RSS 2.0 Podcast Generator in Golang purell - tiny Go library to normalize URLs pusher.go - HTTP Server Push module for the standard http package rest2go - Based on rest.go, forked for improvements and REST consistency rest.go (forked) - forked rest.go for improvements and REST consistency resty - Simple HTTP and REST client for Go inspired by Ruby rest-client. robotstxt - The robots.txt exclusion protocol implementation. Allows to parse and query robots.txt file. scs - A HTTP session manager using server-side sessions stores. seshcookie - A web session library inspired by Beaker soy - A Go implementation for Soy templates (Google Closure templates). High performance and i18n. user_agent - An HTTP User-Agent parser webtestutil - Web and HTTP functional testing utilities. Includes Gorilla testing support. yt2pod - Daemon that monitors YouTube channels and publishes audio podcasts of them","title":"Other"},{"location":"Projects/#windows","text":"gform - An easy to use Windows GUI toolkit for Go go-ole - win32 ole implementation for golang go-Windows-begin - for the absolute Windows-Go beginner w32 - Windows API wrapper for Go. walk - \"Windows Application Library Kit\" for the Go Programming Language Windows Command Line Shutdown - A tool to shutdown Windows Computer from Command Prompt","title":"Windows"},{"location":"Projects/#unix","text":"inspect - Linux and MacOSX systems monitoring and diagnostics unixsums - Legacy Unix checksums: cksum, sum","title":"Unix"},{"location":"Projects/#unsorted-please-help","text":"The following entries have not been filed. Please help by putting these in relevant categories. consistent - Consistent hashing with bounded loads. dotviz-server - WebBased DOT language visualization tool written in go ebml-go - EBML decoder go-bindata - Converts any file into manageable Go source code for embedding binary data into a Go program. GoBot - PoC Go HTTP Botnet goconsistenthash - Consistent hashing library (based on http://www.lexemetech.com/2007/11/consistent-hashing.html ) go-cron - A small cron job system to handle scheduled tasks, such as optimizing databases or kicking idle users from chat. The cron.go project was renamed to this for go get compatibility. godebiancontrol - Golang debian control file parser godotviz - Rendering graphics files from \"DOT language\". Written in golang go-gmetric - Ganglia gmetric protocol support gographviz - Graphviz DOT language parser for golang golor - golor is a command line tool for golang source code coloring gopcapreader - Presents realtime pcap data as io.Reader objects go.psl - Go regdom-libs/public suffix list goseq - command line tool, written in Go, for creating sequence diagrams using a text-based description language. go-webfinger - Simple Client Implementation of WebFinger img-LinuxFr.org - A reverse-proxy cache for external images used on LinuxFr.org one-file-pdf - A minimalist Go PDF writer in <2K lines and 1 file seed - Easily seed PRNGs with some entropy spellabc - Package spellabc implements spelling alphabet code word encoding. Tasks - A simplistic todo list manager written in Go Twackup - Backs up your tweets into local files al-Go-rithms - Collection of algorithms on arrays, runes, strings for reference purpose.","title":"Unsorted; please help!"},{"location":"Proposals/","text":"See golang/proposal#readme","title":"Proposals"},{"location":"ProviderIntegration/","text":"Introduction A number of Platform-as-a-Service ( PaaS ) providers allow you to use Go applications on their clouds. Details PaaS Repository Quickstart Guide Google App Engine GoogleCloudPlatform/appengine-plus-go https://developers.google.com/appengine/training/go-plus-appengine/ Azure wadewegner/azure-website-go-builder http://www.wadewegner.com/2015/01/creating-a-go-site-extension-and-resource-template-for-azure/ IBM BlueMix http://www.ibm.com/developerworks/cloud/library/cl-bluemix-go-app/ CloudBees CloudBees-community/golang-clickstart Cloud Foundry kr/heroku-buildpack-go http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/ dotCloud kencochrane/golang-on-dotcloud AWS Elastic Beanstalk sqs/go-elasticbeanstalk Heroku kr/heroku-buildpack-go http://mmcgrana.github.com/2012/09/getting-started-with-go-on-heroku.html OpenShift gcmurphy/golang-openshift Stackato kr/heroku-buildpack-go http://docs.stackato.com/user/deploy/languages/go.html Tsuru http://docs.tsuru.io/en/latest/apps/quickstart/go.html Cocaine http://github.com/cocaine 3Hren/cocaine-core 3Hren/cocaine-plugins cocaine/cocaine-framework-go cocaine/cocaine-vagrant and 3Hren/cocaine-core GE Predix geaviation/goboot-starter https://www.predix.io/resources/tutorials/journey.html Tencent Cloud TencentCloud/tencentcloud-sdk-go https://intl.cloud.tencent.com/document/product/436/30601","title":"ProviderIntegration"},{"location":"ProviderIntegration/#introduction","text":"A number of Platform-as-a-Service ( PaaS ) providers allow you to use Go applications on their clouds.","title":"Introduction"},{"location":"ProviderIntegration/#details","text":"PaaS Repository Quickstart Guide Google App Engine GoogleCloudPlatform/appengine-plus-go https://developers.google.com/appengine/training/go-plus-appengine/ Azure wadewegner/azure-website-go-builder http://www.wadewegner.com/2015/01/creating-a-go-site-extension-and-resource-template-for-azure/ IBM BlueMix http://www.ibm.com/developerworks/cloud/library/cl-bluemix-go-app/ CloudBees CloudBees-community/golang-clickstart Cloud Foundry kr/heroku-buildpack-go http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/ dotCloud kencochrane/golang-on-dotcloud AWS Elastic Beanstalk sqs/go-elasticbeanstalk Heroku kr/heroku-buildpack-go http://mmcgrana.github.com/2012/09/getting-started-with-go-on-heroku.html OpenShift gcmurphy/golang-openshift Stackato kr/heroku-buildpack-go http://docs.stackato.com/user/deploy/languages/go.html Tsuru http://docs.tsuru.io/en/latest/apps/quickstart/go.html Cocaine http://github.com/cocaine 3Hren/cocaine-core 3Hren/cocaine-plugins cocaine/cocaine-framework-go cocaine/cocaine-vagrant and 3Hren/cocaine-core GE Predix geaviation/goboot-starter https://www.predix.io/resources/tutorials/journey.html Tencent Cloud TencentCloud/tencentcloud-sdk-go https://intl.cloud.tencent.com/document/product/436/30601","title":"Details"},{"location":"Questions/","text":"Asking Questions Unlike many projects, the Go project does not use GitHub Issues for general discussion or asking questions. GitHub Issues are used for tracking bugs and proposals only. For asking questions, see: Stack Overflow with questions tagged \"go\" The Go Forum , a web-based forum Gophers Slack , use the invite app for access. The #general channel is a good starting point. Go Community on Hashnode with questions and posts tagged with \"go\" The golang-nuts mailing list IRC channel #go-nuts on Libera If we closed your issue as a question with a link to this wiki, we apologize. Please ask the question on one of the above forums.","title":"Questions"},{"location":"Questions/#asking-questions","text":"Unlike many projects, the Go project does not use GitHub Issues for general discussion or asking questions. GitHub Issues are used for tracking bugs and proposals only. For asking questions, see: Stack Overflow with questions tagged \"go\" The Go Forum , a web-based forum Gophers Slack , use the invite app for access. The #general channel is a good starting point. Go Community on Hashnode with questions and posts tagged with \"go\" The golang-nuts mailing list IRC channel #go-nuts on Libera If we closed your issue as a question with a link to this wiki, we apologize. Please ask the question on one of the above forums.","title":"Asking Questions"},{"location":"RaceDetector/","text":"Moved to http://golang.org/doc/articles/race_detector.html","title":"RaceDetector"},{"location":"Range/","text":"Range Clauses Spec: http://golang.org/doc/go_spec.html#For_statements Summary A range clause provides a way to iterate over an array, slice, string, map, or channel. Example for k , v := range myMap { log . Printf ( \"key=%v, value=%v\" , k , v ) } for v := range myChannel { log . Printf ( \"value=%v\" , v ) } for i , v := range myArray { log . Printf ( \"array value at [%d]=%v\" , i , v ) } Reference If only one value is used on the left of a range expression, it is the 1 st value in this table. Range expression 1 st value 2 nd value (optional) notes array or slice a [n]E , *[n]E , or []E index i int a[i] E string s string type index i int rune int range iterates over Unicode code points, not bytes map m map[K]V key k K value m[k] V channel c chan E element e E none Gotchas When iterating over a slice or map of values, one might try this: items := make ([] map [ int ] int , 10 ) for _ , item := range items { item = make ( map [ int ] int , 1 ) // Oops! item is only a copy of the slice element. item [ 1 ] = 2 // This 'item' will be lost on the next iteration. } The make and assignment look like they might work, but the value property of range (stored here as item ) is a copy of the value from items , not a pointer to the value in items . The following will work: items := make ([] map [ int ] int , 10 ) for i := range items { items [ i ] = make ( map [ int ] int , 1 ) items [ i ][ 1 ] = 2 }","title":"Range"},{"location":"Range/#range-clauses","text":"Spec: http://golang.org/doc/go_spec.html#For_statements","title":"Range Clauses"},{"location":"Range/#summary","text":"A range clause provides a way to iterate over an array, slice, string, map, or channel.","title":"Summary"},{"location":"Range/#example","text":"for k , v := range myMap { log . Printf ( \"key=%v, value=%v\" , k , v ) } for v := range myChannel { log . Printf ( \"value=%v\" , v ) } for i , v := range myArray { log . Printf ( \"array value at [%d]=%v\" , i , v ) }","title":"Example"},{"location":"Range/#reference","text":"If only one value is used on the left of a range expression, it is the 1 st value in this table. Range expression 1 st value 2 nd value (optional) notes array or slice a [n]E , *[n]E , or []E index i int a[i] E string s string type index i int rune int range iterates over Unicode code points, not bytes map m map[K]V key k K value m[k] V channel c chan E element e E none","title":"Reference"},{"location":"Range/#gotchas","text":"When iterating over a slice or map of values, one might try this: items := make ([] map [ int ] int , 10 ) for _ , item := range items { item = make ( map [ int ] int , 1 ) // Oops! item is only a copy of the slice element. item [ 1 ] = 2 // This 'item' will be lost on the next iteration. } The make and assignment look like they might work, but the value property of range (stored here as item ) is a copy of the value from items , not a pointer to the value in items . The following will work: items := make ([] map [ int ] int , 10 ) for i := range items { items [ i ] = make ( map [ int ] int , 1 ) items [ i ][ 1 ] = 2 }","title":"Gotchas"},{"location":"RateLimiting/","text":"Rate Limiting To limit the rate of operations per unit time, use a time.Ticker . This works well for rates up to tens of operations per second. For higher rates, prefer a token bucket rate limiter such as golang.org/x/time/rate.Limiter (also search godoc.org for rate limit ). import \"time\" const rateLimit = time . Second / 10 // 10 calls per second // Client is an interface that calls something with a payload. type Client interface { Call ( * Payload ) } // Payload is some payload a Client would send in a call. type Payload struct {} // RateLimitCall rate limits client calls with the payloads. func RateLimitCall ( client Client , payloads [] * Payload ) { throttle := time . Tick ( rateLimit ) for _ , payload := range payloads { <- throttle // rate limit our client calls go client . Call ( payload ) } } To allow some bursts, add a buffer to the throttle: import \"time\" const rateLimit = time . Second / 10 // 10 calls per second // Client is an interface that calls something with a payload. type Client interface { Call ( * Payload ) } // Payload is some payload a Client would send in a call. type Payload struct {} // BurstRateLimitCall allows burst rate limiting client calls with the // payloads. func BurstRateLimitCall ( ctx context . Context , client Client , payloads [] * Payload , burstLimit int ) { throttle := make ( chan time . Time , burstLimit ) ctx , cancel := context . WithCancel ( ctx ) defer cancel () go func () { ticker := time . NewTicker ( rateLimit ) defer ticker . Stop () for t := range ticker . C { select { case throttle <- t : case <- ctx . Done (): return // exit goroutine when surrounding function returns } } }() for _ , payload := range payloads { <- throttle // rate limit our client calls go client . Call ( payload ) } }","title":"RateLimiting"},{"location":"RateLimiting/#rate-limiting","text":"To limit the rate of operations per unit time, use a time.Ticker . This works well for rates up to tens of operations per second. For higher rates, prefer a token bucket rate limiter such as golang.org/x/time/rate.Limiter (also search godoc.org for rate limit ). import \"time\" const rateLimit = time . Second / 10 // 10 calls per second // Client is an interface that calls something with a payload. type Client interface { Call ( * Payload ) } // Payload is some payload a Client would send in a call. type Payload struct {} // RateLimitCall rate limits client calls with the payloads. func RateLimitCall ( client Client , payloads [] * Payload ) { throttle := time . Tick ( rateLimit ) for _ , payload := range payloads { <- throttle // rate limit our client calls go client . Call ( payload ) } } To allow some bursts, add a buffer to the throttle: import \"time\" const rateLimit = time . Second / 10 // 10 calls per second // Client is an interface that calls something with a payload. type Client interface { Call ( * Payload ) } // Payload is some payload a Client would send in a call. type Payload struct {} // BurstRateLimitCall allows burst rate limiting client calls with the // payloads. func BurstRateLimitCall ( ctx context . Context , client Client , payloads [] * Payload , burstLimit int ) { throttle := make ( chan time . Time , burstLimit ) ctx , cancel := context . WithCancel ( ctx ) defer cancel () go func () { ticker := time . NewTicker ( rateLimit ) defer ticker . Stop () for t := range ticker . C { select { case throttle <- t : case <- ctx . Done (): return // exit goroutine when surrounding function returns } } }() for _ , payload := range payloads { <- throttle // rate limit our client calls go client . Call ( payload ) } }","title":"Rate Limiting"},{"location":"Rationales/","text":"Introduction This wiki entry will try to document the rationales behind some important language decisions besides what's included in the Go FAQ and Effective Go. Language Features Why method receiver's base type cannot be pointer or interface? Reference: https://groups.google.com/forum/#!topic/golang-nuts/aqTwXHaSC_Y Go doesn't allow receiver's base type to be pointer to avoid possible ambiguity. Suppose you have: type T blah type P *T func (t *T) String() string { ... } func (p P) String() string { ... } var p P Then the meaning of the expression (*p).String() is ambiguous, because it can refer to both (*T).String and P.String . Go doesn't allow receiver's base type to be interfaces, because interfaces already have methods. (TODO) Select with closed channel Issue #11344 . Send to closed channel Issue #18511 . Memory Model Standard Library","title":"Rationales"},{"location":"Rationales/#introduction","text":"This wiki entry will try to document the rationales behind some important language decisions besides what's included in the Go FAQ and Effective Go.","title":"Introduction"},{"location":"Rationales/#language-features","text":"","title":"Language Features"},{"location":"Rationales/#why-method-receivers-base-type-cannot-be-pointer-or-interface","text":"Reference: https://groups.google.com/forum/#!topic/golang-nuts/aqTwXHaSC_Y Go doesn't allow receiver's base type to be pointer to avoid possible ambiguity. Suppose you have: type T blah type P *T func (t *T) String() string { ... } func (p P) String() string { ... } var p P Then the meaning of the expression (*p).String() is ambiguous, because it can refer to both (*T).String and P.String . Go doesn't allow receiver's base type to be interfaces, because interfaces already have methods. (TODO)","title":"Why method receiver's base type cannot be pointer or interface?"},{"location":"Rationales/#select-with-closed-channel","text":"Issue #11344 .","title":"Select with closed channel"},{"location":"Rationales/#send-to-closed-channel","text":"Issue #18511 .","title":"Send to closed channel"},{"location":"Rationales/#memory-model","text":"","title":"Memory Model"},{"location":"Rationales/#standard-library","text":"","title":"Standard Library"},{"location":"ResearchPapers/","text":"This page lists academic and industry research papers about Go or using Go as the implementation language. 2020 Uncovering the Hidden Dangers: Finding Unsafe Go Code in the Wild (J. Lauinger, L. Baumg\u00e4rtner, A. Wickert, M. Mezini) arxiv go-geiger go-safer Study results Go unsafe.Pointer vulnerability POCs Conference talk Lightweight Preemptible Functions (S. Boucher, A. Kalia, D. Andersen, M. Kaminsky) Usenix'20 From Folklore to Fact: Comparing Implementations of Stacks and Continuations (K. Farvadin, J. Reppy) PLDI'20 Featherweight Go (R. Griesemer, R. Hu, W. Kokke, J. Lange, I. Taylor, B. Toninho, P. Wadler, N. Yoshida) arxiv GoPi: Compiling linear and static channels in Go (M. Giunti) pdf github Fencing off Go: Liveness and Safety for Channel-Based Programming pdf Breaking Type-Safety in Go: An Empirical Study on the Usage of the unsafe Package (D. Costa, S. Mujahid, R. Abdalkareem, E. Shihab) arxiv Static Race Detection and Mutex Safety and Liveness for Go Programs (J. Gabet, N. Yoshida) arxiv github EdgeKV: Decentralized, scalable, and consistent storage for the edge (K. Sonbol, \u00d6. \u00d6zkasap, I. Al-Oqily, M. Aloqaily) arxiv Bypassing memory safety mechanisms through speculative control flow hijacks (A. Mambretti, A. Sandulescu, A. Sorniotti, W. Robertson, E. Kirda, A. Kurmus) arxiv CL Bounded verification of message-passing concurrency in Go using Promela and Spin (N. Dilley, J. Lange) arxiv github 2019 Software Microbenchmarking in the Cloud. How Bad is it Really?. Laaber, Scheuner, and Leitner. In: Empirical Software Engineering. preprint DOI replication package Understanding Real-World Concurrency Bugs in Go (Tu, Liu, Song, Zhang) ASPLOS'19 preprint web An empirical study of messaging passing concurrency in Go projects (N. Dilley, J. Lange) SANER'19 pre-print web-page A comparison of three programming languages for a full-fledged next-generation sequencing tool (Costanza, Herzeel, Verachtert) biorvix Exploring polyglot software frameworks in ALICE with FairMQ and fer arxiv sbinet-alice/fer Flash: Efficient Dynamic Routing for Offchain Networks arxiv RepChain: A Reputation based Secure, Fast and High Incentive Blockchain System via Sharding arxiv Drynx: Decentralized, Secure, Verifiable System for Statistical Queries and Machine Learning on Distributed Datasets arxiv STYLE-ANALYZER: fixing code style inconsistencies with interpretable unsupervised algorithms arxiv Linear-Time Inference for Pairwise Comparisons with Gaussian-Process Dynamics arxiv 2018 An Evaluation of Open-Source Software Microbenchmark Suites for Continuous Performance Assessment. Laaber and Leitner. In: MSR \u201918: 15 th International Conference on Mining Software Repositories. preprint DOI replication package An Analysis of Quorum-based Abstractions: A Case Study using Gorums to Implement Raft. Sebastian Pedersen, Hein Meling, and Leander Jehl. In: Proceedings of the 2018 Workshop on Advanced Tools, Programming Languages, and PLatforms for Implementing and Evaluating Algorithms for Distributed systems, ApPLIED@PODC 2018, Egham, United Kingdom, July 27, 2018. ACM, 2018. doi:10.1145/3231104.3231957 Raft implementation in Gorums Implementation and evaluation of secure and scalable anomaly-based network intrusion detection (P. Mieden) pdf code presentation ProIO: An Event-Based I/O Stream Format for Protobuf Messages (D. Blyth, J. Alcaraz, S. Binet, S.V. Chekanov) arXiv:1812.03967 proio-org/go-proio The latest gossip on BFT consensus (Buchman, Kwon, Milosevic) pdf Distributed Programming using Role-Parametric Session Types in Go (Castro, Hu, Jongmans, NG, Yoshida) pdf Observing the Evolution of QUIC Implementations, (Piraux, De Coninck, Bonaventure) pdf Cody Cutler, M. Frans Kaashoek, and Robert T. Morris, \"The benefits and costs of writing a POSIX kernel in a high-level language\" presentation code Voit, Sebastian Peter Johann. \"Writing Network Drivers in Go.\" pdf \"MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation\" (Shankara Pailoor, Andrew Aday, Suman Jana) USENIX Security 2018 pdf \"Process-Local Static Analysis of Synchronous Processes\" (Jan Midtgaard, Flemming Nielson, Hanne Riis Nielson) SAS 2018 full version PDF prototype \"Inferring and Asserting Distributed System Invariants\" (Stewart Grant, Hendrik Cech, Ivan Beschastnikh) ICSE 2018 Technical Papers pdf bitbucket.org/bestchai/dinv/ \"DInv is a distributed system data invariant detector\" ; \"DInv is written in go lang\" \"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification.\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami) arXiv:1802.03938 stat.ML, PDF:arXiv:1802.03938-stat.ML github.com/hiro4bbh/sticker \"\u2026We have published our implementation sticker (Aoshima, 2018) written in Golang (Golang, 2009)\u2026\" keywords: sticker, machine-learning, classification A Static Verification Framework for Message Passing in Go using Behavioural Types (J. Lange, N. Ng, B. Toninho, N. Yoshida) accepted draft at ICSE 2018 Tool page , sources: godel-checker and Go frontend Finding The Greedy, Prodigal, and Suicidal Contracts at Scale (Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, Aquinas Hobor) pdf \"To implement the validating framework, we added a new functionality to the official go-ethereum package [20] which allows us to fork the Ethereum main chain at a block height of our choice.\" State of Mutation Testing at Google (Goran Petrovic and Marko Ivankovic) https://research.google.com/pubs/pub46584.html Index Data Structure, Functionality and Microservices in Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis) http://vestnik.spbu.ru/html18/s10/s10v1/04.pdf \"Two-Phase Dynamic Analysis of Message-Passing Go Programs based on Vector Clocks\" (M. Sulzmann, K. Stadtmueller) arxiv \"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami) arxiv \"GEEC: Scalable, Efficient, and Consistent Consensus for Blockchains\" (Xusheng Chen, Shixiong Zhao, Cheng Wang, Senran Zhang, Heming Cui) arxiv \"Dependability in a Multi-tenant Multi-framework Deep Learning as-a-Service Platform\" (Scott Boag, Parijat Dube, Kaoutar El Maghraoui, Benjamin Herta, Waldemar Hummer, K. R. Jayaram, Rania Khalaf, Vinod Muthusamy, Michael Kalantar, Archit Verma) arxiv github DRONE: a Distributed Subgraph-Centric Framework for Processing Large Scale Power-law Graphs arxiv Reducing Metadata Leakage from Encrypted Files and Communication with PURBs arxiv 2017 Gorums: Towards new abstractions for implementing quorum-based systems. Tormod Erevik Lea, Leander Jehl, and Hein Meling. In Kisung Lee and Ling Liu, editors, 37 th IEEE International Conference on Distributed Computing Systems, ICDCS 2017, Atlanta, GA, USA, June 5-8, 2017, pages 2380\u20132385. IEEE Computer Society, 2017 doi:10.1109/ICDCS.2017.166 Gorums on GitHub Go-HEP: writing concurrent software with ease and Go (S. Binet) doi:10.1088/1742-6596/1085/5/052012 arXiV:1808.06529 https://go-hep.org RDFIO: extending Semantic MediaWiki for interoperable biomedical data management (Samuel Lampa, Egon Willighagen, Pekka Kohonen, Ali King, Denny Vrande\u010di\u0107, Roland Grafstr\u00f6m, Ola Spjuth) Journal of Biomedical Semantics ( Volume: 8, Issue: 35 ) DOI: 10.1186/s13326-017-0136-y The rdf2smw commandline tool, for batch conversion from RDF to Semantic MediaWiki facts in MediaWiki XML dump format, is written in Go github.com/rdfio/rdf2smw godoc Keywords: Semantic MediaWiki, Semantic Web, RDF Construction and first tests of an in-beam PET demonstrator dedicated to the ballistic control of hadrontherapy treatments with 65 MeV protons (E Busato et al.) IEEE Transactions on Radiation and Plasma Medical Sciences ( Volume: PP, Issue: 99 ) DOI: 10.1109/TRPMS.2017.2780447 Monitoring system + parts of the DAQ in Go Keywords: Detectors, Particle beams, Protons, Ions, Plasmas, Structural beams, Monitoring Let's Go: a Data-Driven Multi-Threading Support (Alberto Scionti,Somnath Mazumdar) CF'17 Proceedings of the Computing Frontiers Conference doi.org/10.1145/3075564.3075596 \"\u2026 This paper proposes a first attempt to map goroutines on a data-driven based PXM. \u2026\" Keywords: Data-driven, Programming language, Multi-threading Estimating Mixture Entropy with Pairwise Distances (Artemy Kolchinsky, Brendan D. Tracey) arXiv godoc Towards Omnia: a Monitoring Factory for Quality-Aware DevOps (Marco Miglierina, Damian A. Tamburri) doi.org/10.1145/3053600.3053629 ICPE '17 Companion github.com/mmiglier/omnia (Go: 52.8% ) Keywords: Monitoring, Monitoring Management, Monitoring Factory, Monitoring Interface, Monitoring Infrastructure as Code, Monitoring Configuration as Code Copy-on-Reference File Mechanism Extends Scope of Dynamic Reconfiguration (Jeremy Krach) thesis pdf github.com/krockpot/lazyfs \"Lazy file retrieval for process migration.\" An event model for phylogenetic biogeography using explicitly geographical ranges (J. Salvador Arias) http://onlinelibrary.wiley.com/doi/10.1111/jbi.13024/full Computer implementation (EVS written in Go) : github.com/js-arias/evs \"Evs is a tool for phylogenetic biogeography. \" Feasibility of reusable continuous thrust spacecraft for cargo resupply missions to Mars (C. B. Rabotin) thesis pdf github.com/ChristopherRabotin/smd Space Mission Design - A SPICE-enhanced continuous thrust interplanetary mission propagator and vizualizer Keywords: space-mission interplanetary-missions celestial-bodies astrodynamics orbit propagation spice Performance testing of open-source HTTP web frameworks in an API (Michael A.P. Domingues) DSIE\u201917 https://paginas.fe.up.pt/~prodei/dsie17/DSIE17_Proceedings.pdf#page=18 Keywords: Revel, Gin and Echo, Performance testing, API, Web frameworks, Apache benchmark Method of auto-configuration for corporate proxies (Andr\u00e9s Abelardo Villarroel Acosta, Carlos Enrique Montenegro Mar\u00edn, Paulo Alonso Gaona Garc\u00eda, Yuri Vanessa Nieto Acevedo) Ingenier\u00eda solidaria, 2017 https://revistas.ucc.edu.co/index.php/in/article/view/1723 andresvia/udpac Keywords: Proxy Auto-configuration (PAC), Web Proxy Auto-Discovery Protocol (WPAD), Dynamic Host Configuration Protocol (DHCP), Standard Time. NucAmino: a nucleotide to amino acid alignment optimized for virus gene sequences ( Philip L. Tzou, Xiaoqiu Huang, Robert W. Shafer ) BMC Bioinformatics (2017) 18: 138. DOI: 10.1186/s12859-017-1555-6 \"\u2026 NucAmino is written in the computer language Go \u2026\" github.com/hivdb/NucAmino ( Go 94.4% ) Keywords: Sequence alignment, Viruses, HIV-1, Drug resistance, Open source Idiomatic and Reproducible Software Builds using Containers for Reliable Computing (Jonas Weber) Master\u2019s Thesis arXiv:1702.02999v1 cs.SE 9 Feb 2017 , pdf github.com/thriqon/thesis-supplement Structured I/O streams in Clive: a toolbox approach for wide area network computing ( Francisco J. Ballesteros ) DOI: 10.1186/s13174-016-0054-8 OPEN ACCESS \" \u2026 Clive is a system written in Go \u2026\" Clive related research Clive source \"\u2026Clive is an operating system designed to work in distributed and cloud computing environments. \u2026\" Keywords: Streams, Input/Output, Operating system, Distributed systems, Cloud computing Towards Practical Default-On Multi-Core Record/Replay ( Ali Jos\u00e9 Mashtizadeh, Tal Garfinkel, David Terei, David Mazi\u00e8res, Mendel Rosenblum) draft , ASPLOS 2017 Draft \u2013 Accepted at ASPLOS 2017 - PDF \"\u2026Castor currently supports applications written in C, C++, and Go on FreeBSD...., \u2026 For Go, we evaluate, Caddy \u2026 \" Comparing MapReduce and Pipeline Implementations for Counting Triangles ( Edelmira Pasarella, Maria-Esther Vidal, Cristina Zoltan) arXiv:1701.03318 cs.DC pdf \"\u2026 an ad-hoc version of MapReduce are implemented in the language Go \u2026\" Fencing off Go: Liveness and Safety for Channel-based Programming (J. Lange, N. Ng, B. Toninho, N. Yoshida), POPL 2017 doi: 10.1145/3009837.3009847 Tool page , code Design and Implementation of Concurrent C0 (Willsey, Prabhu, Pfenning) https://arxiv.org/abs/1701.04929 Automated Identification of Security Issues from Commit Messages and Bug Reports (Yagin Zhou, Asankhaya Sharma), FSE 2017 doi: 10.1145/3106237.3117771 Reconstructing Program Semantics from Go Binaries (Engelke) http://home.in.tum.de/~engelke/pubs/1709-ma.pdf An Attempt at Reducing Costs of Disk I/O in Go (Wilson, Mutschlechner) http://pages.cs.wisc.edu/~riccardo/assets/diskio.pdf Go-RealTime: A Lightweight Framework for Multiprocessor Real-Time System in User Space (Fang, Luo, Anwar, Zhuang, Gupta) http://sigbed.seas.upenn.edu/archives/2017-11/paper7.pdf \"Secure and Trustable Electronic Medical Records Sharing using Blockchain\" (Alevtina Dubovitskaya, Zhigang Xu, Samuel Ryu, Michael Schumacher, Fusheng Wang) arxiv \"Towards a More Reliable and Available Docker-based Container Cloud\" (Mudit Verma, Mohan Dhawan) arxiv 2016 Atom: Horizontally Scaling Strong Anonymity (Albert Kwon, Henry Corrigan-Gibbs, Srinivas Devadas, Bryan Ford) arXiv:1612.07841 cs.CR \"\u2026We implemented an Atom prototype in Go in approximately 3,500 lines of code, \u2026\" The Case for Reconfiguration without Consensus: Comparing Algorithms for Atomic Storage (Leander Jehl, Hein Meling) pdf github.com/relab/smartmerge implemented in golang Flower : Workflow management and heat-aware scheduling for modern cloud infrastructures (Robert Carosi, Boris Mattijssen) bachelor thesis, abstract , pdf , Keywords: container, workflow, virtualization, scheduling, flower, kubernetes Implementing a web-based bookingsystem using Go ( Vu, Phi-Long ) Independent thesis Basic level abstract , pdf ; Keywords: Booking System, Go, Golang, REST, XSS, XSRF Parallelization of the corpus manager\u2019s time-consuming operations (Bc. Radoslav R\u00e1bara ) Master's Thesis, Masaryk University pdf ; Keywords: Manatee, text corpora, Go, text compression, compression of integers, time-consuming operations, parallelization, MapReduce, Glow, distributed computing, data format, cluster, scalability Cyber Security Exercise Modeling & Tracking (Joonas Greis) Bachelor\u2019s thesis pdf \"\u2026 RESTful API was written with Golang using Go-Json-Rest package \u2026\" Scalable Byzantine Consensus via Hardware-assisted Secret Sharing (Jian Liu, Wenting Li, Ghassan O. Karame, N. Asokan) arXiv:1612.04997 cs.CR ; \"\u2026 Our implementation is based on Golang \u2026\" ; pdf Fast and Reliable Byzantine Fault Tolerance (Eric Scott Freeman) Master's thesis in Computer science link , pdf Formal verification of concurrency in go (Anuchit Prasertsang, Denduang Pradubsuwun) DOI: 10.1109/JCSSE.2016.7748882 Therapeutic target discovery using Boolean network attractors: updates from kali ( Arnaud Poret ) ( Quantitative Biology > Molecular Networks) arXiv:1611.03144v1 q-bio.MN github.com/arnaudporet/kali [Go 100.0%] Information Flow Analysis for Go ( Eric Bodden, Ka I. Pun, Martin Steffen, Volker Stolz, Anna-Katharina Wickert) 10.1007/978-3-319-47166-2_30 A Productivity Checker for Logic Programming (E. Komendantskaya, P. Johann, M. Schmidt ) arXiv:1608.04415 cs.PL project page: http://www.macs.hw.ac.uk/~ek19/CoALP/ A novel algorithm for detecting multiple covariance and clustering of biological sequences ( Wei Shen & Yan Li) ( Coevolution, Computational models ) http://www.nature.com/articles/srep30425 , doi:10.1038/srep30425 Algorithm implementation (golang - only binary ) : http://yanlilab.github.io/fastcov/ Architecture of the Hyperledger Blockchain Fabric (Christian Cachin) pdf code Reimagining the Programming Experience ( Mehrdad Afshari , dissertation) GoClr pdf MapReduce vs. Pipelining Counting Triangles (Edelmira Pasarella, Maria-Esther Vidal,and Cristina Zoltan) pdf Software Engineering with PSF and Go (Erik van der Schaaf) Thesis, University of Amsterdam pdf Parametric Polymorphism in the Go Programming Language (Matthew Allen) University of Texas, Turing Scholars honors thesis pdf code ( LLGO based ) Static Trace-Based Deadlock Analysis for Synchronous Mini-Go ( Kai Stadtm\u00fcller, Martin Sulzmann, and Peter Thiemann ) pdf code - first beta implementation : gopherlyzer Continuous Query-Based Syndication: Distributed, Expressive Messaging for the IoT( Gabriel Fierro, Erik Krogen ) pdf , motivation code ( Go and Python implementation ) Privacy, Discovery, and Authentication for the Internet of Things (Wu, Taly, Shankar, Boneh) arxiv code Static Deadlock Detection for Concurrent Go by Global Session Graph Synthesis (Ng, Yoshida) pdf code A Small-Step Semantics of a Concurrent Calculus with Goroutines and Deferred Functions ( Martin Steffen ) springer link Butterfield, Ellis H., \"Fog Computing with Go: A Comparative Study\" (2016). CMC Senior Theses. Paper 1348. http://scholarship.claremont.edu/cmc_theses/1348 An Implementation and Analysis of a Kernel Network Stack in Go with the CSP Style (Harshal Sheth, Aashish Welling) arXiv:1603.05636 cs.OS PAS-MC: Privacy-preserving Analytics Stream for the Mobile Cloud (Joy, Gerla) arXiv:1604.04892 cs.CR Developing an Ethereum Blockchain Application (Triantafyllidis) pdf Identifying and characterizing Sybils in the Tor network (Winter, Ensafi, Loesing, and Feamster) pdf code A Distributed Implementation of the Graph Database System: DGraph pdf Browsix: Bridging the Gap Between Unix and the Browser (Powers, Vilk, Berger) https://arxiv.org/abs/1611.07862 Verification of Goroutines using Why3 (Schoolderman) https://www.ru.nl/publish/pages/769526/marc_schoolderman.pdf Detection of Bugs and Code Smells through Static Analysis of Go Source Code (Bergersen) https://www.duo.uio.no/bitstream/handle/10852/53050/bergersen_msc.pdf BTrDB: Optimizing Storage System Design for Timeseries Processing (Andersen, Culler) https://www.usenix.org/node/194399 Risk Factor Disclosures: Do Managers and Markets Speak the Same Language? https://www.sec.gov/comments/s7-06-16/s70616-369.pdf 2015 Tinzenite: Encrypted Peer to Peer File Synchronization via the Tox Protocol (Tamino P.S.M. Hartmann) (Master thesis at Ulm University) pdf github.com/tinzenite Blade: A Data Center Garbage Collector (Terei, Levy) arxiv:1504.02578 cs.DC Flywheel: Google's Data Compression Proxy for the Mobile Web (Agababov, Buettner, Chudnovsky, Cogan, Greenstein, McDaniel, Piatek, Scott, Welsh, Yin) pdf Rewriting a large production system in Go A Machine Learning Strategy to Assist Turbulence Model Development (Brendan Tracey, Karthik Duraisamy, Juan J. Alonso) http://arc.aiaa.org/doi/abs/10.2514/6.2015-1287 Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives ( Pravendra Singh ) arxiv:1503.08345 cs.AI Keeping Authorities \"Honest or Bust\" with Decentralized Witness Cosigning (Syta, Tamas, Visher, Wolinsky, Jovanovic, Gasser, Gailly, Khoffi, Ford) arxiv:1503.08768 cs.CR code , code Message Passing for Programming Languages and Operating Systems (Martynas Pumputis ) Master\u2019s Thesis pdf Type inference for Go (Emin Gigovic, Philip Malmros ) pdf Open-Source, Platform-Independent Library and Online Scripting Environment for Accessing Thermo Scientific RAW Files. (Kelchtermans, Silva, Argentini, Staes, Vandenbussche, Laukens, Valkenborg, Martens) https://www.ncbi.nlm.nih.gov/pubmed/26477298 Evaluation of performance and productivity metrics of potential programming languages in the HPC environment ( Bachelor Thesis ; Florian Wilkens ) - ( Go, Rust, C, OpenStreetMap ) github-code , pdf Concurrent Processing of Text Corpus Queries (R\u00e1bara, Rychl\u00fd) https://www.sketchengine.co.uk/wp-content/uploads/Concurrent_Processing_2015.pdf Automatic Memory Management Techniques for the Go Programming Language (Davis) (Ph.D. thesis) https://minerva-access.unimelb.edu.au/handle/11343/58707 Design Muntoi Web-based Framework and Search Engine Analytics for Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis) http://ieeexplore.ieee.org/document/7516334/ A Search Engine Backed by Internet-Wide Scanning (Durumeric, Adrian, Mirian, Bailey, Halderman) https://censys.io/static/censys.pdf An Extract Function Refactoring for the Go Language (Arasu) https://etd.auburn.edu/bitstream/handle/10415/4835/Steffi_Gnanaprakasa_MSThesis.pdf Compositional Decompilation using LLVM IR (BSc thesis, Robin Eklind) http://uu.diva-portal.org/smash/record.jsf?pid=diva2%3A911797&dswid=-6147 code pdf \"U-root: A Go-based, Firmware Embeddable Root File System with On-demand Compilation\" (Minnich, Mirtchovski) pdf code 2014 PARAGON: an approach for parallelization of power system contingency analysis using Go programming language http://onlinelibrary.wiley.com/doi/10.1002/etep.1999/full A Study of Successive Over-relaxation Method Parallelization Over Modern HPC Languages (Mittal) arxiv:1401.0763 cs.DC code There Is More Consensus in Egalitarian Parliaments (Moraru, Andersen, Kaminsky) pdf code Experience with ePaxos: Systems Research using Go Research Problems of Implementing Go https://talks.golang.org/2014/research.slide (rsc) https://talks.golang.org/2014/research2.slide (dvyukov) b\u00edogo: a simple high-performance bioinformatics toolkit for the Go language (D. Kortschak, D. Adelson) pdf P2S: A Fault-Tolerant Publish/Subscribe Infrastructure (Chang, Duan, Meling, Peisert, Zhang) pdf Generating a Google Go framework from an Uppaal model (Dekker) pdf Using the Go Programming Language in Practice (Westrup, Pettersson) pdf A Language Support for Exhaustive Fault-Injection in Message-Passing System Models (Suzuki, Watanabe) arXiv:1411.3793 cs.SE Big Learning with Bayesian Methods arXiv:1411.6370 cs.LG Be General and Don't Give Up Consistency in Geo-Replicated Transactional Systems PDF Project page: Hyflow The design and verification of Mumax3 (Vansteenkiste, Leliaert, Dvornik, Garcia-Sanchez, Van Waeyenberge) https://arxiv.org/abs/1406.7635 mumax/3 Building Reliable and Practical Byzantine Fault Tolerance (Duan) http://sduan.informationsystems.umbc.edu/files/2014-SisiDuan-dissertation.pdf 2013 GoPar: Automatic Loop Parallelization of Go Programs (Wetherbee) pdf code SCTP in Go ( Olivier Van Acker ) Keywords: Stream Control Transmission Protocol (SCTP); Transmission Control Protocol (TCP); Go; Networking; pdf Benchmarking Usability and Performance of Multicore Languages ( Sebastian Nanz, Scott West, Kaue Soares da Silveira, Bertrand Meyer) arXiv:1302.2837 cs.DC Examining the Expert Gap in Parallel Programming (Sebastian Nanz, Scott West, Kaue Soares da Silveira) pdf Acropolis: aggregated client request ordering by Paxos (Jothen) https://brage.bibsys.no/xmlui//handle/11250/181825 Implementation and experimental evaluation of live replacement and reconfiguration (Lea) https://brage.bibsys.no/xmlui//handle/11250/181813 Exploiting Parallelism in Coalgebraic Logic Programming (Komendantskaya, Schmidt, Heras) https://arxiv.org/abs/1312.4454 Parallel Pattern Discovery (Egon Elbre), Master's Thesis, University of Tartu pdf code 2012 Time Warp on the Go (D'Angelo, Ferretti, Marzolla) arxiv:1206.2772 cs.DC Can Go address the multicore issues of today and the manycore problems of tomorrow? (S. Binet) pdf GoCxx: a tool to easily leverage C++ legacy code for multicore-friendly Go libraries and frameworks (S. Binet) pdf The Buffered \u03c0-Calculus: A Model for Concurrent Languages (Deng, Zhang, Deng, Zhong) arxiv:1212.6183 cs.LO Analysis of the Go runtime scheduler (Neil Deshpande,Erica Sponsler,Nathaniel Weiss) pdf A Comparative Study of Programming Models for Concurrency ( Kaue Soares da Silveira) \u2013 Porto Alegre: COMGRAD CIC UFRGS, 2012. Final Report (Bachelor) pdf Debian Code Search (Stapelberg) pdf Go\u2019s Concurrency Constructs on the SCC (Prell, Rauber) pdf Comparing Parallel Performance of Go and C++ TBB on a Direct Acyclic Task Graph Using a Dynamic Programming Problem (Serfass, Tang) http://www.ualr.edu/pxtang/papers/ACMSE12-comparing.pdf 2011 ng: What next-generation languages can teach us about HENP frameworks in the manycore era (S. Binet) pdf Serving Web Content with Dynamic Process Networks in Go (James Whitehead II) DOI: 10.3233/978-1-60750-774-1-209 pdf 2010 GoHotDraw: Evaluating the Go Programming Language with Design Patterns (Schmager, Cameron, Noble) pdf","title":"ResearchPapers"},{"location":"ResearchPapers/#2020","text":"Uncovering the Hidden Dangers: Finding Unsafe Go Code in the Wild (J. Lauinger, L. Baumg\u00e4rtner, A. Wickert, M. Mezini) arxiv go-geiger go-safer Study results Go unsafe.Pointer vulnerability POCs Conference talk Lightweight Preemptible Functions (S. Boucher, A. Kalia, D. Andersen, M. Kaminsky) Usenix'20 From Folklore to Fact: Comparing Implementations of Stacks and Continuations (K. Farvadin, J. Reppy) PLDI'20 Featherweight Go (R. Griesemer, R. Hu, W. Kokke, J. Lange, I. Taylor, B. Toninho, P. Wadler, N. Yoshida) arxiv GoPi: Compiling linear and static channels in Go (M. Giunti) pdf github Fencing off Go: Liveness and Safety for Channel-Based Programming pdf Breaking Type-Safety in Go: An Empirical Study on the Usage of the unsafe Package (D. Costa, S. Mujahid, R. Abdalkareem, E. Shihab) arxiv Static Race Detection and Mutex Safety and Liveness for Go Programs (J. Gabet, N. Yoshida) arxiv github EdgeKV: Decentralized, scalable, and consistent storage for the edge (K. Sonbol, \u00d6. \u00d6zkasap, I. Al-Oqily, M. Aloqaily) arxiv Bypassing memory safety mechanisms through speculative control flow hijacks (A. Mambretti, A. Sandulescu, A. Sorniotti, W. Robertson, E. Kirda, A. Kurmus) arxiv CL Bounded verification of message-passing concurrency in Go using Promela and Spin (N. Dilley, J. Lange) arxiv github","title":"2020"},{"location":"ResearchPapers/#2019","text":"Software Microbenchmarking in the Cloud. How Bad is it Really?. Laaber, Scheuner, and Leitner. In: Empirical Software Engineering. preprint DOI replication package Understanding Real-World Concurrency Bugs in Go (Tu, Liu, Song, Zhang) ASPLOS'19 preprint web An empirical study of messaging passing concurrency in Go projects (N. Dilley, J. Lange) SANER'19 pre-print web-page A comparison of three programming languages for a full-fledged next-generation sequencing tool (Costanza, Herzeel, Verachtert) biorvix Exploring polyglot software frameworks in ALICE with FairMQ and fer arxiv sbinet-alice/fer Flash: Efficient Dynamic Routing for Offchain Networks arxiv RepChain: A Reputation based Secure, Fast and High Incentive Blockchain System via Sharding arxiv Drynx: Decentralized, Secure, Verifiable System for Statistical Queries and Machine Learning on Distributed Datasets arxiv STYLE-ANALYZER: fixing code style inconsistencies with interpretable unsupervised algorithms arxiv Linear-Time Inference for Pairwise Comparisons with Gaussian-Process Dynamics arxiv","title":"2019"},{"location":"ResearchPapers/#2018","text":"An Evaluation of Open-Source Software Microbenchmark Suites for Continuous Performance Assessment. Laaber and Leitner. In: MSR \u201918: 15 th International Conference on Mining Software Repositories. preprint DOI replication package An Analysis of Quorum-based Abstractions: A Case Study using Gorums to Implement Raft. Sebastian Pedersen, Hein Meling, and Leander Jehl. In: Proceedings of the 2018 Workshop on Advanced Tools, Programming Languages, and PLatforms for Implementing and Evaluating Algorithms for Distributed systems, ApPLIED@PODC 2018, Egham, United Kingdom, July 27, 2018. ACM, 2018. doi:10.1145/3231104.3231957 Raft implementation in Gorums Implementation and evaluation of secure and scalable anomaly-based network intrusion detection (P. Mieden) pdf code presentation ProIO: An Event-Based I/O Stream Format for Protobuf Messages (D. Blyth, J. Alcaraz, S. Binet, S.V. Chekanov) arXiv:1812.03967 proio-org/go-proio The latest gossip on BFT consensus (Buchman, Kwon, Milosevic) pdf Distributed Programming using Role-Parametric Session Types in Go (Castro, Hu, Jongmans, NG, Yoshida) pdf Observing the Evolution of QUIC Implementations, (Piraux, De Coninck, Bonaventure) pdf Cody Cutler, M. Frans Kaashoek, and Robert T. Morris, \"The benefits and costs of writing a POSIX kernel in a high-level language\" presentation code Voit, Sebastian Peter Johann. \"Writing Network Drivers in Go.\" pdf \"MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation\" (Shankara Pailoor, Andrew Aday, Suman Jana) USENIX Security 2018 pdf \"Process-Local Static Analysis of Synchronous Processes\" (Jan Midtgaard, Flemming Nielson, Hanne Riis Nielson) SAS 2018 full version PDF prototype \"Inferring and Asserting Distributed System Invariants\" (Stewart Grant, Hendrik Cech, Ivan Beschastnikh) ICSE 2018 Technical Papers pdf bitbucket.org/bestchai/dinv/ \"DInv is a distributed system data invariant detector\" ; \"DInv is written in go lang\" \"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification.\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami) arXiv:1802.03938 stat.ML, PDF:arXiv:1802.03938-stat.ML github.com/hiro4bbh/sticker \"\u2026We have published our implementation sticker (Aoshima, 2018) written in Golang (Golang, 2009)\u2026\" keywords: sticker, machine-learning, classification A Static Verification Framework for Message Passing in Go using Behavioural Types (J. Lange, N. Ng, B. Toninho, N. Yoshida) accepted draft at ICSE 2018 Tool page , sources: godel-checker and Go frontend Finding The Greedy, Prodigal, and Suicidal Contracts at Scale (Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, Aquinas Hobor) pdf \"To implement the validating framework, we added a new functionality to the official go-ethereum package [20] which allows us to fork the Ethereum main chain at a block height of our choice.\" State of Mutation Testing at Google (Goran Petrovic and Marko Ivankovic) https://research.google.com/pubs/pub46584.html Index Data Structure, Functionality and Microservices in Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis) http://vestnik.spbu.ru/html18/s10/s10v1/04.pdf \"Two-Phase Dynamic Analysis of Message-Passing Go Programs based on Vector Clocks\" (M. Sulzmann, K. Stadtmueller) arxiv \"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami) arxiv \"GEEC: Scalable, Efficient, and Consistent Consensus for Blockchains\" (Xusheng Chen, Shixiong Zhao, Cheng Wang, Senran Zhang, Heming Cui) arxiv \"Dependability in a Multi-tenant Multi-framework Deep Learning as-a-Service Platform\" (Scott Boag, Parijat Dube, Kaoutar El Maghraoui, Benjamin Herta, Waldemar Hummer, K. R. Jayaram, Rania Khalaf, Vinod Muthusamy, Michael Kalantar, Archit Verma) arxiv github DRONE: a Distributed Subgraph-Centric Framework for Processing Large Scale Power-law Graphs arxiv Reducing Metadata Leakage from Encrypted Files and Communication with PURBs arxiv","title":"2018"},{"location":"ResearchPapers/#2017","text":"Gorums: Towards new abstractions for implementing quorum-based systems. Tormod Erevik Lea, Leander Jehl, and Hein Meling. In Kisung Lee and Ling Liu, editors, 37 th IEEE International Conference on Distributed Computing Systems, ICDCS 2017, Atlanta, GA, USA, June 5-8, 2017, pages 2380\u20132385. IEEE Computer Society, 2017 doi:10.1109/ICDCS.2017.166 Gorums on GitHub Go-HEP: writing concurrent software with ease and Go (S. Binet) doi:10.1088/1742-6596/1085/5/052012 arXiV:1808.06529 https://go-hep.org RDFIO: extending Semantic MediaWiki for interoperable biomedical data management (Samuel Lampa, Egon Willighagen, Pekka Kohonen, Ali King, Denny Vrande\u010di\u0107, Roland Grafstr\u00f6m, Ola Spjuth) Journal of Biomedical Semantics ( Volume: 8, Issue: 35 ) DOI: 10.1186/s13326-017-0136-y The rdf2smw commandline tool, for batch conversion from RDF to Semantic MediaWiki facts in MediaWiki XML dump format, is written in Go github.com/rdfio/rdf2smw godoc Keywords: Semantic MediaWiki, Semantic Web, RDF Construction and first tests of an in-beam PET demonstrator dedicated to the ballistic control of hadrontherapy treatments with 65 MeV protons (E Busato et al.) IEEE Transactions on Radiation and Plasma Medical Sciences ( Volume: PP, Issue: 99 ) DOI: 10.1109/TRPMS.2017.2780447 Monitoring system + parts of the DAQ in Go Keywords: Detectors, Particle beams, Protons, Ions, Plasmas, Structural beams, Monitoring Let's Go: a Data-Driven Multi-Threading Support (Alberto Scionti,Somnath Mazumdar) CF'17 Proceedings of the Computing Frontiers Conference doi.org/10.1145/3075564.3075596 \"\u2026 This paper proposes a first attempt to map goroutines on a data-driven based PXM. \u2026\" Keywords: Data-driven, Programming language, Multi-threading Estimating Mixture Entropy with Pairwise Distances (Artemy Kolchinsky, Brendan D. Tracey) arXiv godoc Towards Omnia: a Monitoring Factory for Quality-Aware DevOps (Marco Miglierina, Damian A. Tamburri) doi.org/10.1145/3053600.3053629 ICPE '17 Companion github.com/mmiglier/omnia (Go: 52.8% ) Keywords: Monitoring, Monitoring Management, Monitoring Factory, Monitoring Interface, Monitoring Infrastructure as Code, Monitoring Configuration as Code Copy-on-Reference File Mechanism Extends Scope of Dynamic Reconfiguration (Jeremy Krach) thesis pdf github.com/krockpot/lazyfs \"Lazy file retrieval for process migration.\" An event model for phylogenetic biogeography using explicitly geographical ranges (J. Salvador Arias) http://onlinelibrary.wiley.com/doi/10.1111/jbi.13024/full Computer implementation (EVS written in Go) : github.com/js-arias/evs \"Evs is a tool for phylogenetic biogeography. \" Feasibility of reusable continuous thrust spacecraft for cargo resupply missions to Mars (C. B. Rabotin) thesis pdf github.com/ChristopherRabotin/smd Space Mission Design - A SPICE-enhanced continuous thrust interplanetary mission propagator and vizualizer Keywords: space-mission interplanetary-missions celestial-bodies astrodynamics orbit propagation spice Performance testing of open-source HTTP web frameworks in an API (Michael A.P. Domingues) DSIE\u201917 https://paginas.fe.up.pt/~prodei/dsie17/DSIE17_Proceedings.pdf#page=18 Keywords: Revel, Gin and Echo, Performance testing, API, Web frameworks, Apache benchmark Method of auto-configuration for corporate proxies (Andr\u00e9s Abelardo Villarroel Acosta, Carlos Enrique Montenegro Mar\u00edn, Paulo Alonso Gaona Garc\u00eda, Yuri Vanessa Nieto Acevedo) Ingenier\u00eda solidaria, 2017 https://revistas.ucc.edu.co/index.php/in/article/view/1723 andresvia/udpac Keywords: Proxy Auto-configuration (PAC), Web Proxy Auto-Discovery Protocol (WPAD), Dynamic Host Configuration Protocol (DHCP), Standard Time. NucAmino: a nucleotide to amino acid alignment optimized for virus gene sequences ( Philip L. Tzou, Xiaoqiu Huang, Robert W. Shafer ) BMC Bioinformatics (2017) 18: 138. DOI: 10.1186/s12859-017-1555-6 \"\u2026 NucAmino is written in the computer language Go \u2026\" github.com/hivdb/NucAmino ( Go 94.4% ) Keywords: Sequence alignment, Viruses, HIV-1, Drug resistance, Open source Idiomatic and Reproducible Software Builds using Containers for Reliable Computing (Jonas Weber) Master\u2019s Thesis arXiv:1702.02999v1 cs.SE 9 Feb 2017 , pdf github.com/thriqon/thesis-supplement Structured I/O streams in Clive: a toolbox approach for wide area network computing ( Francisco J. Ballesteros ) DOI: 10.1186/s13174-016-0054-8 OPEN ACCESS \" \u2026 Clive is a system written in Go \u2026\" Clive related research Clive source \"\u2026Clive is an operating system designed to work in distributed and cloud computing environments. \u2026\" Keywords: Streams, Input/Output, Operating system, Distributed systems, Cloud computing Towards Practical Default-On Multi-Core Record/Replay ( Ali Jos\u00e9 Mashtizadeh, Tal Garfinkel, David Terei, David Mazi\u00e8res, Mendel Rosenblum) draft , ASPLOS 2017 Draft \u2013 Accepted at ASPLOS 2017 - PDF \"\u2026Castor currently supports applications written in C, C++, and Go on FreeBSD...., \u2026 For Go, we evaluate, Caddy \u2026 \" Comparing MapReduce and Pipeline Implementations for Counting Triangles ( Edelmira Pasarella, Maria-Esther Vidal, Cristina Zoltan) arXiv:1701.03318 cs.DC pdf \"\u2026 an ad-hoc version of MapReduce are implemented in the language Go \u2026\" Fencing off Go: Liveness and Safety for Channel-based Programming (J. Lange, N. Ng, B. Toninho, N. Yoshida), POPL 2017 doi: 10.1145/3009837.3009847 Tool page , code Design and Implementation of Concurrent C0 (Willsey, Prabhu, Pfenning) https://arxiv.org/abs/1701.04929 Automated Identification of Security Issues from Commit Messages and Bug Reports (Yagin Zhou, Asankhaya Sharma), FSE 2017 doi: 10.1145/3106237.3117771 Reconstructing Program Semantics from Go Binaries (Engelke) http://home.in.tum.de/~engelke/pubs/1709-ma.pdf An Attempt at Reducing Costs of Disk I/O in Go (Wilson, Mutschlechner) http://pages.cs.wisc.edu/~riccardo/assets/diskio.pdf Go-RealTime: A Lightweight Framework for Multiprocessor Real-Time System in User Space (Fang, Luo, Anwar, Zhuang, Gupta) http://sigbed.seas.upenn.edu/archives/2017-11/paper7.pdf \"Secure and Trustable Electronic Medical Records Sharing using Blockchain\" (Alevtina Dubovitskaya, Zhigang Xu, Samuel Ryu, Michael Schumacher, Fusheng Wang) arxiv \"Towards a More Reliable and Available Docker-based Container Cloud\" (Mudit Verma, Mohan Dhawan) arxiv","title":"2017"},{"location":"ResearchPapers/#2016","text":"Atom: Horizontally Scaling Strong Anonymity (Albert Kwon, Henry Corrigan-Gibbs, Srinivas Devadas, Bryan Ford) arXiv:1612.07841 cs.CR \"\u2026We implemented an Atom prototype in Go in approximately 3,500 lines of code, \u2026\" The Case for Reconfiguration without Consensus: Comparing Algorithms for Atomic Storage (Leander Jehl, Hein Meling) pdf github.com/relab/smartmerge implemented in golang Flower : Workflow management and heat-aware scheduling for modern cloud infrastructures (Robert Carosi, Boris Mattijssen) bachelor thesis, abstract , pdf , Keywords: container, workflow, virtualization, scheduling, flower, kubernetes Implementing a web-based bookingsystem using Go ( Vu, Phi-Long ) Independent thesis Basic level abstract , pdf ; Keywords: Booking System, Go, Golang, REST, XSS, XSRF Parallelization of the corpus manager\u2019s time-consuming operations (Bc. Radoslav R\u00e1bara ) Master's Thesis, Masaryk University pdf ; Keywords: Manatee, text corpora, Go, text compression, compression of integers, time-consuming operations, parallelization, MapReduce, Glow, distributed computing, data format, cluster, scalability Cyber Security Exercise Modeling & Tracking (Joonas Greis) Bachelor\u2019s thesis pdf \"\u2026 RESTful API was written with Golang using Go-Json-Rest package \u2026\" Scalable Byzantine Consensus via Hardware-assisted Secret Sharing (Jian Liu, Wenting Li, Ghassan O. Karame, N. Asokan) arXiv:1612.04997 cs.CR ; \"\u2026 Our implementation is based on Golang \u2026\" ; pdf Fast and Reliable Byzantine Fault Tolerance (Eric Scott Freeman) Master's thesis in Computer science link , pdf Formal verification of concurrency in go (Anuchit Prasertsang, Denduang Pradubsuwun) DOI: 10.1109/JCSSE.2016.7748882 Therapeutic target discovery using Boolean network attractors: updates from kali ( Arnaud Poret ) ( Quantitative Biology > Molecular Networks) arXiv:1611.03144v1 q-bio.MN github.com/arnaudporet/kali [Go 100.0%] Information Flow Analysis for Go ( Eric Bodden, Ka I. Pun, Martin Steffen, Volker Stolz, Anna-Katharina Wickert) 10.1007/978-3-319-47166-2_30 A Productivity Checker for Logic Programming (E. Komendantskaya, P. Johann, M. Schmidt ) arXiv:1608.04415 cs.PL project page: http://www.macs.hw.ac.uk/~ek19/CoALP/ A novel algorithm for detecting multiple covariance and clustering of biological sequences ( Wei Shen & Yan Li) ( Coevolution, Computational models ) http://www.nature.com/articles/srep30425 , doi:10.1038/srep30425 Algorithm implementation (golang - only binary ) : http://yanlilab.github.io/fastcov/ Architecture of the Hyperledger Blockchain Fabric (Christian Cachin) pdf code Reimagining the Programming Experience ( Mehrdad Afshari , dissertation) GoClr pdf MapReduce vs. Pipelining Counting Triangles (Edelmira Pasarella, Maria-Esther Vidal,and Cristina Zoltan) pdf Software Engineering with PSF and Go (Erik van der Schaaf) Thesis, University of Amsterdam pdf Parametric Polymorphism in the Go Programming Language (Matthew Allen) University of Texas, Turing Scholars honors thesis pdf code ( LLGO based ) Static Trace-Based Deadlock Analysis for Synchronous Mini-Go ( Kai Stadtm\u00fcller, Martin Sulzmann, and Peter Thiemann ) pdf code - first beta implementation : gopherlyzer Continuous Query-Based Syndication: Distributed, Expressive Messaging for the IoT( Gabriel Fierro, Erik Krogen ) pdf , motivation code ( Go and Python implementation ) Privacy, Discovery, and Authentication for the Internet of Things (Wu, Taly, Shankar, Boneh) arxiv code Static Deadlock Detection for Concurrent Go by Global Session Graph Synthesis (Ng, Yoshida) pdf code A Small-Step Semantics of a Concurrent Calculus with Goroutines and Deferred Functions ( Martin Steffen ) springer link Butterfield, Ellis H., \"Fog Computing with Go: A Comparative Study\" (2016). CMC Senior Theses. Paper 1348. http://scholarship.claremont.edu/cmc_theses/1348 An Implementation and Analysis of a Kernel Network Stack in Go with the CSP Style (Harshal Sheth, Aashish Welling) arXiv:1603.05636 cs.OS PAS-MC: Privacy-preserving Analytics Stream for the Mobile Cloud (Joy, Gerla) arXiv:1604.04892 cs.CR Developing an Ethereum Blockchain Application (Triantafyllidis) pdf Identifying and characterizing Sybils in the Tor network (Winter, Ensafi, Loesing, and Feamster) pdf code A Distributed Implementation of the Graph Database System: DGraph pdf Browsix: Bridging the Gap Between Unix and the Browser (Powers, Vilk, Berger) https://arxiv.org/abs/1611.07862 Verification of Goroutines using Why3 (Schoolderman) https://www.ru.nl/publish/pages/769526/marc_schoolderman.pdf Detection of Bugs and Code Smells through Static Analysis of Go Source Code (Bergersen) https://www.duo.uio.no/bitstream/handle/10852/53050/bergersen_msc.pdf BTrDB: Optimizing Storage System Design for Timeseries Processing (Andersen, Culler) https://www.usenix.org/node/194399 Risk Factor Disclosures: Do Managers and Markets Speak the Same Language? https://www.sec.gov/comments/s7-06-16/s70616-369.pdf","title":"2016"},{"location":"ResearchPapers/#2015","text":"Tinzenite: Encrypted Peer to Peer File Synchronization via the Tox Protocol (Tamino P.S.M. Hartmann) (Master thesis at Ulm University) pdf github.com/tinzenite Blade: A Data Center Garbage Collector (Terei, Levy) arxiv:1504.02578 cs.DC Flywheel: Google's Data Compression Proxy for the Mobile Web (Agababov, Buettner, Chudnovsky, Cogan, Greenstein, McDaniel, Piatek, Scott, Welsh, Yin) pdf Rewriting a large production system in Go A Machine Learning Strategy to Assist Turbulence Model Development (Brendan Tracey, Karthik Duraisamy, Juan J. Alonso) http://arc.aiaa.org/doi/abs/10.2514/6.2015-1287 Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives ( Pravendra Singh ) arxiv:1503.08345 cs.AI Keeping Authorities \"Honest or Bust\" with Decentralized Witness Cosigning (Syta, Tamas, Visher, Wolinsky, Jovanovic, Gasser, Gailly, Khoffi, Ford) arxiv:1503.08768 cs.CR code , code Message Passing for Programming Languages and Operating Systems (Martynas Pumputis ) Master\u2019s Thesis pdf Type inference for Go (Emin Gigovic, Philip Malmros ) pdf Open-Source, Platform-Independent Library and Online Scripting Environment for Accessing Thermo Scientific RAW Files. (Kelchtermans, Silva, Argentini, Staes, Vandenbussche, Laukens, Valkenborg, Martens) https://www.ncbi.nlm.nih.gov/pubmed/26477298 Evaluation of performance and productivity metrics of potential programming languages in the HPC environment ( Bachelor Thesis ; Florian Wilkens ) - ( Go, Rust, C, OpenStreetMap ) github-code , pdf Concurrent Processing of Text Corpus Queries (R\u00e1bara, Rychl\u00fd) https://www.sketchengine.co.uk/wp-content/uploads/Concurrent_Processing_2015.pdf Automatic Memory Management Techniques for the Go Programming Language (Davis) (Ph.D. thesis) https://minerva-access.unimelb.edu.au/handle/11343/58707 Design Muntoi Web-based Framework and Search Engine Analytics for Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis) http://ieeexplore.ieee.org/document/7516334/ A Search Engine Backed by Internet-Wide Scanning (Durumeric, Adrian, Mirian, Bailey, Halderman) https://censys.io/static/censys.pdf An Extract Function Refactoring for the Go Language (Arasu) https://etd.auburn.edu/bitstream/handle/10415/4835/Steffi_Gnanaprakasa_MSThesis.pdf Compositional Decompilation using LLVM IR (BSc thesis, Robin Eklind) http://uu.diva-portal.org/smash/record.jsf?pid=diva2%3A911797&dswid=-6147 code pdf \"U-root: A Go-based, Firmware Embeddable Root File System with On-demand Compilation\" (Minnich, Mirtchovski) pdf code","title":"2015"},{"location":"ResearchPapers/#2014","text":"PARAGON: an approach for parallelization of power system contingency analysis using Go programming language http://onlinelibrary.wiley.com/doi/10.1002/etep.1999/full A Study of Successive Over-relaxation Method Parallelization Over Modern HPC Languages (Mittal) arxiv:1401.0763 cs.DC code There Is More Consensus in Egalitarian Parliaments (Moraru, Andersen, Kaminsky) pdf code Experience with ePaxos: Systems Research using Go Research Problems of Implementing Go https://talks.golang.org/2014/research.slide (rsc) https://talks.golang.org/2014/research2.slide (dvyukov) b\u00edogo: a simple high-performance bioinformatics toolkit for the Go language (D. Kortschak, D. Adelson) pdf P2S: A Fault-Tolerant Publish/Subscribe Infrastructure (Chang, Duan, Meling, Peisert, Zhang) pdf Generating a Google Go framework from an Uppaal model (Dekker) pdf Using the Go Programming Language in Practice (Westrup, Pettersson) pdf A Language Support for Exhaustive Fault-Injection in Message-Passing System Models (Suzuki, Watanabe) arXiv:1411.3793 cs.SE Big Learning with Bayesian Methods arXiv:1411.6370 cs.LG Be General and Don't Give Up Consistency in Geo-Replicated Transactional Systems PDF Project page: Hyflow The design and verification of Mumax3 (Vansteenkiste, Leliaert, Dvornik, Garcia-Sanchez, Van Waeyenberge) https://arxiv.org/abs/1406.7635 mumax/3 Building Reliable and Practical Byzantine Fault Tolerance (Duan) http://sduan.informationsystems.umbc.edu/files/2014-SisiDuan-dissertation.pdf","title":"2014"},{"location":"ResearchPapers/#2013","text":"GoPar: Automatic Loop Parallelization of Go Programs (Wetherbee) pdf code SCTP in Go ( Olivier Van Acker ) Keywords: Stream Control Transmission Protocol (SCTP); Transmission Control Protocol (TCP); Go; Networking; pdf Benchmarking Usability and Performance of Multicore Languages ( Sebastian Nanz, Scott West, Kaue Soares da Silveira, Bertrand Meyer) arXiv:1302.2837 cs.DC Examining the Expert Gap in Parallel Programming (Sebastian Nanz, Scott West, Kaue Soares da Silveira) pdf Acropolis: aggregated client request ordering by Paxos (Jothen) https://brage.bibsys.no/xmlui//handle/11250/181825 Implementation and experimental evaluation of live replacement and reconfiguration (Lea) https://brage.bibsys.no/xmlui//handle/11250/181813 Exploiting Parallelism in Coalgebraic Logic Programming (Komendantskaya, Schmidt, Heras) https://arxiv.org/abs/1312.4454 Parallel Pattern Discovery (Egon Elbre), Master's Thesis, University of Tartu pdf code","title":"2013"},{"location":"ResearchPapers/#2012","text":"Time Warp on the Go (D'Angelo, Ferretti, Marzolla) arxiv:1206.2772 cs.DC Can Go address the multicore issues of today and the manycore problems of tomorrow? (S. Binet) pdf GoCxx: a tool to easily leverage C++ legacy code for multicore-friendly Go libraries and frameworks (S. Binet) pdf The Buffered \u03c0-Calculus: A Model for Concurrent Languages (Deng, Zhang, Deng, Zhong) arxiv:1212.6183 cs.LO Analysis of the Go runtime scheduler (Neil Deshpande,Erica Sponsler,Nathaniel Weiss) pdf A Comparative Study of Programming Models for Concurrency ( Kaue Soares da Silveira) \u2013 Porto Alegre: COMGRAD CIC UFRGS, 2012. Final Report (Bachelor) pdf Debian Code Search (Stapelberg) pdf Go\u2019s Concurrency Constructs on the SCC (Prell, Rauber) pdf Comparing Parallel Performance of Go and C++ TBB on a Direct Acyclic Task Graph Using a Dynamic Programming Problem (Serfass, Tang) http://www.ualr.edu/pxtang/papers/ACMSE12-comparing.pdf","title":"2012"},{"location":"ResearchPapers/#2011","text":"ng: What next-generation languages can teach us about HENP frameworks in the manycore era (S. Binet) pdf Serving Web Content with Dynamic Process Networks in Go (James Whitehead II) DOI: 10.3233/978-1-60750-774-1-209 pdf","title":"2011"},{"location":"ResearchPapers/#2010","text":"GoHotDraw: Evaluating the Go Programming Language with Design Patterns (Schmager, Cameron, Noble) pdf","title":"2010"},{"location":"Resolving-Problems-From-Modified-Module-Path/","text":"Unexpected module path A user working on their project, my-go-project , might run into an error during go get -u as such: $ cd my-go-project $ go get -u ./... [...] go: github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\" [...] Exit code 1 golang.org/x/lint is a module whose git repository and module name used to be github.com/golang/lint before migrating to the git repo golang.org/x/lint and renaming its module name to golang.org/x/lint . The Go tool currently stumbles trying to understand the old module name at the new git repository: golang/go#30831 . This was surfaced to my-go-project because my-go-project or one of its transitive dependencies has a route in the module graph to the old github.com/golang/lint module name. For example, if my-go-project itself relies on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Or, perhaps my-go-project depends on an old version of google.golang.org/grpc which depends on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project google.golang.org/grpc@v1.16.0 google.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Finally, perhaps my-go-project depends on another dependency that requires an old version of google.golang.org/grpc , which in turn depends on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project some/dep@v1.2.3 ... another/dep@v1.4.2 google.golang.org/grpc@v1.16.0 google.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Removing References To The Name Until the Go tool is updated to understand a module which has changed its module path (tracking in golang/go#30831 ), the solution to this is to update the graph so that there are no more paths to the old module name. Using the examples above, we'll explore updating the graph so that there are no more paths to github.com/golang/lint . Fixing the first example is simple, the only link is from my-go-project - which the user controls! Replacing the old location with the new in the go.mod - github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 with golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f - removes the link from the graph: $ GO111MODULE=on go mod graph my-go-project golang.org/x/lint@v0.0.0-20190301231843-5614ed5bae6f Fixing the second example involves more steps but is essentially the same process: google.golang.org/grpc@v1.16.0 provides the link to github.com/golang/lint , so google.golang.org/grpc should update its go.mod from github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 to golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f (this thankfully already happened in v1.17.0 ). Then, my-go-project should update its go.mod to include the new version of google.golang.org/grpc , so that we now have: $ GO111MODULE=on go mod graph my-go-project google.golang.org/grpc@v1.17.0 google.golang.org/grpc@v1.17.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 Fixing the third example is similar to the second: update to a newer version of another/dep which brings in the newer version of google.golang.org/grpc which does not contain a reference to github.com/golang/lint . Hooray! Problems solved - there are no more paths to github.com/golang/lint for the Go tool to consider, so it does not trip up on this problem during go get -u . A Harder Problem: Removing Trailing History This is all well and good, and should satisfy most user's problems. However, there is one situation that ends up being quite a bit more involved: when there are cycles in the module dependency graph. Consider this module dependency graph: And, let's imagine that some/lib used to depend on github.com/golang/lint . Let's look at this module dependency graph with versions included: $ go mod graph my-go-lib some/lib@v1.7.0 some/lib@v1.7.0 some-other/lib@v2.5.3 some/lib@v1.7.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.3 some/lib@v1.6.0 some/lib@v1.6.0 some-other/lib@v2.5.0 some/lib@v1.6.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.0 some/lib@v1.3.1 some/lib@v1.3.1 some-other/lib@v2.4.8 some/lib@v1.3.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.4.8 some/lib@v1.3.0 some/lib@v1.3.0 some-other/lib@v2.4.7 some/lib@v1.3.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Visualized with golang.org/x/exp/cmd/modgraphviz : Here we see that even though the last several versions of some/lib correctly depend on golang.org/x/lint , the fact that some/lib and some-other/lib share a cycle mean that there's very likely to be a path far back in time. The reason such paths occur is because the process of bumping versions is usually individually atomic: when some/lib bumps its version of some-other/lib and release a new version of itself, the latest version of some-other/lib still depends on the previous version of some/lib . That is, no individual bump of either of these libraries will be enough to remove the chain into history. To remove the chain into history and remove the old github.com/golang/lint reference from the graph for good, both libraries have to bump their versions of each other at the same time. Atomically Version Bumping Two Libraries The solution to removing github.com/golang/lint is to first make sure some/lib doesn't depend on github.com/golang/lint , and then to bump both some/lib and some-other/lib to non-existent future versions of each other. We want this kind of a graph: my-go-lib some/lib@v1.7.1 some/lib@v1.7.1 some-other/lib@v2.5.4 some/lib@v1.7.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.4 some/lib@v1.7.1 Since some/lib and some-other/lib depend on each other at the same version, there's no path backwards in time to a point where github.com/golang/lint is provided. Here are the steps to achieve this atomic version bump, assuming some/lib is at v1.7.0 and some-other/lib is at v2.5.3 : Verify that the error does in fact exist: Run GO111MODULE=on go get -u ./... in some/lib and some-other/lib . In both repos you should observe the error go: github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\" . Verify that the latest version of some/lib depends on golang.org/x/lint instead of github.com/golang/lint . It would be a shame to remove the historical trails but keep the broken dependency to github.com/golang/lint ! Bump both libs to non-existent future versions of each other using alpha tags (which are safer since go modules won't consider alpha versions as newer when evaluating the latest released version of a module): some/lib changes its some-other/lib dependency from v2.5.3 to v2.5.4-alpha . some/lib tags the commit v1.7.1-alpha and pushes the commit and tag. some-other/lib changes its some/lib dependency from v1.6.0 to v1.7.1-alpha . some-other/lib tags the commit v2.5.4-alpha and pushes the commit and tag. Verify results whilst things are still in an alpha state: GO111MODULE=on go build ./... && go test ./... in some/lib . GO111MODULE=on go build ./... && go test ./... in some-other/lib . GO111MODULE=on go mod graph in both repos and assert that there's no path to github.com/golang/lint . Note: go get -u still will not work because - as mentioned above - alpha versions aren't considered when evaluating latest versions. If everything looks good, continue by once again bumping to non-existent future versions of each other: some/lib changes its some-other/lib dependency from v2.5.4-alpha to v2.5.4 some/lib tags the commit v1.7.1 and pushes the commit and tag. some-other/lib changes its some/lib dependency from v1.7.1-alpha to v1.7.1 . some-other/lib tags the commit v2.5.4 and pushes the commit and tag. Verify that the error no longer exists: Run GO111MODULE=on go get -u ./... in some/lib and some-other/lib . No parsing go.mod: unexpected module path \"golang.org/x/lint\" error should occur. Currently, the go.sum s of some/lib and some-other/lib are incomplete. This is due to the fact that we depended upon future, non-existent versions of modules, so we were not able to generate go.sum entries until the process was finished. So let's fix this: GO111MODULE=on go mod tidy in some/lib . Commit, tag the commit v1.7.2 , and push both commit and tag. GO111MODULE=on go mod tidy in some-other/lib . Commit, tag the commit v2.5.5 , and push both commit and tag. Finally, let's make sure that my-go-project depends on these new versions of some/lib and some-other/lib which do not have long historical tails: Change the my-go-project go.mod entry from some/lib v1.7.0 to some/lib 1.7.2 . Test by running GO111MODULE=on go get -u ./... in my-go-project . Note that between steps 5.b and 5.d, users are broken: a version of some/lib has been released that depends on a non-existent version of some-other/lib . Therefore, this process should ideally been done real-time so that step 5.d is finished very soon after step 5.b, creating as small a window of breakage as possible. Larger Cycles This example explained the process for removing historical trails when there exists a cycle involving two packages in a graph, but what about if there are cycles involving more packages? For example, consider the following graphs: Each of these graphs involve cycles (the latter example) or interconnected modules (the former example) involving four modules, instead of the simple two module example we saw earlier. The process is largely the same, though, but this time in step 3 and 5 we're going to bump all four modules to non-existent future versions of each other, and similarly in steps 4 and 6 we're going to test all four modules, and in step 7 fix the go.sum of all four modules. More generally, the process above holds for any group of interconnected modules involving any n modules: each major step just involves n modules acting in coordination.","title":"Resolving Problems From Modified Module Path"},{"location":"Resolving-Problems-From-Modified-Module-Path/#unexpected-module-path","text":"A user working on their project, my-go-project , might run into an error during go get -u as such: $ cd my-go-project $ go get -u ./... [...] go: github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\" [...] Exit code 1 golang.org/x/lint is a module whose git repository and module name used to be github.com/golang/lint before migrating to the git repo golang.org/x/lint and renaming its module name to golang.org/x/lint . The Go tool currently stumbles trying to understand the old module name at the new git repository: golang/go#30831 . This was surfaced to my-go-project because my-go-project or one of its transitive dependencies has a route in the module graph to the old github.com/golang/lint module name. For example, if my-go-project itself relies on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Or, perhaps my-go-project depends on an old version of google.golang.org/grpc which depends on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project google.golang.org/grpc@v1.16.0 google.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Finally, perhaps my-go-project depends on another dependency that requires an old version of google.golang.org/grpc , which in turn depends on the old github.com/golang/lint module name: $ GO111MODULE=on go mod graph my-go-project some/dep@v1.2.3 ... another/dep@v1.4.2 google.golang.org/grpc@v1.16.0 google.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7","title":"Unexpected module path"},{"location":"Resolving-Problems-From-Modified-Module-Path/#removing-references-to-the-name","text":"Until the Go tool is updated to understand a module which has changed its module path (tracking in golang/go#30831 ), the solution to this is to update the graph so that there are no more paths to the old module name. Using the examples above, we'll explore updating the graph so that there are no more paths to github.com/golang/lint . Fixing the first example is simple, the only link is from my-go-project - which the user controls! Replacing the old location with the new in the go.mod - github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 with golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f - removes the link from the graph: $ GO111MODULE=on go mod graph my-go-project golang.org/x/lint@v0.0.0-20190301231843-5614ed5bae6f Fixing the second example involves more steps but is essentially the same process: google.golang.org/grpc@v1.16.0 provides the link to github.com/golang/lint , so google.golang.org/grpc should update its go.mod from github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 to golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f (this thankfully already happened in v1.17.0 ). Then, my-go-project should update its go.mod to include the new version of google.golang.org/grpc , so that we now have: $ GO111MODULE=on go mod graph my-go-project google.golang.org/grpc@v1.17.0 google.golang.org/grpc@v1.17.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 Fixing the third example is similar to the second: update to a newer version of another/dep which brings in the newer version of google.golang.org/grpc which does not contain a reference to github.com/golang/lint . Hooray! Problems solved - there are no more paths to github.com/golang/lint for the Go tool to consider, so it does not trip up on this problem during go get -u .","title":"Removing References To The Name"},{"location":"Resolving-Problems-From-Modified-Module-Path/#a-harder-problem-removing-trailing-history","text":"This is all well and good, and should satisfy most user's problems. However, there is one situation that ends up being quite a bit more involved: when there are cycles in the module dependency graph. Consider this module dependency graph: And, let's imagine that some/lib used to depend on github.com/golang/lint . Let's look at this module dependency graph with versions included: $ go mod graph my-go-lib some/lib@v1.7.0 some/lib@v1.7.0 some-other/lib@v2.5.3 some/lib@v1.7.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.3 some/lib@v1.6.0 some/lib@v1.6.0 some-other/lib@v2.5.0 some/lib@v1.6.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.0 some/lib@v1.3.1 some/lib@v1.3.1 some-other/lib@v2.4.8 some/lib@v1.3.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.4.8 some/lib@v1.3.0 some/lib@v1.3.0 some-other/lib@v2.4.7 some/lib@v1.3.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7 Visualized with golang.org/x/exp/cmd/modgraphviz : Here we see that even though the last several versions of some/lib correctly depend on golang.org/x/lint , the fact that some/lib and some-other/lib share a cycle mean that there's very likely to be a path far back in time. The reason such paths occur is because the process of bumping versions is usually individually atomic: when some/lib bumps its version of some-other/lib and release a new version of itself, the latest version of some-other/lib still depends on the previous version of some/lib . That is, no individual bump of either of these libraries will be enough to remove the chain into history. To remove the chain into history and remove the old github.com/golang/lint reference from the graph for good, both libraries have to bump their versions of each other at the same time.","title":"A Harder Problem: Removing Trailing History"},{"location":"Resolving-Problems-From-Modified-Module-Path/#atomically-version-bumping-two-libraries","text":"The solution to removing github.com/golang/lint is to first make sure some/lib doesn't depend on github.com/golang/lint , and then to bump both some/lib and some-other/lib to non-existent future versions of each other. We want this kind of a graph: my-go-lib some/lib@v1.7.1 some/lib@v1.7.1 some-other/lib@v2.5.4 some/lib@v1.7.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3 some-other/lib@v2.5.4 some/lib@v1.7.1 Since some/lib and some-other/lib depend on each other at the same version, there's no path backwards in time to a point where github.com/golang/lint is provided. Here are the steps to achieve this atomic version bump, assuming some/lib is at v1.7.0 and some-other/lib is at v2.5.3 : Verify that the error does in fact exist: Run GO111MODULE=on go get -u ./... in some/lib and some-other/lib . In both repos you should observe the error go: github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\" . Verify that the latest version of some/lib depends on golang.org/x/lint instead of github.com/golang/lint . It would be a shame to remove the historical trails but keep the broken dependency to github.com/golang/lint ! Bump both libs to non-existent future versions of each other using alpha tags (which are safer since go modules won't consider alpha versions as newer when evaluating the latest released version of a module): some/lib changes its some-other/lib dependency from v2.5.3 to v2.5.4-alpha . some/lib tags the commit v1.7.1-alpha and pushes the commit and tag. some-other/lib changes its some/lib dependency from v1.6.0 to v1.7.1-alpha . some-other/lib tags the commit v2.5.4-alpha and pushes the commit and tag. Verify results whilst things are still in an alpha state: GO111MODULE=on go build ./... && go test ./... in some/lib . GO111MODULE=on go build ./... && go test ./... in some-other/lib . GO111MODULE=on go mod graph in both repos and assert that there's no path to github.com/golang/lint . Note: go get -u still will not work because - as mentioned above - alpha versions aren't considered when evaluating latest versions. If everything looks good, continue by once again bumping to non-existent future versions of each other: some/lib changes its some-other/lib dependency from v2.5.4-alpha to v2.5.4 some/lib tags the commit v1.7.1 and pushes the commit and tag. some-other/lib changes its some/lib dependency from v1.7.1-alpha to v1.7.1 . some-other/lib tags the commit v2.5.4 and pushes the commit and tag. Verify that the error no longer exists: Run GO111MODULE=on go get -u ./... in some/lib and some-other/lib . No parsing go.mod: unexpected module path \"golang.org/x/lint\" error should occur. Currently, the go.sum s of some/lib and some-other/lib are incomplete. This is due to the fact that we depended upon future, non-existent versions of modules, so we were not able to generate go.sum entries until the process was finished. So let's fix this: GO111MODULE=on go mod tidy in some/lib . Commit, tag the commit v1.7.2 , and push both commit and tag. GO111MODULE=on go mod tidy in some-other/lib . Commit, tag the commit v2.5.5 , and push both commit and tag. Finally, let's make sure that my-go-project depends on these new versions of some/lib and some-other/lib which do not have long historical tails: Change the my-go-project go.mod entry from some/lib v1.7.0 to some/lib 1.7.2 . Test by running GO111MODULE=on go get -u ./... in my-go-project . Note that between steps 5.b and 5.d, users are broken: a version of some/lib has been released that depends on a non-existent version of some-other/lib . Therefore, this process should ideally been done real-time so that step 5.d is finished very soon after step 5.b, creating as small a window of breakage as possible.","title":"Atomically Version Bumping Two Libraries"},{"location":"Resolving-Problems-From-Modified-Module-Path/#larger-cycles","text":"This example explained the process for removing historical trails when there exists a cycle involving two packages in a graph, but what about if there are cycles involving more packages? For example, consider the following graphs: Each of these graphs involve cycles (the latter example) or interconnected modules (the former example) involving four modules, instead of the simple two module example we saw earlier. The process is largely the same, though, but this time in step 3 and 5 we're going to bump all four modules to non-existent future versions of each other, and similarly in steps 4 and 6 we're going to test all four modules, and in step 7 fix the go.sum of all four modules. More generally, the process above holds for any group of interconnected modules involving any n modules: each major step just involves n modules acting in coordination.","title":"Larger Cycles"},{"location":"SQLDrivers/","text":"SQL database drivers The database/sql and database/sql/driver packages are designed for using databases from Go and implementing database drivers, respectively. See the design goals doc: http://golang.org/src/pkg/database/sql/doc.txt Drivers Drivers for Go's sql package include: Apache H2 : jmrobles/h2go Apache Ignite/GridGain : amsokol/ignite-go-client Apache Impala : bippio/go-impala Apache Avatica/Phoenix : apache/calcite-avatica-go Amazon AWS Athena : uber/athenadriver AWS Athena : segmentio/go-athena Azure Cosmos DB : btnguyen2k/gocosmos ClickHouse (uses native TCP interface ): ClickHouse/clickhouse-go ClickHouse (uses HTTP API ): mailru/go-clickhouse CockroachDB : Use any PostgreSQL driver Couchbase N1QL : couchbase/go_n1ql DB2 LUW and DB2/Z with DB2-Connect : phiggins/db2cli (Last updated 2015-08) DB2 LUW (uses cgo): asifjalil/cli DB2 LUW, z/OS, iSeries and Informix : ibmdb/go_ibm_db Firebird SQL : nakagami/firebirdsql Genji (pure go): genjidb/genji Google Cloud BigQuery : solcates/go-sql-bigquery Google Cloud Spanner : rakyll/go-sql-driver-spanner MS ADODB : mattn/go-adodb MS SQL Server (pure go): denisenkom/go-mssqldb MS SQL Server (uses cgo): minus5/gofreetds MySQL : go-sql-driver/mysql [*] MySQL : siddontang/go-mysql [**] (also handles replication) MySQL : ziutek/mymysql [*] ODBC : miquella/mgodbc (Last updated 2016-02) ODBC : alexbrainman/odbc Oracle (uses cgo): mattn/go-oci8 Oracle (uses cgo): https://gopkg.in/rana/ora.v4 Oracle (uses cgo): godror/godror Oracle (pure go): sijms/go-ora QL : http://godoc.org/github.com/cznic/ql/driver Postgres (pure Go): lib/pq [*] Postgres (uses cgo): jbarham/gopgsqldriver Postgres (pure Go): jackc/pgx [*] Presto : prestodb/presto-go-client SAP HANA (uses cgo): https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.03/en-US/0ffbe86c9d9f44338441829c6bee15e6.html SAP HANA (pure go): SAP/go-hdb SAP ASE (uses cgo): SAP/go-ase - package cgo (pure go package planned) Snowflake (pure Go): snowflakedb/gosnowflake SQLite (uses cgo): mattn/go-sqlite3 [*] SQLite (uses cgo): gwenn/gosqlite - Supports SQLite dynamic data typing SQLite (uses cgo): mxk/go-sqlite SQLite : (uses cgo): rsc/sqlite SQLite : (pure go): https://modernc.org/sqlite SQL over REST : adaptant-labs/go-sql-rest-driver Sybase SQL Anywhere : a-palchikov/sqlago Sybase ASE (pure go): thda/tds TiDB : Use any MySQL driver Vertica : vertica/vertica-sql-go Vitess : https://godoc.org/vitess.io/vitess/go/vt/vitessdriver YQL (Yahoo! Query Language) : mattn/go-yql Apache Hive : sql-machine-learning/gohive MaxCompute : sql-machine-learning/gomaxcompute Drivers marked with [*] are both included in and pass the compatibility test suite at bradfitz/go-sql-test . Drivers marked with [**] pass the compatibility test suite but are not currently included in it.","title":"SQLDrivers"},{"location":"SQLDrivers/#sql-database-drivers","text":"The database/sql and database/sql/driver packages are designed for using databases from Go and implementing database drivers, respectively. See the design goals doc: http://golang.org/src/pkg/database/sql/doc.txt","title":"SQL database drivers"},{"location":"SQLDrivers/#drivers","text":"Drivers for Go's sql package include: Apache H2 : jmrobles/h2go Apache Ignite/GridGain : amsokol/ignite-go-client Apache Impala : bippio/go-impala Apache Avatica/Phoenix : apache/calcite-avatica-go Amazon AWS Athena : uber/athenadriver AWS Athena : segmentio/go-athena Azure Cosmos DB : btnguyen2k/gocosmos ClickHouse (uses native TCP interface ): ClickHouse/clickhouse-go ClickHouse (uses HTTP API ): mailru/go-clickhouse CockroachDB : Use any PostgreSQL driver Couchbase N1QL : couchbase/go_n1ql DB2 LUW and DB2/Z with DB2-Connect : phiggins/db2cli (Last updated 2015-08) DB2 LUW (uses cgo): asifjalil/cli DB2 LUW, z/OS, iSeries and Informix : ibmdb/go_ibm_db Firebird SQL : nakagami/firebirdsql Genji (pure go): genjidb/genji Google Cloud BigQuery : solcates/go-sql-bigquery Google Cloud Spanner : rakyll/go-sql-driver-spanner MS ADODB : mattn/go-adodb MS SQL Server (pure go): denisenkom/go-mssqldb MS SQL Server (uses cgo): minus5/gofreetds MySQL : go-sql-driver/mysql [*] MySQL : siddontang/go-mysql [**] (also handles replication) MySQL : ziutek/mymysql [*] ODBC : miquella/mgodbc (Last updated 2016-02) ODBC : alexbrainman/odbc Oracle (uses cgo): mattn/go-oci8 Oracle (uses cgo): https://gopkg.in/rana/ora.v4 Oracle (uses cgo): godror/godror Oracle (pure go): sijms/go-ora QL : http://godoc.org/github.com/cznic/ql/driver Postgres (pure Go): lib/pq [*] Postgres (uses cgo): jbarham/gopgsqldriver Postgres (pure Go): jackc/pgx [*] Presto : prestodb/presto-go-client SAP HANA (uses cgo): https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.03/en-US/0ffbe86c9d9f44338441829c6bee15e6.html SAP HANA (pure go): SAP/go-hdb SAP ASE (uses cgo): SAP/go-ase - package cgo (pure go package planned) Snowflake (pure Go): snowflakedb/gosnowflake SQLite (uses cgo): mattn/go-sqlite3 [*] SQLite (uses cgo): gwenn/gosqlite - Supports SQLite dynamic data typing SQLite (uses cgo): mxk/go-sqlite SQLite : (uses cgo): rsc/sqlite SQLite : (pure go): https://modernc.org/sqlite SQL over REST : adaptant-labs/go-sql-rest-driver Sybase SQL Anywhere : a-palchikov/sqlago Sybase ASE (pure go): thda/tds TiDB : Use any MySQL driver Vertica : vertica/vertica-sql-go Vitess : https://godoc.org/vitess.io/vitess/go/vt/vitessdriver YQL (Yahoo! Query Language) : mattn/go-yql Apache Hive : sql-machine-learning/gohive MaxCompute : sql-machine-learning/gomaxcompute Drivers marked with [*] are both included in and pass the compatibility test suite at bradfitz/go-sql-test . Drivers marked with [**] pass the compatibility test suite but are not currently included in it.","title":"Drivers"},{"location":"SQLInterface/","text":"Introduction The database/sql package provides a generic interface around SQL (or SQL-like) databases. See the official documentation for details. This page provides example usage patterns. Database driver The database/sql package must be used in conjunction with a database driver. See http://golang.org/s/sqldrivers for a list of drivers. The documentation below assumes a driver has been imported. Connecting to a database Open is used to create a database handle: db , err := sql . Open ( driver , dataSourceName ) Where driver specifies a database driver and dataSourceName specifies database-specific connection information such as database name and authentication credentials. Note that Open does not directly open a database connection: this is deferred until a query is made. To verify that a connection can be made before making a query, use the PingContext method: if err := db . PingContext ( ctx ); err != nil { log . Fatal ( err ) } After use, the database is closed using Close . Executing queries ExecContext is used for queries where no rows are returned: result , err := db . ExecContext ( ctx , \"INSERT INTO users (name, age) VALUES ($1, $2)\" , \"gopher\" , 27 , ) Where result contains the last insert ID and number of rows affected. The availability of these values is dependent on the database driver. QueryContext is used for retrieval: rows , err := db . QueryContext ( ctx , \"SELECT name FROM users WHERE age = $1\" , age ) if err != nil { log . Fatal ( err ) } defer rows . Close () for rows . Next () { var name string if err := rows . Scan ( & name ); err != nil { log . Fatal ( err ) } fmt . Printf ( \"%s is %d\\n\" , name , age ) } if err := rows . Err (); err != nil { log . Fatal ( err ) } QueryRowContext is used where only a single row is expected: var age int64 err := db . QueryRowContext ( ctx , \"SELECT age FROM users WHERE name = $1\" , name ). Scan ( & age ) Prepared statements can be created with PrepareContext : age := 27 stmt , err := db . PrepareContext ( ctx , \"SELECT name FROM users WHERE age = $1\" ) if err != nil { log . Fatal ( err ) } rows , err := stmt . Query ( age ) // process rows ExecContext , QueryContext and QueryRowContext can be called on statements. After use, a statement should be closed with Close . Transactions Transactions are started with BeginTx : tx , err := db . BeginTx ( ctx , nil ) if err != nil { log . Fatal ( err ) } The ExecContext , QueryContext , QueryRowContext and PrepareContext methods already covered can be used in a transaction. A transaction must end with a call to Commit or Rollback . Dealing with NULL If a database column is nullable, one of the types supporting null values should be passed to Scan. For example, if the name column in the names table is nullable: var name sql . NullString err := db . QueryRowContext ( ctx , \"SELECT name FROM names WHERE id = $1\" , id ). Scan ( & name ) ... if name . Valid { // use name.String } else { // value is NULL } Only NullBool , NullFloat64 , NullInt64 , NullInt32 , NullString and NullTime are implemented in database/sql . Implementations of database-specific null types are left to the database driver. User types supporting NULL can be created by implementing interfaces database/sql/driver.Valuer and database/sql.Scanner .","title":"SQLInterface"},{"location":"SQLInterface/#introduction","text":"The database/sql package provides a generic interface around SQL (or SQL-like) databases. See the official documentation for details. This page provides example usage patterns.","title":"Introduction"},{"location":"SQLInterface/#database-driver","text":"The database/sql package must be used in conjunction with a database driver. See http://golang.org/s/sqldrivers for a list of drivers. The documentation below assumes a driver has been imported.","title":"Database driver"},{"location":"SQLInterface/#connecting-to-a-database","text":"Open is used to create a database handle: db , err := sql . Open ( driver , dataSourceName ) Where driver specifies a database driver and dataSourceName specifies database-specific connection information such as database name and authentication credentials. Note that Open does not directly open a database connection: this is deferred until a query is made. To verify that a connection can be made before making a query, use the PingContext method: if err := db . PingContext ( ctx ); err != nil { log . Fatal ( err ) } After use, the database is closed using Close .","title":"Connecting to a database"},{"location":"SQLInterface/#executing-queries","text":"ExecContext is used for queries where no rows are returned: result , err := db . ExecContext ( ctx , \"INSERT INTO users (name, age) VALUES ($1, $2)\" , \"gopher\" , 27 , ) Where result contains the last insert ID and number of rows affected. The availability of these values is dependent on the database driver. QueryContext is used for retrieval: rows , err := db . QueryContext ( ctx , \"SELECT name FROM users WHERE age = $1\" , age ) if err != nil { log . Fatal ( err ) } defer rows . Close () for rows . Next () { var name string if err := rows . Scan ( & name ); err != nil { log . Fatal ( err ) } fmt . Printf ( \"%s is %d\\n\" , name , age ) } if err := rows . Err (); err != nil { log . Fatal ( err ) } QueryRowContext is used where only a single row is expected: var age int64 err := db . QueryRowContext ( ctx , \"SELECT age FROM users WHERE name = $1\" , name ). Scan ( & age ) Prepared statements can be created with PrepareContext : age := 27 stmt , err := db . PrepareContext ( ctx , \"SELECT name FROM users WHERE age = $1\" ) if err != nil { log . Fatal ( err ) } rows , err := stmt . Query ( age ) // process rows ExecContext , QueryContext and QueryRowContext can be called on statements. After use, a statement should be closed with Close .","title":"Executing queries"},{"location":"SQLInterface/#transactions","text":"Transactions are started with BeginTx : tx , err := db . BeginTx ( ctx , nil ) if err != nil { log . Fatal ( err ) } The ExecContext , QueryContext , QueryRowContext and PrepareContext methods already covered can be used in a transaction. A transaction must end with a call to Commit or Rollback .","title":"Transactions"},{"location":"SQLInterface/#dealing-with-null","text":"If a database column is nullable, one of the types supporting null values should be passed to Scan. For example, if the name column in the names table is nullable: var name sql . NullString err := db . QueryRowContext ( ctx , \"SELECT name FROM names WHERE id = $1\" , id ). Scan ( & name ) ... if name . Valid { // use name.String } else { // value is NULL } Only NullBool , NullFloat64 , NullInt64 , NullInt32 , NullString and NullTime are implemented in database/sql . Implementations of database-specific null types are left to the database driver. User types supporting NULL can be created by implementing interfaces database/sql/driver.Valuer and database/sql.Scanner .","title":"Dealing with NULL"},{"location":"Screencasts/","text":"Screencasts Writing, building, installing, and testing Go code A first stop for newcomers to the Go Programming Language. This screencast describes setting up a workspace (GOPATH), writing commands and packages, using the go tool to build and install, and using the testing package to write unit tests. [ video ] Go for Web Development [Video] Author: Larry Price Publication Date: December 29, 2015 ISBN:978-1784397982 [ video ] Go: Building Web Applications Authors: Nathan Kozyra, Mat Ryer Publication Date: August 2016 ISBN:978-1787123496 [ Course ] The Go Programming Language Guide - Code Like a Pro [Video] Author: Eduonix Publication Date: September 23, 2016 ISBN:978-1787128385 [ video ] Go Projects [Video] Authors: Ben Tranter & Rostislav Dzinko Publication Date: November 14, 2016 ISBN:978-1786460103 [ video ] Build webapps in Go without using a framework [Video] Authors: Suraj Patil Publication Date: December 2016 [ Course ] Mastering Go [Video] Authors: Mina Andrawos Publication Date: January 31, 2017 ISBN:978-1786468239 [ video ] Getting started with Cloud Native Go [Video] Author: Mario-Leander Reimer Publication Date: February 24, 2017 ISBN:978-1787125476 [ video ] Introduction to Go Classical Patterns [Video] Author: Mario Castro Contreras Publication Date: April 27, 2017 ISBN:978-1788398039 [ video ] Go Essentials for Full Stack Web Development [Video] Author: Kamesh Balasubramanian Publication Date: April 30, 2017 ISBN:978-1787280946 [ video ] Go Behavioral Patterns [Video] Author: Mario Castro Contreras Publication Date: May 27, 2017 ISBN:978-1788397377 [ video ] Go Concurrency [Video] Author: Mario Castro Contreras Publication Date: May 30, 2017 ISBN:978-1788394161 [ video ] Advanced Cloud Native Go [Video] Author: Mario-Leander Reimer Publication Date: May 31, 2017 ISBN:978-1787286238 [ video ] Go: Building 7 Real-World Projects [Video] Author: Ben Tranter, Rostislav Dzinko and Mat Ryer Publication Date: May 31, 2017 ISBN:978-1788290494 [ course ] Modern Golang Programming [Video] Author: Mina Andrawos Publication Date: June 23, 2017 ISBN:978-1787125254 [ video ] Back-End Web Development using Go [Video] Author: Kamesh Balasubramanian Publication Date: June 30, 2017 ISBN:978-1788392761 [ video ] Getting started with Go Programming Language Author: Matthew Spaulding Publication Date: August 2017 ISBN: 978-1788471855 [ course ] Beginner Solutions in Go \u2013 The Basics, Clients, and Servers [Video] Author: Aaron Torres Publication Date: August 2017 ISBN: 978-1788629089 [ video ] Front-End Web Development using Go (Video) Author: Kamesh Balasubramanian Publication Date: September 2017 ISBN: 978-1788398916 [ video ] Advanced Solutions in Go \u2013 Testing and Distributed Systems Author: Aaron Torres Publication Date: September 2017 ISBN: 978-1788627887 [ video ] Go Standard Library Solutions (Video) Author: Johnny Boursiquot Publication Date: November 2017 ISBN: 978-1788474160 [ video ] Machine Learning with Go [Video] Author: Daniel Whitenack Publication Date: February 2018 ISBN: 9781789134735 [ video ] Go Production Deployments [Video] Author: Kamesh Balasubramanian Publication Date: March 2018 ISBN: 9781788399340 [ video ] Network Programming with Go [Video] Author: Vladimir Vivien Publication Date: April 2018 ISBN: 9781788476560 [ video ] Learning Go Data Structures and Algorithms [Video] Author: Gustavo Cha\u00edn Publication Date: May 2018 ISBN: 9781788392563 [ video ] Hands-on with Go [Video] Author: Tarik Guney Publication Date: May 2018 ISBN: 9781789132519 [ video ] Learn Go in 3 Hours [Video] Author: Jonathan Bodner Publication Date: June 2018 ISBN: 9781788992053 [ video ] Hands-on Serverless Computing with Go [Video] Author: Matthew Stoodley Publication Date: June 2018 ISBN: 9781789132830 [ video ] Hands-on Concurrency with Go [Video] Author: Leo Tindall Publication Date: July 2018 ISBN: 9781788993746 [ video ] Troubleshooting Go Application Development [Video] Author: Shawn Milochik Publication Date: July 2018 ISBN: 9781788997072 [ video ] Functional Programming in Go [Video] Author: Erkid Hoxholli Publication Date: September 2018 ISBN: 9781787283480 [ video ] Go Application Development \u2013 Tips, Tricks, and Techniques (Video) Author: Martin Helmich Publication Date: February 2019 ISBN: 9781789134797 [ Video ] Hands-On Microservices with Go [Video] Author: Emiliano Martinez Luque Publication Date: May 2019 ISBN: 9781788993999 [ video ]","title":"Screencasts"},{"location":"Screencasts/#screencasts","text":"","title":"Screencasts"},{"location":"Screencasts/#writing-building-installing-and-testing-go-code","text":"A first stop for newcomers to the Go Programming Language. This screencast describes setting up a workspace (GOPATH), writing commands and packages, using the go tool to build and install, and using the testing package to write unit tests. [ video ] Go for Web Development [Video] Author: Larry Price Publication Date: December 29, 2015 ISBN:978-1784397982 [ video ] Go: Building Web Applications Authors: Nathan Kozyra, Mat Ryer Publication Date: August 2016 ISBN:978-1787123496 [ Course ] The Go Programming Language Guide - Code Like a Pro [Video] Author: Eduonix Publication Date: September 23, 2016 ISBN:978-1787128385 [ video ] Go Projects [Video] Authors: Ben Tranter & Rostislav Dzinko Publication Date: November 14, 2016 ISBN:978-1786460103 [ video ] Build webapps in Go without using a framework [Video] Authors: Suraj Patil Publication Date: December 2016 [ Course ] Mastering Go [Video] Authors: Mina Andrawos Publication Date: January 31, 2017 ISBN:978-1786468239 [ video ] Getting started with Cloud Native Go [Video] Author: Mario-Leander Reimer Publication Date: February 24, 2017 ISBN:978-1787125476 [ video ] Introduction to Go Classical Patterns [Video] Author: Mario Castro Contreras Publication Date: April 27, 2017 ISBN:978-1788398039 [ video ] Go Essentials for Full Stack Web Development [Video] Author: Kamesh Balasubramanian Publication Date: April 30, 2017 ISBN:978-1787280946 [ video ] Go Behavioral Patterns [Video] Author: Mario Castro Contreras Publication Date: May 27, 2017 ISBN:978-1788397377 [ video ] Go Concurrency [Video] Author: Mario Castro Contreras Publication Date: May 30, 2017 ISBN:978-1788394161 [ video ] Advanced Cloud Native Go [Video] Author: Mario-Leander Reimer Publication Date: May 31, 2017 ISBN:978-1787286238 [ video ] Go: Building 7 Real-World Projects [Video] Author: Ben Tranter, Rostislav Dzinko and Mat Ryer Publication Date: May 31, 2017 ISBN:978-1788290494 [ course ] Modern Golang Programming [Video] Author: Mina Andrawos Publication Date: June 23, 2017 ISBN:978-1787125254 [ video ] Back-End Web Development using Go [Video] Author: Kamesh Balasubramanian Publication Date: June 30, 2017 ISBN:978-1788392761 [ video ] Getting started with Go Programming Language Author: Matthew Spaulding Publication Date: August 2017 ISBN: 978-1788471855 [ course ] Beginner Solutions in Go \u2013 The Basics, Clients, and Servers [Video] Author: Aaron Torres Publication Date: August 2017 ISBN: 978-1788629089 [ video ] Front-End Web Development using Go (Video) Author: Kamesh Balasubramanian Publication Date: September 2017 ISBN: 978-1788398916 [ video ] Advanced Solutions in Go \u2013 Testing and Distributed Systems Author: Aaron Torres Publication Date: September 2017 ISBN: 978-1788627887 [ video ] Go Standard Library Solutions (Video) Author: Johnny Boursiquot Publication Date: November 2017 ISBN: 978-1788474160 [ video ] Machine Learning with Go [Video] Author: Daniel Whitenack Publication Date: February 2018 ISBN: 9781789134735 [ video ] Go Production Deployments [Video] Author: Kamesh Balasubramanian Publication Date: March 2018 ISBN: 9781788399340 [ video ] Network Programming with Go [Video] Author: Vladimir Vivien Publication Date: April 2018 ISBN: 9781788476560 [ video ] Learning Go Data Structures and Algorithms [Video] Author: Gustavo Cha\u00edn Publication Date: May 2018 ISBN: 9781788392563 [ video ] Hands-on with Go [Video] Author: Tarik Guney Publication Date: May 2018 ISBN: 9781789132519 [ video ] Learn Go in 3 Hours [Video] Author: Jonathan Bodner Publication Date: June 2018 ISBN: 9781788992053 [ video ] Hands-on Serverless Computing with Go [Video] Author: Matthew Stoodley Publication Date: June 2018 ISBN: 9781789132830 [ video ] Hands-on Concurrency with Go [Video] Author: Leo Tindall Publication Date: July 2018 ISBN: 9781788993746 [ video ] Troubleshooting Go Application Development [Video] Author: Shawn Milochik Publication Date: July 2018 ISBN: 9781788997072 [ video ] Functional Programming in Go [Video] Author: Erkid Hoxholli Publication Date: September 2018 ISBN: 9781787283480 [ video ] Go Application Development \u2013 Tips, Tricks, and Techniques (Video) Author: Martin Helmich Publication Date: February 2019 ISBN: 9781789134797 [ Video ] Hands-On Microservices with Go [Video] Author: Emiliano Martinez Luque Publication Date: May 2019 ISBN: 9781788993999 [ video ]","title":"Writing, building, installing, and testing Go code"},{"location":"SendingMail/","text":"Sending Mail See also: * net/smtp * Email packages Streaming the body: package main import ( \"bytes\" \"log\" \"net/smtp\" ) func main () { // Connect to the remote SMTP server. c , err := smtp . Dial ( \"mail.example.com:25\" ) if err != nil { log . Fatal ( err ) } defer c . Close () // Set the sender and recipient. c . Mail ( \"sender@example.org\" ) c . Rcpt ( \"recipient@example.net\" ) // Send the email body. wc , err := c . Data () if err != nil { log . Fatal ( err ) } defer wc . Close () buf := bytes . NewBufferString ( \"This is the email body.\" ) if _ , err = buf . WriteTo ( wc ); err != nil { log . Fatal ( err ) } } Authenticated SMTP: package main import ( \"log\" \"net/smtp\" ) func main () { // Set up authentication information. auth := smtp . PlainAuth ( \"\" , \"user@example.com\" , \"password\" , \"mail.example.com\" , ) // Connect to the server, authenticate, set the sender and recipient, // and send the email all in one step. err := smtp . SendMail ( \"mail.example.com:25\" , auth , \"sender@example.org\" , [] string { \"recipient@example.net\" }, [] byte ( \"This is the email body.\" ), ) if err != nil { log . Fatal ( err ) } }","title":"SendingMail"},{"location":"SendingMail/#sending-mail","text":"See also: * net/smtp * Email packages Streaming the body: package main import ( \"bytes\" \"log\" \"net/smtp\" ) func main () { // Connect to the remote SMTP server. c , err := smtp . Dial ( \"mail.example.com:25\" ) if err != nil { log . Fatal ( err ) } defer c . Close () // Set the sender and recipient. c . Mail ( \"sender@example.org\" ) c . Rcpt ( \"recipient@example.net\" ) // Send the email body. wc , err := c . Data () if err != nil { log . Fatal ( err ) } defer wc . Close () buf := bytes . NewBufferString ( \"This is the email body.\" ) if _ , err = buf . WriteTo ( wc ); err != nil { log . Fatal ( err ) } } Authenticated SMTP: package main import ( \"log\" \"net/smtp\" ) func main () { // Set up authentication information. auth := smtp . PlainAuth ( \"\" , \"user@example.com\" , \"password\" , \"mail.example.com\" , ) // Connect to the server, authenticate, set the sender and recipient, // and send the email all in one step. err := smtp . SendMail ( \"mail.example.com:25\" , auth , \"sender@example.org\" , [] string { \"recipient@example.net\" }, [] byte ( \"This is the email body.\" ), ) if err != nil { log . Fatal ( err ) } }","title":"Sending Mail"},{"location":"SettingGOPATH/","text":"Setting GOPATH The GOPATH environment variable specifies the location of your workspace. If no GOPATH is set, it is assumed to be $HOME/go on Unix systems and %USERPROFILE%\\go on Windows. If you want to use a custom location as your workspace, you can set the GOPATH environment variable. This page explains how to set this variable on various platforms. Unix systems Go 1.13 Bash Zsh fish Windows Go 1.13 Windows 10 (GUI) Windows 10 (command line) Unix systems GOPATH can be any directory on your system. In Unix examples, we will set it to $HOME/go (the default since Go 1.8). Note that GOPATH must not be the same path as your Go installation. Another common setup is to set GOPATH=$HOME . Go 1.13+ go env -w GOPATH = $HOME /go Bash Edit your ~/.bash_profile to add the following line: export GOPATH = $HOME /go Save and exit your editor. Then, source your ~/.bash_profile . source ~/.bash_profile Zsh Edit your ~/.zshrc file to add the following line: export GOPATH = $HOME /go Save and exit your editor. Then, source your ~/.zshrc . source ~/.zshrc fish set -x -U GOPATH $HOME /go The -x is used to specify that this variable should be exported and the -U makes this a universal variable, available to all sessions and persistent. Windows Your workspace can be located wherever you like, but we'll use C:\\go-work in this example. NOTE: GOPATH must not be the same path as your Go installation. Create a folder at C:\\go-work . Right-click on \"Start\" and click on \"Control Panel\". Select \"System and Security\", then click on \"System\". From the menu on the left, select the \"Advanced system settings\". Click the \"Environment Variables\" button at the bottom. Click \"New\" from the \"User variables\" section. Type GOPATH into the \"Variable name\" field. Type C:\\go-work into the \"Variable value\" field. Click OK. Go 1.13+ (command line) Open a command prompt ( Win + r then type cmd ) or a powershell window ( Win + i ). Type go env -w GOPATH=c:\\go-work . Windows 10 (GUI) There is a faster way to edit Environment Variables via search: * Left click on \"Search\" and type env or environment . * Select \"Edit environment variables for your account\". * \u2026 and follow steps above. Windows 10 (command line) Open a command prompt ( Win + r then type cmd ) or a powershell window ( Win + i ). Type setx GOPATH %USERPROFILE%\\go . (This will set the GOPATH to your [home folder]\\go , such as C:\\Users\\yourusername\\go .) Close the command or PowerShell window. (The environment variable is only available for new command or PowerShell windows, not for the current window.)","title":"SettingGOPATH"},{"location":"SettingGOPATH/#setting-gopath","text":"The GOPATH environment variable specifies the location of your workspace. If no GOPATH is set, it is assumed to be $HOME/go on Unix systems and %USERPROFILE%\\go on Windows. If you want to use a custom location as your workspace, you can set the GOPATH environment variable. This page explains how to set this variable on various platforms. Unix systems Go 1.13 Bash Zsh fish Windows Go 1.13 Windows 10 (GUI) Windows 10 (command line)","title":"Setting GOPATH"},{"location":"SettingGOPATH/#unix-systems","text":"GOPATH can be any directory on your system. In Unix examples, we will set it to $HOME/go (the default since Go 1.8). Note that GOPATH must not be the same path as your Go installation. Another common setup is to set GOPATH=$HOME .","title":"Unix systems"},{"location":"SettingGOPATH/#go-113","text":"go env -w GOPATH = $HOME /go","title":"Go 1.13+"},{"location":"SettingGOPATH/#bash","text":"Edit your ~/.bash_profile to add the following line: export GOPATH = $HOME /go Save and exit your editor. Then, source your ~/.bash_profile . source ~/.bash_profile","title":"Bash"},{"location":"SettingGOPATH/#zsh","text":"Edit your ~/.zshrc file to add the following line: export GOPATH = $HOME /go Save and exit your editor. Then, source your ~/.zshrc . source ~/.zshrc","title":"Zsh"},{"location":"SettingGOPATH/#fish","text":"set -x -U GOPATH $HOME /go The -x is used to specify that this variable should be exported and the -U makes this a universal variable, available to all sessions and persistent.","title":"fish"},{"location":"SettingGOPATH/#windows","text":"Your workspace can be located wherever you like, but we'll use C:\\go-work in this example. NOTE: GOPATH must not be the same path as your Go installation. Create a folder at C:\\go-work . Right-click on \"Start\" and click on \"Control Panel\". Select \"System and Security\", then click on \"System\". From the menu on the left, select the \"Advanced system settings\". Click the \"Environment Variables\" button at the bottom. Click \"New\" from the \"User variables\" section. Type GOPATH into the \"Variable name\" field. Type C:\\go-work into the \"Variable value\" field. Click OK.","title":"Windows"},{"location":"SettingGOPATH/#go-113-command-line","text":"Open a command prompt ( Win + r then type cmd ) or a powershell window ( Win + i ). Type go env -w GOPATH=c:\\go-work .","title":"Go 1.13+ (command line)"},{"location":"SettingGOPATH/#windows-10-gui","text":"There is a faster way to edit Environment Variables via search: * Left click on \"Search\" and type env or environment . * Select \"Edit environment variables for your account\". * \u2026 and follow steps above.","title":"Windows 10 (GUI)"},{"location":"SettingGOPATH/#windows-10-command-line","text":"Open a command prompt ( Win + r then type cmd ) or a powershell window ( Win + i ). Type setx GOPATH %USERPROFILE%\\go . (This will set the GOPATH to your [home folder]\\go , such as C:\\Users\\yourusername\\go .) Close the command or PowerShell window. (The environment variable is only available for new command or PowerShell windows, not for the current window.)","title":"Windows 10 (command line)"},{"location":"SignalHandling/","text":"Introduction Sometimes an application needs to save internal state or perform some cleanup activity before it exits, or needs to be able to reload a configuration file or write a memory/cpu profile on demand. In UNIX-like operating systems, signals can accomplish these tasks. Example The following code demonstrates a program that waits for an interrupt signal and removes a temporary file when it occurs. package main import ( \"io/ioutil\" \"os\" \"os/signal\" ) func main () { f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { panic ( err ) } defer os . Remove ( f . Name ()) defer f . Close () sig := make ( chan os . Signal , 1 ) signal . Notify ( sig , os . Interrupt ) <- sig }","title":"SignalHandling"},{"location":"SignalHandling/#introduction","text":"Sometimes an application needs to save internal state or perform some cleanup activity before it exits, or needs to be able to reload a configuration file or write a memory/cpu profile on demand. In UNIX-like operating systems, signals can accomplish these tasks.","title":"Introduction"},{"location":"SignalHandling/#example","text":"The following code demonstrates a program that waits for an interrupt signal and removes a temporary file when it occurs. package main import ( \"io/ioutil\" \"os\" \"os/signal\" ) func main () { f , err := ioutil . TempFile ( \"\" , \"test\" ) if err != nil { panic ( err ) } defer os . Remove ( f . Name ()) defer f . Close () sig := make ( chan os . Signal , 1 ) signal . Notify ( sig , os . Interrupt ) <- sig }","title":"Example"},{"location":"SimultaneousAssignment/","text":"Simultaneous Assignment Simultaneous assignment is useful in many cases to make related assignments in a single statement. Sometimes they are required, either because only a single statement is available (e.g. in an if statement) or because the values will change after the statement (e.g. in the case of swap). All values on the right-hand side of the assignment operator are evaluated before the assignment is performed. Simultaneous assignment in an if statement can improve readability, especially in test functions: if got, want := someFunction(...), currTest.Expected; got != want { t.Errorf(\"%d. someFunction(...) = %v, want %v\", currIdx, got, want) } Swapping two values is also made simple using simultaneous assignment: i, j = j, i http://golang.org/ref/spec#Assignments","title":"SimultaneousAssignment"},{"location":"SimultaneousAssignment/#simultaneous-assignment","text":"Simultaneous assignment is useful in many cases to make related assignments in a single statement. Sometimes they are required, either because only a single statement is available (e.g. in an if statement) or because the values will change after the statement (e.g. in the case of swap). All values on the right-hand side of the assignment operator are evaluated before the assignment is performed. Simultaneous assignment in an if statement can improve readability, especially in test functions: if got, want := someFunction(...), currTest.Expected; got != want { t.Errorf(\"%d. someFunction(...) = %v, want %v\", currIdx, got, want) } Swapping two values is also made simple using simultaneous assignment: i, j = j, i http://golang.org/ref/spec#Assignments","title":"Simultaneous Assignment"},{"location":"SliceTricks/","text":"Since the introduction of the append built-in, most of the functionality of the container/vector package, which was removed in Go 1, can be replicated using append and copy . Here are the vector methods and their slice-manipulation analogues: AppendVector a = append ( a , b ... ) Copy b := make ([] T , len ( a )) copy ( b , a ) // These two are often a little slower than the above one, // but they would be more efficient if there are more // elements to be appended to b after copying. b = append ([] T ( nil ), a ... ) b = append ( a [: 0 : 0 ], a ... ) // This one-line implementation is equivalent to the above // two-line make+copy implementation logically. But it is // actually a bit slower (as of Go toolchain v1.16). b = append ( make ([] T , 0 , len ( a )), a ... ) Cut a = append ( a [: i ], a [ j :] ... ) Delete a = append ( a [: i ], a [ i + 1 :] ... ) // or a = a [: i + copy ( a [ i :], a [ i + 1 :])] Delete without preserving order a [ i ] = a [ len ( a ) - 1 ] a = a [: len ( a ) - 1 ] NOTE If the type of the element is a pointer or a struct with pointer fields, which need to be garbage collected, the above implementations of Cut and Delete have a potential memory leak problem: some elements with values are still referenced by slice a and thus can not be collected. The following code can fix this problem: Cut copy ( a [ i :], a [ j :]) for k , n := len ( a ) - j + i , len ( a ); k < n ; k ++ { a [ k ] = nil // or the zero value of T } a = a [: len ( a ) - j + i ] Delete copy ( a [ i :], a [ i + 1 :]) a [ len ( a ) - 1 ] = nil // or the zero value of T a = a [: len ( a ) - 1 ] Delete without preserving order a [ i ] = a [ len ( a ) - 1 ] a [ len ( a ) - 1 ] = nil a = a [: len ( a ) - 1 ] Expand a = append ( a [: i ], append ( make ([] T , j ), a [ i :] ... ) ... ) Extend a = append ( a , make ([] T , j ) ... ) Filter (in place) n := 0 for _ , x := range a { if keep ( x ) { a [ n ] = x n ++ } } a = a [: n ] Insert a = append ( a [: i ], append ([] T { x }, a [ i :] ... ) ... ) NOTE : The second append creates a new slice with its own underlying storage and copies elements in a[i:] to that slice, and these elements are then copied back to slice a (by the first append ). The creation of the new slice (and thus memory garbage) and the second copy can be avoided by using an alternative way: Insert s = append ( s , 0 /* use the zero value of the element type */ ) copy ( s [ i + 1 :], s [ i :]) s [ i ] = x InsertVector a = append ( a [: i ], append ( b , a [ i :] ... ) ... ) // The above one-line way copies a[i:] twice and // allocates at least once. // The following verbose way only copies elements // in a[i:] once and allocates at most once. // But, as of Go toolchain 1.16, due to lacking of // optimizations to avoid elements clearing in the // \"make\" call, the verbose way is not always faster. // // Future compiler optimizations might implement // both in the most efficient ways. // // Assume element type is int. func Insert ( s [] int , k int , vs ... int ) [] int { if n := len ( s ) + len ( vs ); n <= cap ( s ) { s2 := s [: n ] copy ( s2 [ k + len ( vs ):], s [ k :]) copy ( s2 [ k :], vs ) return s2 } s2 := make ([] int , len ( s ) + len ( vs )) copy ( s2 , s [: k ]) copy ( s2 [ k :], vs ) copy ( s2 [ k + len ( vs ):], s [ k :]) return s2 } a = Insert ( a , i , b ... ) Push a = append ( a , x ) Pop x , a = a [ len ( a ) - 1 ], a [: len ( a ) - 1 ] Push Front/Unshift a = append ([] T { x }, a ... ) Pop Front/Shift x , a = a [ 0 ], a [ 1 :] Additional Tricks Filtering without allocating This trick uses the fact that a slice shares the same backing array and capacity as the original, so the storage is reused for the filtered slice. Of course, the original contents are modified. b := a [: 0 ] for _ , x := range a { if f ( x ) { b = append ( b , x ) } } For elements which must be garbage collected, the following code can be included afterwards: for i := len ( b ); i < len ( a ); i ++ { a [ i ] = nil // or the zero value of T } Reversing To replace the contents of a slice with the same elements but in reverse order: for i := len ( a ) / 2 - 1 ; i >= 0 ; i -- { opp := len ( a ) - 1 - i a [ i ], a [ opp ] = a [ opp ], a [ i ] } The same thing, except with two indices: for left , right := 0 , len ( a ) - 1 ; left < right ; left , right = left + 1 , right - 1 { a [ left ], a [ right ] = a [ right ], a [ left ] } Shuffling Fisher\u2013Yates algorithm: Since go1.10, this is available at math/rand.Shuffle for i := len ( a ) - 1 ; i > 0 ; i -- { j := rand . Intn ( i + 1 ) a [ i ], a [ j ] = a [ j ], a [ i ] } Batching with minimal allocation Useful if you want to do batch processing on large slices. actions := [] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } batchSize := 3 batches := make ([][] int , 0 , ( len ( actions ) + batchSize - 1 ) / batchSize ) for batchSize < len ( actions ) { actions , batches = actions [ batchSize :], append ( batches , actions [ 0 : batchSize : batchSize ]) } batches = append ( batches , actions ) Yields the following: [[ 0 1 2 ] [ 3 4 5 ] [ 6 7 8 ] [ 9 ]] In-place deduplicate (comparable) import \"sort\" in := [] int { 3 , 2 , 1 , 4 , 3 , 2 , 1 , 4 , 1 } // any item can be sorted sort . Ints ( in ) j := 0 for i := 1 ; i < len ( in ); i ++ { if in [ j ] == in [ i ] { continue } j ++ // preserve the original data // in[i], in[j] = in[j], in[i] // only set what is required in [ j ] = in [ i ] } result := in [: j + 1 ] fmt . Println ( result ) // [1 2 3 4] Move to front, or prepend if not present, in place if possible. // moveToFront moves needle to the front of haystack, in place if possible. func moveToFront ( needle string , haystack [] string ) [] string { if len ( haystack ) != 0 && haystack [ 0 ] == needle { return haystack } prev := needle for i , elem := range haystack { switch { case i == 0 : haystack [ 0 ] = needle prev = elem case elem == needle : haystack [ i ] = prev return haystack default : haystack [ i ] = prev prev = elem } } return append ( haystack , prev ) } haystack := [] string { \"a\" , \"b\" , \"c\" , \"d\" , \"e\" } // [a b c d e] haystack = moveToFront ( \"c\" , haystack ) // [c a b d e] haystack = moveToFront ( \"f\" , haystack ) // [f c a b d e] Sliding Window func slidingWindow ( size int , input [] int ) [][] int { // returns the input slice as the first element if len ( input ) <= size { return [][] int { input } } // allocate slice at the precise size we need r := make ([][] int , 0 , len ( input ) - size + 1 ) for i , j := 0 , size ; j <= len ( input ); i , j = i + 1 , j + 1 { r = append ( r , input [ i : j ]) } return r }","title":"SliceTricks"},{"location":"SliceTricks/#appendvector","text":"a = append ( a , b ... )","title":"AppendVector"},{"location":"SliceTricks/#copy","text":"b := make ([] T , len ( a )) copy ( b , a ) // These two are often a little slower than the above one, // but they would be more efficient if there are more // elements to be appended to b after copying. b = append ([] T ( nil ), a ... ) b = append ( a [: 0 : 0 ], a ... ) // This one-line implementation is equivalent to the above // two-line make+copy implementation logically. But it is // actually a bit slower (as of Go toolchain v1.16). b = append ( make ([] T , 0 , len ( a )), a ... )","title":"Copy"},{"location":"SliceTricks/#cut","text":"a = append ( a [: i ], a [ j :] ... )","title":"Cut"},{"location":"SliceTricks/#delete","text":"a = append ( a [: i ], a [ i + 1 :] ... ) // or a = a [: i + copy ( a [ i :], a [ i + 1 :])]","title":"Delete"},{"location":"SliceTricks/#delete-without-preserving-order","text":"a [ i ] = a [ len ( a ) - 1 ] a = a [: len ( a ) - 1 ] NOTE If the type of the element is a pointer or a struct with pointer fields, which need to be garbage collected, the above implementations of Cut and Delete have a potential memory leak problem: some elements with values are still referenced by slice a and thus can not be collected. The following code can fix this problem: Cut copy ( a [ i :], a [ j :]) for k , n := len ( a ) - j + i , len ( a ); k < n ; k ++ { a [ k ] = nil // or the zero value of T } a = a [: len ( a ) - j + i ] Delete copy ( a [ i :], a [ i + 1 :]) a [ len ( a ) - 1 ] = nil // or the zero value of T a = a [: len ( a ) - 1 ] Delete without preserving order a [ i ] = a [ len ( a ) - 1 ] a [ len ( a ) - 1 ] = nil a = a [: len ( a ) - 1 ]","title":"Delete without preserving order"},{"location":"SliceTricks/#expand","text":"a = append ( a [: i ], append ( make ([] T , j ), a [ i :] ... ) ... )","title":"Expand"},{"location":"SliceTricks/#extend","text":"a = append ( a , make ([] T , j ) ... )","title":"Extend"},{"location":"SliceTricks/#filter-in-place","text":"n := 0 for _ , x := range a { if keep ( x ) { a [ n ] = x n ++ } } a = a [: n ]","title":"Filter (in place)"},{"location":"SliceTricks/#insert","text":"a = append ( a [: i ], append ([] T { x }, a [ i :] ... ) ... ) NOTE : The second append creates a new slice with its own underlying storage and copies elements in a[i:] to that slice, and these elements are then copied back to slice a (by the first append ). The creation of the new slice (and thus memory garbage) and the second copy can be avoided by using an alternative way: Insert s = append ( s , 0 /* use the zero value of the element type */ ) copy ( s [ i + 1 :], s [ i :]) s [ i ] = x","title":"Insert"},{"location":"SliceTricks/#insertvector","text":"a = append ( a [: i ], append ( b , a [ i :] ... ) ... ) // The above one-line way copies a[i:] twice and // allocates at least once. // The following verbose way only copies elements // in a[i:] once and allocates at most once. // But, as of Go toolchain 1.16, due to lacking of // optimizations to avoid elements clearing in the // \"make\" call, the verbose way is not always faster. // // Future compiler optimizations might implement // both in the most efficient ways. // // Assume element type is int. func Insert ( s [] int , k int , vs ... int ) [] int { if n := len ( s ) + len ( vs ); n <= cap ( s ) { s2 := s [: n ] copy ( s2 [ k + len ( vs ):], s [ k :]) copy ( s2 [ k :], vs ) return s2 } s2 := make ([] int , len ( s ) + len ( vs )) copy ( s2 , s [: k ]) copy ( s2 [ k :], vs ) copy ( s2 [ k + len ( vs ):], s [ k :]) return s2 } a = Insert ( a , i , b ... )","title":"InsertVector"},{"location":"SliceTricks/#push","text":"a = append ( a , x )","title":"Push"},{"location":"SliceTricks/#pop","text":"x , a = a [ len ( a ) - 1 ], a [: len ( a ) - 1 ]","title":"Pop"},{"location":"SliceTricks/#push-frontunshift","text":"a = append ([] T { x }, a ... )","title":"Push Front/Unshift"},{"location":"SliceTricks/#pop-frontshift","text":"x , a = a [ 0 ], a [ 1 :]","title":"Pop Front/Shift"},{"location":"SliceTricks/#additional-tricks","text":"","title":"Additional Tricks"},{"location":"SliceTricks/#filtering-without-allocating","text":"This trick uses the fact that a slice shares the same backing array and capacity as the original, so the storage is reused for the filtered slice. Of course, the original contents are modified. b := a [: 0 ] for _ , x := range a { if f ( x ) { b = append ( b , x ) } } For elements which must be garbage collected, the following code can be included afterwards: for i := len ( b ); i < len ( a ); i ++ { a [ i ] = nil // or the zero value of T }","title":"Filtering without allocating"},{"location":"SliceTricks/#reversing","text":"To replace the contents of a slice with the same elements but in reverse order: for i := len ( a ) / 2 - 1 ; i >= 0 ; i -- { opp := len ( a ) - 1 - i a [ i ], a [ opp ] = a [ opp ], a [ i ] } The same thing, except with two indices: for left , right := 0 , len ( a ) - 1 ; left < right ; left , right = left + 1 , right - 1 { a [ left ], a [ right ] = a [ right ], a [ left ] }","title":"Reversing"},{"location":"SliceTricks/#shuffling","text":"Fisher\u2013Yates algorithm: Since go1.10, this is available at math/rand.Shuffle for i := len ( a ) - 1 ; i > 0 ; i -- { j := rand . Intn ( i + 1 ) a [ i ], a [ j ] = a [ j ], a [ i ] }","title":"Shuffling"},{"location":"SliceTricks/#batching-with-minimal-allocation","text":"Useful if you want to do batch processing on large slices. actions := [] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } batchSize := 3 batches := make ([][] int , 0 , ( len ( actions ) + batchSize - 1 ) / batchSize ) for batchSize < len ( actions ) { actions , batches = actions [ batchSize :], append ( batches , actions [ 0 : batchSize : batchSize ]) } batches = append ( batches , actions ) Yields the following: [[ 0 1 2 ] [ 3 4 5 ] [ 6 7 8 ] [ 9 ]]","title":"Batching with minimal allocation"},{"location":"SliceTricks/#in-place-deduplicate-comparable","text":"import \"sort\" in := [] int { 3 , 2 , 1 , 4 , 3 , 2 , 1 , 4 , 1 } // any item can be sorted sort . Ints ( in ) j := 0 for i := 1 ; i < len ( in ); i ++ { if in [ j ] == in [ i ] { continue } j ++ // preserve the original data // in[i], in[j] = in[j], in[i] // only set what is required in [ j ] = in [ i ] } result := in [: j + 1 ] fmt . Println ( result ) // [1 2 3 4]","title":"In-place deduplicate (comparable)"},{"location":"SliceTricks/#move-to-front-or-prepend-if-not-present-in-place-if-possible","text":"// moveToFront moves needle to the front of haystack, in place if possible. func moveToFront ( needle string , haystack [] string ) [] string { if len ( haystack ) != 0 && haystack [ 0 ] == needle { return haystack } prev := needle for i , elem := range haystack { switch { case i == 0 : haystack [ 0 ] = needle prev = elem case elem == needle : haystack [ i ] = prev return haystack default : haystack [ i ] = prev prev = elem } } return append ( haystack , prev ) } haystack := [] string { \"a\" , \"b\" , \"c\" , \"d\" , \"e\" } // [a b c d e] haystack = moveToFront ( \"c\" , haystack ) // [c a b d e] haystack = moveToFront ( \"f\" , haystack ) // [f c a b d e]","title":"Move to front, or prepend if not present, in place if possible."},{"location":"SliceTricks/#sliding-window","text":"func slidingWindow ( size int , input [] int ) [][] int { // returns the input slice as the first element if len ( input ) <= size { return [][] int { input } } // allocate slice at the precise size we need r := make ([][] int , 0 , len ( input ) - size + 1 ) for i , j := 0 , size ; j <= len ( input ); i , j = i + 1 , j + 1 { r = append ( r , input [ i : j ]) } return r }","title":"Sliding Window"},{"location":"SlowBots/","text":"SlowBots The Go build system now supports \"SlowBots\", which are a way to configure the TryBots (pre-submit builders) to add additional builders into the set of build configurations that TryBots normally run. Normally TryBots only run things that are fast and elastically provisioned. That is, TryBots only run x86 things that run on Google Cloud where we have tons of capacity and can spin up many VMs at will, sharding out test execution widely so the TryBots complete in 5-10 minutes. But sometimes that's not enough. SlowBots let you say that you're cool waiting a long time until some specific set of builders becomes available. (There is often only one physical machine for some configurations, and often backlogged with work, and that builder might be slow too.) Using SlowBots Use the Gerrit web UI to reply and select Run-TryBot = +1 as normal, but\u2026 In the comment section (where it says Say something nice\u2026 ), write a magic comment: TRY=ppc64le, freebsd, netbsd-386, ios, linux-arm64-packet \u2026 where the terms after TRY= are either: GOOS (picks best one) GOARCH (picks best one) GOOS-GOARCH (picks best one) specific-builder-name (you specify it explicitly by its exact name; see the full list at https://farmer.golang.org/builders ) ios (alias for darwin-arm64 ) For the main Go repository, the terms after TRY= can also be: x/repo (where repo is one of the golang.org/x repositories whose tests should be executed) When running TryBots again later, the most recent TRY= comment on the current patchset is used. To turn it off set TRY= with an empty string after the equals sign. If the current patchset doesn't have a TRY= comment, the most recent non-empty TRY= comment is used. Pitfalls TRY= comments are ignored if they're not on the same comment that started the TryBots TryBots (and SlowBots) don't run if there's already a TryBot-Result The git-codereview mail tool's -trybot flag doesn't support this yet, so use the web UI. If TryBots are already running, deleting the Run-TryBot+1 vote and re-doing it won't re-start the TryBot set, so it won't look at your TRY= line, until the next run when it's done. (But you'll need to delete the TryBot-Result somehow: manually, rebasing, uploading new version) If you select a builder that's offline, it'll currently just wait forever for it to show up. There's no timeout yet. If you specify an unknown TRY= token, it'll just ignore it and won't report an error. There's no all alias. That's kinda intentional, to prevent overuse that might cause the SlowBots to get even slower for everybody. But we might add it later anyway. See golang.org/issue/34501#issuecomment-544585711 . TODO Allow selecting a builder other than linux-amd64 for x/REPO queries ( golang.org/issue/39201 ). The usability of SlowBots will be improved over time. It needs to report things better, make it easier to configure (both CLI and probably a web GUI picker UI), and support restarting things, or modifying in-progress TryBot runs to change the set of builders. Feedback welcome at golang.org/issue/34501 .","title":"SlowBots"},{"location":"SlowBots/#slowbots","text":"The Go build system now supports \"SlowBots\", which are a way to configure the TryBots (pre-submit builders) to add additional builders into the set of build configurations that TryBots normally run. Normally TryBots only run things that are fast and elastically provisioned. That is, TryBots only run x86 things that run on Google Cloud where we have tons of capacity and can spin up many VMs at will, sharding out test execution widely so the TryBots complete in 5-10 minutes. But sometimes that's not enough. SlowBots let you say that you're cool waiting a long time until some specific set of builders becomes available. (There is often only one physical machine for some configurations, and often backlogged with work, and that builder might be slow too.)","title":"SlowBots"},{"location":"SlowBots/#using-slowbots","text":"Use the Gerrit web UI to reply and select Run-TryBot = +1 as normal, but\u2026 In the comment section (where it says Say something nice\u2026 ), write a magic comment: TRY=ppc64le, freebsd, netbsd-386, ios, linux-arm64-packet \u2026 where the terms after TRY= are either: GOOS (picks best one) GOARCH (picks best one) GOOS-GOARCH (picks best one) specific-builder-name (you specify it explicitly by its exact name; see the full list at https://farmer.golang.org/builders ) ios (alias for darwin-arm64 ) For the main Go repository, the terms after TRY= can also be: x/repo (where repo is one of the golang.org/x repositories whose tests should be executed) When running TryBots again later, the most recent TRY= comment on the current patchset is used. To turn it off set TRY= with an empty string after the equals sign. If the current patchset doesn't have a TRY= comment, the most recent non-empty TRY= comment is used.","title":"Using SlowBots"},{"location":"SlowBots/#pitfalls","text":"TRY= comments are ignored if they're not on the same comment that started the TryBots TryBots (and SlowBots) don't run if there's already a TryBot-Result The git-codereview mail tool's -trybot flag doesn't support this yet, so use the web UI. If TryBots are already running, deleting the Run-TryBot+1 vote and re-doing it won't re-start the TryBot set, so it won't look at your TRY= line, until the next run when it's done. (But you'll need to delete the TryBot-Result somehow: manually, rebasing, uploading new version) If you select a builder that's offline, it'll currently just wait forever for it to show up. There's no timeout yet. If you specify an unknown TRY= token, it'll just ignore it and won't report an error. There's no all alias. That's kinda intentional, to prevent overuse that might cause the SlowBots to get even slower for everybody. But we might add it later anyway. See golang.org/issue/34501#issuecomment-544585711 .","title":"Pitfalls"},{"location":"SlowBots/#todo","text":"Allow selecting a builder other than linux-amd64 for x/REPO queries ( golang.org/issue/39201 ). The usability of SlowBots will be improved over time. It needs to report things better, make it easier to configure (both CLI and probably a web GUI picker UI), and support restarting things, or modifying in-progress TryBot runs to change the set of builders. Feedback welcome at golang.org/issue/34501 .","title":"TODO"},{"location":"Solaris/","text":"Go on Solaris Kernel version Architectures Initial support version Final support version SunOS 5.11 amd64 Go 1.3 * * Go 1.5 or above is recommended.","title":"Solaris"},{"location":"Solaris/#go-on-solaris","text":"Kernel version Architectures Initial support version Final support version SunOS 5.11 amd64 Go 1.3 * * Go 1.5 or above is recommended.","title":"Go on Solaris"},{"location":"Spectre/","text":"Overview Go 1.15 adds support for enabling code generation adjustments to mitigate the effect of two variants of the Spectre family of CPU vulnerabilities. The compiler and assembler both have a new flag -spectre that is given a list of Spectre mitigations to enable, as in -spectre=index or -spectre=index,ret . The special case -spectre=all enables all available mitigations. The index mitigation can be enabled in the compiler and changes code generation to emit protections against Spectre variant 1 (\u201cbounds check bypass\u201d). The mitigation ensures that the CPU does not access arbitrary memory, by masking the index to zero when speculating incorrectly. This change typically slows down execution by around 5-10%; the exact slowdown depends on the workload. The ret mitigation can be enabled in both the compiler and the assembler and changes code generation to emit protections against Spectre variant 2 (\u201cbranch target injection\u201d). This mitigation replaces every indirect call instructions with use of a retpoline gadget. This change typically slows down execution by around 10-15%; again, the exact slowdown depends on the workload. Applicability At time of writing, we do not use either of these mitigations for Go programs running at Google, nor do we anticipate doing so. They are included in the Go toolchain as a kind of \u201cdefense in depth\u201d for users with very special use cases (or significant paranoia). These mitigations would only be necessary when there is a potential Spectre attack against a Go program, which would require all of the following to be true. First, an attacker must be able to run arbitrary code on the same CPUs as a victim Go program containing a secret. Second, the attacker must be able to make some kind of HTTP or RPC requests to the victim Go program. Third, those requests have to trigger a potentially vulnerable code fragment to speculate into attacker-selected behavior. Most commonly this would mean using an arbitrary attacker-provided integer to index a slice or array. These three conditions are only very rarely all true at the same time. Example To build a program with both mitigations (and any future mitigations) enabled in all packages, use: go build - gcflags = all =- spectre = all - asmflags = all =- spectre = all program Acknowledgements Thanks to Andrea Mambretti et al . for sharing their paper (linked below) ahead of publication. And thanks to them, Chandler Carruth, and Paul Turner for helpful discussions. References \u201c Spectre Attacks: Exploiting Speculative Execution \u201d by Paul Kocher et al . (The definitive paper.) \u201c Speculative Buffer Overflows: Attacks and Defenses \u201d by Vladimir Kiriansky and Carl Waldspurger. \u201c Retpoline: a software construct for preventing branch-target-injection \u201d by Paul Turner. \u201c A Systematic Evaluation of Transient Execution Attacks and Defenses \u201d by Claudio Canella et al . (Good summary of variants.) \u201c Spectre is here to stay: An analysis of side-channels and speculative execution \u201d by Ross McIlroy et al . (These are not going away.) \u201c Spectre Returns! Speculation Attacks using the Return Stack Buffer \u201d by Esmaeil Mohammadian Koruyeh et al . (Even return prediction isn't safe.) \u201c Speculative Load Hardening \u201d by Chandler Carruth. (What LLVM does to prevent speculative out-of-bounds access.) \u201c Bypassing memory safety mechanisms through speculative control flow hijacks \u201d by Andrea Mambretti et al . (Examination of effects on memory-safe languages.)","title":"Spectre"},{"location":"Spectre/#overview","text":"Go 1.15 adds support for enabling code generation adjustments to mitigate the effect of two variants of the Spectre family of CPU vulnerabilities. The compiler and assembler both have a new flag -spectre that is given a list of Spectre mitigations to enable, as in -spectre=index or -spectre=index,ret . The special case -spectre=all enables all available mitigations. The index mitigation can be enabled in the compiler and changes code generation to emit protections against Spectre variant 1 (\u201cbounds check bypass\u201d). The mitigation ensures that the CPU does not access arbitrary memory, by masking the index to zero when speculating incorrectly. This change typically slows down execution by around 5-10%; the exact slowdown depends on the workload. The ret mitigation can be enabled in both the compiler and the assembler and changes code generation to emit protections against Spectre variant 2 (\u201cbranch target injection\u201d). This mitigation replaces every indirect call instructions with use of a retpoline gadget. This change typically slows down execution by around 10-15%; again, the exact slowdown depends on the workload.","title":"Overview"},{"location":"Spectre/#applicability","text":"At time of writing, we do not use either of these mitigations for Go programs running at Google, nor do we anticipate doing so. They are included in the Go toolchain as a kind of \u201cdefense in depth\u201d for users with very special use cases (or significant paranoia). These mitigations would only be necessary when there is a potential Spectre attack against a Go program, which would require all of the following to be true. First, an attacker must be able to run arbitrary code on the same CPUs as a victim Go program containing a secret. Second, the attacker must be able to make some kind of HTTP or RPC requests to the victim Go program. Third, those requests have to trigger a potentially vulnerable code fragment to speculate into attacker-selected behavior. Most commonly this would mean using an arbitrary attacker-provided integer to index a slice or array. These three conditions are only very rarely all true at the same time.","title":"Applicability"},{"location":"Spectre/#example","text":"To build a program with both mitigations (and any future mitigations) enabled in all packages, use: go build - gcflags = all =- spectre = all - asmflags = all =- spectre = all program","title":"Example"},{"location":"Spectre/#acknowledgements","text":"Thanks to Andrea Mambretti et al . for sharing their paper (linked below) ahead of publication. And thanks to them, Chandler Carruth, and Paul Turner for helpful discussions.","title":"Acknowledgements"},{"location":"Spectre/#references","text":"\u201c Spectre Attacks: Exploiting Speculative Execution \u201d by Paul Kocher et al . (The definitive paper.) \u201c Speculative Buffer Overflows: Attacks and Defenses \u201d by Vladimir Kiriansky and Carl Waldspurger. \u201c Retpoline: a software construct for preventing branch-target-injection \u201d by Paul Turner. \u201c A Systematic Evaluation of Transient Execution Attacks and Defenses \u201d by Claudio Canella et al . (Good summary of variants.) \u201c Spectre is here to stay: An analysis of side-channels and speculative execution \u201d by Ross McIlroy et al . (These are not going away.) \u201c Spectre Returns! Speculation Attacks using the Return Stack Buffer \u201d by Esmaeil Mohammadian Koruyeh et al . (Even return prediction isn't safe.) \u201c Speculative Load Hardening \u201d by Chandler Carruth. (What LLVM does to prevent speculative out-of-bounds access.) \u201c Bypassing memory safety mechanisms through speculative control flow hijacks \u201d by Andrea Mambretti et al . (Examination of effects on memory-safe languages.)","title":"References"},{"location":"Spelling/","text":"This page documents the spelling choices that the Go project has made for English words. This page is a statement of policy. Do not edit it without approval/discussion. Policy: American spellings over British spellings iff means \"if and only if\" ( https://en.wiktionary.org/wiki/iff ), but don't use it in public-facing docs (don't use in comments on exported identifiers that would show up in godoc) avoid Latin abbreviations in godoc use cancellation (two ells), not cancelation. See https://golang.org/cl/170060 use canceled (one ell), not cancelled. use canceling (one ell), not cancelling. use marshaling , marshaled etc (single ell). See https://golang.org/cl/33017","title":"Spelling"},{"location":"Style/","text":"See CodeReviewComments , TestComments , or CSSStyleGuide .","title":"Style"},{"location":"SuccessStories/","text":"Go success stories from around the web The Way of the Gopher - Making the Switch from Node.js to Golang Moving a team from Scala to Go 400 Days of Go From Python to Go: Migrating our entire API Our Experience with Golang The Reliability of Go Go at TiDB A Go Redirection Service pool.ntp.org DNS server in Go Juju at Canonical Go at bitly NSQ: realtime distributed message processing at scale CloudFlare blows hole in laws of Web physics with Go and Railgun Why I Like Go Why I Program in Go dl.google.com now served by Go Google's Go Programming Language Grows Up: Now What? Moving to Go Rob Pike: Why Learn Go? Why I went from Python to Go (and not node.js) Another go at the Next Big Language @tobi : \"I have now completed two projects in Go. I predict that it's going to be the dominant language for server work.\" @derekcollison : \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\" Will Go be the new go-to programming language? Dr. Dobb's: Why Not Go? Google I/O 2012: Go in production Go at Cockroach Labs , cockroachdb/cockroach Go at Novartis Go at the BBC Go at SoundCloud Go at Moovweb Building StatHat with Go Go at CloudFlare Why you PHP guys should learn Golang I/O BootCamp 2011: Real World Go Go at Heroku Go at Basecamp Go at Streetspotr Confession From A Go Programer Why we chose Go over C for updating embedded Linux devices List of Tech Migrations Making the move from Scala to Go, and why we\u2019re not going back Go + Services = One Goliath Project - Khan Academy's Python Monolith to Go Microservices Why we switched from Python to Go at Stream A journey from Node to GoLang See also [[GoUsers]].","title":"SuccessStories"},{"location":"SuccessStories/#go-success-stories-from-around-the-web","text":"The Way of the Gopher - Making the Switch from Node.js to Golang Moving a team from Scala to Go 400 Days of Go From Python to Go: Migrating our entire API Our Experience with Golang The Reliability of Go Go at TiDB A Go Redirection Service pool.ntp.org DNS server in Go Juju at Canonical Go at bitly NSQ: realtime distributed message processing at scale CloudFlare blows hole in laws of Web physics with Go and Railgun Why I Like Go Why I Program in Go dl.google.com now served by Go Google's Go Programming Language Grows Up: Now What? Moving to Go Rob Pike: Why Learn Go? Why I went from Python to Go (and not node.js) Another go at the Next Big Language @tobi : \"I have now completed two projects in Go. I predict that it's going to be the dominant language for server work.\" @derekcollison : \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\" Will Go be the new go-to programming language? Dr. Dobb's: Why Not Go? Google I/O 2012: Go in production Go at Cockroach Labs , cockroachdb/cockroach Go at Novartis Go at the BBC Go at SoundCloud Go at Moovweb Building StatHat with Go Go at CloudFlare Why you PHP guys should learn Golang I/O BootCamp 2011: Real World Go Go at Heroku Go at Basecamp Go at Streetspotr Confession From A Go Programer Why we chose Go over C for updating embedded Linux devices List of Tech Migrations Making the move from Scala to Go, and why we\u2019re not going back Go + Services = One Goliath Project - Khan Academy's Python Monolith to Go Microservices Why we switched from Python to Go at Stream A journey from Node to GoLang See also [[GoUsers]].","title":"Go success stories from around the web"},{"location":"Switch/","text":"Switch Spec: https://golang.org/ref/spec#Switch_statements Go's switch statements are pretty neat. For one thing, you don't need to break at the end of each case. switch c { case '&' : esc = \"&amp;\" case '\\'' : esc = \"&apos;\" case '<' : esc = \"&lt;\" case '>' : esc = \"&gt;\" case '\"' : esc = \"&quot;\" default : panic ( \"unrecognized escape character\" ) } src/pkg/html/escape.go Not just integers Switches work on values of any type. switch syscall . OS { case \"windows\" : sd = & sysDir { Getenv ( \"SystemRoot\" ) + `\\system32\\drivers\\etc` , [] string { \"hosts\" , \"networks\" , \"protocol\" , \"services\" , }, } case \"plan9\" : sd = & sysDir { \"/lib/ndb\" , [] string { \"common\" , \"local\" , }, } default : sd = & sysDir { \"/etc\" , [] string { \"group\" , \"hosts\" , \"passwd\" , }, } } Missing expression In fact, you don't need to switch on anything at all. A switch with no value means \"switch true\", making it a cleaner version of an if-else chain, as in this example from Effective Go: func unhex ( c byte ) byte { switch { case '0' <= c && c <= '9' : return c - '0' case 'a' <= c && c <= 'f' : return c - 'a' + 10 case 'A' <= c && c <= 'F' : return c - 'A' + 10 } return 0 } Break Go's switch statements break implicitly, but break is still useful: command := ReadCommand () argv := strings . Fields ( command ) switch argv [ 0 ] { case \"echo\" : fmt . Print ( argv [ 1 :] ... ) case \"cat\" : if len ( argv ) <= 1 { fmt . Println ( \"Usage: cat <filename>\" ) break } PrintFile ( argv [ 1 ]) default : fmt . Println ( \"Unknown command; try 'echo' or 'cat'\" ) } Fall through To fall through to a subsequent case, use the fallthrough keyword: v := 42 switch v { case 100 : fmt . Println ( 100 ) fallthrough case 42 : fmt . Println ( 42 ) fallthrough case 1 : fmt . Println ( 1 ) fallthrough default : fmt . Println ( \"default\" ) } // Output: // 42 // 1 // default Another example: // Unpack 4 bytes into uint32 to repack into base 85 5-byte. var v uint32 switch len ( src ) { default : v |= uint32 ( src [ 3 ]) fallthrough case 3 : v |= uint32 ( src [ 2 ]) << 8 fallthrough case 2 : v |= uint32 ( src [ 1 ]) << 16 fallthrough case 1 : v |= uint32 ( src [ 0 ]) << 24 } src/pkg/encoding/ascii85/ascii85.go The 'fallthrough' must be the last thing in the case; you can't write something like switch { case f (): if g () { fallthrough // Does not work! } h () default : error () } However, you can work around this by using a 'labeled' fallthrough : switch { case f (): if g () { goto nextCase // Works now! } h () break nextCase : fallthrough default : error () } Note: fallthrough does not work in type switch. Multiple cases If you want to use multiple values in the same case, use a comma-separated list. func letterOp ( code int ) bool { switch chars [ code ]. category { case \"Lu\" , \"Ll\" , \"Lt\" , \"Lm\" , \"Lo\" : return true } return false } Type switch With a type switch you can switch on the type of an interface value (only): func typeName ( v interface {}) string { switch v .( type ) { case int : return \"int\" case string : return \"string\" default : return \"unknown\" } } You can also declare a variable and it will have the type of each case : func do ( v interface {}) string { switch u := v .( type ) { case int : return strconv . Itoa ( u * 2 ) // u has type int case string : mid := len ( u ) / 2 // split - u has type string return u [ mid :] + u [: mid ] // join } return \"unknown\" } do ( 21 ) == \"42\" do ( \"bitrab\" ) == \"rabbit\" do ( 3.142 ) == \"unknown\" Noop case Sometimes it useful to have cases that require no action. This can look confusing, because it can appear that both the noop case and the subsequent case have the same action, but isn't so. func pluralEnding ( n int ) string { ending := \"\" switch n { case 1 : default : ending = \"s\" } return ending } fmt . Sprintf ( \"foo%s\\n\" , pluralEnding ( 1 )) == \"foo\" fmt . Sprintf ( \"bar%s\\n\" , pluralEnding ( 2 )) == \"bars\"","title":"Switch"},{"location":"Switch/#switch","text":"Spec: https://golang.org/ref/spec#Switch_statements Go's switch statements are pretty neat. For one thing, you don't need to break at the end of each case. switch c { case '&' : esc = \"&amp;\" case '\\'' : esc = \"&apos;\" case '<' : esc = \"&lt;\" case '>' : esc = \"&gt;\" case '\"' : esc = \"&quot;\" default : panic ( \"unrecognized escape character\" ) } src/pkg/html/escape.go","title":"Switch"},{"location":"Switch/#not-just-integers","text":"Switches work on values of any type. switch syscall . OS { case \"windows\" : sd = & sysDir { Getenv ( \"SystemRoot\" ) + `\\system32\\drivers\\etc` , [] string { \"hosts\" , \"networks\" , \"protocol\" , \"services\" , }, } case \"plan9\" : sd = & sysDir { \"/lib/ndb\" , [] string { \"common\" , \"local\" , }, } default : sd = & sysDir { \"/etc\" , [] string { \"group\" , \"hosts\" , \"passwd\" , }, } }","title":"Not just integers"},{"location":"Switch/#missing-expression","text":"In fact, you don't need to switch on anything at all. A switch with no value means \"switch true\", making it a cleaner version of an if-else chain, as in this example from Effective Go: func unhex ( c byte ) byte { switch { case '0' <= c && c <= '9' : return c - '0' case 'a' <= c && c <= 'f' : return c - 'a' + 10 case 'A' <= c && c <= 'F' : return c - 'A' + 10 } return 0 }","title":"Missing expression"},{"location":"Switch/#break","text":"Go's switch statements break implicitly, but break is still useful: command := ReadCommand () argv := strings . Fields ( command ) switch argv [ 0 ] { case \"echo\" : fmt . Print ( argv [ 1 :] ... ) case \"cat\" : if len ( argv ) <= 1 { fmt . Println ( \"Usage: cat <filename>\" ) break } PrintFile ( argv [ 1 ]) default : fmt . Println ( \"Unknown command; try 'echo' or 'cat'\" ) }","title":"Break"},{"location":"Switch/#fall-through","text":"To fall through to a subsequent case, use the fallthrough keyword: v := 42 switch v { case 100 : fmt . Println ( 100 ) fallthrough case 42 : fmt . Println ( 42 ) fallthrough case 1 : fmt . Println ( 1 ) fallthrough default : fmt . Println ( \"default\" ) } // Output: // 42 // 1 // default Another example: // Unpack 4 bytes into uint32 to repack into base 85 5-byte. var v uint32 switch len ( src ) { default : v |= uint32 ( src [ 3 ]) fallthrough case 3 : v |= uint32 ( src [ 2 ]) << 8 fallthrough case 2 : v |= uint32 ( src [ 1 ]) << 16 fallthrough case 1 : v |= uint32 ( src [ 0 ]) << 24 } src/pkg/encoding/ascii85/ascii85.go The 'fallthrough' must be the last thing in the case; you can't write something like switch { case f (): if g () { fallthrough // Does not work! } h () default : error () } However, you can work around this by using a 'labeled' fallthrough : switch { case f (): if g () { goto nextCase // Works now! } h () break nextCase : fallthrough default : error () } Note: fallthrough does not work in type switch.","title":"Fall through"},{"location":"Switch/#multiple-cases","text":"If you want to use multiple values in the same case, use a comma-separated list. func letterOp ( code int ) bool { switch chars [ code ]. category { case \"Lu\" , \"Ll\" , \"Lt\" , \"Lm\" , \"Lo\" : return true } return false }","title":"Multiple cases"},{"location":"Switch/#type-switch","text":"With a type switch you can switch on the type of an interface value (only): func typeName ( v interface {}) string { switch v .( type ) { case int : return \"int\" case string : return \"string\" default : return \"unknown\" } } You can also declare a variable and it will have the type of each case : func do ( v interface {}) string { switch u := v .( type ) { case int : return strconv . Itoa ( u * 2 ) // u has type int case string : mid := len ( u ) / 2 // split - u has type string return u [ mid :] + u [: mid ] // join } return \"unknown\" } do ( 21 ) == \"42\" do ( \"bitrab\" ) == \"rabbit\" do ( 3.142 ) == \"unknown\"","title":"Type switch"},{"location":"Switch/#noop-case","text":"Sometimes it useful to have cases that require no action. This can look confusing, because it can appear that both the noop case and the subsequent case have the same action, but isn't so. func pluralEnding ( n int ) string { ending := \"\" switch n { case 1 : default : ending = \"s\" } return ending } fmt . Sprintf ( \"foo%s\\n\" , pluralEnding ( 1 )) == \"foo\" fmt . Sprintf ( \"bar%s\\n\" , pluralEnding ( 2 )) == \"bars\"","title":"Noop case"},{"location":"TableDrivenTests/","text":"Introduction Writing good tests is not trivial, but in many situations a lot of ground can be covered with table-driven tests: Each table entry is a complete test case with inputs and expected results, and sometimes with additional information such as a test name to make the test output easily readable. If you ever find yourself using copy and paste when writing a test, think about whether refactoring into a table-driven test or pulling the copied code out into a helper function might be a better option. Given a table of test cases, the actual test simply iterates through all table entries and for each entry performs the necessary tests. The test code is written once and amortized over all table entries, so it makes sense to write a careful test with good error messages. Table driven testing is not a tool, package or anything else, it's just a way and perspective to write cleaner tests. Example of a table driven test Here is a good example from the testing code for the fmt package ( http://golang.org/pkg/fmt/ ): var flagtests = [] struct { in string out string }{ { \"%a\" , \"[%a]\" }, { \"%-a\" , \"[%-a]\" }, { \"%+a\" , \"[%+a]\" }, { \"%#a\" , \"[%#a]\" }, { \"% a\" , \"[% a]\" }, { \"%0a\" , \"[%0a]\" }, { \"%1.2a\" , \"[%1.2a]\" }, { \"%-1.2a\" , \"[%-1.2a]\" }, { \"%+1.2a\" , \"[%+1.2a]\" }, { \"%-+1.2a\" , \"[%+-1.2a]\" }, { \"%-+1.2abc\" , \"[%+-1.2a]bc\" }, { \"%-1.2abc\" , \"[%-1.2a]bc\" }, } func TestFlagParser ( t * testing . T ) { var flagprinter flagPrinter for _ , tt := range flagtests { t . Run ( tt . in , func ( t * testing . T ) { s := Sprintf ( tt . in , & flagprinter ) if s != tt . out { t . Errorf ( \"got %q, want %q\" , s , tt . out ) } }) } } Note the detailed error message provided with t.Errorf : its result and expected result are provided; the input is the subtest name. When the test fails it is immediately obvious which test failed and why, even without having to read the test code. A t.Errorf call is not an assertion. The test continues even after an error is logged. For example, when testing something with integer input, it is worth knowing that the function fails for all inputs, or only for odd inputs, or for powers of two. Parallel Testing Parallelizing table tests is simple, but requires precision to avoid bugs. Please note closely the three changes below, especially the re-declaration of tt package main import ( \"testing\" ) func TestTLog ( t * testing . T ) { t . Parallel () // marks TLog as capable of running in parallel with other tests tests := [] struct { name string }{ { \"test 1\" }, { \"test 2\" }, { \"test 3\" }, { \"test 4\" }, } for _ , tt := range tests { tt := tt // NOTE: https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables t . Run ( tt . name , func ( t * testing . T ) { t . Parallel () // marks each test case as capable of running in parallel with each other t . Log ( tt . name ) }) } } References https://golang.org/doc/code.html#Testing https://golang.org/doc/faq#assertions https://golang.org/doc/faq#testing_framework https://golang.org/pkg/testing/","title":"TableDrivenTests"},{"location":"TableDrivenTests/#introduction","text":"Writing good tests is not trivial, but in many situations a lot of ground can be covered with table-driven tests: Each table entry is a complete test case with inputs and expected results, and sometimes with additional information such as a test name to make the test output easily readable. If you ever find yourself using copy and paste when writing a test, think about whether refactoring into a table-driven test or pulling the copied code out into a helper function might be a better option. Given a table of test cases, the actual test simply iterates through all table entries and for each entry performs the necessary tests. The test code is written once and amortized over all table entries, so it makes sense to write a careful test with good error messages. Table driven testing is not a tool, package or anything else, it's just a way and perspective to write cleaner tests.","title":"Introduction"},{"location":"TableDrivenTests/#example-of-a-table-driven-test","text":"Here is a good example from the testing code for the fmt package ( http://golang.org/pkg/fmt/ ): var flagtests = [] struct { in string out string }{ { \"%a\" , \"[%a]\" }, { \"%-a\" , \"[%-a]\" }, { \"%+a\" , \"[%+a]\" }, { \"%#a\" , \"[%#a]\" }, { \"% a\" , \"[% a]\" }, { \"%0a\" , \"[%0a]\" }, { \"%1.2a\" , \"[%1.2a]\" }, { \"%-1.2a\" , \"[%-1.2a]\" }, { \"%+1.2a\" , \"[%+1.2a]\" }, { \"%-+1.2a\" , \"[%+-1.2a]\" }, { \"%-+1.2abc\" , \"[%+-1.2a]bc\" }, { \"%-1.2abc\" , \"[%-1.2a]bc\" }, } func TestFlagParser ( t * testing . T ) { var flagprinter flagPrinter for _ , tt := range flagtests { t . Run ( tt . in , func ( t * testing . T ) { s := Sprintf ( tt . in , & flagprinter ) if s != tt . out { t . Errorf ( \"got %q, want %q\" , s , tt . out ) } }) } } Note the detailed error message provided with t.Errorf : its result and expected result are provided; the input is the subtest name. When the test fails it is immediately obvious which test failed and why, even without having to read the test code. A t.Errorf call is not an assertion. The test continues even after an error is logged. For example, when testing something with integer input, it is worth knowing that the function fails for all inputs, or only for odd inputs, or for powers of two.","title":"Example of a table driven test"},{"location":"TableDrivenTests/#parallel-testing","text":"Parallelizing table tests is simple, but requires precision to avoid bugs. Please note closely the three changes below, especially the re-declaration of tt package main import ( \"testing\" ) func TestTLog ( t * testing . T ) { t . Parallel () // marks TLog as capable of running in parallel with other tests tests := [] struct { name string }{ { \"test 1\" }, { \"test 2\" }, { \"test 3\" }, { \"test 4\" }, } for _ , tt := range tests { tt := tt // NOTE: https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables t . Run ( tt . name , func ( t * testing . T ) { t . Parallel () // marks each test case as capable of running in parallel with each other t . Log ( tt . name ) }) } }","title":"Parallel Testing"},{"location":"TableDrivenTests/#references","text":"https://golang.org/doc/code.html#Testing https://golang.org/doc/faq#assertions https://golang.org/doc/faq#testing_framework https://golang.org/pkg/testing/","title":"References"},{"location":"TargetSpecific/","text":"Target-Specific Code Sometimes, for performance or compatibility reasons, custom code needs to be written for specific GOARCH and GOOS targets. This page presents some best practices to adopt in that case. It is a required policy for crypto packages as of April 2019. Minimize code in tagged files. As much code as possible should build for every target. In particular, the generic Go implementation must build also for targets that have an optimized implementation . This is critical for testing the optimized code against the generic Go, and makes it quicker to notice some build failures. The linker will drop unused code from final binaries. Name files after their tags , like poly1305_amd64.go . Remember that if a file ends in _$GOARCH.go , that counts as a build tag. _noasm.go is also a good suffix. No exported functions in tagged files. Exported functions define the public API and its documentation, which must be the same across all targets. Having exported functions repeated in each target-specific file makes it likely for them to get out of sync. The mid-stack inliner will probably take care of some of the performance cost. Test all available implementations. Running go test on a target that has an optimized implementation should test both the generic and the optimized code. You can use sub-tests for this. Ideally, benchmarks too. Write comparative test. There should be a test which runs the two implementations for random or edge inputs, and compares the results. As #19109 progresses, these should be fuzz tests. Tip: you can test that your code and tests compile for a target easily by running e.g. GOARCH=arm64 go test -c . Example poly1305.go package poly1305 // Sum generates an authenticator for m using a one-time key and puts the // 16-byte result into out. Authenticating two different messages with the same // key allows an attacker to forge messages at will. func Sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { sum ( out , m , key ) } func sumGeneric ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { // ... } poly1305_amd64.go // +build gc,!purego package poly1305 //go:noescape func sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) poly1305_amd64.s // +build gc,!purego // func sum(out *[16]byte, m []byte, key *[32]byte) TEXT \u00b7sum(SB), $0-128 // ... poly1305_noasm.go // +build !amd64 !gc purego package poly1305 func sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { sumGeneric ( out , m , key ) } poly1305_test.go package poly1305 import \"testing\" func testSum ( t * testing . T , sum func ( tag * [ 16 ] byte , msg [] byte , key * [ 32 ] byte )) { // ... } func TestSum ( t * testing . T ) { t . Run ( \"Generic\" , func ( t * testing . T ) { testSum ( t , sumGeneric ) }) t . Run ( \"Native\" , func ( t * testing . T ) { testSum ( t , sum ) }) } // TestSumCompare checks the output of sum against sumGeneric. func TestSumCompare ( t * testing . T ) { // ... } For more complete examples see the x/crypto/poly1305 and x/crypto/salsa20/salsa packages. Note that packages in the standard library (as opposed to modules like golang.org/x/crypto) do not use the gc and purego build tags.","title":"TargetSpecific"},{"location":"TargetSpecific/#target-specific-code","text":"Sometimes, for performance or compatibility reasons, custom code needs to be written for specific GOARCH and GOOS targets. This page presents some best practices to adopt in that case. It is a required policy for crypto packages as of April 2019. Minimize code in tagged files. As much code as possible should build for every target. In particular, the generic Go implementation must build also for targets that have an optimized implementation . This is critical for testing the optimized code against the generic Go, and makes it quicker to notice some build failures. The linker will drop unused code from final binaries. Name files after their tags , like poly1305_amd64.go . Remember that if a file ends in _$GOARCH.go , that counts as a build tag. _noasm.go is also a good suffix. No exported functions in tagged files. Exported functions define the public API and its documentation, which must be the same across all targets. Having exported functions repeated in each target-specific file makes it likely for them to get out of sync. The mid-stack inliner will probably take care of some of the performance cost. Test all available implementations. Running go test on a target that has an optimized implementation should test both the generic and the optimized code. You can use sub-tests for this. Ideally, benchmarks too. Write comparative test. There should be a test which runs the two implementations for random or edge inputs, and compares the results. As #19109 progresses, these should be fuzz tests. Tip: you can test that your code and tests compile for a target easily by running e.g. GOARCH=arm64 go test -c .","title":"Target-Specific Code"},{"location":"TargetSpecific/#example","text":"poly1305.go package poly1305 // Sum generates an authenticator for m using a one-time key and puts the // 16-byte result into out. Authenticating two different messages with the same // key allows an attacker to forge messages at will. func Sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { sum ( out , m , key ) } func sumGeneric ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { // ... } poly1305_amd64.go // +build gc,!purego package poly1305 //go:noescape func sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) poly1305_amd64.s // +build gc,!purego // func sum(out *[16]byte, m []byte, key *[32]byte) TEXT \u00b7sum(SB), $0-128 // ... poly1305_noasm.go // +build !amd64 !gc purego package poly1305 func sum ( out * [ 16 ] byte , m [] byte , key * [ 32 ] byte ) { sumGeneric ( out , m , key ) } poly1305_test.go package poly1305 import \"testing\" func testSum ( t * testing . T , sum func ( tag * [ 16 ] byte , msg [] byte , key * [ 32 ] byte )) { // ... } func TestSum ( t * testing . T ) { t . Run ( \"Generic\" , func ( t * testing . T ) { testSum ( t , sumGeneric ) }) t . Run ( \"Native\" , func ( t * testing . T ) { testSum ( t , sum ) }) } // TestSumCompare checks the output of sum against sumGeneric. func TestSumCompare ( t * testing . T ) { // ... } For more complete examples see the x/crypto/poly1305 and x/crypto/salsa20/salsa packages. Note that packages in the standard library (as opposed to modules like golang.org/x/crypto) do not use the gc and purego build tags.","title":"Example"},{"location":"TestComments/","text":"Go Test Comments This page is a supplement to Go Code Review Comments , but is targeted specifically to test code. Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars. Assert Libraries Avoid the use of 'assert' libraries to help your tests. Go developers arriving from xUnit frameworks often want to write code like: assert . isNotNil ( t , \"obj\" , obj ) assert . stringEq ( t , \"obj.Type\" , obj . Type , \"blogPost\" ) assert . intEq ( t , \"obj.Comments\" , obj . Comments , 2 ) assert . stringNotEq ( t , \"obj.Body\" , obj . Body , \"\" ) but this either stops the test early (if assert calls t.Fatalf or panic ) or omits interesting information about what the test got right. It also forces the assert package to create a whole new sub-language instead of reusing the existing programming language (Go itself). Go has good support for printing structures, so a better way to write this code is: if obj == nil || obj . Type != \"blogPost\" || obj . Comments != 2 || obj . Body == \"\" { t . Errorf ( \"AddPost() = %+v\" , obj ) } Assert libraries make it too easy to write imprecise tests and inevitably end up duplicating features already in the language, like expression evaluation, comparisons, sometimes even more. Strive to write tests that are precise both about what went wrong and what went right, and make use of Go itself instead of creating a mini-language inside Go. Choose Human-Readable Subtest Names When you use t.Run to create a subtest, the first argument is used as a descriptive name for the test. To ensure that test results are legible to humans reading the logs, choose subtest names that will remain useful and readable after escaping. (The test runnner replaces spaces with underscores, and it escapes non-printing characters). To identify the inputs , use t.Log in the body of the subtest or include them in the test's failure messages, where they won't be escaped by the test runner. Compare Full Structures If your function returns a struct, don't write test code that performs an individual comparison for each field of the struct. Instead, construct the struct that you're expecting your function to return, and compare in one shot using diffs or deep comparisons . The same rule applies to arrays and maps. If your struct needs to be compared for approximate equality or some other kind of semantic equality, or it contains fields that cannot be compared for equality (e.g. if one of the fields is an io.Reader ), tweaking a cmp.Diff or cmp.Equal comparison with cmpopts options such as cmpopts.IgnoreInterfaces may meet your needs ( example ); otherwise, this technique just won't work, so do whatever works. If your function returns multiple return values, you don't need to wrap those in a struct before comparing them. Just compare the return values individually and print them. Compare Stable Results Avoid comparing results that may inherently depend on output stability of some external package that you do not control. Instead, the test should compare on semantically relevant information that is stable and resistent to changes in your dependencies. For functionality that returns a formatted string or serialized bytes, it is generally not safe to assume that the output is stable. For example, json.Marshal makes no guarantee about the exact bytes that it may emit. It has the freedom to change (and has changed in the past) the output. Tests that perform string equality on the exact JSON string may break if the json package changes how it serializes the bytes. Instead, a more robust test would parse the contents of the JSON string and ensure that it is semantically equivalent to some expected data structure. Equality Comparison and Diffs The == operator evaluates equality using the language-defined comparisons . Values it can compare include numeric, string, and pointer values and structs with fields of those values. In particular, it determines two pointers to be equal only if they point to the same variable. Use the cmp package. Use cmp.Equal for equality comparison and cmp.Diff to obtain a human-readable diff between objects. Although the cmp package is not part of the Go standard library, it is maintained by the Go team and should produce stable results across Go version updates. It is user-configurable and should serve most comparison needs. You will find older code using the standard reflect.DeepEqual function to compare complex structures. Prefer cmp for new code, and consider updating older code to use cmp where practical. reflect.DeepEqual is sensitive to changes in unexported fields and other implementation details. NOTE: The cmp package can also be used with protocol buffer messages, by including the cmp.Comparer(proto.Equal) option when comparing protocol buffer messages. Got before Want Test outputs should output the actual value that the function returned before printing the value that was expected. A usual format for printing test outputs is \" YourFunc(%v) = %v, want %v \". For diffs, directionality is less apparent, and such it is important to include a key to aid in interpreting the failure. See Print Diffs . Whichever order you use in your failure messages, you should explicitly indicate the ordering as a part of the failure message, because existing code is inconsistent about the ordering. Identify the Function In most tests, failure messages should include the name of the function that failed, even though it seems obvious from the name of the test function. Prefer: t . Errorf ( \"YourFunc(%v) = %v, want %v\" , in , got , want ) and not: t . Errorf ( \"got %v, want %v\" , got , want ) Identify the Input In most tests, your test failure messages should include the function inputs if they are short. If the relevant properties of the inputs are not obvious (for example, because the inputs are large or opaque), you should name your test cases with a description of what's being tested, and print the description as part of your error message. Do not use the index of the test in the test table as a substitute for naming your tests or printing the inputs. Nobody wants to go through your test table and count the entries in order to figure out which test case is failing. Keep Going Even after your test cases encounter a failure, they should keep going for as long as possible in order to print out all of the failed checks in a single run. This way, someone who's fixing the failing test doesn't have to play whac-a-mole, fixing one bug and then re-running the test to find the next bug. On a practical level, prefer calling t.Error over t.Fatal . When comparing several different properties of a function's output, use t.Error for each of those comparisions. t.Fatal is usually only appropriate when some piece of test setup fails, without which you cannot run the test at all. In a table-driven test, t.Fatal is appropriate for failures that set up the whole test function before the test loop. Failures that affect a single entry in the test table, which make it impossible to continue with that entry, should be reported as follows: If you're not using t.Run subtests, you should use t.Error followed by a continue statement to move on to the next table entry. If you're using subtests (and you're inside a call to t.Run ), then t.Fatal ends the current subtest and allows your test case to progress to the next subtest, so use t.Fatal . Mark Test Helpers A test helper is a function that performs a setup or teardown task, such as constructing an input message, that does not depend on the code under test. If you pass a *testing.T , call t.Helper to attribute failures in the test helper to the line where the helper is called. func TestSomeFunction ( t * testing . T ) { golden := readFile ( t , \"testdata/golden.txt\" ) // ... } func readFile ( t * testing . T , filename string ) string { t . Helper () contents , err := ioutil . ReadFile ( filename ) if err != nil { t . Fatal ( err ) } return string ( contents ) } Do not use this pattern when it obscures the connection between a test failure and the conditions that led to it. Specifically, t.Helper should not be used to implement assert libraries. Print Diffs If your function returns large output then it can be hard for someone reading the failure message to find the differences when your test fails. Instead of printing both the returned value and the wanted value, make a diff. Add some text to your failure message explaining the direction of the diff. Something like \" diff -want +got \" is good when you're using the cmp package (if you pass (want, got) to the function), because the - and + that you add to your format string will match the + and - that actually appear at the beginning of the diff lines. The diff will span multiple lines, so you should print a newline before you print the diff. Table-Driven Tests vs Multiple Test Functions Table-driven tests should be used whenever many different test cases can be tested using similar testing logic, for example when testing whether the actual output of a function is equal to the expected output [example] , or when testing whether the outputs of a function always conform to the same set of invariants. When some test cases need to be checked using different logic from other test cases, it is more appropriate to write multiple test functions. The logic of your test code can get difficult to understand when every entry in a table has to be subjected to multiple kinds of conditional logic to do the right kind of output check for the right kind of input. If they have different logic but identical setup, a sequence of subtests within a single test function might also make sense. You can combine table-driven tests with multiple test functions. For example, if you're testing that a function's non-error output exactly matches the expected output, and you're also testing that the function returns some non-nil error when it gets invalid input, then the clearest unit tests can be achieved by writing two separate table-driven test functions \u2014 one for normal non-error outputs, and one for error outputs. Test Error Semantics When a unit test performs string comparisons or uses reflect.DeepEqual to check that particular kinds of errors are returned for particular inputs, you may find that your tests are fragile if you have to reword any of those error messages in the future. Since this has the potential to turn your unit test into a change detector , don't use string comparison to check what type of error your function returns. It's OK to use string comparisons to check that error messages coming from the package under test satisfy some property, for example, that it includes the parameter name. If you care about testing the exact type of error that your functions return, you should separate the error string intended for human eyes from the structure that is exposed for programmatic use. In this case, you should avoid using fmt.Errorf , which tends to destroy semantic error information. Many people who write APIs don't care exactly what kinds of errors their API returns for different inputs. If your API is like this, then it is sufficient to create error messages using fmt.Errorf , and then in the unit test, test only whether the error was non-nil when you expected an error.","title":"TestComments"},{"location":"TestComments/#go-test-comments","text":"This page is a supplement to Go Code Review Comments , but is targeted specifically to test code. Please discuss changes before editing this page , even minor ones. Many people have opinions and this is not the place for edit wars.","title":"Go Test Comments"},{"location":"TestComments/#assert-libraries","text":"Avoid the use of 'assert' libraries to help your tests. Go developers arriving from xUnit frameworks often want to write code like: assert . isNotNil ( t , \"obj\" , obj ) assert . stringEq ( t , \"obj.Type\" , obj . Type , \"blogPost\" ) assert . intEq ( t , \"obj.Comments\" , obj . Comments , 2 ) assert . stringNotEq ( t , \"obj.Body\" , obj . Body , \"\" ) but this either stops the test early (if assert calls t.Fatalf or panic ) or omits interesting information about what the test got right. It also forces the assert package to create a whole new sub-language instead of reusing the existing programming language (Go itself). Go has good support for printing structures, so a better way to write this code is: if obj == nil || obj . Type != \"blogPost\" || obj . Comments != 2 || obj . Body == \"\" { t . Errorf ( \"AddPost() = %+v\" , obj ) } Assert libraries make it too easy to write imprecise tests and inevitably end up duplicating features already in the language, like expression evaluation, comparisons, sometimes even more. Strive to write tests that are precise both about what went wrong and what went right, and make use of Go itself instead of creating a mini-language inside Go.","title":"Assert Libraries"},{"location":"TestComments/#choose-human-readable-subtest-names","text":"When you use t.Run to create a subtest, the first argument is used as a descriptive name for the test. To ensure that test results are legible to humans reading the logs, choose subtest names that will remain useful and readable after escaping. (The test runnner replaces spaces with underscores, and it escapes non-printing characters). To identify the inputs , use t.Log in the body of the subtest or include them in the test's failure messages, where they won't be escaped by the test runner.","title":"Choose Human-Readable Subtest Names"},{"location":"TestComments/#compare-full-structures","text":"If your function returns a struct, don't write test code that performs an individual comparison for each field of the struct. Instead, construct the struct that you're expecting your function to return, and compare in one shot using diffs or deep comparisons . The same rule applies to arrays and maps. If your struct needs to be compared for approximate equality or some other kind of semantic equality, or it contains fields that cannot be compared for equality (e.g. if one of the fields is an io.Reader ), tweaking a cmp.Diff or cmp.Equal comparison with cmpopts options such as cmpopts.IgnoreInterfaces may meet your needs ( example ); otherwise, this technique just won't work, so do whatever works. If your function returns multiple return values, you don't need to wrap those in a struct before comparing them. Just compare the return values individually and print them.","title":"Compare Full Structures"},{"location":"TestComments/#compare-stable-results","text":"Avoid comparing results that may inherently depend on output stability of some external package that you do not control. Instead, the test should compare on semantically relevant information that is stable and resistent to changes in your dependencies. For functionality that returns a formatted string or serialized bytes, it is generally not safe to assume that the output is stable. For example, json.Marshal makes no guarantee about the exact bytes that it may emit. It has the freedom to change (and has changed in the past) the output. Tests that perform string equality on the exact JSON string may break if the json package changes how it serializes the bytes. Instead, a more robust test would parse the contents of the JSON string and ensure that it is semantically equivalent to some expected data structure.","title":"Compare Stable Results"},{"location":"TestComments/#equality-comparison-and-diffs","text":"The == operator evaluates equality using the language-defined comparisons . Values it can compare include numeric, string, and pointer values and structs with fields of those values. In particular, it determines two pointers to be equal only if they point to the same variable. Use the cmp package. Use cmp.Equal for equality comparison and cmp.Diff to obtain a human-readable diff between objects. Although the cmp package is not part of the Go standard library, it is maintained by the Go team and should produce stable results across Go version updates. It is user-configurable and should serve most comparison needs. You will find older code using the standard reflect.DeepEqual function to compare complex structures. Prefer cmp for new code, and consider updating older code to use cmp where practical. reflect.DeepEqual is sensitive to changes in unexported fields and other implementation details. NOTE: The cmp package can also be used with protocol buffer messages, by including the cmp.Comparer(proto.Equal) option when comparing protocol buffer messages.","title":"Equality Comparison and Diffs"},{"location":"TestComments/#got-before-want","text":"Test outputs should output the actual value that the function returned before printing the value that was expected. A usual format for printing test outputs is \" YourFunc(%v) = %v, want %v \". For diffs, directionality is less apparent, and such it is important to include a key to aid in interpreting the failure. See Print Diffs . Whichever order you use in your failure messages, you should explicitly indicate the ordering as a part of the failure message, because existing code is inconsistent about the ordering.","title":"Got before Want"},{"location":"TestComments/#identify-the-function","text":"In most tests, failure messages should include the name of the function that failed, even though it seems obvious from the name of the test function. Prefer: t . Errorf ( \"YourFunc(%v) = %v, want %v\" , in , got , want ) and not: t . Errorf ( \"got %v, want %v\" , got , want )","title":"Identify the Function"},{"location":"TestComments/#identify-the-input","text":"In most tests, your test failure messages should include the function inputs if they are short. If the relevant properties of the inputs are not obvious (for example, because the inputs are large or opaque), you should name your test cases with a description of what's being tested, and print the description as part of your error message. Do not use the index of the test in the test table as a substitute for naming your tests or printing the inputs. Nobody wants to go through your test table and count the entries in order to figure out which test case is failing.","title":"Identify the Input"},{"location":"TestComments/#keep-going","text":"Even after your test cases encounter a failure, they should keep going for as long as possible in order to print out all of the failed checks in a single run. This way, someone who's fixing the failing test doesn't have to play whac-a-mole, fixing one bug and then re-running the test to find the next bug. On a practical level, prefer calling t.Error over t.Fatal . When comparing several different properties of a function's output, use t.Error for each of those comparisions. t.Fatal is usually only appropriate when some piece of test setup fails, without which you cannot run the test at all. In a table-driven test, t.Fatal is appropriate for failures that set up the whole test function before the test loop. Failures that affect a single entry in the test table, which make it impossible to continue with that entry, should be reported as follows: If you're not using t.Run subtests, you should use t.Error followed by a continue statement to move on to the next table entry. If you're using subtests (and you're inside a call to t.Run ), then t.Fatal ends the current subtest and allows your test case to progress to the next subtest, so use t.Fatal .","title":"Keep Going"},{"location":"TestComments/#mark-test-helpers","text":"A test helper is a function that performs a setup or teardown task, such as constructing an input message, that does not depend on the code under test. If you pass a *testing.T , call t.Helper to attribute failures in the test helper to the line where the helper is called. func TestSomeFunction ( t * testing . T ) { golden := readFile ( t , \"testdata/golden.txt\" ) // ... } func readFile ( t * testing . T , filename string ) string { t . Helper () contents , err := ioutil . ReadFile ( filename ) if err != nil { t . Fatal ( err ) } return string ( contents ) } Do not use this pattern when it obscures the connection between a test failure and the conditions that led to it. Specifically, t.Helper should not be used to implement assert libraries.","title":"Mark Test Helpers"},{"location":"TestComments/#print-diffs","text":"If your function returns large output then it can be hard for someone reading the failure message to find the differences when your test fails. Instead of printing both the returned value and the wanted value, make a diff. Add some text to your failure message explaining the direction of the diff. Something like \" diff -want +got \" is good when you're using the cmp package (if you pass (want, got) to the function), because the - and + that you add to your format string will match the + and - that actually appear at the beginning of the diff lines. The diff will span multiple lines, so you should print a newline before you print the diff.","title":"Print Diffs"},{"location":"TestComments/#table-driven-tests-vs-multiple-test-functions","text":"Table-driven tests should be used whenever many different test cases can be tested using similar testing logic, for example when testing whether the actual output of a function is equal to the expected output [example] , or when testing whether the outputs of a function always conform to the same set of invariants. When some test cases need to be checked using different logic from other test cases, it is more appropriate to write multiple test functions. The logic of your test code can get difficult to understand when every entry in a table has to be subjected to multiple kinds of conditional logic to do the right kind of output check for the right kind of input. If they have different logic but identical setup, a sequence of subtests within a single test function might also make sense. You can combine table-driven tests with multiple test functions. For example, if you're testing that a function's non-error output exactly matches the expected output, and you're also testing that the function returns some non-nil error when it gets invalid input, then the clearest unit tests can be achieved by writing two separate table-driven test functions \u2014 one for normal non-error outputs, and one for error outputs.","title":"Table-Driven Tests vs Multiple Test Functions"},{"location":"TestComments/#test-error-semantics","text":"When a unit test performs string comparisons or uses reflect.DeepEqual to check that particular kinds of errors are returned for particular inputs, you may find that your tests are fragile if you have to reword any of those error messages in the future. Since this has the potential to turn your unit test into a change detector , don't use string comparison to check what type of error your function returns. It's OK to use string comparisons to check that error messages coming from the package under test satisfy some property, for example, that it includes the parameter name. If you care about testing the exact type of error that your functions return, you should separate the error string intended for human eyes from the structure that is exposed for programmatic use. In this case, you should avoid using fmt.Errorf , which tends to destroy semantic error information. Many people who write APIs don't care exactly what kinds of errors their API returns for different inputs. If your API is like this, then it is sufficient to create error messages using fmt.Errorf , and then in the unit test, test only whether the error was non-nil when you expected an error.","title":"Test Error Semantics"},{"location":"Timeouts/","text":"Timeouts and Deadlines To abandon synchronous calls that run too long, use the select statement with time.After: import \"time\" c := make ( chan error , 1 ) go func () { c <- client . Call ( \"Service.Method\" , args , & reply ) } () select { case err := <- c : // use err and reply case <- time . After ( timeoutNanoseconds ): // call timed out } Note that the channel c has a buffer size of 1. If it were an unbuffered channel and the client.Call method took more than timeoutNanoseconds , the channel send would block forever and the goroutine would never be destroyed. References time.After: http://golang.org/pkg/time/#After select: http://golang.org/doc/go_spec.html#Select_statements blog post: http://blog.golang.org/2010/09/go-concurrency-patterns-timing-out-and.html","title":"Timeouts"},{"location":"Timeouts/#timeouts-and-deadlines","text":"To abandon synchronous calls that run too long, use the select statement with time.After: import \"time\" c := make ( chan error , 1 ) go func () { c <- client . Call ( \"Service.Method\" , args , & reply ) } () select { case err := <- c : // use err and reply case <- time . After ( timeoutNanoseconds ): // call timed out } Note that the channel c has a buffer size of 1. If it were an unbuffered channel and the client.Call method took more than timeoutNanoseconds , the channel send would block forever and the goroutine would never be destroyed.","title":"Timeouts and Deadlines"},{"location":"Timeouts/#references","text":"time.After: http://golang.org/pkg/time/#After select: http://golang.org/doc/go_spec.html#Select_statements blog post: http://blog.golang.org/2010/09/go-concurrency-patterns-timing-out-and.html","title":"References"},{"location":"Training/","text":"Commercial providers of Go training On-line Go Mastery - Interactive browser-based coding course focused on teaching Go's quirks and syntax Golang Online Courses - A collection of Go online courses from several providers Mastering Go Programming - A comprehensive Go video training course EXLskills - A$AP Learn Go - Fast-paced free and open course for getting going with Go Golang - From Beginner to Advanced - Romeo Mihalcea Golang Tutorials - Sathish VJ - A free online class. Learn Go - Codementor.io - Beginner level online class. Learning to Program in Go - Chris Hawkes - Free video tutorial for beginner Go programming. Go - Progate.com - Go fundamentals for absolute beginners. Go Language Programming Practical Basics Tutorial - Sentdex - Free video tutorial for Go beginners by Sentdex. O'Reilly Go Fundamentals - Video training series. Pluralsight.com - Offers around 20 classes from beginner to advanced levels. Master Go - A paid online video course on Go for developers Learn to Create Web Applications using Go - A paid online video course and book about Web programming with Go Golang tutorial - Learn Go from the best online golang tutorials submitted & voted by the golang programming community. Ultimate Go Live Lessons - This is Ardan Labs classroom Go training on video. Go: The Complete Bootcamp Course - Learn to build real-world and idiomatic Go programs with animated video lectures and hands-on exercises Gopher Guides TV - Free and Subscription based video learning from Mark Bates & Cory LaNou from Go 101 to advanced profiling and more. Learn Go with Tests - Free Test driven development (TDD) based learning of Golang. Start writing robust, well-tested systems in Go Silver Cloud Training - Practical, targeted courses teaching both the Go language and how to apply it to solve real-world problems Hands-on Microservices with Go and MongoDB - Highly scalable and performant microservices using Go and MongoDB Classroom and In-Person Ardan Labs - Offering customized on-site live training classes. Bitfield Consulting - John Arundel offers remote training and mentoring in Go for individuals and companies. Boss Sauce Creative - Personalized or track-based Go training for teams. Brian Ketelsen - In-person, remote, and online training classes for individuals and companies. DevelopIntelligence: Golang Intro + Advanced - Custom in-person and virtual training for corporate clients. Golang At Speed - Generic or personalized Go training. On-site or hosted off-site. Grasp the long-tail of Golang learning.... the gotchas and the quirky idioms.. faster. Gopher Guides - Customized In-person, remote, and online training classes. Training for Developers by Developers. Lead Instructors: Mark Bates , Cory LaNou Shiju Varghese - On-site class room training on Go, and consulting on building distributed systems and Microservices with Go, in India. Magesh Kuppan - Classroom & Online training on Go Programming & Building Microservices in Go kkoehler - In-Person class trainings for Go in Germany, Austria and Swiss","title":"Training"},{"location":"Training/#on-line","text":"Go Mastery - Interactive browser-based coding course focused on teaching Go's quirks and syntax Golang Online Courses - A collection of Go online courses from several providers Mastering Go Programming - A comprehensive Go video training course EXLskills - A$AP Learn Go - Fast-paced free and open course for getting going with Go Golang - From Beginner to Advanced - Romeo Mihalcea Golang Tutorials - Sathish VJ - A free online class. Learn Go - Codementor.io - Beginner level online class. Learning to Program in Go - Chris Hawkes - Free video tutorial for beginner Go programming. Go - Progate.com - Go fundamentals for absolute beginners. Go Language Programming Practical Basics Tutorial - Sentdex - Free video tutorial for Go beginners by Sentdex. O'Reilly Go Fundamentals - Video training series. Pluralsight.com - Offers around 20 classes from beginner to advanced levels. Master Go - A paid online video course on Go for developers Learn to Create Web Applications using Go - A paid online video course and book about Web programming with Go Golang tutorial - Learn Go from the best online golang tutorials submitted & voted by the golang programming community. Ultimate Go Live Lessons - This is Ardan Labs classroom Go training on video. Go: The Complete Bootcamp Course - Learn to build real-world and idiomatic Go programs with animated video lectures and hands-on exercises Gopher Guides TV - Free and Subscription based video learning from Mark Bates & Cory LaNou from Go 101 to advanced profiling and more. Learn Go with Tests - Free Test driven development (TDD) based learning of Golang. Start writing robust, well-tested systems in Go Silver Cloud Training - Practical, targeted courses teaching both the Go language and how to apply it to solve real-world problems Hands-on Microservices with Go and MongoDB - Highly scalable and performant microservices using Go and MongoDB","title":"On-line"},{"location":"Training/#classroom-and-in-person","text":"Ardan Labs - Offering customized on-site live training classes. Bitfield Consulting - John Arundel offers remote training and mentoring in Go for individuals and companies. Boss Sauce Creative - Personalized or track-based Go training for teams. Brian Ketelsen - In-person, remote, and online training classes for individuals and companies. DevelopIntelligence: Golang Intro + Advanced - Custom in-person and virtual training for corporate clients. Golang At Speed - Generic or personalized Go training. On-site or hosted off-site. Grasp the long-tail of Golang learning.... the gotchas and the quirky idioms.. faster. Gopher Guides - Customized In-person, remote, and online training classes. Training for Developers by Developers. Lead Instructors: Mark Bates , Cory LaNou Shiju Varghese - On-site class room training on Go, and consulting on building distributed systems and Microservices with Go, in India. Magesh Kuppan - Classroom & Online training on Go Programming & Building Microservices in Go kkoehler - In-Person class trainings for Go in Germany, Austria and Swiss","title":"Classroom and In-Person"},{"location":"Ubuntu/","text":"The Go project's official download page is at https://golang.org/dl . After downloading a binary release suitable for your system, you can install go by following the official installation instructions at https://golang.org/doc/install . There are some other options for Debian based systems like Ubuntu. These packages were not created by the Go project, and we don't support them, but they may be useful for you. If you're using Ubuntu 18.04 LTS or 20.04 LTS on amd64, arm64 or armhf, then you can use the longsleep/golang-backports PPA and update to Go 1.16. $ sudo add-apt-repository ppa:longsleep/golang-backports $ sudo apt update $ sudo apt install golang-go Note that golang-go installs latest Go as default Go. If you do not want that, install golang-1.16 instead and use the binaries from /usr/lib/go-1.16/bin . If that's too new for you, try: (Ubuntu 19.04 max) $ sudo add-apt-repository ppa:gophers/archive $ sudo apt update $ sudo apt install golang-1.11-go Note that golang-1.11-go puts binaries in /usr/lib/go-1.11/bin . If you want them on your PATH, you need to make that change yourself. Using snaps also works quite well: $ sudo snap install --classic go A restart may or may not be required for the command to be recognized depending on your system. Using getgo (proof-of-concept command-line installer for Go): $ curl -LO https://get.golang.org/$(uname)/go_installer && chmod +x go_installer && ./go_installer && rm go_installer Getgo will install the Go distribution (tools & stdlib) to \"/.go\" inside your home directory.","title":"Ubuntu"},{"location":"WebAccessibilityResourcesAndTips/","text":"Accessibility or \"a11y\" is an increasingly important topic in web development. It is important to Go because many Go tools and resources use web technology, like godoc. Ensuring that these tools are accessible ensures that more people can use them and that more people can use Go. Accessibility is a large topic that ranges from the merely esoteric to the excruciatingly abstruse. There are, however, a number of simple rules of thumb to follow that greatly reduce the chances of creating an inaccessible page by accident: - Prefer semantic markup. The native html elements have a great deal of accessibility baked in with no need to turn anything on or turn anything off. If you have a list of things use ul or ol even if you do not want it to be displayed as a list. The extra CSS is worth it. - When using headers ( h1 - h6 ) never skip a level and make sure they nest logically so that, for example, an h4 is a logical subsection of the previous h3 . Screen readers use these as navigational landmarks, similar to a table of contents. - Avoid layouts that work against the source order of the document. It's very easy to rearrange element with flexbox and grid but when you do the focus order remains unchanged. Someone navigating the site by keyboard will jump from place to place seemingly at random, making it very hard to follow what's going on. - Ensure sufficient color contrast. Not everyone has perfect eyes or high quality displays. Either can make it difficult to tell where low-contrast content starts and stops. https://leaverou.github.io/contrast-ratio/ - Ensure the page is usable without color. There are many kinds of color deficiency. Some like red-green color blindness are common. Others can be quite rate. The best way to make sure everyone gets the same information is to encode information in both shape and color. For example, if you're making a dashboard for a test runner do not just have a green circle for passed and a red circle for failed: have a green check mark for passed and a red X for failed. - Have clear hover and focus styles to let the user know that an element is \"clickable\". As with the above, this should be clear even without color. - Make sure nothing breaks as you zoom in the page to 200%. Browsers are really good about handling this but are not always perfect. Users with poor vision will appreciate the effort. - Make sure the page is usable entirely by keyboard. Certain medical conditions make it hard to use a mouse or trackpad and a lot of special assistive software and hardware work by creating synthetic key events. Be very careful about elements hidden off page as they will remain in the focus order without special effort. - Ensure all non-textual elements have appropriate alternative text. (If a non-textual item is purely decorative the appropriate alternative text is the empty string.) - Avoid writing in ALL CAPS. Screen readers will always read this as an acronym and spell out each letter ( text-transform: uppercase is fine, however, and will just add emphasis to the voice). - There are a lot of tools to help find accessibility problems (some listed below) but keep in mind that these are just linters and there are limits to static analysis. They sometimes have false positives and often have false negatives. Also keep in mind that what they are checking is the page as it appears when you run the tool. Useful Browser Extensions Firefox Fangs is a screen reader emulator. It dumps all the info a screen reader would announce at once as annotated text, allowing a very quick review. Chrome Chrome has some quite useful built in a11y tools, but you need to enable them by going to settings > experiments in the dev tools and checking \"Accessibility Inspection\". Google's Accessibility Developer Tools Largely integrated into the Chrome dev tools but still has some features not yet included like access to the full Accessibility Tree. aXe Decent static analyzer. It's the basis for the accessibility audit in Chrome Dev tools but this extension includes much more information and runs more tests. (Also available for Firefox, but has much better integration in Chrome). ChromeVox A full in-browser screen reader. (You will need to configure keyboard shortcuts to be able to turn it off when not in use, and you may also need to disable the extension completely when not in use as it can do some annoying thing even when not active). High Contrast This extension is used by people with special contrast needs. It's a good idea to run a page through each filter (and test any hover/focus states) to make sure that everything is still visible. Siteimprove Accessibility Checker This is the best static auditor. The extension will ask you to register for a newsletter on first use, but you do not have to\u2014just skip it. Spectrum Simulates various kinds of color blindness to make sure nothing on the page becomes invisible or hard to distinguish when read by a user with that specific medical condition. (For some reason this does not seem to work immediately after installation but it will after a few retries). Funkify An easy to use disability simulator. Further Reading http://a11yproject.com/ https://inclusive-components.design/ https://accessibility.blog.gov.uk/ https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g","title":"WebAccessibilityResourcesAndTips"},{"location":"WebAccessibilityResourcesAndTips/#useful-browser-extensions","text":"","title":"Useful Browser Extensions"},{"location":"WebAccessibilityResourcesAndTips/#firefox","text":"Fangs is a screen reader emulator. It dumps all the info a screen reader would announce at once as annotated text, allowing a very quick review.","title":"Firefox"},{"location":"WebAccessibilityResourcesAndTips/#chrome","text":"Chrome has some quite useful built in a11y tools, but you need to enable them by going to settings > experiments in the dev tools and checking \"Accessibility Inspection\". Google's Accessibility Developer Tools Largely integrated into the Chrome dev tools but still has some features not yet included like access to the full Accessibility Tree. aXe Decent static analyzer. It's the basis for the accessibility audit in Chrome Dev tools but this extension includes much more information and runs more tests. (Also available for Firefox, but has much better integration in Chrome). ChromeVox A full in-browser screen reader. (You will need to configure keyboard shortcuts to be able to turn it off when not in use, and you may also need to disable the extension completely when not in use as it can do some annoying thing even when not active). High Contrast This extension is used by people with special contrast needs. It's a good idea to run a page through each filter (and test any hover/focus states) to make sure that everything is still visible. Siteimprove Accessibility Checker This is the best static auditor. The extension will ask you to register for a newsletter on first use, but you do not have to\u2014just skip it. Spectrum Simulates various kinds of color blindness to make sure nothing on the page becomes invisible or hard to distinguish when read by a user with that specific medical condition. (For some reason this does not seem to work immediately after installation but it will after a few retries). Funkify An easy to use disability simulator.","title":"Chrome"},{"location":"WebAccessibilityResourcesAndTips/#further-reading","text":"http://a11yproject.com/ https://inclusive-components.design/ https://accessibility.blog.gov.uk/ https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g","title":"Further Reading"},{"location":"WebAssembly/","text":"WebAssembly Introduction Go 1.11 added an experimental port to WebAssembly. Go 1.12 has improved some parts of it, with further improvements expected in Go 1.13. WebAssembly is described on its home page as: WebAssembly (abbreviated Wasm ) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications. If you\u2019re new to WebAssembly read the Getting Started section, watch some of the Go WebAssembly talks , then take a look at the Further examples below. Getting Started This page assumes a functional Go 1.11 or newer installation. For troubleshooting, see the Install Troubleshooting page. To compile a basic Go package for the web: package main import \"fmt\" func main () { fmt . Println ( \"Hello, WebAssembly!\" ) } Set GOOS=js and GOARCH=wasm environment variables to compile for WebAssembly: $ GOOS = js GOARCH = wasm go build -o main.wasm That will build the package and produce an executable WebAssembly module file named main.wasm. The .wasm file extension will make it easier to serve it over HTTP with the correct Content-Type header later on. Note that you can only compile main packages. Otherwise, you will get an object file that cannot be run in WebAssembly. If you have a package that you want to be able to use with WebAssembly, convert it to a main package and build a binary. To execute main.wasm in a browser, we\u2019ll also need a JavaScript support file, and a HTML page to connect everything together. Copy the JavaScript support file: $ cp \" $( go env GOROOT ) /misc/wasm/wasm_exec.js\" . Create an index.html file: <html> <head> <meta charset= \"utf-8\" /> <script src= \"wasm_exec.js\" ></script> <script> const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"main.wasm\"), go.importObject).then((result) => { go.run(result.instance); }); </script> </head> <body></body> </html> If your browser doesn\u2019t yet support WebAssembly.instantiateStreaming , you can use a polyfill . Then serve the three files ( index.html , wasm_exec.js , and main.wasm ) from a web server. For example, with goexec : # install goexec : go get - u github . com / shurcooL / goexec $ goexec 'http.ListenAndServe(`:8080`, http.FileServer(http.Dir(`.`)))' Or use your own basic HTTP server command . Note: for the goexec command to work on Unix-like systems, you must add the path environment variable for Go to your shell\u2019s profile . Go\u2019s getting started guide explains this: Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile: export PATH=$PATH:/usr/local/go/bin Note: changes made to a profile file may not apply until the next time you log into your computer Finally, navigate to http://localhost:8080/index.html , open the JavaScript debug console, and you should see the output. You can modify the program, rebuild main.wasm , and refresh to see new output. Executing WebAssembly with Node.js It\u2019s possible to execute compiled WebAssembly modules using Node.js rather than a browser, which can be useful for testing and automation. With Node installed and in your PATH , set the -exec flag to the location of go_js_wasm_exec when you execute go run or go test . By default, go_js_wasm_exec is in the misc/wasm directory of your Go installation. $ GOOS = js GOARCH = wasm go run -exec = \" $( go env GOROOT ) /misc/wasm/go_js_wasm_exec\" . Hello, WebAssembly! $ GOOS = js GOARCH = wasm go test -exec = \" $( go env GOROOT ) /misc/wasm/go_js_wasm_exec\" PASS ok example.org/my/pkg 0 .800s Adding go_js_wasm_exec to your PATH will allow go run and go test to work for js/wasm without having to manually provide the -exec flag each time: $ export PATH = \" $PATH : $( go env GOROOT ) /misc/wasm\" $ GOOS = js GOARCH = wasm go run . Hello, WebAssembly! $ GOOS = js GOARCH = wasm go test PASS ok example.org/my/pkg 0 .800s Running tests in the browser You can also use wasmbrowsertest to run tests inside your browser. It automates the job of spinning up a webserver and uses headless Chrome to run the tests inside it and relays the logs to your console. Same as before, just go get github.com/agnivade/wasmbrowsertest to get a binary. Rename that to go_js_wasm_exec and place it to your PATH $ mv $GOPATH /bin/wasmbrowsertest $GOPATH /bin/go_js_wasm_exec $ export PATH = \" $PATH : $GOPATH /bin\" $ GOOS = js GOARCH = wasm go test PASS ok example.org/my/pkg 0 .800s Alternatively, use the exec test flag. $ GOOS = js GOARCH = wasm go test -exec = \" $GOPATH /bin/wasmbrowsertest\" Go WebAssembly talks Building a Calculator with Go and WebAssembly ( Source code ) Get Going with WebAssembly Go&WebAssembly\u7b80\u4ecb - by chai2010 (Chinese) Go for frontend Interacting with the DOM See https://godoc.org/syscall/js . Also: app : A PWA-compatible, React-based framework with custom tooling. dom : A library for streamlining DOM manipulation is in development. dom : Go bindings for the JavaScript DOM APIs. domui : A pure Go framework for creating complete GUI application. gas : Components based framework for WebAssembly applications. GoWebian : A library to build pages with pure Go and add WebAssembly bindings. vert : WebAssembly interop between Go and JS values. vue : The progressive framework for WebAssembly applications. Vugu : A wasm web UI library featuring HTML layout with Go for app logic, single-file components, rapid dev and prototyping workflow. webapi : A binding generator and generated bindings for DOM, HTML, WebGL, and more. webgen : Define components in HTML and generate Go types and constructor functions for them using webapi . Canvas A new canvas drawing library - seems pretty efficient. Simple demo Configuring fetch options while using net/http You can use the net/http library to make HTTP requests from Go, and they will be converted to fetch calls. However, there isn\u2019t a direct mapping between the fetch options and the http client options. To achieve this, we have some special header values that are recognized as fetch options. They are - js.fetch:mode : An option to the Fetch API mode setting. Valid values are: \"cors\", \"no-cors\", \"same-origin\", navigate\". The default is \"same-origin\". js.fetch:credentials : An option to the Fetch API credentials setting. Valid values are: \"omit\", \"same-origin\", \"include\". The default is \"same-origin\". js.fetch:redirect : An option to the Fetch API redirect setting. Valid values are: \"follow\", \"error\", \"manual\". The default is \"follow\". So as an example, if we want to set the mode as \"cors\" while making a request, it will be something like: req , err : = http . NewRequest ( \" GET \" , \" http://localhost:8080 \" , nil ) req . Header . Add ( \" js.fetch:mode \" , \" cors \" ) if err != nil { fmt . Println ( err ) return } resp , err : = http . DefaultClient . Do ( req ) if err != nil { fmt . Println ( err ) return } defer resp . Body . Close () // handle the response Please feel free to subscribe to #26769 for more context and possibly newer information. Editor configuration Configuring GoLand and Intellij Ultimate for WebAssembly - Shows the exact steps needed for getting Wasm working in GoLand and Intellij Ultimate WebAssembly in Chrome If you run a newer version of Chrome there is a flag ( chrome://flags/#enable-webassembly-baseline ) to enable Liftoff, their new compiler, which should significantly improve load times. Further info here . Debugging WebAssembly doesn\u2019t yet have any support for debuggers, so you\u2019ll need to use the good 'ol println() approach for now to display output on the JavaScript console. An official WebAssembly Debugging Subgroup has been created to address this, with some initial investigation and proposals under way: WebAssembly Debugging Capabilities Living Standard ( source code for the doc ) DWARF for WebAssembly Target ( source code for the doc ) Please get involved and help drive this if you\u2019re interested in the Debugger side of things. Analysing the structure of a WebAssembly file WebAssembly Code Explorer is useful for visualising the structure of a WebAssembly file. Clicking on a hex value to the left will highlight the section it is part of, and the corresponding text representation on the right Clicking a line on the right will highlight the hex byte representations for it on the left Known bug(s) Go releases prior to 1.11.2 have a bug which can generate incorrect wasm code in some (rare) circumstances. If your Go code compiles to wasm without problem, but produces an error like this when run in the browser: CompileError : wasm validation error : at offset 1269295 : type mismatch : expression has type i64 but expected f64 Then you\u2019re probably hitting this error. The solution is to upgrade to Go 1.11.2 or later. Further examples General Shimmer - Image transformation in wasm using Go. Live DEMO . Video filtering - Filters for video from webcam ( source code ) HandyTools - Provide tools like base64 encoding/decoding, convert Unix time, etc (live DEMO ) Canvas (2D) GoWasm Experiments - Demonstrates working code for several common call types bouncy rainbow-mouse repulsion bumpy - Uses the 2d canvas, and a 2d physics engine. Click around on the screen to create objects then watch as gravity takes hold! arty hexy ( new ) Gomeboycolor-wasm WASM port of an experimental Gameboy Color emulator. The matching blog post contains some interesting technical insights. TinyGo canvas This is compiled with TinyGo instead of standard go, resulting in a 19.37kB (compressed) wasm file. Database TiDB-Wasm - Running TiDB, a golang database in the browser on Wasm. DEMO on running TiDB SQL statements . WebGL canvas (3D) Basic triangle ( source code ) - Creates a basic triangle in WebGL Same thing, ported to TinyGo ( source code ) - ~14kB compressed (3% of the size of mainline Go version) Rotating cube ( source code ) - Creates a rotating cube in WebGL Same thing, ported to TinyGo ( source code ) - ~23kB compressed (4% of the size of mainline Go version) Splashy ( source code ) - Click around on the screen to generate paint\u2026\u200b Reducing the size of Wasm files At present, Go generates large Wasm files, with the smallest possible size being around ~2MB. If your Go code imports libraries, this file size can increase dramatically. 10MB+ is common. There are two main ways (for now) to reduce this file size: Manually compress the .wasm file. Using gz compression reduces the ~2MB (minimum file size) example WASM file down to around 500kB. It may be better to use Zopfli to do the gzip compression, as it gives better results than gzip --best , however it does take much longer to run. Using Brotli for compression, the file sizes are markedly better than both Zopfli and gzip --best , and compression time is somewhere in between the two, too. This (new) Brotli compressor looks reasonable. Examples from @johanbrandhorst Example 1 Size Command Compression time 16M (uncompressed size) N/A 2.4M brotli -o test.wasm.br test.wasm 53.6s 3.3M go-zopfli test.wasm 3m 2.6s 3.4M gzip --best test.wasm 2.5s 3.4M gzip test.wasm 0.8s Example 2 Size Command Compression time 2.3M (uncompressed size) N/A 496K brotli -o main.wasm.br main.wasm 5.7s 640K go-zopfli main.wasm 16.2s 660K gzip --best main.wasm 0.2s 668K gzip main.wasm 0.2s Use something like lpar/gzipped to automatically serve compressed files with correct headers, when available. 2. Use TinyGo to generate the Wasm file instead. TinyGo supports a subset of the Go language targeted for embedded devices, and has a WebAssembly output target. While it does have limitations (not yet a full Go implementation), it is still fairly capable and the generated Wasm files are\u2026\u200b tiny. ~10kB isn\u2019t unusual. The \"Hello world\" example is 575 bytes. If you gz -6 that, it drops down to 408 bytes. This project is also very actively developed, so its capabilities are expanding out quickly. See https://tinygo.org/docs/guides/webassembly/ for more information on using WebAssembly with TinyGo. Other WebAssembly resources Awesome-Wasm - An extensive list of further Wasm resources. Not Go specific.","title":"WebAssembly"},{"location":"WebAssembly/#webassembly","text":"","title":"WebAssembly"},{"location":"WebAssembly/#introduction","text":"Go 1.11 added an experimental port to WebAssembly. Go 1.12 has improved some parts of it, with further improvements expected in Go 1.13. WebAssembly is described on its home page as: WebAssembly (abbreviated Wasm ) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications. If you\u2019re new to WebAssembly read the Getting Started section, watch some of the Go WebAssembly talks , then take a look at the Further examples below.","title":"Introduction"},{"location":"WebAssembly/#getting-started","text":"This page assumes a functional Go 1.11 or newer installation. For troubleshooting, see the Install Troubleshooting page. To compile a basic Go package for the web: package main import \"fmt\" func main () { fmt . Println ( \"Hello, WebAssembly!\" ) } Set GOOS=js and GOARCH=wasm environment variables to compile for WebAssembly: $ GOOS = js GOARCH = wasm go build -o main.wasm That will build the package and produce an executable WebAssembly module file named main.wasm. The .wasm file extension will make it easier to serve it over HTTP with the correct Content-Type header later on. Note that you can only compile main packages. Otherwise, you will get an object file that cannot be run in WebAssembly. If you have a package that you want to be able to use with WebAssembly, convert it to a main package and build a binary. To execute main.wasm in a browser, we\u2019ll also need a JavaScript support file, and a HTML page to connect everything together. Copy the JavaScript support file: $ cp \" $( go env GOROOT ) /misc/wasm/wasm_exec.js\" . Create an index.html file: <html> <head> <meta charset= \"utf-8\" /> <script src= \"wasm_exec.js\" ></script> <script> const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"main.wasm\"), go.importObject).then((result) => { go.run(result.instance); }); </script> </head> <body></body> </html> If your browser doesn\u2019t yet support WebAssembly.instantiateStreaming , you can use a polyfill . Then serve the three files ( index.html , wasm_exec.js , and main.wasm ) from a web server. For example, with goexec : # install goexec : go get - u github . com / shurcooL / goexec $ goexec 'http.ListenAndServe(`:8080`, http.FileServer(http.Dir(`.`)))' Or use your own basic HTTP server command . Note: for the goexec command to work on Unix-like systems, you must add the path environment variable for Go to your shell\u2019s profile . Go\u2019s getting started guide explains this: Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile: export PATH=$PATH:/usr/local/go/bin Note: changes made to a profile file may not apply until the next time you log into your computer Finally, navigate to http://localhost:8080/index.html , open the JavaScript debug console, and you should see the output. You can modify the program, rebuild main.wasm , and refresh to see new output.","title":"Getting Started"},{"location":"WebAssembly/#executing-webassembly-with-nodejs","text":"It\u2019s possible to execute compiled WebAssembly modules using Node.js rather than a browser, which can be useful for testing and automation. With Node installed and in your PATH , set the -exec flag to the location of go_js_wasm_exec when you execute go run or go test . By default, go_js_wasm_exec is in the misc/wasm directory of your Go installation. $ GOOS = js GOARCH = wasm go run -exec = \" $( go env GOROOT ) /misc/wasm/go_js_wasm_exec\" . Hello, WebAssembly! $ GOOS = js GOARCH = wasm go test -exec = \" $( go env GOROOT ) /misc/wasm/go_js_wasm_exec\" PASS ok example.org/my/pkg 0 .800s Adding go_js_wasm_exec to your PATH will allow go run and go test to work for js/wasm without having to manually provide the -exec flag each time: $ export PATH = \" $PATH : $( go env GOROOT ) /misc/wasm\" $ GOOS = js GOARCH = wasm go run . Hello, WebAssembly! $ GOOS = js GOARCH = wasm go test PASS ok example.org/my/pkg 0 .800s","title":"Executing WebAssembly with Node.js"},{"location":"WebAssembly/#running-tests-in-the-browser","text":"You can also use wasmbrowsertest to run tests inside your browser. It automates the job of spinning up a webserver and uses headless Chrome to run the tests inside it and relays the logs to your console. Same as before, just go get github.com/agnivade/wasmbrowsertest to get a binary. Rename that to go_js_wasm_exec and place it to your PATH $ mv $GOPATH /bin/wasmbrowsertest $GOPATH /bin/go_js_wasm_exec $ export PATH = \" $PATH : $GOPATH /bin\" $ GOOS = js GOARCH = wasm go test PASS ok example.org/my/pkg 0 .800s Alternatively, use the exec test flag. $ GOOS = js GOARCH = wasm go test -exec = \" $GOPATH /bin/wasmbrowsertest\"","title":"Running tests in the browser"},{"location":"WebAssembly/#go-webassembly-talks","text":"Building a Calculator with Go and WebAssembly ( Source code ) Get Going with WebAssembly Go&WebAssembly\u7b80\u4ecb - by chai2010 (Chinese) Go for frontend","title":"Go WebAssembly talks"},{"location":"WebAssembly/#interacting-with-the-dom","text":"See https://godoc.org/syscall/js . Also: app : A PWA-compatible, React-based framework with custom tooling. dom : A library for streamlining DOM manipulation is in development. dom : Go bindings for the JavaScript DOM APIs. domui : A pure Go framework for creating complete GUI application. gas : Components based framework for WebAssembly applications. GoWebian : A library to build pages with pure Go and add WebAssembly bindings. vert : WebAssembly interop between Go and JS values. vue : The progressive framework for WebAssembly applications. Vugu : A wasm web UI library featuring HTML layout with Go for app logic, single-file components, rapid dev and prototyping workflow. webapi : A binding generator and generated bindings for DOM, HTML, WebGL, and more. webgen : Define components in HTML and generate Go types and constructor functions for them using webapi .","title":"Interacting with the DOM"},{"location":"WebAssembly/#canvas","text":"A new canvas drawing library - seems pretty efficient. Simple demo","title":"Canvas"},{"location":"WebAssembly/#configuring-fetch-options-while-using-nethttp","text":"You can use the net/http library to make HTTP requests from Go, and they will be converted to fetch calls. However, there isn\u2019t a direct mapping between the fetch options and the http client options. To achieve this, we have some special header values that are recognized as fetch options. They are - js.fetch:mode : An option to the Fetch API mode setting. Valid values are: \"cors\", \"no-cors\", \"same-origin\", navigate\". The default is \"same-origin\". js.fetch:credentials : An option to the Fetch API credentials setting. Valid values are: \"omit\", \"same-origin\", \"include\". The default is \"same-origin\". js.fetch:redirect : An option to the Fetch API redirect setting. Valid values are: \"follow\", \"error\", \"manual\". The default is \"follow\". So as an example, if we want to set the mode as \"cors\" while making a request, it will be something like: req , err : = http . NewRequest ( \" GET \" , \" http://localhost:8080 \" , nil ) req . Header . Add ( \" js.fetch:mode \" , \" cors \" ) if err != nil { fmt . Println ( err ) return } resp , err : = http . DefaultClient . Do ( req ) if err != nil { fmt . Println ( err ) return } defer resp . Body . Close () // handle the response Please feel free to subscribe to #26769 for more context and possibly newer information.","title":"Configuring fetch options while using net/http"},{"location":"WebAssembly/#editor-configuration","text":"Configuring GoLand and Intellij Ultimate for WebAssembly - Shows the exact steps needed for getting Wasm working in GoLand and Intellij Ultimate","title":"Editor configuration"},{"location":"WebAssembly/#webassembly-in-chrome","text":"If you run a newer version of Chrome there is a flag ( chrome://flags/#enable-webassembly-baseline ) to enable Liftoff, their new compiler, which should significantly improve load times. Further info here .","title":"WebAssembly in Chrome"},{"location":"WebAssembly/#debugging","text":"WebAssembly doesn\u2019t yet have any support for debuggers, so you\u2019ll need to use the good 'ol println() approach for now to display output on the JavaScript console. An official WebAssembly Debugging Subgroup has been created to address this, with some initial investigation and proposals under way: WebAssembly Debugging Capabilities Living Standard ( source code for the doc ) DWARF for WebAssembly Target ( source code for the doc ) Please get involved and help drive this if you\u2019re interested in the Debugger side of things.","title":"Debugging"},{"location":"WebAssembly/#analysing-the-structure-of-a-webassembly-file","text":"WebAssembly Code Explorer is useful for visualising the structure of a WebAssembly file. Clicking on a hex value to the left will highlight the section it is part of, and the corresponding text representation on the right Clicking a line on the right will highlight the hex byte representations for it on the left","title":"Analysing the structure of a WebAssembly file"},{"location":"WebAssembly/#known-bugs","text":"Go releases prior to 1.11.2 have a bug which can generate incorrect wasm code in some (rare) circumstances. If your Go code compiles to wasm without problem, but produces an error like this when run in the browser: CompileError : wasm validation error : at offset 1269295 : type mismatch : expression has type i64 but expected f64 Then you\u2019re probably hitting this error. The solution is to upgrade to Go 1.11.2 or later.","title":"Known bug(s)"},{"location":"WebAssembly/#further-examples","text":"","title":"Further examples"},{"location":"WebAssembly/#general","text":"Shimmer - Image transformation in wasm using Go. Live DEMO . Video filtering - Filters for video from webcam ( source code ) HandyTools - Provide tools like base64 encoding/decoding, convert Unix time, etc (live DEMO )","title":"General"},{"location":"WebAssembly/#canvas-2d","text":"GoWasm Experiments - Demonstrates working code for several common call types bouncy rainbow-mouse repulsion bumpy - Uses the 2d canvas, and a 2d physics engine. Click around on the screen to create objects then watch as gravity takes hold! arty hexy ( new ) Gomeboycolor-wasm WASM port of an experimental Gameboy Color emulator. The matching blog post contains some interesting technical insights. TinyGo canvas This is compiled with TinyGo instead of standard go, resulting in a 19.37kB (compressed) wasm file.","title":"Canvas (2D)"},{"location":"WebAssembly/#database","text":"TiDB-Wasm - Running TiDB, a golang database in the browser on Wasm. DEMO on running TiDB SQL statements .","title":"Database"},{"location":"WebAssembly/#webgl-canvas-3d","text":"Basic triangle ( source code ) - Creates a basic triangle in WebGL Same thing, ported to TinyGo ( source code ) - ~14kB compressed (3% of the size of mainline Go version) Rotating cube ( source code ) - Creates a rotating cube in WebGL Same thing, ported to TinyGo ( source code ) - ~23kB compressed (4% of the size of mainline Go version) Splashy ( source code ) - Click around on the screen to generate paint\u2026\u200b","title":"WebGL canvas (3D)"},{"location":"WebAssembly/#reducing-the-size-of-wasm-files","text":"At present, Go generates large Wasm files, with the smallest possible size being around ~2MB. If your Go code imports libraries, this file size can increase dramatically. 10MB+ is common. There are two main ways (for now) to reduce this file size: Manually compress the .wasm file. Using gz compression reduces the ~2MB (minimum file size) example WASM file down to around 500kB. It may be better to use Zopfli to do the gzip compression, as it gives better results than gzip --best , however it does take much longer to run. Using Brotli for compression, the file sizes are markedly better than both Zopfli and gzip --best , and compression time is somewhere in between the two, too. This (new) Brotli compressor looks reasonable. Examples from @johanbrandhorst Example 1 Size Command Compression time 16M (uncompressed size) N/A 2.4M brotli -o test.wasm.br test.wasm 53.6s 3.3M go-zopfli test.wasm 3m 2.6s 3.4M gzip --best test.wasm 2.5s 3.4M gzip test.wasm 0.8s Example 2 Size Command Compression time 2.3M (uncompressed size) N/A 496K brotli -o main.wasm.br main.wasm 5.7s 640K go-zopfli main.wasm 16.2s 660K gzip --best main.wasm 0.2s 668K gzip main.wasm 0.2s Use something like lpar/gzipped to automatically serve compressed files with correct headers, when available. 2. Use TinyGo to generate the Wasm file instead. TinyGo supports a subset of the Go language targeted for embedded devices, and has a WebAssembly output target. While it does have limitations (not yet a full Go implementation), it is still fairly capable and the generated Wasm files are\u2026\u200b tiny. ~10kB isn\u2019t unusual. The \"Hello world\" example is 575 bytes. If you gz -6 that, it drops down to 408 bytes. This project is also very actively developed, so its capabilities are expanding out quickly. See https://tinygo.org/docs/guides/webassembly/ for more information on using WebAssembly with TinyGo.","title":"Reducing the size of Wasm files"},{"location":"WebAssembly/#other-webassembly-resources","text":"Awesome-Wasm - An extensive list of further Wasm resources. Not Go specific.","title":"Other WebAssembly resources"},{"location":"Well-known-struct-tags/","text":"Well-known struct tags Background Go offers struct tags which are discoverable via reflection. These enjoy a wide range of use in the standard library in the JSON/XML and other encoding packages. The community welcomed them and has built ORMs, further encodings, flag parsers and much more around them since, especially for these tasks, single-sourcing is beneficial for data structures. Problem description Due to increased usage of Go and thus Go struct tags , clashes become inevitable. Solution The list below is a best effort to document well-known struct tags used by packages which are available to the public. Format of the list Struct tag as extracted by calling https://godoc.org/reflect#StructTag.Get with this tag as the key argument. Documentation link of this package using https://godoc.org Example entry Tag Documentation xml https://godoc.org/encoding/xml Change Management List entries can be added by anyone who creates a public package where a new tag is used. List entries can be removed when the links to the package documentation stops working or the author(s) of that package requests it. List of well-known struct tags Tag Documentation xml https://godoc.org/encoding/xml json https://godoc.org/encoding/json asn1 https://godoc.org/encoding/asn1 reform https://godoc.org/gopkg.in/reform.v1 dynamodb https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#Marshal bigquery https://godoc.org/cloud.google.com/go/bigquery datastore https://godoc.org/cloud.google.com/go/datastore spanner https://godoc.org/cloud.google.com/go/spanner bson https://godoc.org/labix.org/v2/mgo/bson , https://godoc.org/go.mongodb.org/mongo-driver/bson/bsoncodec gorm https://godoc.org/github.com/jinzhu/gorm yaml https://godoc.org/gopkg.in/yaml.v2 toml https://godoc.org/github.com/pelletier/go-toml validate go-playground/validator mapstructure https://godoc.org/github.com/mitchellh/mapstructure parser https://godoc.org/github.com/alecthomas/participle protobuf golang/protobuf db jmoiron/sqlx url google/go-querystring","title":"Well known struct tags"},{"location":"Well-known-struct-tags/#well-known-struct-tags","text":"","title":"Well-known struct tags"},{"location":"Well-known-struct-tags/#background","text":"Go offers struct tags which are discoverable via reflection. These enjoy a wide range of use in the standard library in the JSON/XML and other encoding packages. The community welcomed them and has built ORMs, further encodings, flag parsers and much more around them since, especially for these tasks, single-sourcing is beneficial for data structures.","title":"Background"},{"location":"Well-known-struct-tags/#problem-description","text":"Due to increased usage of Go and thus Go struct tags , clashes become inevitable.","title":"Problem description"},{"location":"Well-known-struct-tags/#solution","text":"The list below is a best effort to document well-known struct tags used by packages which are available to the public.","title":"Solution"},{"location":"Well-known-struct-tags/#format-of-the-list","text":"Struct tag as extracted by calling https://godoc.org/reflect#StructTag.Get with this tag as the key argument. Documentation link of this package using https://godoc.org","title":"Format of the list"},{"location":"Well-known-struct-tags/#example-entry","text":"Tag Documentation xml https://godoc.org/encoding/xml","title":"Example entry"},{"location":"Well-known-struct-tags/#change-management","text":"List entries can be added by anyone who creates a public package where a new tag is used. List entries can be removed when the links to the package documentation stops working or the author(s) of that package requests it.","title":"Change Management"},{"location":"Well-known-struct-tags/#list-of-well-known-struct-tags","text":"Tag Documentation xml https://godoc.org/encoding/xml json https://godoc.org/encoding/json asn1 https://godoc.org/encoding/asn1 reform https://godoc.org/gopkg.in/reform.v1 dynamodb https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#Marshal bigquery https://godoc.org/cloud.google.com/go/bigquery datastore https://godoc.org/cloud.google.com/go/datastore spanner https://godoc.org/cloud.google.com/go/spanner bson https://godoc.org/labix.org/v2/mgo/bson , https://godoc.org/go.mongodb.org/mongo-driver/bson/bsoncodec gorm https://godoc.org/github.com/jinzhu/gorm yaml https://godoc.org/gopkg.in/yaml.v2 toml https://godoc.org/github.com/pelletier/go-toml validate go-playground/validator mapstructure https://godoc.org/github.com/mitchellh/mapstructure parser https://godoc.org/github.com/alecthomas/participle protobuf golang/protobuf db jmoiron/sqlx url google/go-querystring","title":"List of well-known struct tags"},{"location":"WhyGo/","text":"Here's why: a list of people/organizations explaining why they use Go. This is partly redundant with GoUsers . We also have a specific page dedicated to Go success stories . Why Go Why Devops Engineers Should Know Go 2020-05-27 Why We Chose Go 2020-03-02 Why Go? \u2013 Key advantages you may have overlooked 2019-06-01 From Java to Go 2017-01-15 Why should you learn Go 2017-01-08 Moving a team from Scala to Go 2015-12-19 For Better or For Worse 2015-11-12 Six reasons why I love Go 2015-10-28 CERN: Python vs Go for Data Access Service (PDF) 2015-10-18 Sorry Ruby, I think I've fallen for Go 2015-09-26 Moving to Three Languages 2015-09-15 Warming up to Go 2015-08-28 400 Days of Go Iron.io: How We Went from 30 Servers to 2 with Go Juju at Canonical Go at bitly NSQ: realtime distributed message processing at scale CloudFlare blows hole in laws of Web physics with Go and Railgun Why I Like Go dl.google.com now served by Go Rob Pike: Why Learn Go? Why I went from Python to Go (and not node.js) @derekcollison : \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\" Will Go be the new go-to programming language? Dr. Dobb's: Why Not Go? Google I/O 2012: Go in production Go at Novartis Go at the BBC Go at SoundCloud Go at Moovweb Building StatHat with Go Go at CloudFlare Why you PHP guys should learn Golang I/O BootCamp 2011: Real World Go Go at Heroku The Business Benefits of Building Your Next Project With Go by Tom Maiaroto TweetQureet: a full Golang technology stack by Qureet Where and why we use Go by Jeremey Bingham, Raintank.io Half a decade with Go by golang.org blog Why Learn Go by Rob Pike (YouTube) Go at Google by Rob Pike (YouTube) Go at Google by Rob Pike (Article) 5 things I love by Andrew Gerrand (dotGo 2014) dl.google.com powered by Go by Brad Fitzpatrick Is Google using Go internally? by golang.org The State of the Gopher by Brad Fitzpatrick (dotGo 2014) Software I'm excited about by Brad Fitzpatrick (dotScale 2013) I came for the easy concurrency I stayed for the easy composition by John Graham-Cumming (dotGo 2014) Go 1.4+ Garbage Collection (GC) Plan and Roadmap by Richard L. Hudson Five things that make Go fast by Dave Cheney Another go at the Next Big Language by Dave Cheney Rewriting a large production system in Go by Matt Welsh Go is Boring by Steve Bate Gopher Academy Blog Kubernetes + Go = Crazy Delicious by Joe Beda Why InfluxDB is written in Go by Paul Dix How Continuum ended up being written in Go by Derek Collison Building Street Address Autocomplete with Go by Matt Holt Why I went from Python to Go (and not node.js) by Jordan Orelli Farewell Node.js by TJ Holowaychuk Can Go really be that much faster than Python? on StackOverflow Python to Go by Weng Wei Why I Program in Go by Tahir Hashmi DNS Server in Go by Ask Bj\u00f8rn Hansen Go and Swift by Scott Rosenberg Features I Like about Go by Abhi Yerra From Python to Go translation of a large codebase - Go translation of Reposurgeon Who uses Go Moved to the GoUsers page Benchmarks Express vs Flask vs Go vs Sparkjava by Bijan Comparing the Performance of Various Web Frameworks by Abel Avram TechEmpower Web Framework Benchmarks","title":"WhyGo"},{"location":"WhyGo/#why-go","text":"Why Devops Engineers Should Know Go 2020-05-27 Why We Chose Go 2020-03-02 Why Go? \u2013 Key advantages you may have overlooked 2019-06-01 From Java to Go 2017-01-15 Why should you learn Go 2017-01-08 Moving a team from Scala to Go 2015-12-19 For Better or For Worse 2015-11-12 Six reasons why I love Go 2015-10-28 CERN: Python vs Go for Data Access Service (PDF) 2015-10-18 Sorry Ruby, I think I've fallen for Go 2015-09-26 Moving to Three Languages 2015-09-15 Warming up to Go 2015-08-28 400 Days of Go Iron.io: How We Went from 30 Servers to 2 with Go Juju at Canonical Go at bitly NSQ: realtime distributed message processing at scale CloudFlare blows hole in laws of Web physics with Go and Railgun Why I Like Go dl.google.com now served by Go Rob Pike: Why Learn Go? Why I went from Python to Go (and not node.js) @derekcollison : \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\" Will Go be the new go-to programming language? Dr. Dobb's: Why Not Go? Google I/O 2012: Go in production Go at Novartis Go at the BBC Go at SoundCloud Go at Moovweb Building StatHat with Go Go at CloudFlare Why you PHP guys should learn Golang I/O BootCamp 2011: Real World Go Go at Heroku The Business Benefits of Building Your Next Project With Go by Tom Maiaroto TweetQureet: a full Golang technology stack by Qureet Where and why we use Go by Jeremey Bingham, Raintank.io Half a decade with Go by golang.org blog Why Learn Go by Rob Pike (YouTube) Go at Google by Rob Pike (YouTube) Go at Google by Rob Pike (Article) 5 things I love by Andrew Gerrand (dotGo 2014) dl.google.com powered by Go by Brad Fitzpatrick Is Google using Go internally? by golang.org The State of the Gopher by Brad Fitzpatrick (dotGo 2014) Software I'm excited about by Brad Fitzpatrick (dotScale 2013) I came for the easy concurrency I stayed for the easy composition by John Graham-Cumming (dotGo 2014) Go 1.4+ Garbage Collection (GC) Plan and Roadmap by Richard L. Hudson Five things that make Go fast by Dave Cheney Another go at the Next Big Language by Dave Cheney Rewriting a large production system in Go by Matt Welsh Go is Boring by Steve Bate Gopher Academy Blog Kubernetes + Go = Crazy Delicious by Joe Beda Why InfluxDB is written in Go by Paul Dix How Continuum ended up being written in Go by Derek Collison Building Street Address Autocomplete with Go by Matt Holt Why I went from Python to Go (and not node.js) by Jordan Orelli Farewell Node.js by TJ Holowaychuk Can Go really be that much faster than Python? on StackOverflow Python to Go by Weng Wei Why I Program in Go by Tahir Hashmi DNS Server in Go by Ask Bj\u00f8rn Hansen Go and Swift by Scott Rosenberg Features I Like about Go by Abhi Yerra From Python to Go translation of a large codebase - Go translation of Reposurgeon","title":"Why Go"},{"location":"WhyGo/#who-uses-go","text":"Moved to the GoUsers page","title":"Who uses Go"},{"location":"WhyGo/#benchmarks","text":"Express vs Flask vs Go vs Sparkjava by Bijan Comparing the Performance of Various Web Frameworks by Abel Avram TechEmpower Web Framework Benchmarks","title":"Benchmarks"},{"location":"Windows/","text":"The Go project's official download page is at https://golang.org/dl . After downloading a binary release suitable for your system, you can install go by following the official installation instructions at https://golang.org/doc/install . Go for Microsoft Windows The Windows port is stable and officially supported. See the open Windows issues on the issue tracker. Distributions Architectures Initial support version Final support version Windows 7, Windows Server 2008R2 or above amd64, 386 Go 1 * Windows Vista, Windows Server 2008 amd64, 386 Go 1 * Go 1.10.8 Windows XP, Windows Server 2003 amd64, 386 Go 1 * Go 1.10.8 * Go 1.5 or above is recommended.","title":"Windows"},{"location":"Windows/#go-for-microsoft-windows","text":"The Windows port is stable and officially supported. See the open Windows issues on the issue tracker. Distributions Architectures Initial support version Final support version Windows 7, Windows Server 2008R2 or above amd64, 386 Go 1 * Windows Vista, Windows Server 2008 amd64, 386 Go 1 * Go 1.10.8 Windows XP, Windows Server 2003 amd64, 386 Go 1 * Go 1.10.8 * Go 1.5 or above is recommended.","title":"Go for Microsoft Windows"},{"location":"WindowsBuild/","text":"The Automatic (but unsupported) Way: winstrap The winstrap tool is used by the Go project to turn a fresh Windows VM image into a Windows builder. It installs all necessary dependencies. It's sometimes out of date, though, as it's only updated when we need to update the Windows base image for the Go continuous build . To use winstrap, download the latest version of winstrap.exe from the winstrap page and run it. It will download some installers to your desktop, which you should run. Just click through; all the defaults are fine. Then it will check out Go and place it in c:Users\\%USER%goroot and build it. That's it. Note however that winstrap is not supported. It's considered an internal tool used for occasional setup of new Windows builder images and is not actively maintained until we need it ourselves. The Manual Way Install MinGW/MSYS Download and save the latest version of the automated MinGW installer executable ( exe ) file from SourceForge. http://sourceforge.net/projects/mingw/files/OldFiles/mingw-get-inst/ Open and run the saved automated MinGW installer executable file, which is named mingw-get-inst-yyyymmdd.exe , where yyyymmdd is the version date stamp. For example, mingw-get-inst-20110530.exe . The MinGW Setup Wizard window will open with the title \"Setup - MinGW-Get\". Except for the following, accept the setup defaults, unless it's necessary to change them. For Repository Catalogues, check the Download latest repository catalogues button. For Select Components, the MinGW Compiler Suite, the C Compiler box is automatically checked. Scroll down to the bottom of the list and check the MinGW Developer Toolkit box, which includes the MSYS Basic System. For Ready to Install, review and verify the installation settings, which should look similar this: Installing: mingw-get pkginfo C Compiler MSYS Basic System MinGW Developer Toolkit Downloading latest repository catalogues Destination location: C:\\MinGW When the installation settings are correct, Install. The installation loads the package installation catalogues and downloads and installs the files. The installation may take some time, largely depending on the download speed. The MSYS terminal window may be opened by opening and running the C:\\MinGW\\msys\\1.0\\msys.bat batch file. Build git clone https://go.googlesource.com/go cd go\\src all.bat 64-bit Notes Ensure you are able to compile a working 32-bit Go first. Grab the latest zip from http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Automated%20Builds/ and extract it over the MinGW directory, so that for example the .exe files end up in the same location as the 32-bit ones. Replace gcc.exe and ar.exe with their 64-bit counterparts. Set GOARCH=amd64 and away you go!","title":"WindowsBuild"},{"location":"WindowsBuild/#the-automatic-but-unsupported-way-winstrap","text":"The winstrap tool is used by the Go project to turn a fresh Windows VM image into a Windows builder. It installs all necessary dependencies. It's sometimes out of date, though, as it's only updated when we need to update the Windows base image for the Go continuous build . To use winstrap, download the latest version of winstrap.exe from the winstrap page and run it. It will download some installers to your desktop, which you should run. Just click through; all the defaults are fine. Then it will check out Go and place it in c:Users\\%USER%goroot and build it. That's it. Note however that winstrap is not supported. It's considered an internal tool used for occasional setup of new Windows builder images and is not actively maintained until we need it ourselves.","title":"The Automatic (but unsupported) Way: winstrap"},{"location":"WindowsBuild/#the-manual-way","text":"","title":"The Manual Way"},{"location":"WindowsBuild/#install-mingwmsys","text":"Download and save the latest version of the automated MinGW installer executable ( exe ) file from SourceForge. http://sourceforge.net/projects/mingw/files/OldFiles/mingw-get-inst/ Open and run the saved automated MinGW installer executable file, which is named mingw-get-inst-yyyymmdd.exe , where yyyymmdd is the version date stamp. For example, mingw-get-inst-20110530.exe . The MinGW Setup Wizard window will open with the title \"Setup - MinGW-Get\". Except for the following, accept the setup defaults, unless it's necessary to change them. For Repository Catalogues, check the Download latest repository catalogues button. For Select Components, the MinGW Compiler Suite, the C Compiler box is automatically checked. Scroll down to the bottom of the list and check the MinGW Developer Toolkit box, which includes the MSYS Basic System. For Ready to Install, review and verify the installation settings, which should look similar this: Installing: mingw-get pkginfo C Compiler MSYS Basic System MinGW Developer Toolkit Downloading latest repository catalogues Destination location: C:\\MinGW When the installation settings are correct, Install. The installation loads the package installation catalogues and downloads and installs the files. The installation may take some time, largely depending on the download speed. The MSYS terminal window may be opened by opening and running the C:\\MinGW\\msys\\1.0\\msys.bat batch file.","title":"Install MinGW/MSYS"},{"location":"WindowsBuild/#build","text":"git clone https://go.googlesource.com/go cd go\\src all.bat","title":"Build"},{"location":"WindowsBuild/#64-bit-notes","text":"Ensure you are able to compile a working 32-bit Go first. Grab the latest zip from http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Automated%20Builds/ and extract it over the MinGW directory, so that for example the .exe files end up in the same location as the 32-bit ones. Replace gcc.exe and ar.exe with their 64-bit counterparts. Set GOARCH=amd64 and away you go!","title":"64-bit Notes"},{"location":"WindowsCrossCompiling/","text":"Building Windows Go programs on Linux See here for available GOOS and GOARCH values. Go version >= 1.5 Since Go version 1.5 cross-compiling of pure Go executables has become very easy. Try it out with the code below. More can be found at this blog post by Dave Cheney . $ cat hello . go package main import \"fmt\" func main () { fmt . Printf ( \"Hello\\n\" ) } $ GOOS = windows GOARCH = 386 go build - o hello . exe hello . go In cmd.exe instead of PowerShell: $ set GOOS = windows $ set GOARCH = 386 $ go build - o hello . exe hello . go You can now run hello.exe on a Windows machine near you. Note that the command above will silently rebuild most of standard library, and for this reason will be quite slow. To speed-up the process, you can install all the windows-amd64 standard packages on your system with GOOS=windows GOARCH=amd64 go install Note also that cgo is disabled when cross-compiling, so any file that mentions import \"C\" will be silently ignored (See golang/go#24068 ). In order to use cgo, or any of the build modes c-archive , c-shared , shared , plugin , you need to have a C cross-compiler. Older Go version (<1.5) I use linux/386, but, I suspect, this procedure will apply to other host platforms as well. Preparation (if needed): sudo apt-get install gcc export go env GOROOT First step is to build host version of go: cd $GOROOT /src sudo -E GOOS = windows GOARCH = 386 PATH = $PATH ./make.bash Next you need to build the rest of go compilers and linkers. I have small program to do that: $ cat ~/bin/buildcmd #!/bin/sh set -e for arch in 8 6 ; do for cmd in a c g l ; do go tool dist install -v cmd/ $arch$cmd done done exit 0 Last step is to build Windows versions of standard commands and libraries. I have a small script for that too: $ cat ~/bin/buildpkg #!/bin/sh if [ -z \" $1 \" ] ; then echo 'GOOS is not specified' 1 > & 2 exit 2 else export GOOS = $1 if [ \" $GOOS \" = \"windows\" ] ; then export CGO_ENABLED = 0 fi fi shift if [ -n \" $1 \" ] ; then export GOARCH = $1 fi cd $GOROOT /src go tool dist install -v pkg/runtime go install -v -a std I run it like that: $ ~/bin/buildpkg windows 386 to build Windows/386 version of Go commands and packages. You can probably see from my script that I exclude building of any cgo related parts \u2014 these will not work for me, since I do not have correspondent gcc cross-compiling tools installed. So I just skip those. Now we're ready to build our Windows executable: $ cat hello . go package main import \"fmt\" func main () { fmt . Printf ( \"Hello\\n\" ) } $ GOOS = windows GOARCH = 386 go build - o hello . exe hello . go We just need to find a Windows computer to run our hello.exe .","title":"WindowsCrossCompiling"},{"location":"WindowsCrossCompiling/#building-windows-go-programs-on-linux","text":"See here for available GOOS and GOARCH values.","title":"Building Windows Go programs on Linux"},{"location":"WindowsCrossCompiling/#go-version--15","text":"Since Go version 1.5 cross-compiling of pure Go executables has become very easy. Try it out with the code below. More can be found at this blog post by Dave Cheney . $ cat hello . go package main import \"fmt\" func main () { fmt . Printf ( \"Hello\\n\" ) } $ GOOS = windows GOARCH = 386 go build - o hello . exe hello . go In cmd.exe instead of PowerShell: $ set GOOS = windows $ set GOARCH = 386 $ go build - o hello . exe hello . go You can now run hello.exe on a Windows machine near you. Note that the command above will silently rebuild most of standard library, and for this reason will be quite slow. To speed-up the process, you can install all the windows-amd64 standard packages on your system with GOOS=windows GOARCH=amd64 go install Note also that cgo is disabled when cross-compiling, so any file that mentions import \"C\" will be silently ignored (See golang/go#24068 ). In order to use cgo, or any of the build modes c-archive , c-shared , shared , plugin , you need to have a C cross-compiler.","title":"Go version &gt;= 1.5"},{"location":"WindowsCrossCompiling/#older-go-version-15","text":"I use linux/386, but, I suspect, this procedure will apply to other host platforms as well. Preparation (if needed): sudo apt-get install gcc export go env GOROOT First step is to build host version of go: cd $GOROOT /src sudo -E GOOS = windows GOARCH = 386 PATH = $PATH ./make.bash Next you need to build the rest of go compilers and linkers. I have small program to do that: $ cat ~/bin/buildcmd #!/bin/sh set -e for arch in 8 6 ; do for cmd in a c g l ; do go tool dist install -v cmd/ $arch$cmd done done exit 0 Last step is to build Windows versions of standard commands and libraries. I have a small script for that too: $ cat ~/bin/buildpkg #!/bin/sh if [ -z \" $1 \" ] ; then echo 'GOOS is not specified' 1 > & 2 exit 2 else export GOOS = $1 if [ \" $GOOS \" = \"windows\" ] ; then export CGO_ENABLED = 0 fi fi shift if [ -n \" $1 \" ] ; then export GOARCH = $1 fi cd $GOROOT /src go tool dist install -v pkg/runtime go install -v -a std I run it like that: $ ~/bin/buildpkg windows 386 to build Windows/386 version of Go commands and packages. You can probably see from my script that I exclude building of any cgo related parts \u2014 these will not work for me, since I do not have correspondent gcc cross-compiling tools installed. So I just skip those. Now we're ready to build our Windows executable: $ cat hello . go package main import \"fmt\" func main () { fmt . Printf ( \"Hello\\n\" ) } $ GOOS = windows GOARCH = 386 go build - o hello . exe hello . go We just need to find a Windows computer to run our hello.exe .","title":"Older Go version (&lt;1.5)"},{"location":"WindowsDLLs/","text":"Calling a Windows DLL Go allows you to call native Windows function in several different ways. Dynamically load a DLL, then call a function in it. You can call the function via SyscallX (where X is the number of parameters. If the function has fewer parameters than that, for example passing 7 arguments to a function that accepts 9, Syscall9 will still work, you just need to specify 7 as your second argument to Syscall9 ). A sample Go program that calls a Windows DLL function using this method: package main import ( \"fmt\" \"syscall\" \"unsafe\" ) func abort ( funcname string , err error ) { panic ( fmt . Sprintf ( \"%s failed: %v\" , funcname , err )) } var ( kernel32 , _ = syscall . LoadLibrary ( \"kernel32.dll\" ) getModuleHandle , _ = syscall . GetProcAddress ( kernel32 , \"GetModuleHandleW\" ) user32 , _ = syscall . LoadLibrary ( \"user32.dll\" ) messageBox , _ = syscall . GetProcAddress ( user32 , \"MessageBoxW\" ) ) const ( MB_OK = 0x00000000 MB_OKCANCEL = 0x00000001 MB_ABORTRETRYIGNORE = 0x00000002 MB_YESNOCANCEL = 0x00000003 MB_YESNO = 0x00000004 MB_RETRYCANCEL = 0x00000005 MB_CANCELTRYCONTINUE = 0x00000006 MB_ICONHAND = 0x00000010 MB_ICONQUESTION = 0x00000020 MB_ICONEXCLAMATION = 0x00000030 MB_ICONASTERISK = 0x00000040 MB_USERICON = 0x00000080 MB_ICONWARNING = MB_ICONEXCLAMATION MB_ICONERROR = MB_ICONHAND MB_ICONINFORMATION = MB_ICONASTERISK MB_ICONSTOP = MB_ICONHAND MB_DEFBUTTON1 = 0x00000000 MB_DEFBUTTON2 = 0x00000100 MB_DEFBUTTON3 = 0x00000200 MB_DEFBUTTON4 = 0x00000300 ) func MessageBox ( caption , text string , style uintptr ) ( result int ) { var nargs uintptr = 4 ret , _ , callErr := syscall . Syscall9 ( uintptr ( messageBox ), nargs , 0 , uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( text ))), uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( caption ))), style , 0 , 0 , 0 , 0 , 0 ) if callErr != 0 { abort ( \"Call MessageBox\" , callErr ) } result = int ( ret ) return } func GetModuleHandle () ( handle uintptr ) { var nargs uintptr = 0 if ret , _ , callErr := syscall . Syscall ( uintptr ( getModuleHandle ), nargs , 0 , 0 , 0 ); callErr != 0 { abort ( \"Call GetModuleHandle\" , callErr ) } else { handle = ret } return } func main () { defer syscall . FreeLibrary ( kernel32 ) defer syscall . FreeLibrary ( user32 ) fmt . Printf ( \"Return: %d\\n\" , MessageBox ( \"Done Title\" , \"This test is Done.\" , MB_YESNOCANCEL )) } func init () { fmt . Print ( \"Starting Up\\n\" ) } Using syscall.NewProc instead of syscall.GetProcAddress. These are basically some helper methods over the syscall ones, you saw above, and are available in Windows only: http://golang.org/src/pkg/syscall/dll_windows.go package main import ( \"fmt\" \"syscall\" \"unsafe\" ) func main () { var mod = syscall . NewLazyDLL ( \"user32.dll\" ) var proc = mod . NewProc ( \"MessageBoxW\" ) var MB_YESNOCANCEL = 0x00000003 ret , _ , _ := proc . Call ( 0 , uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( \"This test is Done.\" ))), uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( \"Done Title\" ))), uintptr ( MB_YESNOCANCEL )) fmt . Printf ( \"Return: %d\\n\" , ret ) } By \"linking\" against the library, using the \"[[cgo]]\" method (this way works in Linux and Windows). Example: import ( \"C\" ) ... C . MessageBoxW ( ... ) See [[cgo]] for further details.","title":"WindowsDLLs"},{"location":"WindowsDLLs/#calling-a-windows-dll","text":"Go allows you to call native Windows function in several different ways. Dynamically load a DLL, then call a function in it. You can call the function via SyscallX (where X is the number of parameters. If the function has fewer parameters than that, for example passing 7 arguments to a function that accepts 9, Syscall9 will still work, you just need to specify 7 as your second argument to Syscall9 ). A sample Go program that calls a Windows DLL function using this method: package main import ( \"fmt\" \"syscall\" \"unsafe\" ) func abort ( funcname string , err error ) { panic ( fmt . Sprintf ( \"%s failed: %v\" , funcname , err )) } var ( kernel32 , _ = syscall . LoadLibrary ( \"kernel32.dll\" ) getModuleHandle , _ = syscall . GetProcAddress ( kernel32 , \"GetModuleHandleW\" ) user32 , _ = syscall . LoadLibrary ( \"user32.dll\" ) messageBox , _ = syscall . GetProcAddress ( user32 , \"MessageBoxW\" ) ) const ( MB_OK = 0x00000000 MB_OKCANCEL = 0x00000001 MB_ABORTRETRYIGNORE = 0x00000002 MB_YESNOCANCEL = 0x00000003 MB_YESNO = 0x00000004 MB_RETRYCANCEL = 0x00000005 MB_CANCELTRYCONTINUE = 0x00000006 MB_ICONHAND = 0x00000010 MB_ICONQUESTION = 0x00000020 MB_ICONEXCLAMATION = 0x00000030 MB_ICONASTERISK = 0x00000040 MB_USERICON = 0x00000080 MB_ICONWARNING = MB_ICONEXCLAMATION MB_ICONERROR = MB_ICONHAND MB_ICONINFORMATION = MB_ICONASTERISK MB_ICONSTOP = MB_ICONHAND MB_DEFBUTTON1 = 0x00000000 MB_DEFBUTTON2 = 0x00000100 MB_DEFBUTTON3 = 0x00000200 MB_DEFBUTTON4 = 0x00000300 ) func MessageBox ( caption , text string , style uintptr ) ( result int ) { var nargs uintptr = 4 ret , _ , callErr := syscall . Syscall9 ( uintptr ( messageBox ), nargs , 0 , uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( text ))), uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( caption ))), style , 0 , 0 , 0 , 0 , 0 ) if callErr != 0 { abort ( \"Call MessageBox\" , callErr ) } result = int ( ret ) return } func GetModuleHandle () ( handle uintptr ) { var nargs uintptr = 0 if ret , _ , callErr := syscall . Syscall ( uintptr ( getModuleHandle ), nargs , 0 , 0 , 0 ); callErr != 0 { abort ( \"Call GetModuleHandle\" , callErr ) } else { handle = ret } return } func main () { defer syscall . FreeLibrary ( kernel32 ) defer syscall . FreeLibrary ( user32 ) fmt . Printf ( \"Return: %d\\n\" , MessageBox ( \"Done Title\" , \"This test is Done.\" , MB_YESNOCANCEL )) } func init () { fmt . Print ( \"Starting Up\\n\" ) } Using syscall.NewProc instead of syscall.GetProcAddress. These are basically some helper methods over the syscall ones, you saw above, and are available in Windows only: http://golang.org/src/pkg/syscall/dll_windows.go package main import ( \"fmt\" \"syscall\" \"unsafe\" ) func main () { var mod = syscall . NewLazyDLL ( \"user32.dll\" ) var proc = mod . NewProc ( \"MessageBoxW\" ) var MB_YESNOCANCEL = 0x00000003 ret , _ , _ := proc . Call ( 0 , uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( \"This test is Done.\" ))), uintptr ( unsafe . Pointer ( syscall . StringToUTF16Ptr ( \"Done Title\" ))), uintptr ( MB_YESNOCANCEL )) fmt . Printf ( \"Return: %d\\n\" , ret ) } By \"linking\" against the library, using the \"[[cgo]]\" method (this way works in Linux and Windows). Example: import ( \"C\" ) ... C . MessageBoxW ( ... ) See [[cgo]] for further details.","title":"Calling a Windows DLL"},{"location":"X-Repositories/","text":"The golang.org/x/... repositories are part of the Go Project but outside the main Go tree. They are developed under looser compatibility requirements than the Go core. In general, they will support the previous two releases and tip. These repositories should have no third-party dependencies apart from other golang.org/x/\u2026 repositories. The only exceptions are golang.org/x/tools/gopls , golang.org/x/vscode-go , and golang.org/x/pkgsite . If you would like to add a new dependency to an x repository, please file an issue and cc @rsc and @andybons . Install them with \"go get\". [ docs ] [ source ] golang.org/x/tools \u2014 godoc, vet, cover, and other tools. [ docs ] [ source ] golang.org/x/mobile \u2014 libraries and build tools for Go on Android. [ docs ] [ source ] golang.org/x/crypto \u2014 additional cryptography packages. [ docs ] [ source ] golang.org/x/image \u2014 additional imaging packages. [ docs ] [ source ] golang.org/x/net \u2014 additional networking packages. [ docs ] [ source ] golang.org/x/sys \u2014 for low-level interactions with the operating system. [ docs ] [ source ] golang.org/x/text \u2014 packages for working with text. [ docs ] [ source ] golang.org/x/blog \u2014 the content and server program for blog.golang.org . [ docs ] [ source ] golang.org/x/review \u2014 tools for code review. [ docs ] [ source ] golang.org/x/benchmarks [ docs ] [ source ] golang.org/x/exp \u2014 experimental code (handle with care). List of all packages in sub-repositories","title":"X Repositories"},{"location":"cgo/","text":"Introduction First, http://golang.org/cmd/cgo is the primary cgo documentation. There is also a good introduction article at http://golang.org/doc/articles/c_go_cgo.html . The basics If a Go source file imports \"C\" , it is using cgo. The Go file will have access to anything appearing in the comment immediately preceding the line import \"C\" , and will be linked against all other cgo comments in other Go files, and all C files included in the build process. Note that there must be no blank lines in between the cgo comment and the import statement. To access a symbol originating from the C side, use the package name C . That is, if you want to call the C function printf() from Go code, you write C.printf() . Since variable argument methods like printf aren't supported yet (issue 975 ), we will wrap it in the C method \"myprint\": package cgoexample /* #include <stdio.h> #include <stdlib.h> void myprint(char* s) { printf(\"%s\\n\", s); } */ import \"C\" import \"unsafe\" func Example () { cs := C . CString ( \"Hello from stdio\\n\" ) C . myprint ( cs ) C . free ( unsafe . Pointer ( cs )) } Calling Go functions from C It is possible to call both top-level Go functions and function variables from C code invoked from Go code using cgo. Global functions Go makes its functions available to C code through use of a special //export comment. Note: you can't define any C functions in preamble if you're using exports. For example, there are two files, foo.c and foo.go: foo.go contains: package gocallback import \"fmt\" /* #include <stdio.h> extern void ACFunction(); */ import \"C\" //export AGoFunction func AGoFunction () { fmt . Println ( \"AGoFunction()\" ) } func Example () { C . ACFunction () } foo.c contains: # include \"_cgo_export.h\" void ACFunction () { printf ( \"ACFunction()\\n\" ); AGoFunction (); } Function variables The following code shows an example of invoking a Go callback from C code. Because of the pointer passing rules Go code can not pass a function value directly to C. Instead it is necessary to use an indirection. This example uses a registry with a mutex, but there are many other ways to map from a value that can be passed to C to a Go function. package gocallback import ( \"fmt\" \"sync\" ) /* extern void go_callback_int(int foo, int p1); // normally you will have to define function or variables // in another separate C file to avoid the multiple definition // errors, however, using \"static inline\" is a nice workaround // for simple functions like this one. static inline void CallMyFunction(int foo) { go_callback_int(foo, 5); } */ import \"C\" //export go_callback_int func go_callback_int ( foo C . int , p1 C . int ) { fn := lookup ( int ( foo )) fn ( p1 ) } func MyCallback ( x C . int ) { fmt . Println ( \"callback with\" , x ) } func Example () { i := register ( MyCallback ) C . CallMyFunction ( C . int ( i )) unregister ( i ) } var mu sync . Mutex var index int var fns = make ( map [ int ] func ( C . int )) func register ( fn func ( C . int )) int { mu . Lock () defer mu . Unlock () index ++ for fns [ index ] != nil { index ++ } fns [ index ] = fn return index } func lookup ( i int ) func ( C . int ) { mu . Lock () defer mu . Unlock () return fns [ i ] } func unregister ( i int ) { mu . Lock () defer mu . Unlock () delete ( fns , i ) } Function pointer callbacks C code can call exported Go functions with their explicit name. But if a C-program wants a function pointer, a gateway function has to be written. This is because we can't take the address of a Go function and give that to C-code since the cgo tool will generate a stub in C that should be called. The following example shows how to integrate with C code wanting a function pointer of a give type. Place these source files under $GOPATH/src/ccallbacks/ . Compile and run with: $ gcc -c clibrary.c $ ar cru libclibrary.a clibrary.o $ go build $ ./ccallbacks Go.main(): calling C function with callback to us C.some_c_func(): calling callback with arg = 2 C.callOnMeGo_cgo(): called with arg = 2 Go.callOnMeGo(): called with arg = 2 C.some_c_func(): callback responded with 3 goprog.go package main /* #cgo CFLAGS: -I . #cgo LDFLAGS: -L . -lclibrary #include \"clibrary.h\" int callOnMeGo_cgo(int in); // Forward declaration. */ import \"C\" import ( \"fmt\" \"unsafe\" ) //export callOnMeGo func callOnMeGo ( in int ) int { fmt . Printf ( \"Go.callOnMeGo(): called with arg = %d\\n\" , in ) return in + 1 } func main () { fmt . Printf ( \"Go.main(): calling C function with callback to us\\n\" ) C . some_c_func (( C . callback_fcn )( unsafe . Pointer ( C . callOnMeGo_cgo ))) } cfuncs.go package main /* #include <stdio.h> // The gateway function int callOnMeGo_cgo(int in) { printf(\"C.callOnMeGo_cgo(): called with arg = %d\\n\", in); int callOnMeGo(int); return callOnMeGo(in); } */ import \"C\" clibrary.h #ifndef CLIBRARY_H #define CLIBRARY_H typedef int ( * callback_fcn )( int ); void some_c_func ( callback_fcn ); #endif clibrary.c #include <stdio.h> #include \"clibrary.h\" void some_c_func ( callback_fcn callback ) { int arg = 2 ; printf ( \"C.some_c_func(): calling callback with arg = %d \\n \" , arg ); int response = callback ( 2 ); printf ( \"C.some_c_func(): callback responded with %d \\n \" , response ); } Go strings and C strings Go strings and C strings are different. Go strings are the combination of a length and a pointer to the first character in the string. C strings are just the pointer to the first character, and are terminated by the first instance of the null character, '\\0' . Go provides means to go from one to another in the form of the following three functions: * func C.CString(goString string) *C.char * func C.GoString(cString *C.char) string * func C.GoStringN(cString *C.char, length C.int) string One important thing to remember is that C.CString() will allocate a new string of the appropriate length, and return it. That means the C string is not going to be garbage collected and it is up to you to free it. A standard way to do this follows. // #include <stdlib.h> import \"C\" import \"unsafe\" ... var cmsg * C . char = C . CString ( \"hi\" ) defer C . free ( unsafe . Pointer ( cmsg )) // do something with the C string Of course, you aren't required to use defer to call C.free() . You can free the C string whenever you like, but it is your responsibility to make sure it happens. Turning C arrays into Go slices C arrays are typically either null-terminated or have a length kept elsewhere. Go provides the following function to make a new Go byte slice from a C array: * func C.GoBytes(cArray unsafe.Pointer, length C.int) []byte To create a Go slice backed by a C array (without copying the original data), one needs to acquire this length at runtime and use a type conversion to a pointer to a very big array and then slice it to the length that you want (also remember to set the cap if you're using Go 1.2 or later), for example (see http://play.golang.org/p/XuC0xqtAIC for a runnable example): import \"C\" import \"unsafe\" ... var theCArray * C . YourType = C . getTheArray () length := C . getTheArrayLength () slice := ( * [ 1 << 28 ] C . YourType )( unsafe . Pointer ( theCArray ))[: length : length ] It is important to keep in mind that the Go garbage collector will not interact with this data, and that if it is freed from the C side of things, the behavior of any Go code using the slice is nondeterministic. Common Pitfalls Struct Alignment Issues As Go doesn't support packed struct (e.g., structs where maximum alignment is 1 byte), you can't use packed C struct in Go. Even if your program passes compilation, it won't do what you want. To use it, you have to read/write the struct as byte array/slice. Another problem is that some types has lower alignment requirement than their counterpart in Go, and if that type happens to be aligned in C but not in Go rules, that struct simply can't be represented in Go. An example is this ( issue 7560 ): struct T { uint32_t pad ; complex float x ; }; Go's complex64 has an alignment of 8-byte, where as C has only 4-byte (because C treats the complex float internally as a struct { float real; float imag; } , not a basic type), this T struct simply doesn't have a Go representation. For this case, if you control the layout of the struct, move the complex float so that it is also aligned to 8-byte is better, and if you're not willing to move it, use this form will force it to align to 8-byte (and waste 4-byte): struct T { uint32_t pad ; __attribute__ (( align ( 8 ))) complex float x ; }; However, if you don't control the struct layout, you will have to define accessor C functions for that struct because cgo won't be able to translate that struct into equivalent Go struct. //export and definition in preamble If a Go source file uses any //export directives, then the C code in the comment may only include declarations ( extern int f(); ), not definitions ( int f() { return 1; } or int n; ). Note: you can use static inline trick to work around this restriction for tiny functions defined in the preamble (see above for a complete example). Windows In order to use cgo on Windows, you'll also need to first install a gcc compiler (for instance, mingw-w64) and have gcc.exe (etc.) in your PATH environment variable before compiling with cgo will work. environmental variables Go os.Getenv() doesn't see variables set by C.setenv() tests _test.go files can't use cgo.","title":"cgo"},{"location":"cgo/#introduction","text":"First, http://golang.org/cmd/cgo is the primary cgo documentation. There is also a good introduction article at http://golang.org/doc/articles/c_go_cgo.html .","title":"Introduction"},{"location":"cgo/#the-basics","text":"If a Go source file imports \"C\" , it is using cgo. The Go file will have access to anything appearing in the comment immediately preceding the line import \"C\" , and will be linked against all other cgo comments in other Go files, and all C files included in the build process. Note that there must be no blank lines in between the cgo comment and the import statement. To access a symbol originating from the C side, use the package name C . That is, if you want to call the C function printf() from Go code, you write C.printf() . Since variable argument methods like printf aren't supported yet (issue 975 ), we will wrap it in the C method \"myprint\": package cgoexample /* #include <stdio.h> #include <stdlib.h> void myprint(char* s) { printf(\"%s\\n\", s); } */ import \"C\" import \"unsafe\" func Example () { cs := C . CString ( \"Hello from stdio\\n\" ) C . myprint ( cs ) C . free ( unsafe . Pointer ( cs )) }","title":"The basics"},{"location":"cgo/#calling-go-functions-from-c","text":"It is possible to call both top-level Go functions and function variables from C code invoked from Go code using cgo.","title":"Calling Go functions from C"},{"location":"cgo/#global-functions","text":"Go makes its functions available to C code through use of a special //export comment. Note: you can't define any C functions in preamble if you're using exports. For example, there are two files, foo.c and foo.go: foo.go contains: package gocallback import \"fmt\" /* #include <stdio.h> extern void ACFunction(); */ import \"C\" //export AGoFunction func AGoFunction () { fmt . Println ( \"AGoFunction()\" ) } func Example () { C . ACFunction () } foo.c contains: # include \"_cgo_export.h\" void ACFunction () { printf ( \"ACFunction()\\n\" ); AGoFunction (); }","title":"Global functions"},{"location":"cgo/#function-variables","text":"The following code shows an example of invoking a Go callback from C code. Because of the pointer passing rules Go code can not pass a function value directly to C. Instead it is necessary to use an indirection. This example uses a registry with a mutex, but there are many other ways to map from a value that can be passed to C to a Go function. package gocallback import ( \"fmt\" \"sync\" ) /* extern void go_callback_int(int foo, int p1); // normally you will have to define function or variables // in another separate C file to avoid the multiple definition // errors, however, using \"static inline\" is a nice workaround // for simple functions like this one. static inline void CallMyFunction(int foo) { go_callback_int(foo, 5); } */ import \"C\" //export go_callback_int func go_callback_int ( foo C . int , p1 C . int ) { fn := lookup ( int ( foo )) fn ( p1 ) } func MyCallback ( x C . int ) { fmt . Println ( \"callback with\" , x ) } func Example () { i := register ( MyCallback ) C . CallMyFunction ( C . int ( i )) unregister ( i ) } var mu sync . Mutex var index int var fns = make ( map [ int ] func ( C . int )) func register ( fn func ( C . int )) int { mu . Lock () defer mu . Unlock () index ++ for fns [ index ] != nil { index ++ } fns [ index ] = fn return index } func lookup ( i int ) func ( C . int ) { mu . Lock () defer mu . Unlock () return fns [ i ] } func unregister ( i int ) { mu . Lock () defer mu . Unlock () delete ( fns , i ) }","title":"Function variables"},{"location":"cgo/#function-pointer-callbacks","text":"C code can call exported Go functions with their explicit name. But if a C-program wants a function pointer, a gateway function has to be written. This is because we can't take the address of a Go function and give that to C-code since the cgo tool will generate a stub in C that should be called. The following example shows how to integrate with C code wanting a function pointer of a give type. Place these source files under $GOPATH/src/ccallbacks/ . Compile and run with: $ gcc -c clibrary.c $ ar cru libclibrary.a clibrary.o $ go build $ ./ccallbacks Go.main(): calling C function with callback to us C.some_c_func(): calling callback with arg = 2 C.callOnMeGo_cgo(): called with arg = 2 Go.callOnMeGo(): called with arg = 2 C.some_c_func(): callback responded with 3 goprog.go package main /* #cgo CFLAGS: -I . #cgo LDFLAGS: -L . -lclibrary #include \"clibrary.h\" int callOnMeGo_cgo(int in); // Forward declaration. */ import \"C\" import ( \"fmt\" \"unsafe\" ) //export callOnMeGo func callOnMeGo ( in int ) int { fmt . Printf ( \"Go.callOnMeGo(): called with arg = %d\\n\" , in ) return in + 1 } func main () { fmt . Printf ( \"Go.main(): calling C function with callback to us\\n\" ) C . some_c_func (( C . callback_fcn )( unsafe . Pointer ( C . callOnMeGo_cgo ))) } cfuncs.go package main /* #include <stdio.h> // The gateway function int callOnMeGo_cgo(int in) { printf(\"C.callOnMeGo_cgo(): called with arg = %d\\n\", in); int callOnMeGo(int); return callOnMeGo(in); } */ import \"C\" clibrary.h #ifndef CLIBRARY_H #define CLIBRARY_H typedef int ( * callback_fcn )( int ); void some_c_func ( callback_fcn ); #endif clibrary.c #include <stdio.h> #include \"clibrary.h\" void some_c_func ( callback_fcn callback ) { int arg = 2 ; printf ( \"C.some_c_func(): calling callback with arg = %d \\n \" , arg ); int response = callback ( 2 ); printf ( \"C.some_c_func(): callback responded with %d \\n \" , response ); }","title":"Function pointer callbacks"},{"location":"cgo/#go-strings-and-c-strings","text":"Go strings and C strings are different. Go strings are the combination of a length and a pointer to the first character in the string. C strings are just the pointer to the first character, and are terminated by the first instance of the null character, '\\0' . Go provides means to go from one to another in the form of the following three functions: * func C.CString(goString string) *C.char * func C.GoString(cString *C.char) string * func C.GoStringN(cString *C.char, length C.int) string One important thing to remember is that C.CString() will allocate a new string of the appropriate length, and return it. That means the C string is not going to be garbage collected and it is up to you to free it. A standard way to do this follows. // #include <stdlib.h> import \"C\" import \"unsafe\" ... var cmsg * C . char = C . CString ( \"hi\" ) defer C . free ( unsafe . Pointer ( cmsg )) // do something with the C string Of course, you aren't required to use defer to call C.free() . You can free the C string whenever you like, but it is your responsibility to make sure it happens.","title":"Go strings and C strings"},{"location":"cgo/#turning-c-arrays-into-go-slices","text":"C arrays are typically either null-terminated or have a length kept elsewhere. Go provides the following function to make a new Go byte slice from a C array: * func C.GoBytes(cArray unsafe.Pointer, length C.int) []byte To create a Go slice backed by a C array (without copying the original data), one needs to acquire this length at runtime and use a type conversion to a pointer to a very big array and then slice it to the length that you want (also remember to set the cap if you're using Go 1.2 or later), for example (see http://play.golang.org/p/XuC0xqtAIC for a runnable example): import \"C\" import \"unsafe\" ... var theCArray * C . YourType = C . getTheArray () length := C . getTheArrayLength () slice := ( * [ 1 << 28 ] C . YourType )( unsafe . Pointer ( theCArray ))[: length : length ] It is important to keep in mind that the Go garbage collector will not interact with this data, and that if it is freed from the C side of things, the behavior of any Go code using the slice is nondeterministic.","title":"Turning C arrays into Go slices"},{"location":"cgo/#common-pitfalls","text":"","title":"Common Pitfalls"},{"location":"cgo/#struct-alignment-issues","text":"As Go doesn't support packed struct (e.g., structs where maximum alignment is 1 byte), you can't use packed C struct in Go. Even if your program passes compilation, it won't do what you want. To use it, you have to read/write the struct as byte array/slice. Another problem is that some types has lower alignment requirement than their counterpart in Go, and if that type happens to be aligned in C but not in Go rules, that struct simply can't be represented in Go. An example is this ( issue 7560 ): struct T { uint32_t pad ; complex float x ; }; Go's complex64 has an alignment of 8-byte, where as C has only 4-byte (because C treats the complex float internally as a struct { float real; float imag; } , not a basic type), this T struct simply doesn't have a Go representation. For this case, if you control the layout of the struct, move the complex float so that it is also aligned to 8-byte is better, and if you're not willing to move it, use this form will force it to align to 8-byte (and waste 4-byte): struct T { uint32_t pad ; __attribute__ (( align ( 8 ))) complex float x ; }; However, if you don't control the struct layout, you will have to define accessor C functions for that struct because cgo won't be able to translate that struct into equivalent Go struct.","title":"Struct Alignment Issues"},{"location":"cgo/#export-and-definition-in-preamble","text":"If a Go source file uses any //export directives, then the C code in the comment may only include declarations ( extern int f(); ), not definitions ( int f() { return 1; } or int n; ). Note: you can use static inline trick to work around this restriction for tiny functions defined in the preamble (see above for a complete example).","title":"//export and definition in preamble"},{"location":"cgo/#windows","text":"In order to use cgo on Windows, you'll also need to first install a gcc compiler (for instance, mingw-w64) and have gcc.exe (etc.) in your PATH environment variable before compiling with cgo will work.","title":"Windows"},{"location":"cgo/#environmental-variables","text":"Go os.Getenv() doesn't see variables set by C.setenv()","title":"environmental variables"},{"location":"cgo/#tests","text":"_test.go files can't use cgo.","title":"tests"},{"location":"golang-tools/","text":"Mission statement The golang-tools community is a group of people whose main focus and interest is the development of tools for the Go language. It is open to everyone. Tooling topics include (but are not limited to) code analysis, compilers, editor and IDE plugins, language servers, and standard libraries. The golang-tools working group is useful for: getting feedback on ideas experimenting with a group of \"trusted testers\" external proof-reading of proposals, blog posts etc A key goal of the golang-tools group is that all forums of communication, but especially the regular calls, are friendly and welcoming. We want to create an environment in which everyone feels both supported and able to share their opinions and experience, frankly, freely, and openly. The wider Go Code of Conduct , which we observe just like all other Go forums, summarises this well. Community spaces Discussion within the community takes place in three main spaces. There are also dedicated golang-tools sessions held at GopherCon each year. Slack Most day-to-day discussion take place in the #tools channel on the Gophers Slack ( sign-up here ). Mailing list The golang-tools mailing list contains community updates as well as other forms of announcements. Calls The community operates a monthly \u201ccatch-up\u201d call covering updates about large-impact changes, new tool initiatives, ongoing community projects and much more. The agenda is community-driven and anyone can suggest items that they would like to cover. Like the other discussion spaces these calls are open to anyone and people new to the community are encouraged to join in and share in the conversation. The details (date, link, phone number, \u2026) for each call are shared via the mailing list as well as the Slack channel. Shared Calendar As of October 2020, all calls/events will be added to the shared calendar . Upcoming calls 2021-08-18 - Agenda - Meet Call archive 2021-06-16 - Meeting notes - video 2021-05-12 - Meeting notes - video 2021-04-14 - Meeting notes - video 2021-03-10 - Meeting notes - video 2021-02-10 - Meeting notes - video 2021-01-13 - Meeting notes - video 2020-11-18 - Meeting notes - video 2020-10-21 - Meeting notes - video 2020-09-16 - Meeting notes - video 2020-08-19 - Meeting notes - video 2020-07-22 - Meeting notes - video 2020-06-24 - Meeting notes - video 2020-05-13 - Meeting notes - video 2020-04-08 - Meeting notes - video 2020-03-11 - Meeting notes - video 2020-01-28 - Meeting notes - video 2019-12-03 - Meeting notes - video 2019-10-29 - Meeting notes - video 2019-09-24 - Meeting notes - video 2019-08-27 - Meeting notes - video 2019-07-26 - Meeting notes - second session at GopherCon San Diego 2019-07-25 - Meeting notes - first session at GopherCon San Diego 2019-05-28 - Meeting notes - video 2019-04-30 - Meeting notes - video 2019-03-26 - Meeting notes - video 2019-02-26 - Meeting notes - video 2019-01-29 - Meeting notes - video 2018-12-11 - Meeting notes - video 2018-11-27 - Meeting notes - video 2018-11-06 - Meeting Notes 2018-10-23 - Meeting Notes - video 2018-10-09 - Meeting notes - video 2018-09-18 - Meeting notes - video 2018-08-28 - Notes from GopherCon \"kick off\" session Organizing a call We try to share the load of organizing and running the calls between Gophers inside and outside of Google (generally alternating between Googlers and non-Googlers). Here are the steps required as organizer: Using a non-google.com account, ask Paul Jolly for editing access to the shared drive , and then create a folder for the next monthly call, and a put a copy of the previous call's agenda in it. If using a @google .com account, you won't be able to make the agenda editable by anyone with the link, so Googlers might have to ask someone else to do this step (or use an external account with appropriate permissions). Rename and clear out the agenda for the next call. Update this wiki, archiving the previous call and linking the new upcoming call. Update the shared calendar with the new event. By convention calls run from 16:30-17:30 London. Send reminders 1-2 weeks before the call date to the mailing list and #tools slack channel. On the day of the call, remember to ask a Googler to start recording, and then run through the agenda.","title":"golang tools"},{"location":"golang-tools/#mission-statement","text":"The golang-tools community is a group of people whose main focus and interest is the development of tools for the Go language. It is open to everyone. Tooling topics include (but are not limited to) code analysis, compilers, editor and IDE plugins, language servers, and standard libraries. The golang-tools working group is useful for: getting feedback on ideas experimenting with a group of \"trusted testers\" external proof-reading of proposals, blog posts etc A key goal of the golang-tools group is that all forums of communication, but especially the regular calls, are friendly and welcoming. We want to create an environment in which everyone feels both supported and able to share their opinions and experience, frankly, freely, and openly. The wider Go Code of Conduct , which we observe just like all other Go forums, summarises this well.","title":"Mission statement"},{"location":"golang-tools/#community-spaces","text":"Discussion within the community takes place in three main spaces. There are also dedicated golang-tools sessions held at GopherCon each year.","title":"Community spaces"},{"location":"golang-tools/#slack","text":"Most day-to-day discussion take place in the #tools channel on the Gophers Slack ( sign-up here ).","title":"Slack"},{"location":"golang-tools/#mailing-list","text":"The golang-tools mailing list contains community updates as well as other forms of announcements.","title":"Mailing list"},{"location":"golang-tools/#calls","text":"The community operates a monthly \u201ccatch-up\u201d call covering updates about large-impact changes, new tool initiatives, ongoing community projects and much more. The agenda is community-driven and anyone can suggest items that they would like to cover. Like the other discussion spaces these calls are open to anyone and people new to the community are encouraged to join in and share in the conversation. The details (date, link, phone number, \u2026) for each call are shared via the mailing list as well as the Slack channel.","title":"Calls"},{"location":"golang-tools/#shared-calendar","text":"As of October 2020, all calls/events will be added to the shared calendar .","title":"Shared Calendar"},{"location":"golang-tools/#upcoming-calls","text":"2021-08-18 - Agenda - Meet","title":"Upcoming calls"},{"location":"golang-tools/#call-archive","text":"2021-06-16 - Meeting notes - video 2021-05-12 - Meeting notes - video 2021-04-14 - Meeting notes - video 2021-03-10 - Meeting notes - video 2021-02-10 - Meeting notes - video 2021-01-13 - Meeting notes - video 2020-11-18 - Meeting notes - video 2020-10-21 - Meeting notes - video 2020-09-16 - Meeting notes - video 2020-08-19 - Meeting notes - video 2020-07-22 - Meeting notes - video 2020-06-24 - Meeting notes - video 2020-05-13 - Meeting notes - video 2020-04-08 - Meeting notes - video 2020-03-11 - Meeting notes - video 2020-01-28 - Meeting notes - video 2019-12-03 - Meeting notes - video 2019-10-29 - Meeting notes - video 2019-09-24 - Meeting notes - video 2019-08-27 - Meeting notes - video 2019-07-26 - Meeting notes - second session at GopherCon San Diego 2019-07-25 - Meeting notes - first session at GopherCon San Diego 2019-05-28 - Meeting notes - video 2019-04-30 - Meeting notes - video 2019-03-26 - Meeting notes - video 2019-02-26 - Meeting notes - video 2019-01-29 - Meeting notes - video 2018-12-11 - Meeting notes - video 2018-11-27 - Meeting notes - video 2018-11-06 - Meeting Notes 2018-10-23 - Meeting Notes - video 2018-10-09 - Meeting notes - video 2018-09-18 - Meeting notes - video 2018-08-28 - Notes from GopherCon \"kick off\" session","title":"Call archive"},{"location":"golang-tools/#organizing-a-call","text":"We try to share the load of organizing and running the calls between Gophers inside and outside of Google (generally alternating between Googlers and non-Googlers). Here are the steps required as organizer: Using a non-google.com account, ask Paul Jolly for editing access to the shared drive , and then create a folder for the next monthly call, and a put a copy of the previous call's agenda in it. If using a @google .com account, you won't be able to make the agenda editable by anyone with the link, so Googlers might have to ask someone else to do this step (or use an external account with appropriate permissions). Rename and clear out the agenda for the next call. Update this wiki, archiving the previous call and linking the new upcoming call. Update the shared calendar with the new event. By convention calls run from 16:30-17:30 London. Send reminders 1-2 weeks before the call date to the mailing list and #tools slack channel. On the day of the call, remember to ask a Googler to start recording, and then run through the agenda.","title":"Organizing a call"},{"location":"gopherbot/","text":"This page outlines all interactive gopherbot functionality. Most of the tasks gopherbot performs do not require human intervention, however it is starting to learn new tricks. Adding/Removing Labels You may add or remove labels by telling gopherbot what you'd like to do. @gopherbot, please add labels NeedsFix,help wanted and remove label needsinvestigation The comma after @gopherbot and the please , and , add , and label[s] keywords are optional. Adding a label is the default, so you can have the command be much more terse if you wish. @gopherbot needsfix, help wanted remove needsinvestigation The above command will achieve the same results as the first command. If you don't wish to remove anything, you can omit the remove keyword. @gopherbot needsfix, help wanted The above command will add the NeedsFix and help wanted labels. Notice how labels must be separated by a comma (or semicolon). This is to account for those with spaces in them like help wanted . You cannot quote the labels. @gopherbot needsfix \"help wanted\" \u2190 Does not work Casing also doesn't matter. needsfix is equivalent to NeedsFix . gopherbot will figure out the right label for you. There are some labels that are not allowed to be added or removed. Those can be seen in the labelChangeDisallowed function in the source . For more in-depth examples, take a look at the tests . As always, patches are welcome! Backporting issues gopherbot is capable of opening backport issues according to MinorReleases in response to comments like the following on the main issue. @gopherbot please consider this for backport to 1.10, it's a regression. @gopherbot please open the backport tracking issues. This is a severe compiler bug. The keywords are @gopherbot , backport , please and optionally the release. They can be anywhere in the comment. If no release is mentioned issues are opened for the two past releases. The entire message is quoted in the new issue, so please include a rationale. (Note that currently only the first backport command on an issue is executed. https://golang.org/issues/25574 )","title":"gopherbot"},{"location":"gopherbot/#addingremoving-labels","text":"You may add or remove labels by telling gopherbot what you'd like to do. @gopherbot, please add labels NeedsFix,help wanted and remove label needsinvestigation The comma after @gopherbot and the please , and , add , and label[s] keywords are optional. Adding a label is the default, so you can have the command be much more terse if you wish. @gopherbot needsfix, help wanted remove needsinvestigation The above command will achieve the same results as the first command. If you don't wish to remove anything, you can omit the remove keyword. @gopherbot needsfix, help wanted The above command will add the NeedsFix and help wanted labels. Notice how labels must be separated by a comma (or semicolon). This is to account for those with spaces in them like help wanted . You cannot quote the labels. @gopherbot needsfix \"help wanted\" \u2190 Does not work Casing also doesn't matter. needsfix is equivalent to NeedsFix . gopherbot will figure out the right label for you. There are some labels that are not allowed to be added or removed. Those can be seen in the labelChangeDisallowed function in the source . For more in-depth examples, take a look at the tests . As always, patches are welcome!","title":"Adding/Removing Labels"},{"location":"gopherbot/#backporting-issues","text":"gopherbot is capable of opening backport issues according to MinorReleases in response to comments like the following on the main issue. @gopherbot please consider this for backport to 1.10, it's a regression. @gopherbot please open the backport tracking issues. This is a severe compiler bug. The keywords are @gopherbot , backport , please and optionally the release. They can be anywhere in the comment. If no release is mentioned issues are opened for the two past releases. The entire message is quoted in the new issue, so please include a rationale. (Note that currently only the first backport command on an issue is executed. https://golang.org/issues/25574 )","title":"Backporting issues"},{"location":"gopls-integrator-FAQ/","text":"This page has been subsumed into the committed markdown of x/tools repository Please do not edit this page!","title":"gopls integrator FAQ"},{"location":"gopls/","text":"This page was moved to the x/tools repository . Please do not edit this page!","title":"gopls"},{"location":"heapdump13/","text":"Heap dump format for other versions: Go 1.4: [[heapdump14]] Go 1.5 and later: [[heapdump15-through-heapdump17]] Introduction Go 1.3 added a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here. Details The file starts with the bytes of the string \"go1.3 heap dumpn\". The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker. The possible kinds are 1=Ptr, 2=String, 3=Slice, 4=Iface, and 5=Eface. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below. EOF An EOF record has no fields and must appear last. object uvarint: address of object uvarint: address of type descriptor (or 0 if unknown) uvarint: kind of object (0=regular 1=array 2=channel 127=conservatively scanned) string: contents of object For array or channel kinds, the type must be nonzero. The size of the contents string is the size of the containing sizeclass, not the size of the type itself. As such, contents size may be somewhat bigger than the type size. It may be a lot bigger for array and channel types. For instance, an array with n elements will have a content size bigger than or equal to n times the type size. otherroot string: textual description of where this root came from uvarint: root pointer type uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type is a pointer fieldlist: a list of the kinds and locations of pointer-containing fields in objects of this type goroutine (G) uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\". stack frame uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame dump params bool: big endian uvarint: pointer size in bytes uvarint: channel header size in bytes uvarint: starting address of heap uvarint: ending address of heap uvarint: thechar = architecture specifier string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu finalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC. itab uvarint: Itab address bool: whether the data field of an Iface with this itab is a pointer osthread (M) uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread memstats Dumps the first 26 fields of MemStats . All fields are dumped with a uvarint except the 25 th which is dumped with 256 uvarints. queuedfinalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet. data uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment. bss Same format as data, but for the bss segment. defer uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record panic uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record alloc/free profile record uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees alloc sample record uvarint: address of object uvarint: alloc/free profile record identifier","title":"heapdump13"},{"location":"heapdump13/#introduction","text":"Go 1.3 added a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here.","title":"Introduction"},{"location":"heapdump13/#details","text":"The file starts with the bytes of the string \"go1.3 heap dumpn\". The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker. The possible kinds are 1=Ptr, 2=String, 3=Slice, 4=Iface, and 5=Eface. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below.","title":"Details"},{"location":"heapdump13/#eof","text":"An EOF record has no fields and must appear last.","title":"EOF"},{"location":"heapdump13/#object","text":"uvarint: address of object uvarint: address of type descriptor (or 0 if unknown) uvarint: kind of object (0=regular 1=array 2=channel 127=conservatively scanned) string: contents of object For array or channel kinds, the type must be nonzero. The size of the contents string is the size of the containing sizeclass, not the size of the type itself. As such, contents size may be somewhat bigger than the type size. It may be a lot bigger for array and channel types. For instance, an array with n elements will have a content size bigger than or equal to n times the type size.","title":"object"},{"location":"heapdump13/#otherroot","text":"string: textual description of where this root came from uvarint: root pointer","title":"otherroot"},{"location":"heapdump13/#type","text":"uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type is a pointer fieldlist: a list of the kinds and locations of pointer-containing fields in objects of this type","title":"type"},{"location":"heapdump13/#goroutine-g","text":"uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".","title":"goroutine (G)"},{"location":"heapdump13/#stack-frame","text":"uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame","title":"stack frame"},{"location":"heapdump13/#dump-params","text":"bool: big endian uvarint: pointer size in bytes uvarint: channel header size in bytes uvarint: starting address of heap uvarint: ending address of heap uvarint: thechar = architecture specifier string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu","title":"dump params"},{"location":"heapdump13/#finalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.","title":"finalizer"},{"location":"heapdump13/#itab","text":"uvarint: Itab address bool: whether the data field of an Iface with this itab is a pointer","title":"itab"},{"location":"heapdump13/#osthread-m","text":"uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread","title":"osthread (M)"},{"location":"heapdump13/#memstats","text":"Dumps the first 26 fields of MemStats . All fields are dumped with a uvarint except the 25 th which is dumped with 256 uvarints.","title":"memstats"},{"location":"heapdump13/#queuedfinalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet.","title":"queuedfinalizer"},{"location":"heapdump13/#data","text":"uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment.","title":"data"},{"location":"heapdump13/#bss","text":"Same format as data, but for the bss segment.","title":"bss"},{"location":"heapdump13/#defer","text":"uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record","title":"defer"},{"location":"heapdump13/#panic","text":"uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record","title":"panic"},{"location":"heapdump13/#allocfree-profile-record","text":"uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees","title":"alloc/free profile record"},{"location":"heapdump13/#alloc-sample-record","text":"uvarint: address of object uvarint: alloc/free profile record identifier","title":"alloc sample record"},{"location":"heapdump14/","text":"Heap dump format for other versions: Go 1.3: [[heapdump13]] Go 1.5 and later: [[heapdump15-through-heapdump17]] Introduction Go 1.4 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here. Details The file starts with the bytes of the string \"go1.4 heap dumpn\". The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker. The possible kinds are 1=Ptr, 2=Iface, and 3=Eface. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below. EOF An EOF record has no fields and must appear last. object uvarint: address of object string: contents of object fieldlist: describes pointer-containing fields of the object The size of the contents string is the size of the containing sizeclass, not the size of the object itself. As such, contents size may be somewhat bigger than the contained object's type. otherroot string: textual description of where this root came from uvarint: root pointer type uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type is a pointer goroutine (G) uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\". stack frame uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame dump params bool: big endian uvarint: pointer size in bytes uvarint: starting address of heap uvarint: ending address of heap uvarint: thechar = architecture specifier string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu finalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC. itab uvarint: Itab address uvarint: address of type descriptor for contained type osthread (M) uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread memstats Dumps the first 26 fields of MemStats . All fields are dumped with a uvarint except the 25 th which is dumped with 256 uvarints. queuedfinalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet. data uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment. bss Same format as data, but for the bss segment. defer uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record panic uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record alloc/free profile record uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees alloc sample record uvarint: address of object uvarint: alloc/free profile record identifier","title":"heapdump14"},{"location":"heapdump14/#introduction","text":"Go 1.4 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here.","title":"Introduction"},{"location":"heapdump14/#details","text":"The file starts with the bytes of the string \"go1.4 heap dumpn\". The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker. The possible kinds are 1=Ptr, 2=Iface, and 3=Eface. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below.","title":"Details"},{"location":"heapdump14/#eof","text":"An EOF record has no fields and must appear last.","title":"EOF"},{"location":"heapdump14/#object","text":"uvarint: address of object string: contents of object fieldlist: describes pointer-containing fields of the object The size of the contents string is the size of the containing sizeclass, not the size of the object itself. As such, contents size may be somewhat bigger than the contained object's type.","title":"object"},{"location":"heapdump14/#otherroot","text":"string: textual description of where this root came from uvarint: root pointer","title":"otherroot"},{"location":"heapdump14/#type","text":"uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type is a pointer","title":"type"},{"location":"heapdump14/#goroutine-g","text":"uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".","title":"goroutine (G)"},{"location":"heapdump14/#stack-frame","text":"uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame","title":"stack frame"},{"location":"heapdump14/#dump-params","text":"bool: big endian uvarint: pointer size in bytes uvarint: starting address of heap uvarint: ending address of heap uvarint: thechar = architecture specifier string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu","title":"dump params"},{"location":"heapdump14/#finalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.","title":"finalizer"},{"location":"heapdump14/#itab","text":"uvarint: Itab address uvarint: address of type descriptor for contained type","title":"itab"},{"location":"heapdump14/#osthread-m","text":"uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread","title":"osthread (M)"},{"location":"heapdump14/#memstats","text":"Dumps the first 26 fields of MemStats . All fields are dumped with a uvarint except the 25 th which is dumped with 256 uvarints.","title":"memstats"},{"location":"heapdump14/#queuedfinalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet.","title":"queuedfinalizer"},{"location":"heapdump14/#data","text":"uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment.","title":"data"},{"location":"heapdump14/#bss","text":"Same format as data, but for the bss segment.","title":"bss"},{"location":"heapdump14/#defer","text":"uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record","title":"defer"},{"location":"heapdump14/#panic","text":"uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record","title":"panic"},{"location":"heapdump14/#allocfree-profile-record","text":"uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees","title":"alloc/free profile record"},{"location":"heapdump14/#alloc-sample-record","text":"uvarint: address of object uvarint: alloc/free profile record identifier","title":"alloc sample record"},{"location":"heapdump15-through-heapdump17/","text":"Heap dump format for other versions: [[heapdump13]] [[heapdump14]] Introduction Go 1.5 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here. Details The file starts with the bytes of the string \"go1.5 heap dumpn\". This description also applies to files starting with \"go1.6 heap dumpn\" and \"go1.7 heap dumpn\". The go1.6 format is identical to 1.5, and the go1.7 format has one small change described below. The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by an end-of-list marker. The only possible kind is 1=Ptr. Earlier versions of the heap dump could contain 2=Iface and 3=Eface, but the runtime no longer tracks that information, so it is not present in the dump. Interface values appear as a pair of pointers. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below. EOF An EOF record has no fields and must appear last. object uvarint: address of object string: contents of object fieldlist: describes pointer-containing fields of the object The size of the contents string is the size of the containing sizeclass, not the size of the object itself. As such, contents size may be somewhat bigger than the contained object's type. otherroot string: textual description of where this root came from uvarint: root pointer type uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type has type T (false) or *T (true) goroutine (G) uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\". stack frame uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame dump params bool: big endian uvarint: pointer size in bytes uvarint: starting address of heap uvarint: ending address of heap string: architecture name string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu finalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC. itab uvarint: Itab address uvarint: address of type descriptor for contained type Up to go1.6, the type is always a pointer type, and represents the type of the itab.data field. From go1.7 and beyond, the type is the type stored in the interface. To decide whether the itab.data field is T or *T requires looking at the last boolean in the referenced type's descriptor. osthread (M) uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread memstats Records the following fields of runtime.MemStats : * uvarint: Alloc * uvarint: TotalAlloc * uvarint: Sys * uvarint: Lookups * uvarint: Mallocs * uvarint: Frees * uvarint: HeapAlloc * uvarint: HeapSys * uvarint: HeapIdle * uvarint: HeapInuse * uvarint: HeapReleased * uvarint: HeapObjects * uvarint: StackInuse * uvarint: StackSys * uvarint: MSpanInuse * uvarint: MSpanSys * uvarint: MCacheInuse * uvarint: MCacheSys * uvarint: BuckHashSys * uvarint: GCSys * uvarint: OtherSys * uvarint: NextGC * uvarint: LastGC * uvarint: PauseTotalNs * 256 uvarints: PauseNs * uvarint: NumGC queuedfinalizer uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet. data uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment. bss Same format as data, but for the bss segment. defer uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record panic uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record alloc/free profile record uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees alloc sample record uvarint: address of object uvarint: alloc/free profile record identifier","title":"heapdump15 through heapdump17"},{"location":"heapdump15-through-heapdump17/#introduction","text":"Go 1.5 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file. The format of this file is specified here.","title":"Introduction"},{"location":"heapdump15-through-heapdump17/#details","text":"The file starts with the bytes of the string \"go1.5 heap dumpn\". This description also applies to files starting with \"go1.6 heap dumpn\" and \"go1.7 heap dumpn\". The go1.6 format is identical to 1.5, and the go1.7 format has one small change described below. The rest of the file is a sequence of records. Records can be of several different kinds. Records will contain the following primitives: * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint * string - a uvarint-encoded length followed by that many bytes of data * bool - a uvarint-encoded 0 for false or 1 for true * fieldlist - a description of the pointer-bearing portions of a memory region. It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by an end-of-list marker. The only possible kind is 1=Ptr. Earlier versions of the heap dump could contain 2=Iface and 3=Eface, but the runtime no longer tracks that information, so it is not present in the dump. Interface values appear as a pair of pointers. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset. Each record starts with a uvarint-encoded integer describing the type of the record: * 0 = EOF * 1 = object * 2 = otherroot * 3 = type * 4 = goroutine * 5 = stack frame * 6 = dump params * 7 = registered finalizer * 8 = itab * 9 = OS thread * 10 = mem stats * 11 = queued finalizer * 12 = data segment * 13 = bss segment * 14 = defer record * 15 = panic record * 16 = alloc/free profile record * 17 = alloc stack trace sample The remaining fields of each record are type-dependent and are described below.","title":"Details"},{"location":"heapdump15-through-heapdump17/#eof","text":"An EOF record has no fields and must appear last.","title":"EOF"},{"location":"heapdump15-through-heapdump17/#object","text":"uvarint: address of object string: contents of object fieldlist: describes pointer-containing fields of the object The size of the contents string is the size of the containing sizeclass, not the size of the object itself. As such, contents size may be somewhat bigger than the contained object's type.","title":"object"},{"location":"heapdump15-through-heapdump17/#otherroot","text":"string: textual description of where this root came from uvarint: root pointer","title":"otherroot"},{"location":"heapdump15-through-heapdump17/#type","text":"uvarint: address of type descriptor uvarint: size of an object of this type string: name of type bool: whether the data field of an interface containing a value of this type has type T (false) or *T (true)","title":"type"},{"location":"heapdump15-through-heapdump17/#goroutine-g","text":"uvarint: address of descriptor uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0) uvarint: go routine ID uvarint: the location of the go statement that created this goroutine uvarint: status bool: is a Go routine started by the system bool: is a background Go routine uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch) string: textual reason why it is waiting uvarint: context pointer of currently running frame uvarint: address of os thread descriptor (M) uvarint: top defer record uvarint: top panic record Possible statuses: * 0 = idle * 1 = runnable * 3 = syscall * 4 = waiting The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".","title":"goroutine (G)"},{"location":"heapdump15-through-heapdump17/#stack-frame","text":"uvarint: stack pointer (lowest address in frame) uvarint: depth in stack (0 = top of stack) uvarint: stack pointer of child frame (or 0 if none) string: contents of stack frame uvarint: entry pc for function uvarint: current pc for function uvarint: continuation pc for function (where function may resume, if anywhere) string: function name fieldlist: list of kind and offset of pointer-containing fields in this frame","title":"stack frame"},{"location":"heapdump15-through-heapdump17/#dump-params","text":"bool: big endian uvarint: pointer size in bytes uvarint: starting address of heap uvarint: ending address of heap string: architecture name string: GOEXPERIMENT environment variable value uvarint: runtime.ncpu","title":"dump params"},{"location":"heapdump15-through-heapdump17/#finalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.","title":"finalizer"},{"location":"heapdump15-through-heapdump17/#itab","text":"uvarint: Itab address uvarint: address of type descriptor for contained type Up to go1.6, the type is always a pointer type, and represents the type of the itab.data field. From go1.7 and beyond, the type is the type stored in the interface. To decide whether the itab.data field is T or *T requires looking at the last boolean in the referenced type's descriptor.","title":"itab"},{"location":"heapdump15-through-heapdump17/#osthread-m","text":"uvarint: address of this os thread descriptor uvarint: Go internal id of thread uvarint: os's id for thread","title":"osthread (M)"},{"location":"heapdump15-through-heapdump17/#memstats","text":"Records the following fields of runtime.MemStats : * uvarint: Alloc * uvarint: TotalAlloc * uvarint: Sys * uvarint: Lookups * uvarint: Mallocs * uvarint: Frees * uvarint: HeapAlloc * uvarint: HeapSys * uvarint: HeapIdle * uvarint: HeapInuse * uvarint: HeapReleased * uvarint: HeapObjects * uvarint: StackInuse * uvarint: StackSys * uvarint: MSpanInuse * uvarint: MSpanSys * uvarint: MCacheInuse * uvarint: MCacheSys * uvarint: BuckHashSys * uvarint: GCSys * uvarint: OtherSys * uvarint: NextGC * uvarint: LastGC * uvarint: PauseTotalNs * 256 uvarints: PauseNs * uvarint: NumGC","title":"memstats"},{"location":"heapdump15-through-heapdump17/#queuedfinalizer","text":"uvarint: address of object that has a finalizer uvarint: pointer to FuncVal describing the finalizer uvarint: PC of finalizer entry point uvarint: type of finalizer argument uvarint: type of object This finalizer is ready to run - the object to which it refers is unreachable. The runtime system just hasn't gotten around to running it yet.","title":"queuedfinalizer"},{"location":"heapdump15-through-heapdump17/#data","text":"uvarint: address of the start of the data segment string: contents of the data segment fieldlist: kind and offset of pointer-containing fields in the data segment.","title":"data"},{"location":"heapdump15-through-heapdump17/#bss","text":"Same format as data, but for the bss segment.","title":"bss"},{"location":"heapdump15-through-heapdump17/#defer","text":"uvarint: defer record address uvarint: containing goroutine uvarint: argp uvarint: pc uvarint: FuncVal of defer uvarint: PC of defer entry point uvarint: link to next defer record","title":"defer"},{"location":"heapdump15-through-heapdump17/#panic","text":"uvarint: panic record address uvarint: containing goroutine uvarint: type ptr of panic arg eface uvarint: data field of panic arg eface uvarint: ptr to defer record that's currently running uvarint: link to next panic record","title":"panic"},{"location":"heapdump15-through-heapdump17/#allocfree-profile-record","text":"uvarint: record identifier uvarint: size of allocated object uvarint: number of stack frames. For each frame: string: function name string: file name uvarint: line number uvarint: number of allocations uvarint: number of frees","title":"alloc/free profile record"},{"location":"heapdump15-through-heapdump17/#alloc-sample-record","text":"uvarint: address of object uvarint: alloc/free profile record identifier","title":"alloc sample record"},{"location":"heapdump15/","text":"Page moved to https://github.com/golang/go/wiki/heapdump15-through-heapdump17","title":"heapdump15"},{"location":"vgo/","text":"Table of Contents Initial paper Current state Comment Threads Blog posts Presentations Videos Questions Projects Related to vgo This document collects thoughts and notes about versioned Go modules from the Gophers #vgo channel. Invites to Gophers Slack from here . Initial paper The initial paper can be read here https://research.swtch.com/vgo . The proposal can be found here golang/go#24301 . The reference implementation : https://go.googlesource.com/vgo/ and mirrored on Github here: golang/vgo . The Go issue tracker is used to track bugs/feature requests. Issues should have the label modules and titles starting with cmd/go so that they can be automatically categorized. You can read the existing issues here . Note : The reference implementation was named vgo , but support for modules is being integrated into the go command itself. The feature within the go command is called \u201cversioned Go modules\u201d (or \u201c[[modules]]\u201d for short), not \u201cvgo\u201d. Current state Currently, module support is in active development in the main go repository, with changes mirrored back to the vgo repository. Module support still has some rough edges. You are encouraged to [[try it|Modules]] and give your feedback, share your experience with it, and contribute to it. For any production workloads, use dep , or migrate to it if you have not done so already. The proposal has been accepted and vgo was merged into the Go tree in version 1.11. You will be able to experiment with the module workflow from Go 1.11 as it is included as an experiment in this release. Comment Threads These are threads that have been created from the initial reference manifest: golang-nuts ML: Go += Package Versioning golang-dev ML: Go += Package Versioning , vgo & semantic import versioning , vgo and vendoring HackerNews posts: https://news.ycombinator.com/from?site=swtch.com Reddit: https://www.reddit.com/domain/research.swtch.com/ vgo & vendoring: https://groups.google.com/forum/#!topic/golang-dev/FTMScX1fsYk vgo & semantic import versioning https://groups.google.com/forum/#!topic/golang-dev/Plc42fslQEk Blog posts A Proposal for Package Versioning in Go Exploring vgo Semantic Import Versioning in the wild Diving into vgo from the Golang project Notes on migrating to a Go mono repo Presentations Repeatable Builds with vgo Videos Opening keynote: Go with Versions - GopherConSG 2018 1-Using vgo for Go Dependency Management by Brian Ketelsen 2-Adding External Dependencies with vgo Building Predictability into Your Pipeline with Russ Cox, Jess Frazelle, Sam Boyer, Pete Garcin. Projects Related to module support Athens - A proxy server for Go modules vgo-docker-example - An example of how to use modules + Docker together. myitcv.io/cmd/modpub - a tool to help create a directory of modules from a git repository JFrog Artifactory - A universal artifact repository with module support. Questions Question Answer Hitting GitHub API rate limits? Create a token and add it to .netrc, see related issue How does vgo handles dependencies of older, discarded versions link ? zeebo/vgo-test-version-selection Why are major versions in import paths? https://groups.google.com/forum/#!topic/golang-dev/Plc42fslQEk How to go get so that I can run a program, not download a library? https://gophers.slack.com/archives/C9BMAAFFB/p1519687366000101 What's the best way to maintain a package repository that have the major version in the import path? https://groups.google.com/d/topic/golang-nuts/nS6ST60dwF8/discussion , https://groups.google.com/d/topic/golang-nuts/VREgKrQRFcY/discussion","title":"vgo"},{"location":"vgo/#table-of-contents","text":"Initial paper Current state Comment Threads Blog posts Presentations Videos Questions Projects Related to vgo This document collects thoughts and notes about versioned Go modules from the Gophers #vgo channel. Invites to Gophers Slack from here .","title":"Table of Contents"},{"location":"vgo/#initial-paper","text":"The initial paper can be read here https://research.swtch.com/vgo . The proposal can be found here golang/go#24301 . The reference implementation : https://go.googlesource.com/vgo/ and mirrored on Github here: golang/vgo . The Go issue tracker is used to track bugs/feature requests. Issues should have the label modules and titles starting with cmd/go so that they can be automatically categorized. You can read the existing issues here . Note : The reference implementation was named vgo , but support for modules is being integrated into the go command itself. The feature within the go command is called \u201cversioned Go modules\u201d (or \u201c[[modules]]\u201d for short), not \u201cvgo\u201d.","title":"Initial paper"},{"location":"vgo/#current-state","text":"Currently, module support is in active development in the main go repository, with changes mirrored back to the vgo repository. Module support still has some rough edges. You are encouraged to [[try it|Modules]] and give your feedback, share your experience with it, and contribute to it. For any production workloads, use dep , or migrate to it if you have not done so already. The proposal has been accepted and vgo was merged into the Go tree in version 1.11. You will be able to experiment with the module workflow from Go 1.11 as it is included as an experiment in this release.","title":"Current state"},{"location":"vgo/#comment-threads","text":"These are threads that have been created from the initial reference manifest: golang-nuts ML: Go += Package Versioning golang-dev ML: Go += Package Versioning , vgo & semantic import versioning , vgo and vendoring HackerNews posts: https://news.ycombinator.com/from?site=swtch.com Reddit: https://www.reddit.com/domain/research.swtch.com/ vgo & vendoring: https://groups.google.com/forum/#!topic/golang-dev/FTMScX1fsYk vgo & semantic import versioning https://groups.google.com/forum/#!topic/golang-dev/Plc42fslQEk","title":"Comment Threads"},{"location":"vgo/#blog-posts","text":"A Proposal for Package Versioning in Go Exploring vgo Semantic Import Versioning in the wild Diving into vgo from the Golang project Notes on migrating to a Go mono repo","title":"Blog posts"},{"location":"vgo/#presentations","text":"Repeatable Builds with vgo","title":"Presentations"},{"location":"vgo/#videos","text":"Opening keynote: Go with Versions - GopherConSG 2018 1-Using vgo for Go Dependency Management by Brian Ketelsen 2-Adding External Dependencies with vgo Building Predictability into Your Pipeline with Russ Cox, Jess Frazelle, Sam Boyer, Pete Garcin.","title":"Videos"},{"location":"vgo/#projects-related-to-module-support","text":"Athens - A proxy server for Go modules vgo-docker-example - An example of how to use modules + Docker together. myitcv.io/cmd/modpub - a tool to help create a directory of modules from a git repository JFrog Artifactory - A universal artifact repository with module support.","title":"Projects Related to module support"},{"location":"vgo/#questions","text":"Question Answer Hitting GitHub API rate limits? Create a token and add it to .netrc, see related issue How does vgo handles dependencies of older, discarded versions link ? zeebo/vgo-test-version-selection Why are major versions in import paths? https://groups.google.com/forum/#!topic/golang-dev/Plc42fslQEk How to go get so that I can run a program, not download a library? https://gophers.slack.com/archives/C9BMAAFFB/p1519687366000101 What's the best way to maintain a package repository that have the major version in the import path? https://groups.google.com/d/topic/golang-nuts/nS6ST60dwF8/discussion , https://groups.google.com/d/topic/golang-nuts/VREgKrQRFcY/discussion","title":"Questions"},{"location":"windows-scoop-install-go-cli/","text":"tutorial setx scoopApps \"C:\\Users\\%username%\\scoop\\apps\" /M echo %scoopApps% scoop install go =======Phase 3: Create the GOPATH environment variable=== setx GOPATH \"%scoopApps%/go\" /M echo %GOPATH% setx GOBIN \"%GOPATH%/bin\" /M echo %GOBIN% setx PATH \"%PATH%;%GOBIN%\" /M =======Phase 4: Test and ensure=== go get github.com/golang/example/hello %GOPATH%/bin/hello","title":"windows scoop install go cli"}]}